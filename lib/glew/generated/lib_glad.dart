// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.
import 'dart:ffi';
import 'package:ffi/ffi.dart';

/// ----------------------------- GL_VERSION_1_2 ----------------------------
/// ```c
/// define glCopyTexSubImage3D GLEW_GET_FUN(__glewCopyTexSubImage3D)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexSubImage3D;
void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
  final _glCopyTexSubImage3D = glad__glCopyTexSubImage3D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)>();
  return _glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/// ```c
/// define glDrawRangeElements GLEW_GET_FUN(__glewDrawRangeElements)
/// GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSPROC __glewDrawRangeElements
/// typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawRangeElements;
void glDrawRangeElements(int mode, int start, int end, int count, int type, Pointer<Void>? indices) {
  final _glDrawRangeElements = glad__glDrawRangeElements!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count, Uint32 type, Pointer<Void>? indices)>>()
      .asFunction<void Function(int mode, int start, int end, int count, int type, Pointer<Void>? indices)>();
  return _glDrawRangeElements(mode, start, end, count, type, indices);
}

/// ```c
/// define glTexImage3D GLEW_GET_FUN(__glewTexImage3D)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE3DPROC __glewTexImage3D
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage3D;
void glTexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTexImage3D = glad__glTexImage3D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

/// ```c
/// define glTexSubImage3D GLEW_GET_FUN(__glewTexSubImage3D)
/// GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DPROC __glewTexSubImage3D
/// typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexSubImage3D;
void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels) {
  final _glTexSubImage3D = glad__glTexSubImage3D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels)>();
  return _glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/// ----------------------------- GL_VERSION_1_3 ----------------------------
/// ```c
/// define glActiveTexture GLEW_GET_FUN(__glewActiveTexture)
/// GLEW_FUN_EXPORT PFNGLACTIVETEXTUREPROC __glewActiveTexture
/// typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glActiveTexture;
void glActiveTexture(int texture) {
  final _glActiveTexture = glad__glActiveTexture!
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return _glActiveTexture(texture);
}

/// ```c
/// define glClientActiveTexture GLEW_GET_FUN(__glewClientActiveTexture)
/// GLEW_FUN_EXPORT PFNGLCLIENTACTIVETEXTUREPROC __glewClientActiveTexture
/// typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClientActiveTexture;
void glClientActiveTexture(int texture) {
  final _glClientActiveTexture = glad__glClientActiveTexture!
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return _glClientActiveTexture(texture);
}

/// ```c
/// define glCompressedTexImage1D GLEW_GET_FUN(__glewCompressedTexImage1D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DPROC __glewCompressedTexImage1D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage1D;
void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage1D = glad__glCompressedTexImage1D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}

/// ```c
/// define glCompressedTexImage2D GLEW_GET_FUN(__glewCompressedTexImage2D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DPROC __glewCompressedTexImage2D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage2D;
void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage2D = glad__glCompressedTexImage2D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

/// ```c
/// define glCompressedTexImage3D GLEW_GET_FUN(__glewCompressedTexImage3D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DPROC __glewCompressedTexImage3D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage3D;
void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage3D = glad__glCompressedTexImage3D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage1D GLEW_GET_FUN(__glewCompressedTexSubImage1D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glewCompressedTexSubImage1D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage1D;
void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage1D = glad__glCompressedTexSubImage1D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage2D GLEW_GET_FUN(__glewCompressedTexSubImage2D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glewCompressedTexSubImage2D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage2D;
void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage2D = glad__glCompressedTexSubImage2D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage3D GLEW_GET_FUN(__glewCompressedTexSubImage3D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glewCompressedTexSubImage3D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage3D;
void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage3D = glad__glCompressedTexSubImage3D!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

/// ```c
/// define glGetCompressedTexImage GLEW_GET_FUN(__glewGetCompressedTexImage)
/// GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEPROC __glewGetCompressedTexImage
/// typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, void *img)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCompressedTexImage;
void glGetCompressedTexImage(int target, int lod, Pointer<Void>? img) {
  final _glGetCompressedTexImage = glad__glGetCompressedTexImage!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 lod, Pointer<Void>? img)>>()
      .asFunction<void Function(int target, int lod, Pointer<Void>? img)>();
  return _glGetCompressedTexImage(target, lod, img);
}

/// ```c
/// define glLoadTransposeMatrixd GLEW_GET_FUN(__glewLoadTransposeMatrixd)
/// GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXDPROC __glewLoadTransposeMatrixd
/// typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadTransposeMatrixd;
void glLoadTransposeMatrixd(double m) {
  final _glLoadTransposeMatrixd = glad__glLoadTransposeMatrixd!
      .cast<NativeFunction<Void Function(Double m)>>()
      .asFunction<void Function(double m)>();
  return _glLoadTransposeMatrixd(m);
}

/// ```c
/// define glLoadTransposeMatrixf GLEW_GET_FUN(__glewLoadTransposeMatrixf)
/// GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXFPROC __glewLoadTransposeMatrixf
/// typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadTransposeMatrixf;
void glLoadTransposeMatrixf(double m) {
  final _glLoadTransposeMatrixf = glad__glLoadTransposeMatrixf!
      .cast<NativeFunction<Void Function(Float m)>>()
      .asFunction<void Function(double m)>();
  return _glLoadTransposeMatrixf(m);
}

/// ```c
/// define glMultTransposeMatrixd GLEW_GET_FUN(__glewMultTransposeMatrixd)
/// GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXDPROC __glewMultTransposeMatrixd
/// typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultTransposeMatrixd;
void glMultTransposeMatrixd(double m) {
  final _glMultTransposeMatrixd = glad__glMultTransposeMatrixd!
      .cast<NativeFunction<Void Function(Double m)>>()
      .asFunction<void Function(double m)>();
  return _glMultTransposeMatrixd(m);
}

/// ```c
/// define glMultTransposeMatrixf GLEW_GET_FUN(__glewMultTransposeMatrixf)
/// GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXFPROC __glewMultTransposeMatrixf
/// typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultTransposeMatrixf;
void glMultTransposeMatrixf(double m) {
  final _glMultTransposeMatrixf = glad__glMultTransposeMatrixf!
      .cast<NativeFunction<Void Function(Float m)>>()
      .asFunction<void Function(double m)>();
  return _glMultTransposeMatrixf(m);
}

/// ```c
/// define glMultiTexCoord1d GLEW_GET_FUN(__glewMultiTexCoord1d)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DPROC __glewMultiTexCoord1d
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1d;
void glMultiTexCoord1d(int target, double s) {
  final _glMultiTexCoord1d = glad__glMultiTexCoord1d!
      .cast<NativeFunction<Void Function(Uint32 target, Double s)>>()
      .asFunction<void Function(int target, double s)>();
  return _glMultiTexCoord1d(target, s);
}

/// ```c
/// define glMultiTexCoord1dv GLEW_GET_FUN(__glewMultiTexCoord1dv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DVPROC __glewMultiTexCoord1dv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1dv;
void glMultiTexCoord1dv(int target, Pointer<Double>? v) {
  final _glMultiTexCoord1dv = glad__glMultiTexCoord1dv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord1dv(target, v);
}

/// ```c
/// define glMultiTexCoord1f GLEW_GET_FUN(__glewMultiTexCoord1f)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FPROC __glewMultiTexCoord1f
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1f;
void glMultiTexCoord1f(int target, double s) {
  final _glMultiTexCoord1f = glad__glMultiTexCoord1f!
      .cast<NativeFunction<Void Function(Uint32 target, Float s)>>()
      .asFunction<void Function(int target, double s)>();
  return _glMultiTexCoord1f(target, s);
}

/// ```c
/// define glMultiTexCoord1fv GLEW_GET_FUN(__glewMultiTexCoord1fv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FVPROC __glewMultiTexCoord1fv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1fv;
void glMultiTexCoord1fv(int target, Pointer<Float>? v) {
  final _glMultiTexCoord1fv = glad__glMultiTexCoord1fv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord1fv(target, v);
}

/// ```c
/// define glMultiTexCoord1i GLEW_GET_FUN(__glewMultiTexCoord1i)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IPROC __glewMultiTexCoord1i
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1i;
void glMultiTexCoord1i(int target, int s) {
  final _glMultiTexCoord1i = glad__glMultiTexCoord1i!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s)>>()
      .asFunction<void Function(int target, int s)>();
  return _glMultiTexCoord1i(target, s);
}

/// ```c
/// define glMultiTexCoord1iv GLEW_GET_FUN(__glewMultiTexCoord1iv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IVPROC __glewMultiTexCoord1iv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1iv;
void glMultiTexCoord1iv(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord1iv = glad__glMultiTexCoord1iv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord1iv(target, v);
}

/// ```c
/// define glMultiTexCoord1s GLEW_GET_FUN(__glewMultiTexCoord1s)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SPROC __glewMultiTexCoord1s
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1s;
void glMultiTexCoord1s(int target, int s) {
  final _glMultiTexCoord1s = glad__glMultiTexCoord1s!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s)>>()
      .asFunction<void Function(int target, int s)>();
  return _glMultiTexCoord1s(target, s);
}

/// ```c
/// define glMultiTexCoord1sv GLEW_GET_FUN(__glewMultiTexCoord1sv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SVPROC __glewMultiTexCoord1sv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1sv;
void glMultiTexCoord1sv(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord1sv = glad__glMultiTexCoord1sv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord1sv(target, v);
}

/// ```c
/// define glMultiTexCoord2d GLEW_GET_FUN(__glewMultiTexCoord2d)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DPROC __glewMultiTexCoord2d
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2d;
void glMultiTexCoord2d(int target, double s, double t) {
  final _glMultiTexCoord2d = glad__glMultiTexCoord2d!
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return _glMultiTexCoord2d(target, s, t);
}

/// ```c
/// define glMultiTexCoord2dv GLEW_GET_FUN(__glewMultiTexCoord2dv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DVPROC __glewMultiTexCoord2dv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2dv;
void glMultiTexCoord2dv(int target, Pointer<Double>? v) {
  final _glMultiTexCoord2dv = glad__glMultiTexCoord2dv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord2dv(target, v);
}

/// ```c
/// define glMultiTexCoord2f GLEW_GET_FUN(__glewMultiTexCoord2f)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FPROC __glewMultiTexCoord2f
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2f;
void glMultiTexCoord2f(int target, double s, double t) {
  final _glMultiTexCoord2f = glad__glMultiTexCoord2f!
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return _glMultiTexCoord2f(target, s, t);
}

/// ```c
/// define glMultiTexCoord2fv GLEW_GET_FUN(__glewMultiTexCoord2fv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FVPROC __glewMultiTexCoord2fv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2fv;
void glMultiTexCoord2fv(int target, Pointer<Float>? v) {
  final _glMultiTexCoord2fv = glad__glMultiTexCoord2fv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord2fv(target, v);
}

/// ```c
/// define glMultiTexCoord2i GLEW_GET_FUN(__glewMultiTexCoord2i)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IPROC __glewMultiTexCoord2i
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2i;
void glMultiTexCoord2i(int target, int s, int t) {
  final _glMultiTexCoord2i = glad__glMultiTexCoord2i!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return _glMultiTexCoord2i(target, s, t);
}

/// ```c
/// define glMultiTexCoord2iv GLEW_GET_FUN(__glewMultiTexCoord2iv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IVPROC __glewMultiTexCoord2iv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2iv;
void glMultiTexCoord2iv(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord2iv = glad__glMultiTexCoord2iv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord2iv(target, v);
}

/// ```c
/// define glMultiTexCoord2s GLEW_GET_FUN(__glewMultiTexCoord2s)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SPROC __glewMultiTexCoord2s
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2s;
void glMultiTexCoord2s(int target, int s, int t) {
  final _glMultiTexCoord2s = glad__glMultiTexCoord2s!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return _glMultiTexCoord2s(target, s, t);
}

/// ```c
/// define glMultiTexCoord2sv GLEW_GET_FUN(__glewMultiTexCoord2sv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SVPROC __glewMultiTexCoord2sv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2sv;
void glMultiTexCoord2sv(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord2sv = glad__glMultiTexCoord2sv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord2sv(target, v);
}

/// ```c
/// define glMultiTexCoord3d GLEW_GET_FUN(__glewMultiTexCoord3d)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DPROC __glewMultiTexCoord3d
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3d;
void glMultiTexCoord3d(int target, double s, double t, double r) {
  final _glMultiTexCoord3d = glad__glMultiTexCoord3d!
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t, Double r)>>()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return _glMultiTexCoord3d(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3dv GLEW_GET_FUN(__glewMultiTexCoord3dv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DVPROC __glewMultiTexCoord3dv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3dv;
void glMultiTexCoord3dv(int target, Pointer<Double>? v) {
  final _glMultiTexCoord3dv = glad__glMultiTexCoord3dv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord3dv(target, v);
}

/// ```c
/// define glMultiTexCoord3f GLEW_GET_FUN(__glewMultiTexCoord3f)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FPROC __glewMultiTexCoord3f
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3f;
void glMultiTexCoord3f(int target, double s, double t, double r) {
  final _glMultiTexCoord3f = glad__glMultiTexCoord3f!
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t, Float r)>>()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return _glMultiTexCoord3f(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3fv GLEW_GET_FUN(__glewMultiTexCoord3fv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FVPROC __glewMultiTexCoord3fv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3fv;
void glMultiTexCoord3fv(int target, Pointer<Float>? v) {
  final _glMultiTexCoord3fv = glad__glMultiTexCoord3fv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord3fv(target, v);
}

/// ```c
/// define glMultiTexCoord3i GLEW_GET_FUN(__glewMultiTexCoord3i)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IPROC __glewMultiTexCoord3i
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3i;
void glMultiTexCoord3i(int target, int s, int t, int r) {
  final _glMultiTexCoord3i = glad__glMultiTexCoord3i!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r)>>()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return _glMultiTexCoord3i(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3iv GLEW_GET_FUN(__glewMultiTexCoord3iv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IVPROC __glewMultiTexCoord3iv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3iv;
void glMultiTexCoord3iv(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord3iv = glad__glMultiTexCoord3iv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord3iv(target, v);
}

/// ```c
/// define glMultiTexCoord3s GLEW_GET_FUN(__glewMultiTexCoord3s)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SPROC __glewMultiTexCoord3s
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3s;
void glMultiTexCoord3s(int target, int s, int t, int r) {
  final _glMultiTexCoord3s = glad__glMultiTexCoord3s!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r)>>()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return _glMultiTexCoord3s(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3sv GLEW_GET_FUN(__glewMultiTexCoord3sv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SVPROC __glewMultiTexCoord3sv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3sv;
void glMultiTexCoord3sv(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord3sv = glad__glMultiTexCoord3sv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord3sv(target, v);
}

/// ```c
/// define glMultiTexCoord4d GLEW_GET_FUN(__glewMultiTexCoord4d)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DPROC __glewMultiTexCoord4d
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4d;
void glMultiTexCoord4d(int target, double s, double t, double r, double q) {
  final _glMultiTexCoord4d = glad__glMultiTexCoord4d!
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t, Double r, Double q)>>()
      .asFunction<void Function(int target, double s, double t, double r, double q)>();
  return _glMultiTexCoord4d(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4dv GLEW_GET_FUN(__glewMultiTexCoord4dv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DVPROC __glewMultiTexCoord4dv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4dv;
void glMultiTexCoord4dv(int target, Pointer<Double>? v) {
  final _glMultiTexCoord4dv = glad__glMultiTexCoord4dv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord4dv(target, v);
}

/// ```c
/// define glMultiTexCoord4f GLEW_GET_FUN(__glewMultiTexCoord4f)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FPROC __glewMultiTexCoord4f
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4f;
void glMultiTexCoord4f(int target, double s, double t, double r, double q) {
  final _glMultiTexCoord4f = glad__glMultiTexCoord4f!
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t, Float r, Float q)>>()
      .asFunction<void Function(int target, double s, double t, double r, double q)>();
  return _glMultiTexCoord4f(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4fv GLEW_GET_FUN(__glewMultiTexCoord4fv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FVPROC __glewMultiTexCoord4fv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4fv;
void glMultiTexCoord4fv(int target, Pointer<Float>? v) {
  final _glMultiTexCoord4fv = glad__glMultiTexCoord4fv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord4fv(target, v);
}

/// ```c
/// define glMultiTexCoord4i GLEW_GET_FUN(__glewMultiTexCoord4i)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IPROC __glewMultiTexCoord4i
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4i;
void glMultiTexCoord4i(int target, int s, int t, int r, int q) {
  final _glMultiTexCoord4i = glad__glMultiTexCoord4i!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q)>>()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return _glMultiTexCoord4i(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4iv GLEW_GET_FUN(__glewMultiTexCoord4iv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IVPROC __glewMultiTexCoord4iv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4iv;
void glMultiTexCoord4iv(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord4iv = glad__glMultiTexCoord4iv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord4iv(target, v);
}

/// ```c
/// define glMultiTexCoord4s GLEW_GET_FUN(__glewMultiTexCoord4s)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SPROC __glewMultiTexCoord4s
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4s;
void glMultiTexCoord4s(int target, int s, int t, int r, int q) {
  final _glMultiTexCoord4s = glad__glMultiTexCoord4s!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q)>>()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return _glMultiTexCoord4s(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4sv GLEW_GET_FUN(__glewMultiTexCoord4sv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SVPROC __glewMultiTexCoord4sv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4sv;
void glMultiTexCoord4sv(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord4sv = glad__glMultiTexCoord4sv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord4sv(target, v);
}

/// ```c
/// define glSampleCoverage GLEW_GET_FUN(__glewSampleCoverage)
/// GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEPROC __glewSampleCoverage
/// typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleCoverage;
void glSampleCoverage(double value, int invert) {
  final _glSampleCoverage = glad__glSampleCoverage!
      .cast<NativeFunction<Void Function(Float value, Uint8 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return _glSampleCoverage(value, invert);
}

/// ----------------------------- GL_VERSION_1_4 ----------------------------
/// ```c
/// define glBlendColor GLEW_GET_FUN(__glewBlendColor)
/// GLEW_FUN_EXPORT PFNGLBLENDCOLORPROC __glewBlendColor
/// typedef void (GLAPIENTRY * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendColor;
void glBlendColor(double red, double green, double blue, double alpha) {
  final _glBlendColor = glad__glBlendColor!
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue, Float alpha)>>()
      .asFunction<void Function(double red, double green, double blue, double alpha)>();
  return _glBlendColor(red, green, blue, alpha);
}

/// ```c
/// define glBlendEquation GLEW_GET_FUN(__glewBlendEquation)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONPROC __glewBlendEquation
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquation;
void glBlendEquation(int mode) {
  final _glBlendEquation = glad__glBlendEquation!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glBlendEquation(mode);
}

/// ```c
/// define glBlendFuncSeparate GLEW_GET_FUN(__glewBlendFuncSeparate)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEPROC __glewBlendFuncSeparate
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncSeparate;
void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
  final _glBlendFuncSeparate = glad__glBlendFuncSeparate!
      .cast<NativeFunction<Void Function(Uint32 sfactorRGB, Uint32 dfactorRGB, Uint32 sfactorAlpha, Uint32 dfactorAlpha)>>()
      .asFunction<void Function(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)>();
  return _glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

/// ```c
/// define glFogCoordPointer GLEW_GET_FUN(__glewFogCoordPointer)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTERPROC __glewFogCoordPointer
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordPointer;
void glFogCoordPointer(int type, int stride, Pointer<Void>? pointer) {
  final _glFogCoordPointer = glad__glFogCoordPointer!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, Pointer<Void>? pointer)>();
  return _glFogCoordPointer(type, stride, pointer);
}

/// ```c
/// define glFogCoordd GLEW_GET_FUN(__glewFogCoordd)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDDPROC __glewFogCoordd
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDDPROC) (GLdouble coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordd;
void glFogCoordd(double coord) {
  final _glFogCoordd = glad__glFogCoordd!
      .cast<NativeFunction<Void Function(Double coord)>>()
      .asFunction<void Function(double coord)>();
  return _glFogCoordd(coord);
}

/// ```c
/// define glFogCoorddv GLEW_GET_FUN(__glewFogCoorddv)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDDVPROC __glewFogCoorddv
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDDVPROC) (const GLdouble *coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoorddv;
void glFogCoorddv(Pointer<Double>? coord) {
  final _glFogCoorddv = glad__glFogCoorddv!
      .cast<NativeFunction<Void Function(Pointer<Double>? coord)>>()
      .asFunction<void Function(Pointer<Double>? coord)>();
  return _glFogCoorddv(coord);
}

/// ```c
/// define glFogCoordf GLEW_GET_FUN(__glewFogCoordf)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDFPROC __glewFogCoordf
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDFPROC) (GLfloat coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordf;
void glFogCoordf(double coord) {
  final _glFogCoordf = glad__glFogCoordf!
      .cast<NativeFunction<Void Function(Float coord)>>()
      .asFunction<void Function(double coord)>();
  return _glFogCoordf(coord);
}

/// ```c
/// define glFogCoordfv GLEW_GET_FUN(__glewFogCoordfv)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDFVPROC __glewFogCoordfv
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDFVPROC) (const GLfloat *coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordfv;
void glFogCoordfv(Pointer<Float>? coord) {
  final _glFogCoordfv = glad__glFogCoordfv!
      .cast<NativeFunction<Void Function(Pointer<Float>? coord)>>()
      .asFunction<void Function(Pointer<Float>? coord)>();
  return _glFogCoordfv(coord);
}

/// ```c
/// define glMultiDrawArrays GLEW_GET_FUN(__glewMultiDrawArrays)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSPROC __glewMultiDrawArrays
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArrays;
void glMultiDrawArrays(int mode, Pointer<Int32>? first, Pointer<Uint32>? count, int drawcount) {
  final _glMultiDrawArrays = glad__glMultiDrawArrays!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Int32>? first, Pointer<Uint32>? count, Uint32 drawcount)>>()
      .asFunction<void Function(int mode, Pointer<Int32>? first, Pointer<Uint32>? count, int drawcount)>();
  return _glMultiDrawArrays(mode, first, count, drawcount);
}

/// ```c
/// define glMultiDrawElements GLEW_GET_FUN(__glewMultiDrawElements)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSPROC __glewMultiDrawElements
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElements;
void glMultiDrawElements(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int drawcount) {
  final _glMultiDrawElements = glad__glMultiDrawElements!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Uint32>? count, Uint32 type, Pointer<Pointer<Void>>? indices, Uint32 drawcount)>>()
      .asFunction<void Function(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int drawcount)>();
  return _glMultiDrawElements(mode, count, type, indices, drawcount);
}

/// ```c
/// define glPointParameterf GLEW_GET_FUN(__glewPointParameterf)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFPROC __glewPointParameterf
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterf;
void glPointParameterf(int pname, double param) {
  final _glPointParameterf = glad__glPointParameterf!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glPointParameterf(pname, param);
}

/// ```c
/// define glPointParameterfv GLEW_GET_FUN(__glewPointParameterfv)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVPROC __glewPointParameterfv
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterfv;
void glPointParameterfv(int pname, Pointer<Float>? params) {
  final _glPointParameterfv = glad__glPointParameterfv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glPointParameterfv(pname, params);
}

/// ```c
/// define glPointParameteri GLEW_GET_FUN(__glewPointParameteri)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIPROC __glewPointParameteri
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameteri;
void glPointParameteri(int pname, int param) {
  final _glPointParameteri = glad__glPointParameteri!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glPointParameteri(pname, param);
}

/// ```c
/// define glPointParameteriv GLEW_GET_FUN(__glewPointParameteriv)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIVPROC __glewPointParameteriv
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameteriv;
void glPointParameteriv(int pname, Pointer<Int32>? params) {
  final _glPointParameteriv = glad__glPointParameteriv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glPointParameteriv(pname, params);
}

/// ```c
/// define glSecondaryColor3b GLEW_GET_FUN(__glewSecondaryColor3b)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BPROC __glewSecondaryColor3b
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3b;
void glSecondaryColor3b(int red, int green, int blue) {
  final _glSecondaryColor3b = glad__glSecondaryColor3b!
      .cast<NativeFunction<Void Function(Int8 red, Int8 green, Int8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3b(red, green, blue);
}

/// ```c
/// define glSecondaryColor3bv GLEW_GET_FUN(__glewSecondaryColor3bv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BVPROC __glewSecondaryColor3bv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3bv;
void glSecondaryColor3bv(String v) {
  final _glSecondaryColor3bv = glad__glSecondaryColor3bv!
      .cast<NativeFunction<Void Function(Pointer<Utf8>? v)>>()
      .asFunction<void Function(Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glSecondaryColor3bv(_vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glSecondaryColor3d GLEW_GET_FUN(__glewSecondaryColor3d)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DPROC __glewSecondaryColor3d
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3d;
void glSecondaryColor3d(double red, double green, double blue) {
  final _glSecondaryColor3d = glad__glSecondaryColor3d!
      .cast<NativeFunction<Void Function(Double red, Double green, Double blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return _glSecondaryColor3d(red, green, blue);
}

/// ```c
/// define glSecondaryColor3dv GLEW_GET_FUN(__glewSecondaryColor3dv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DVPROC __glewSecondaryColor3dv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3dv;
void glSecondaryColor3dv(Pointer<Double>? v) {
  final _glSecondaryColor3dv = glad__glSecondaryColor3dv!
      .cast<NativeFunction<Void Function(Pointer<Double>? v)>>()
      .asFunction<void Function(Pointer<Double>? v)>();
  return _glSecondaryColor3dv(v);
}

/// ```c
/// define glSecondaryColor3f GLEW_GET_FUN(__glewSecondaryColor3f)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FPROC __glewSecondaryColor3f
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3f;
void glSecondaryColor3f(double red, double green, double blue) {
  final _glSecondaryColor3f = glad__glSecondaryColor3f!
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return _glSecondaryColor3f(red, green, blue);
}

/// ```c
/// define glSecondaryColor3fv GLEW_GET_FUN(__glewSecondaryColor3fv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FVPROC __glewSecondaryColor3fv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3fv;
void glSecondaryColor3fv(Pointer<Float>? v) {
  final _glSecondaryColor3fv = glad__glSecondaryColor3fv!
      .cast<NativeFunction<Void Function(Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? v)>();
  return _glSecondaryColor3fv(v);
}

/// ```c
/// define glSecondaryColor3i GLEW_GET_FUN(__glewSecondaryColor3i)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IPROC __glewSecondaryColor3i
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3i;
void glSecondaryColor3i(int red, int green, int blue) {
  final _glSecondaryColor3i = glad__glSecondaryColor3i!
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3i(red, green, blue);
}

/// ```c
/// define glSecondaryColor3iv GLEW_GET_FUN(__glewSecondaryColor3iv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IVPROC __glewSecondaryColor3iv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3iv;
void glSecondaryColor3iv(Pointer<Int32>? v) {
  final _glSecondaryColor3iv = glad__glSecondaryColor3iv!
      .cast<NativeFunction<Void Function(Pointer<Int32>? v)>>()
      .asFunction<void Function(Pointer<Int32>? v)>();
  return _glSecondaryColor3iv(v);
}

/// ```c
/// define glSecondaryColor3s GLEW_GET_FUN(__glewSecondaryColor3s)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SPROC __glewSecondaryColor3s
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3s;
void glSecondaryColor3s(int red, int green, int blue) {
  final _glSecondaryColor3s = glad__glSecondaryColor3s!
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3s(red, green, blue);
}

/// ```c
/// define glSecondaryColor3sv GLEW_GET_FUN(__glewSecondaryColor3sv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SVPROC __glewSecondaryColor3sv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3sv;
void glSecondaryColor3sv(Pointer<Int16>? v) {
  final _glSecondaryColor3sv = glad__glSecondaryColor3sv!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glSecondaryColor3sv(v);
}

/// ```c
/// define glSecondaryColor3ub GLEW_GET_FUN(__glewSecondaryColor3ub)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBPROC __glewSecondaryColor3ub
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3ub;
void glSecondaryColor3ub(int red, int green, int blue) {
  final _glSecondaryColor3ub = glad__glSecondaryColor3ub!
      .cast<NativeFunction<Void Function(Uint8 red, Uint8 green, Uint8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3ub(red, green, blue);
}

/// ```c
/// define glSecondaryColor3ubv GLEW_GET_FUN(__glewSecondaryColor3ubv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBVPROC __glewSecondaryColor3ubv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3ubv;
void glSecondaryColor3ubv(Pointer<Uint8>? v) {
  final _glSecondaryColor3ubv = glad__glSecondaryColor3ubv!
      .cast<NativeFunction<Void Function(Pointer<Uint8>? v)>>()
      .asFunction<void Function(Pointer<Uint8>? v)>();
  return _glSecondaryColor3ubv(v);
}

/// ```c
/// define glSecondaryColor3ui GLEW_GET_FUN(__glewSecondaryColor3ui)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIPROC __glewSecondaryColor3ui
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3ui;
void glSecondaryColor3ui(int red, int green, int blue) {
  final _glSecondaryColor3ui = glad__glSecondaryColor3ui!
      .cast<NativeFunction<Void Function(Uint32 red, Uint32 green, Uint32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3ui(red, green, blue);
}

/// ```c
/// define glSecondaryColor3uiv GLEW_GET_FUN(__glewSecondaryColor3uiv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIVPROC __glewSecondaryColor3uiv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3uiv;
void glSecondaryColor3uiv(Pointer<Uint32>? v) {
  final _glSecondaryColor3uiv = glad__glSecondaryColor3uiv!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? v)>();
  return _glSecondaryColor3uiv(v);
}

/// ```c
/// define glSecondaryColor3us GLEW_GET_FUN(__glewSecondaryColor3us)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USPROC __glewSecondaryColor3us
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3us;
void glSecondaryColor3us(int red, int green, int blue) {
  final _glSecondaryColor3us = glad__glSecondaryColor3us!
      .cast<NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3us(red, green, blue);
}

/// ```c
/// define glSecondaryColor3usv GLEW_GET_FUN(__glewSecondaryColor3usv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USVPROC __glewSecondaryColor3usv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3usv;
void glSecondaryColor3usv(Pointer<Uint16>? v) {
  final _glSecondaryColor3usv = glad__glSecondaryColor3usv!
      .cast<NativeFunction<Void Function(Pointer<Uint16>? v)>>()
      .asFunction<void Function(Pointer<Uint16>? v)>();
  return _glSecondaryColor3usv(v);
}

/// ```c
/// define glSecondaryColorPointer GLEW_GET_FUN(__glewSecondaryColorPointer)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTERPROC __glewSecondaryColorPointer
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColorPointer;
void glSecondaryColorPointer(int size, int type, int stride, Pointer<Void>? pointer) {
  final _glSecondaryColorPointer = glad__glSecondaryColorPointer!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glSecondaryColorPointer(size, type, stride, pointer);
}

/// ```c
/// define glWindowPos2d GLEW_GET_FUN(__glewWindowPos2d)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2DPROC __glewWindowPos2d
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2d;
void glWindowPos2d(double x, double y) {
  final _glWindowPos2d = glad__glWindowPos2d!
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return _glWindowPos2d(x, y);
}

/// ```c
/// define glWindowPos2dv GLEW_GET_FUN(__glewWindowPos2dv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVPROC __glewWindowPos2dv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVPROC) (const GLdouble *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2dv;
void glWindowPos2dv(Pointer<Double>? p) {
  final _glWindowPos2dv = glad__glWindowPos2dv!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos2dv(p);
}

/// ```c
/// define glWindowPos2f GLEW_GET_FUN(__glewWindowPos2f)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2FPROC __glewWindowPos2f
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2f;
void glWindowPos2f(double x, double y) {
  final _glWindowPos2f = glad__glWindowPos2f!
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return _glWindowPos2f(x, y);
}

/// ```c
/// define glWindowPos2fv GLEW_GET_FUN(__glewWindowPos2fv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVPROC __glewWindowPos2fv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVPROC) (const GLfloat *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2fv;
void glWindowPos2fv(Pointer<Float>? p) {
  final _glWindowPos2fv = glad__glWindowPos2fv!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos2fv(p);
}

/// ```c
/// define glWindowPos2i GLEW_GET_FUN(__glewWindowPos2i)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2IPROC __glewWindowPos2i
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2i;
void glWindowPos2i(int x, int y) {
  final _glWindowPos2i = glad__glWindowPos2i!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glWindowPos2i(x, y);
}

/// ```c
/// define glWindowPos2iv GLEW_GET_FUN(__glewWindowPos2iv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVPROC __glewWindowPos2iv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVPROC) (const GLint *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2iv;
void glWindowPos2iv(Pointer<Int32>? p) {
  final _glWindowPos2iv = glad__glWindowPos2iv!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos2iv(p);
}

/// ```c
/// define glWindowPos2s GLEW_GET_FUN(__glewWindowPos2s)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2SPROC __glewWindowPos2s
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2s;
void glWindowPos2s(int x, int y) {
  final _glWindowPos2s = glad__glWindowPos2s!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glWindowPos2s(x, y);
}

/// ```c
/// define glWindowPos2sv GLEW_GET_FUN(__glewWindowPos2sv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVPROC __glewWindowPos2sv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVPROC) (const GLshort *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2sv;
void glWindowPos2sv(Pointer<Int16>? p) {
  final _glWindowPos2sv = glad__glWindowPos2sv!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos2sv(p);
}

/// ```c
/// define glWindowPos3d GLEW_GET_FUN(__glewWindowPos3d)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3DPROC __glewWindowPos3d
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3d;
void glWindowPos3d(double x, double y, double z) {
  final _glWindowPos3d = glad__glWindowPos3d!
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return _glWindowPos3d(x, y, z);
}

/// ```c
/// define glWindowPos3dv GLEW_GET_FUN(__glewWindowPos3dv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVPROC __glewWindowPos3dv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVPROC) (const GLdouble *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3dv;
void glWindowPos3dv(Pointer<Double>? p) {
  final _glWindowPos3dv = glad__glWindowPos3dv!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos3dv(p);
}

/// ```c
/// define glWindowPos3f GLEW_GET_FUN(__glewWindowPos3f)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3FPROC __glewWindowPos3f
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3f;
void glWindowPos3f(double x, double y, double z) {
  final _glWindowPos3f = glad__glWindowPos3f!
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return _glWindowPos3f(x, y, z);
}

/// ```c
/// define glWindowPos3fv GLEW_GET_FUN(__glewWindowPos3fv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVPROC __glewWindowPos3fv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVPROC) (const GLfloat *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3fv;
void glWindowPos3fv(Pointer<Float>? p) {
  final _glWindowPos3fv = glad__glWindowPos3fv!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos3fv(p);
}

/// ```c
/// define glWindowPos3i GLEW_GET_FUN(__glewWindowPos3i)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3IPROC __glewWindowPos3i
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3i;
void glWindowPos3i(int x, int y, int z) {
  final _glWindowPos3i = glad__glWindowPos3i!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glWindowPos3i(x, y, z);
}

/// ```c
/// define glWindowPos3iv GLEW_GET_FUN(__glewWindowPos3iv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVPROC __glewWindowPos3iv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVPROC) (const GLint *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3iv;
void glWindowPos3iv(Pointer<Int32>? p) {
  final _glWindowPos3iv = glad__glWindowPos3iv!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos3iv(p);
}

/// ```c
/// define glWindowPos3s GLEW_GET_FUN(__glewWindowPos3s)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3SPROC __glewWindowPos3s
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3s;
void glWindowPos3s(int x, int y, int z) {
  final _glWindowPos3s = glad__glWindowPos3s!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glWindowPos3s(x, y, z);
}

/// ```c
/// define glWindowPos3sv GLEW_GET_FUN(__glewWindowPos3sv)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVPROC __glewWindowPos3sv
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVPROC) (const GLshort *p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3sv;
void glWindowPos3sv(Pointer<Int16>? p) {
  final _glWindowPos3sv = glad__glWindowPos3sv!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos3sv(p);
}

/// ```c
/// define glBeginQuery GLEW_GET_FUN(__glewBeginQuery)
/// GLEW_FUN_EXPORT PFNGLBEGINQUERYPROC __glewBeginQuery
/// typedef void (GLAPIENTRY * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginQuery;
void glBeginQuery(int target, int id) {
  final _glBeginQuery = glad__glBeginQuery!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return _glBeginQuery(target, id);
}

/// ```c
/// define glBindBuffer GLEW_GET_FUN(__glewBindBuffer)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERPROC __glewBindBuffer
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBuffer;
void glBindBuffer(int target, int buffer) {
  final _glBindBuffer = glad__glBindBuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer)>>()
      .asFunction<void Function(int target, int buffer)>();
  return _glBindBuffer(target, buffer);
}

/// ```c
/// define glBufferData GLEW_GET_FUN(__glewBufferData)
/// GLEW_FUN_EXPORT PFNGLBUFFERDATAPROC __glewBufferData
/// typedef void (GLAPIENTRY * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void* data, GLenum usage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferData;
void glBufferData(int target, int size, Pointer<Void>? data, int usage) {
  final _glBufferData = glad__glBufferData!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 size, Pointer<Void>? data, Uint32 usage)>>()
      .asFunction<void Function(int target, int size, Pointer<Void>? data, int usage)>();
  return _glBufferData(target, size, data, usage);
}

/// ```c
/// define glBufferSubData GLEW_GET_FUN(__glewBufferSubData)
/// GLEW_FUN_EXPORT PFNGLBUFFERSUBDATAPROC __glewBufferSubData
/// typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferSubData;
void glBufferSubData(int target, int offset, int size, Pointer<Void>? data) {
  final _glBufferSubData = glad__glBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int offset, int size, Pointer<Void>? data)>();
  return _glBufferSubData(target, offset, size, data);
}

/// ```c
/// define glDeleteBuffers GLEW_GET_FUN(__glewDeleteBuffers)
/// GLEW_FUN_EXPORT PFNGLDELETEBUFFERSPROC __glewDeleteBuffers
/// typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint* buffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteBuffers;
void glDeleteBuffers(int n, Pointer<Uint32>? buffers) {
  final _glDeleteBuffers = glad__glDeleteBuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? buffers)>();
  return _glDeleteBuffers(n, buffers);
}

/// ```c
/// define glDeleteQueries GLEW_GET_FUN(__glewDeleteQueries)
/// GLEW_FUN_EXPORT PFNGLDELETEQUERIESPROC __glewDeleteQueries
/// typedef void (GLAPIENTRY * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteQueries;
void glDeleteQueries(int n, Pointer<Uint32>? ids) {
  final _glDeleteQueries = glad__glDeleteQueries!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteQueries(n, ids);
}

/// ```c
/// define glEndQuery GLEW_GET_FUN(__glewEndQuery)
/// GLEW_FUN_EXPORT PFNGLENDQUERYPROC __glewEndQuery
/// typedef void (GLAPIENTRY * PFNGLENDQUERYPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndQuery;
void glEndQuery(int target) {
  final _glEndQuery = glad__glEndQuery!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glEndQuery(target);
}

/// ```c
/// define glGenBuffers GLEW_GET_FUN(__glewGenBuffers)
/// GLEW_FUN_EXPORT PFNGLGENBUFFERSPROC __glewGenBuffers
/// typedef void (GLAPIENTRY * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint* buffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenBuffers;
void glGenBuffers(int n, Pointer<Uint32>? buffers) {
  final _glGenBuffers = glad__glGenBuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? buffers)>();
  return _glGenBuffers(n, buffers);
}

/// ```c
/// define glGenQueries GLEW_GET_FUN(__glewGenQueries)
/// GLEW_FUN_EXPORT PFNGLGENQUERIESPROC __glewGenQueries
/// typedef void (GLAPIENTRY * PFNGLGENQUERIESPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenQueries;
void glGenQueries(int n, Pointer<Uint32>? ids) {
  final _glGenQueries = glad__glGenQueries!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenQueries(n, ids);
}

/// ```c
/// define glGetBufferParameteriv GLEW_GET_FUN(__glewGetBufferParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERIVPROC __glewGetBufferParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferParameteriv;
void glGetBufferParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetBufferParameteriv = glad__glGetBufferParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetBufferParameteriv(target, pname, params);
}

/// ```c
/// define glGetBufferPointerv GLEW_GET_FUN(__glewGetBufferPointerv)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERPOINTERVPROC __glewGetBufferPointerv
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferPointerv;
void glGetBufferPointerv(int target, int pname, Pointer<Pointer<Void>>? params) {
  final _glGetBufferPointerv = glad__glGetBufferPointerv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Pointer<Void>>? params)>();
  return _glGetBufferPointerv(target, pname, params);
}

/// ```c
/// define glGetBufferSubData GLEW_GET_FUN(__glewGetBufferSubData)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERSUBDATAPROC __glewGetBufferSubData
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferSubData;
void glGetBufferSubData(int target, int offset, int size, Pointer<Void>? data) {
  final _glGetBufferSubData = glad__glGetBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int offset, int size, Pointer<Void>? data)>();
  return _glGetBufferSubData(target, offset, size, data);
}

/// ```c
/// define glGetQueryObjectiv GLEW_GET_FUN(__glewGetQueryObjectiv)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVPROC __glewGetQueryObjectiv
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectiv;
void glGetQueryObjectiv(int id, int pname, Pointer<Int32>? params) {
  final _glGetQueryObjectiv = glad__glGetQueryObjectiv!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int32>? params)>();
  return _glGetQueryObjectiv(id, pname, params);
}

/// ```c
/// define glGetQueryObjectuiv GLEW_GET_FUN(__glewGetQueryObjectuiv)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVPROC __glewGetQueryObjectuiv
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectuiv;
void glGetQueryObjectuiv(int id, int pname, Pointer<Uint32>? params) {
  final _glGetQueryObjectuiv = glad__glGetQueryObjectuiv!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint32>? params)>();
  return _glGetQueryObjectuiv(id, pname, params);
}

/// ```c
/// define glGetQueryiv GLEW_GET_FUN(__glewGetQueryiv)
/// GLEW_FUN_EXPORT PFNGLGETQUERYIVPROC __glewGetQueryiv
/// typedef void (GLAPIENTRY * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryiv;
void glGetQueryiv(int target, int pname, Pointer<Int32>? params) {
  final _glGetQueryiv = glad__glGetQueryiv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetQueryiv(target, pname, params);
}

/// ```c
/// define glIsBuffer GLEW_GET_FUN(__glewIsBuffer)
/// GLEW_FUN_EXPORT PFNGLISBUFFERPROC __glewIsBuffer
/// typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsBuffer;
int glIsBuffer(int buffer) {
  final _glIsBuffer = glad__glIsBuffer!
      .cast<NativeFunction<Uint8 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return _glIsBuffer(buffer);
}

/// ```c
/// define glIsQuery GLEW_GET_FUN(__glewIsQuery)
/// GLEW_FUN_EXPORT PFNGLISQUERYPROC __glewIsQuery
/// typedef GLboolean (GLAPIENTRY * PFNGLISQUERYPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsQuery;
int glIsQuery(int id) {
  final _glIsQuery = glad__glIsQuery!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsQuery(id);
}

/// ```c
/// define glMapBuffer GLEW_GET_FUN(__glewMapBuffer)
/// GLEW_FUN_EXPORT PFNGLMAPBUFFERPROC __glewMapBuffer
/// typedef void* (GLAPIENTRY * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapBuffer;
Pointer<Void>? glMapBuffer(int target, int access) {
  final _glMapBuffer = glad__glMapBuffer!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 target, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int target, int access)>();
  return _glMapBuffer(target, access);
}

/// ```c
/// define glUnmapBuffer GLEW_GET_FUN(__glewUnmapBuffer)
/// GLEW_FUN_EXPORT PFNGLUNMAPBUFFERPROC __glewUnmapBuffer
/// typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnmapBuffer;
int glUnmapBuffer(int target) {
  final _glUnmapBuffer = glad__glUnmapBuffer!
      .cast<NativeFunction<Uint8 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return _glUnmapBuffer(target);
}

/// ----------------------------- GL_VERSION_2_0 ----------------------------
/// ```c
/// define glAttachShader GLEW_GET_FUN(__glewAttachShader)
/// GLEW_FUN_EXPORT PFNGLATTACHSHADERPROC __glewAttachShader
/// typedef void (GLAPIENTRY * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAttachShader;
void glAttachShader(int program, int shader) {
  final _glAttachShader = glad__glAttachShader!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shader)>>()
      .asFunction<void Function(int program, int shader)>();
  return _glAttachShader(program, shader);
}

/// ```c
/// define glBindAttribLocation GLEW_GET_FUN(__glewBindAttribLocation)
/// GLEW_FUN_EXPORT PFNGLBINDATTRIBLOCATIONPROC __glewBindAttribLocation
/// typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindAttribLocation;
void glBindAttribLocation(int program, int index, String name) {
  final _glBindAttribLocation = glad__glBindAttribLocation!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int program, int index, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glBindAttribLocation(program, index, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glBlendEquationSeparate GLEW_GET_FUN(__glewBlendEquationSeparate)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEPROC __glewBlendEquationSeparate
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationSeparate;
void glBlendEquationSeparate(int modeRGB, int modeAlpha) {
  final _glBlendEquationSeparate = glad__glBlendEquationSeparate!
      .cast<NativeFunction<Void Function(Uint32 modeRGB, Uint32 modeAlpha)>>()
      .asFunction<void Function(int modeRGB, int modeAlpha)>();
  return _glBlendEquationSeparate(modeRGB, modeAlpha);
}

/// ```c
/// define glCompileShader GLEW_GET_FUN(__glewCompileShader)
/// GLEW_FUN_EXPORT PFNGLCOMPILESHADERPROC __glewCompileShader
/// typedef void (GLAPIENTRY * PFNGLCOMPILESHADERPROC) (GLuint shader)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompileShader;
void glCompileShader(int shader) {
  final _glCompileShader = glad__glCompileShader!
      .cast<NativeFunction<Void Function(Uint32 shader)>>()
      .asFunction<void Function(int shader)>();
  return _glCompileShader(shader);
}

/// ```c
/// define glCreateProgram GLEW_GET_FUN(__glewCreateProgram)
/// GLEW_FUN_EXPORT PFNGLCREATEPROGRAMPROC __glewCreateProgram
/// typedef GLuint (GLAPIENTRY * PFNGLCREATEPROGRAMPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateProgram;
int glCreateProgram() {
  final _glCreateProgram = glad__glCreateProgram!
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return _glCreateProgram();
}

/// ```c
/// define glCreateShader GLEW_GET_FUN(__glewCreateShader)
/// GLEW_FUN_EXPORT PFNGLCREATESHADERPROC __glewCreateShader
/// typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROC) (GLenum type)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateShader;
int glCreateShader(int type) {
  final _glCreateShader = glad__glCreateShader!
      .cast<NativeFunction<Uint32 Function(Uint32 type)>>()
      .asFunction<int Function(int type)>();
  return _glCreateShader(type);
}

/// ```c
/// define glDeleteProgram GLEW_GET_FUN(__glewDeleteProgram)
/// GLEW_FUN_EXPORT PFNGLDELETEPROGRAMPROC __glewDeleteProgram
/// typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteProgram;
void glDeleteProgram(int program) {
  final _glDeleteProgram = glad__glDeleteProgram!
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return _glDeleteProgram(program);
}

/// ```c
/// define glDeleteShader GLEW_GET_FUN(__glewDeleteShader)
/// GLEW_FUN_EXPORT PFNGLDELETESHADERPROC __glewDeleteShader
/// typedef void (GLAPIENTRY * PFNGLDELETESHADERPROC) (GLuint shader)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteShader;
void glDeleteShader(int shader) {
  final _glDeleteShader = glad__glDeleteShader!
      .cast<NativeFunction<Void Function(Uint32 shader)>>()
      .asFunction<void Function(int shader)>();
  return _glDeleteShader(shader);
}

/// ```c
/// define glDetachShader GLEW_GET_FUN(__glewDetachShader)
/// GLEW_FUN_EXPORT PFNGLDETACHSHADERPROC __glewDetachShader
/// typedef void (GLAPIENTRY * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDetachShader;
void glDetachShader(int program, int shader) {
  final _glDetachShader = glad__glDetachShader!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shader)>>()
      .asFunction<void Function(int program, int shader)>();
  return _glDetachShader(program, shader);
}

/// ```c
/// define glDisableVertexAttribArray GLEW_GET_FUN(__glewDisableVertexAttribArray)
/// GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYPROC __glewDisableVertexAttribArray
/// typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVertexAttribArray;
void glDisableVertexAttribArray(int index) {
  final _glDisableVertexAttribArray = glad__glDisableVertexAttribArray!
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return _glDisableVertexAttribArray(index);
}

/// ```c
/// define glDrawBuffers GLEW_GET_FUN(__glewDrawBuffers)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERSPROC __glewDrawBuffers
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBuffers;
void glDrawBuffers(int n, Pointer<Uint32>? bufs) {
  final _glDrawBuffers = glad__glDrawBuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? bufs)>();
  return _glDrawBuffers(n, bufs);
}

/// ```c
/// define glEnableVertexAttribArray GLEW_GET_FUN(__glewEnableVertexAttribArray)
/// GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBARRAYPROC __glewEnableVertexAttribArray
/// typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVertexAttribArray;
void glEnableVertexAttribArray(int index) {
  final _glEnableVertexAttribArray = glad__glEnableVertexAttribArray!
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return _glEnableVertexAttribArray(index);
}

/// ```c
/// define glGetActiveAttrib GLEW_GET_FUN(__glewGetActiveAttrib)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEATTRIBPROC __glewGetActiveAttrib
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveAttrib;
void glGetActiveAttrib(int program, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetActiveAttrib = glad__glGetActiveAttrib!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetActiveAttrib(program, index, maxLength, length, size, type, name);
}

/// ```c
/// define glGetActiveUniform GLEW_GET_FUN(__glewGetActiveUniform)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMPROC __glewGetActiveUniform
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveUniform;
void glGetActiveUniform(int program, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetActiveUniform = glad__glGetActiveUniform!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetActiveUniform(program, index, maxLength, length, size, type, name);
}

/// ```c
/// define glGetAttachedShaders GLEW_GET_FUN(__glewGetAttachedShaders)
/// GLEW_FUN_EXPORT PFNGLGETATTACHEDSHADERSPROC __glewGetAttachedShaders
/// typedef void (GLAPIENTRY * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetAttachedShaders;
void glGetAttachedShaders(int program, int maxCount, Pointer<Uint32>? count, Pointer<Uint32>? shaders) {
  final _glGetAttachedShaders = glad__glGetAttachedShaders!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 maxCount, Pointer<Uint32>? count, Pointer<Uint32>? shaders)>>()
      .asFunction<void Function(int program, int maxCount, Pointer<Uint32>? count, Pointer<Uint32>? shaders)>();
  return _glGetAttachedShaders(program, maxCount, count, shaders);
}

/// ```c
/// define glGetAttribLocation GLEW_GET_FUN(__glewGetAttribLocation)
/// GLEW_FUN_EXPORT PFNGLGETATTRIBLOCATIONPROC __glewGetAttribLocation
/// typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetAttribLocation;
int glGetAttribLocation(int program, String name) {
  final _glGetAttribLocation = glad__glGetAttribLocation!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetAttribLocation(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetProgramInfoLog GLEW_GET_FUN(__glewGetProgramInfoLog)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMINFOLOGPROC __glewGetProgramInfoLog
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramInfoLog;
void glGetProgramInfoLog(int program, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog) {
  final _glGetProgramInfoLog = glad__glGetProgramInfoLog!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>>()
      .asFunction<void Function(int program, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>();
  return _glGetProgramInfoLog(program, bufSize, length, infoLog);
}

/// ```c
/// define glGetProgramiv GLEW_GET_FUN(__glewGetProgramiv)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMIVPROC __glewGetProgramiv
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramiv;
void glGetProgramiv(int program, int pname, Pointer<Int32>? param) {
  final _glGetProgramiv = glad__glGetProgramiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int program, int pname, Pointer<Int32>? param)>();
  return _glGetProgramiv(program, pname, param);
}

/// ```c
/// define glGetShaderInfoLog GLEW_GET_FUN(__glewGetShaderInfoLog)
/// GLEW_FUN_EXPORT PFNGLGETSHADERINFOLOGPROC __glewGetShaderInfoLog
/// typedef void (GLAPIENTRY * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetShaderInfoLog;
void glGetShaderInfoLog(int shader, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog) {
  final _glGetShaderInfoLog = glad__glGetShaderInfoLog!
      .cast<NativeFunction<Void Function(Uint32 shader, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>>()
      .asFunction<void Function(int shader, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>();
  return _glGetShaderInfoLog(shader, bufSize, length, infoLog);
}

/// ```c
/// define glGetShaderSource GLEW_GET_FUN(__glewGetShaderSource)
/// GLEW_FUN_EXPORT PFNGLGETSHADERSOURCEPROC __glewGetShaderSource
/// typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEPROC) (GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetShaderSource;
void glGetShaderSource(int obj, int maxLength, Pointer<Uint32>? length, Pointer<Int8>? source) {
  final _glGetShaderSource = glad__glGetShaderSource!
      .cast<NativeFunction<Void Function(Uint32 obj, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int8>? source)>>()
      .asFunction<void Function(int obj, int maxLength, Pointer<Uint32>? length, Pointer<Int8>? source)>();
  return _glGetShaderSource(obj, maxLength, length, source);
}

/// ```c
/// define glGetShaderiv GLEW_GET_FUN(__glewGetShaderiv)
/// GLEW_FUN_EXPORT PFNGLGETSHADERIVPROC __glewGetShaderiv
/// typedef void (GLAPIENTRY * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetShaderiv;
void glGetShaderiv(int shader, int pname, Pointer<Int32>? param) {
  final _glGetShaderiv = glad__glGetShaderiv!
      .cast<NativeFunction<Void Function(Uint32 shader, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int shader, int pname, Pointer<Int32>? param)>();
  return _glGetShaderiv(shader, pname, param);
}

/// ```c
/// define glGetUniformLocation GLEW_GET_FUN(__glewGetUniformLocation)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMLOCATIONPROC __glewGetUniformLocation
/// typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformLocation;
int glGetUniformLocation(int program, String name) {
  final _glGetUniformLocation = glad__glGetUniformLocation!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetUniformLocation(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetUniformfv GLEW_GET_FUN(__glewGetUniformfv)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMFVPROC __glewGetUniformfv
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformfv;
void glGetUniformfv(int program, int location, Pointer<Float>? params) {
  final _glGetUniformfv = glad__glGetUniformfv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Float>? params)>();
  return _glGetUniformfv(program, location, params);
}

/// ```c
/// define glGetUniformiv GLEW_GET_FUN(__glewGetUniformiv)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMIVPROC __glewGetUniformiv
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformiv;
void glGetUniformiv(int program, int location, Pointer<Int32>? params) {
  final _glGetUniformiv = glad__glGetUniformiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Int32>? params)>();
  return _glGetUniformiv(program, location, params);
}

/// ```c
/// define glGetVertexAttribPointerv GLEW_GET_FUN(__glewGetVertexAttribPointerv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVPROC __glewGetVertexAttribPointerv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribPointerv;
void glGetVertexAttribPointerv(int index, int pname, Pointer<Pointer<Void>>? pointer) {
  final _glGetVertexAttribPointerv = glad__glGetVertexAttribPointerv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int index, int pname, Pointer<Pointer<Void>>? pointer)>();
  return _glGetVertexAttribPointerv(index, pname, pointer);
}

/// ```c
/// define glGetVertexAttribdv GLEW_GET_FUN(__glewGetVertexAttribdv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVPROC __glewGetVertexAttribdv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribdv;
void glGetVertexAttribdv(int index, int pname, Pointer<Double>? params) {
  final _glGetVertexAttribdv = glad__glGetVertexAttribdv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Double>? params)>();
  return _glGetVertexAttribdv(index, pname, params);
}

/// ```c
/// define glGetVertexAttribfv GLEW_GET_FUN(__glewGetVertexAttribfv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVPROC __glewGetVertexAttribfv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribfv;
void glGetVertexAttribfv(int index, int pname, Pointer<Float>? params) {
  final _glGetVertexAttribfv = glad__glGetVertexAttribfv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Float>? params)>();
  return _glGetVertexAttribfv(index, pname, params);
}

/// ```c
/// define glGetVertexAttribiv GLEW_GET_FUN(__glewGetVertexAttribiv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVPROC __glewGetVertexAttribiv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribiv;
void glGetVertexAttribiv(int index, int pname, Pointer<Int32>? params) {
  final _glGetVertexAttribiv = glad__glGetVertexAttribiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int32>? params)>();
  return _glGetVertexAttribiv(index, pname, params);
}

/// ```c
/// define glIsProgram GLEW_GET_FUN(__glewIsProgram)
/// GLEW_FUN_EXPORT PFNGLISPROGRAMPROC __glewIsProgram
/// typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsProgram;
int glIsProgram(int program) {
  final _glIsProgram = glad__glIsProgram!
      .cast<NativeFunction<Uint8 Function(Uint32 program)>>()
      .asFunction<int Function(int program)>();
  return _glIsProgram(program);
}

/// ```c
/// define glIsShader GLEW_GET_FUN(__glewIsShader)
/// GLEW_FUN_EXPORT PFNGLISSHADERPROC __glewIsShader
/// typedef GLboolean (GLAPIENTRY * PFNGLISSHADERPROC) (GLuint shader)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsShader;
int glIsShader(int shader) {
  final _glIsShader = glad__glIsShader!
      .cast<NativeFunction<Uint8 Function(Uint32 shader)>>()
      .asFunction<int Function(int shader)>();
  return _glIsShader(shader);
}

/// ```c
/// define glLinkProgram GLEW_GET_FUN(__glewLinkProgram)
/// GLEW_FUN_EXPORT PFNGLLINKPROGRAMPROC __glewLinkProgram
/// typedef void (GLAPIENTRY * PFNGLLINKPROGRAMPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLinkProgram;
void glLinkProgram(int program) {
  final _glLinkProgram = glad__glLinkProgram!
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return _glLinkProgram(program);
}

/// ```c
/// define glShaderSource GLEW_GET_FUN(__glewShaderSource)
/// GLEW_FUN_EXPORT PFNGLSHADERSOURCEPROC __glewShaderSource
/// typedef void (GLAPIENTRY * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderSource;
void glShaderSource(int shader, int count, Pointer<Pointer<Utf8>>? string, Pointer<Int32>? length) {
  final _glShaderSource = glad__glShaderSource!
      .cast<NativeFunction<Void Function(Uint32 shader, Uint32 count, Pointer<Pointer<Utf8>>? string, Pointer<Int32>? length)>>()
      .asFunction<void Function(int shader, int count, Pointer<Pointer<Utf8>>? string, Pointer<Int32>? length)>();
  return _glShaderSource(shader, count, string, length);
}

/// ```c
/// define glStencilFuncSeparate GLEW_GET_FUN(__glewStencilFuncSeparate)
/// GLEW_FUN_EXPORT PFNGLSTENCILFUNCSEPARATEPROC __glewStencilFuncSeparate
/// typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilFuncSeparate;
void glStencilFuncSeparate(int frontfunc, int backfunc, int ref, int mask) {
  final _glStencilFuncSeparate = glad__glStencilFuncSeparate!
      .cast<NativeFunction<Void Function(Uint32 frontfunc, Uint32 backfunc, Int32 ref, Uint32 mask)>>()
      .asFunction<void Function(int frontfunc, int backfunc, int ref, int mask)>();
  return _glStencilFuncSeparate(frontfunc, backfunc, ref, mask);
}

/// ```c
/// define glStencilMaskSeparate GLEW_GET_FUN(__glewStencilMaskSeparate)
/// GLEW_FUN_EXPORT PFNGLSTENCILMASKSEPARATEPROC __glewStencilMaskSeparate
/// typedef void (GLAPIENTRY * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilMaskSeparate;
void glStencilMaskSeparate(int face, int mask) {
  final _glStencilMaskSeparate = glad__glStencilMaskSeparate!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mask)>>()
      .asFunction<void Function(int face, int mask)>();
  return _glStencilMaskSeparate(face, mask);
}

/// ```c
/// define glStencilOpSeparate GLEW_GET_FUN(__glewStencilOpSeparate)
/// GLEW_FUN_EXPORT PFNGLSTENCILOPSEPARATEPROC __glewStencilOpSeparate
/// typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilOpSeparate;
void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass) {
  final _glStencilOpSeparate = glad__glStencilOpSeparate!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 sfail, Uint32 dpfail, Uint32 dppass)>>()
      .asFunction<void Function(int face, int sfail, int dpfail, int dppass)>();
  return _glStencilOpSeparate(face, sfail, dpfail, dppass);
}

/// ```c
/// define glUniform1f GLEW_GET_FUN(__glewUniform1f)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1FPROC __glewUniform1f
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1f;
void glUniform1f(int location, double v0) {
  final _glUniform1f = glad__glUniform1f!
      .cast<NativeFunction<Void Function(Int32 location, Float v0)>>()
      .asFunction<void Function(int location, double v0)>();
  return _glUniform1f(location, v0);
}

/// ```c
/// define glUniform1fv GLEW_GET_FUN(__glewUniform1fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1FVPROC __glewUniform1fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1fv;
void glUniform1fv(int location, int count, Pointer<Float>? value) {
  final _glUniform1fv = glad__glUniform1fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform1fv(location, count, value);
}

/// ```c
/// define glUniform1i GLEW_GET_FUN(__glewUniform1i)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1IPROC __glewUniform1i
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1IPROC) (GLint location, GLint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1i;
void glUniform1i(int location, int v0) {
  final _glUniform1i = glad__glUniform1i!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return _glUniform1i(location, v0);
}

/// ```c
/// define glUniform1iv GLEW_GET_FUN(__glewUniform1iv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1IVPROC __glewUniform1iv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1iv;
void glUniform1iv(int location, int count, Pointer<Int32>? value) {
  final _glUniform1iv = glad__glUniform1iv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform1iv(location, count, value);
}

/// ```c
/// define glUniform2f GLEW_GET_FUN(__glewUniform2f)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2FPROC __glewUniform2f
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2f;
void glUniform2f(int location, double v0, double v1) {
  final _glUniform2f = glad__glUniform2f!
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1)>>()
      .asFunction<void Function(int location, double v0, double v1)>();
  return _glUniform2f(location, v0, v1);
}

/// ```c
/// define glUniform2fv GLEW_GET_FUN(__glewUniform2fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2FVPROC __glewUniform2fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2fv;
void glUniform2fv(int location, int count, Pointer<Float>? value) {
  final _glUniform2fv = glad__glUniform2fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform2fv(location, count, value);
}

/// ```c
/// define glUniform2i GLEW_GET_FUN(__glewUniform2i)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2IPROC __glewUniform2i
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2i;
void glUniform2i(int location, int v0, int v1) {
  final _glUniform2i = glad__glUniform2i!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1)>>()
      .asFunction<void Function(int location, int v0, int v1)>();
  return _glUniform2i(location, v0, v1);
}

/// ```c
/// define glUniform2iv GLEW_GET_FUN(__glewUniform2iv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2IVPROC __glewUniform2iv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2iv;
void glUniform2iv(int location, int count, Pointer<Int32>? value) {
  final _glUniform2iv = glad__glUniform2iv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform2iv(location, count, value);
}

/// ```c
/// define glUniform3f GLEW_GET_FUN(__glewUniform3f)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3FPROC __glewUniform3f
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3f;
void glUniform3f(int location, double v0, double v1, double v2) {
  final _glUniform3f = glad__glUniform3f!
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1, Float v2)>>()
      .asFunction<void Function(int location, double v0, double v1, double v2)>();
  return _glUniform3f(location, v0, v1, v2);
}

/// ```c
/// define glUniform3fv GLEW_GET_FUN(__glewUniform3fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3FVPROC __glewUniform3fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3fv;
void glUniform3fv(int location, int count, Pointer<Float>? value) {
  final _glUniform3fv = glad__glUniform3fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform3fv(location, count, value);
}

/// ```c
/// define glUniform3i GLEW_GET_FUN(__glewUniform3i)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3IPROC __glewUniform3i
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3i;
void glUniform3i(int location, int v0, int v1, int v2) {
  final _glUniform3i = glad__glUniform3i!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return _glUniform3i(location, v0, v1, v2);
}

/// ```c
/// define glUniform3iv GLEW_GET_FUN(__glewUniform3iv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3IVPROC __glewUniform3iv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3iv;
void glUniform3iv(int location, int count, Pointer<Int32>? value) {
  final _glUniform3iv = glad__glUniform3iv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform3iv(location, count, value);
}

/// ```c
/// define glUniform4f GLEW_GET_FUN(__glewUniform4f)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4FPROC __glewUniform4f
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4f;
void glUniform4f(int location, double v0, double v1, double v2, double v3) {
  final _glUniform4f = glad__glUniform4f!
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1, Float v2, Float v3)>>()
      .asFunction<void Function(int location, double v0, double v1, double v2, double v3)>();
  return _glUniform4f(location, v0, v1, v2, v3);
}

/// ```c
/// define glUniform4fv GLEW_GET_FUN(__glewUniform4fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4FVPROC __glewUniform4fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4fv;
void glUniform4fv(int location, int count, Pointer<Float>? value) {
  final _glUniform4fv = glad__glUniform4fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform4fv(location, count, value);
}

/// ```c
/// define glUniform4i GLEW_GET_FUN(__glewUniform4i)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4IPROC __glewUniform4i
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4i;
void glUniform4i(int location, int v0, int v1, int v2, int v3) {
  final _glUniform4i = glad__glUniform4i!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2, int v3)>();
  return _glUniform4i(location, v0, v1, v2, v3);
}

/// ```c
/// define glUniform4iv GLEW_GET_FUN(__glewUniform4iv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4IVPROC __glewUniform4iv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4iv;
void glUniform4iv(int location, int count, Pointer<Int32>? value) {
  final _glUniform4iv = glad__glUniform4iv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform4iv(location, count, value);
}

/// ```c
/// define glUniformMatrix2fv GLEW_GET_FUN(__glewUniformMatrix2fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2FVPROC __glewUniformMatrix2fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2fv;
void glUniformMatrix2fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix2fv = glad__glUniformMatrix2fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix2fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3fv GLEW_GET_FUN(__glewUniformMatrix3fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3FVPROC __glewUniformMatrix3fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3fv;
void glUniformMatrix3fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix3fv = glad__glUniformMatrix3fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix3fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4fv GLEW_GET_FUN(__glewUniformMatrix4fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4FVPROC __glewUniformMatrix4fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4fv;
void glUniformMatrix4fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix4fv = glad__glUniformMatrix4fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix4fv(location, count, transpose, value);
}

/// ```c
/// define glUseProgram GLEW_GET_FUN(__glewUseProgram)
/// GLEW_FUN_EXPORT PFNGLUSEPROGRAMPROC __glewUseProgram
/// typedef void (GLAPIENTRY * PFNGLUSEPROGRAMPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUseProgram;
void glUseProgram(int program) {
  final _glUseProgram = glad__glUseProgram!
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return _glUseProgram(program);
}

/// ```c
/// define glValidateProgram GLEW_GET_FUN(__glewValidateProgram)
/// GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMPROC __glewValidateProgram
/// typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glValidateProgram;
void glValidateProgram(int program) {
  final _glValidateProgram = glad__glValidateProgram!
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return _glValidateProgram(program);
}

/// ```c
/// define glVertexAttrib1d GLEW_GET_FUN(__glewVertexAttrib1d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DPROC __glewVertexAttrib1d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1d;
void glVertexAttrib1d(int index, double x) {
  final _glVertexAttrib1d = glad__glVertexAttrib1d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttrib1d(index, x);
}

/// ```c
/// define glVertexAttrib1dv GLEW_GET_FUN(__glewVertexAttrib1dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVPROC __glewVertexAttrib1dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1dv;
void glVertexAttrib1dv(int index, Pointer<Double>? v) {
  final _glVertexAttrib1dv = glad__glVertexAttrib1dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib1dv(index, v);
}

/// ```c
/// define glVertexAttrib1f GLEW_GET_FUN(__glewVertexAttrib1f)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FPROC __glewVertexAttrib1f
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1f;
void glVertexAttrib1f(int index, double x) {
  final _glVertexAttrib1f = glad__glVertexAttrib1f!
      .cast<NativeFunction<Void Function(Uint32 index, Float x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttrib1f(index, x);
}

/// ```c
/// define glVertexAttrib1fv GLEW_GET_FUN(__glewVertexAttrib1fv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVPROC __glewVertexAttrib1fv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1fv;
void glVertexAttrib1fv(int index, Pointer<Float>? v) {
  final _glVertexAttrib1fv = glad__glVertexAttrib1fv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib1fv(index, v);
}

/// ```c
/// define glVertexAttrib1s GLEW_GET_FUN(__glewVertexAttrib1s)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SPROC __glewVertexAttrib1s
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1s;
void glVertexAttrib1s(int index, int x) {
  final _glVertexAttrib1s = glad__glVertexAttrib1s!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttrib1s(index, x);
}

/// ```c
/// define glVertexAttrib1sv GLEW_GET_FUN(__glewVertexAttrib1sv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVPROC __glewVertexAttrib1sv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1sv;
void glVertexAttrib1sv(int index, Pointer<Int16>? v) {
  final _glVertexAttrib1sv = glad__glVertexAttrib1sv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib1sv(index, v);
}

/// ```c
/// define glVertexAttrib2d GLEW_GET_FUN(__glewVertexAttrib2d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DPROC __glewVertexAttrib2d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2d;
void glVertexAttrib2d(int index, double x, double y) {
  final _glVertexAttrib2d = glad__glVertexAttrib2d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttrib2d(index, x, y);
}

/// ```c
/// define glVertexAttrib2dv GLEW_GET_FUN(__glewVertexAttrib2dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVPROC __glewVertexAttrib2dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2dv;
void glVertexAttrib2dv(int index, Pointer<Double>? v) {
  final _glVertexAttrib2dv = glad__glVertexAttrib2dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib2dv(index, v);
}

/// ```c
/// define glVertexAttrib2f GLEW_GET_FUN(__glewVertexAttrib2f)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FPROC __glewVertexAttrib2f
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2f;
void glVertexAttrib2f(int index, double x, double y) {
  final _glVertexAttrib2f = glad__glVertexAttrib2f!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttrib2f(index, x, y);
}

/// ```c
/// define glVertexAttrib2fv GLEW_GET_FUN(__glewVertexAttrib2fv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVPROC __glewVertexAttrib2fv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2fv;
void glVertexAttrib2fv(int index, Pointer<Float>? v) {
  final _glVertexAttrib2fv = glad__glVertexAttrib2fv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib2fv(index, v);
}

/// ```c
/// define glVertexAttrib2s GLEW_GET_FUN(__glewVertexAttrib2s)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SPROC __glewVertexAttrib2s
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2s;
void glVertexAttrib2s(int index, int x, int y) {
  final _glVertexAttrib2s = glad__glVertexAttrib2s!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttrib2s(index, x, y);
}

/// ```c
/// define glVertexAttrib2sv GLEW_GET_FUN(__glewVertexAttrib2sv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVPROC __glewVertexAttrib2sv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2sv;
void glVertexAttrib2sv(int index, Pointer<Int16>? v) {
  final _glVertexAttrib2sv = glad__glVertexAttrib2sv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib2sv(index, v);
}

/// ```c
/// define glVertexAttrib3d GLEW_GET_FUN(__glewVertexAttrib3d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DPROC __glewVertexAttrib3d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3d;
void glVertexAttrib3d(int index, double x, double y, double z) {
  final _glVertexAttrib3d = glad__glVertexAttrib3d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttrib3d(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3dv GLEW_GET_FUN(__glewVertexAttrib3dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVPROC __glewVertexAttrib3dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3dv;
void glVertexAttrib3dv(int index, Pointer<Double>? v) {
  final _glVertexAttrib3dv = glad__glVertexAttrib3dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib3dv(index, v);
}

/// ```c
/// define glVertexAttrib3f GLEW_GET_FUN(__glewVertexAttrib3f)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FPROC __glewVertexAttrib3f
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3f;
void glVertexAttrib3f(int index, double x, double y, double z) {
  final _glVertexAttrib3f = glad__glVertexAttrib3f!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttrib3f(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3fv GLEW_GET_FUN(__glewVertexAttrib3fv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVPROC __glewVertexAttrib3fv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3fv;
void glVertexAttrib3fv(int index, Pointer<Float>? v) {
  final _glVertexAttrib3fv = glad__glVertexAttrib3fv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib3fv(index, v);
}

/// ```c
/// define glVertexAttrib3s GLEW_GET_FUN(__glewVertexAttrib3s)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SPROC __glewVertexAttrib3s
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3s;
void glVertexAttrib3s(int index, int x, int y, int z) {
  final _glVertexAttrib3s = glad__glVertexAttrib3s!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttrib3s(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3sv GLEW_GET_FUN(__glewVertexAttrib3sv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVPROC __glewVertexAttrib3sv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3sv;
void glVertexAttrib3sv(int index, Pointer<Int16>? v) {
  final _glVertexAttrib3sv = glad__glVertexAttrib3sv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib3sv(index, v);
}

/// ```c
/// define glVertexAttrib4Nbv GLEW_GET_FUN(__glewVertexAttrib4Nbv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NBVPROC __glewVertexAttrib4Nbv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Nbv;
void glVertexAttrib4Nbv(int index, String v) {
  final _glVertexAttrib4Nbv = glad__glVertexAttrib4Nbv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8>? v)>>()
      .asFunction<void Function(int index, Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glVertexAttrib4Nbv(index, _vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glVertexAttrib4Niv GLEW_GET_FUN(__glewVertexAttrib4Niv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NIVPROC __glewVertexAttrib4Niv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Niv;
void glVertexAttrib4Niv(int index, Pointer<Int32>? v) {
  final _glVertexAttrib4Niv = glad__glVertexAttrib4Niv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttrib4Niv(index, v);
}

/// ```c
/// define glVertexAttrib4Nsv GLEW_GET_FUN(__glewVertexAttrib4Nsv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NSVPROC __glewVertexAttrib4Nsv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Nsv;
void glVertexAttrib4Nsv(int index, Pointer<Int16>? v) {
  final _glVertexAttrib4Nsv = glad__glVertexAttrib4Nsv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib4Nsv(index, v);
}

/// ```c
/// define glVertexAttrib4Nub GLEW_GET_FUN(__glewVertexAttrib4Nub)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBPROC __glewVertexAttrib4Nub
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Nub;
void glVertexAttrib4Nub(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4Nub = glad__glVertexAttrib4Nub!
      .cast<NativeFunction<Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4Nub(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4Nubv GLEW_GET_FUN(__glewVertexAttrib4Nubv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBVPROC __glewVertexAttrib4Nubv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Nubv;
void glVertexAttrib4Nubv(int index, Pointer<Uint8>? v) {
  final _glVertexAttrib4Nubv = glad__glVertexAttrib4Nubv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v)>();
  return _glVertexAttrib4Nubv(index, v);
}

/// ```c
/// define glVertexAttrib4Nuiv GLEW_GET_FUN(__glewVertexAttrib4Nuiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUIVPROC __glewVertexAttrib4Nuiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Nuiv;
void glVertexAttrib4Nuiv(int index, Pointer<Uint32>? v) {
  final _glVertexAttrib4Nuiv = glad__glVertexAttrib4Nuiv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttrib4Nuiv(index, v);
}

/// ```c
/// define glVertexAttrib4Nusv GLEW_GET_FUN(__glewVertexAttrib4Nusv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUSVPROC __glewVertexAttrib4Nusv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4Nusv;
void glVertexAttrib4Nusv(int index, Pointer<Uint16>? v) {
  final _glVertexAttrib4Nusv = glad__glVertexAttrib4Nusv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint16>? v)>();
  return _glVertexAttrib4Nusv(index, v);
}

/// ```c
/// define glVertexAttrib4bv GLEW_GET_FUN(__glewVertexAttrib4bv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4BVPROC __glewVertexAttrib4bv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4bv;
void glVertexAttrib4bv(int index, String v) {
  final _glVertexAttrib4bv = glad__glVertexAttrib4bv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8>? v)>>()
      .asFunction<void Function(int index, Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glVertexAttrib4bv(index, _vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glVertexAttrib4d GLEW_GET_FUN(__glewVertexAttrib4d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DPROC __glewVertexAttrib4d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4d;
void glVertexAttrib4d(int index, double x, double y, double z, double w) {
  final _glVertexAttrib4d = glad__glVertexAttrib4d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttrib4d(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4dv GLEW_GET_FUN(__glewVertexAttrib4dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVPROC __glewVertexAttrib4dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4dv;
void glVertexAttrib4dv(int index, Pointer<Double>? v) {
  final _glVertexAttrib4dv = glad__glVertexAttrib4dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib4dv(index, v);
}

/// ```c
/// define glVertexAttrib4f GLEW_GET_FUN(__glewVertexAttrib4f)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FPROC __glewVertexAttrib4f
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4f;
void glVertexAttrib4f(int index, double x, double y, double z, double w) {
  final _glVertexAttrib4f = glad__glVertexAttrib4f!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttrib4f(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4fv GLEW_GET_FUN(__glewVertexAttrib4fv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVPROC __glewVertexAttrib4fv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4fv;
void glVertexAttrib4fv(int index, Pointer<Float>? v) {
  final _glVertexAttrib4fv = glad__glVertexAttrib4fv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib4fv(index, v);
}

/// ```c
/// define glVertexAttrib4iv GLEW_GET_FUN(__glewVertexAttrib4iv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4IVPROC __glewVertexAttrib4iv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4iv;
void glVertexAttrib4iv(int index, Pointer<Int32>? v) {
  final _glVertexAttrib4iv = glad__glVertexAttrib4iv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttrib4iv(index, v);
}

/// ```c
/// define glVertexAttrib4s GLEW_GET_FUN(__glewVertexAttrib4s)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SPROC __glewVertexAttrib4s
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4s;
void glVertexAttrib4s(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4s = glad__glVertexAttrib4s!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4s(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4sv GLEW_GET_FUN(__glewVertexAttrib4sv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVPROC __glewVertexAttrib4sv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4sv;
void glVertexAttrib4sv(int index, Pointer<Int16>? v) {
  final _glVertexAttrib4sv = glad__glVertexAttrib4sv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib4sv(index, v);
}

/// ```c
/// define glVertexAttrib4ubv GLEW_GET_FUN(__glewVertexAttrib4ubv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVPROC __glewVertexAttrib4ubv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4ubv;
void glVertexAttrib4ubv(int index, Pointer<Uint8>? v) {
  final _glVertexAttrib4ubv = glad__glVertexAttrib4ubv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v)>();
  return _glVertexAttrib4ubv(index, v);
}

/// ```c
/// define glVertexAttrib4uiv GLEW_GET_FUN(__glewVertexAttrib4uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UIVPROC __glewVertexAttrib4uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4uiv;
void glVertexAttrib4uiv(int index, Pointer<Uint32>? v) {
  final _glVertexAttrib4uiv = glad__glVertexAttrib4uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttrib4uiv(index, v);
}

/// ```c
/// define glVertexAttrib4usv GLEW_GET_FUN(__glewVertexAttrib4usv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4USVPROC __glewVertexAttrib4usv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4usv;
void glVertexAttrib4usv(int index, Pointer<Uint16>? v) {
  final _glVertexAttrib4usv = glad__glVertexAttrib4usv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint16>? v)>();
  return _glVertexAttrib4usv(index, v);
}

/// ```c
/// define glVertexAttribPointer GLEW_GET_FUN(__glewVertexAttribPointer)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERPROC __glewVertexAttribPointer
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribPointer;
void glVertexAttribPointer(int index, int size, int type, int normalized, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribPointer = glad__glVertexAttribPointer!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint8 normalized, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int normalized, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}

/// ----------------------------- GL_VERSION_2_1 ----------------------------
/// ```c
/// define glUniformMatrix2x3fv GLEW_GET_FUN(__glewUniformMatrix2x3fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X3FVPROC __glewUniformMatrix2x3fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2x3fv;
void glUniformMatrix2x3fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix2x3fv = glad__glUniformMatrix2x3fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix2x3fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix2x4fv GLEW_GET_FUN(__glewUniformMatrix2x4fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X4FVPROC __glewUniformMatrix2x4fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2x4fv;
void glUniformMatrix2x4fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix2x4fv = glad__glUniformMatrix2x4fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix2x4fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3x2fv GLEW_GET_FUN(__glewUniformMatrix3x2fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X2FVPROC __glewUniformMatrix3x2fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3x2fv;
void glUniformMatrix3x2fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix3x2fv = glad__glUniformMatrix3x2fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix3x2fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3x4fv GLEW_GET_FUN(__glewUniformMatrix3x4fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X4FVPROC __glewUniformMatrix3x4fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3x4fv;
void glUniformMatrix3x4fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix3x4fv = glad__glUniformMatrix3x4fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix3x4fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4x2fv GLEW_GET_FUN(__glewUniformMatrix4x2fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X2FVPROC __glewUniformMatrix4x2fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4x2fv;
void glUniformMatrix4x2fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix4x2fv = glad__glUniformMatrix4x2fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix4x2fv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4x3fv GLEW_GET_FUN(__glewUniformMatrix4x3fv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X3FVPROC __glewUniformMatrix4x3fv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4x3fv;
void glUniformMatrix4x3fv(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix4x3fv = glad__glUniformMatrix4x3fv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix4x3fv(location, count, transpose, value);
}

/// ----------------------------- GL_VERSION_3_0 ----------------------------
/// ```c
/// define glBeginConditionalRender GLEW_GET_FUN(__glewBeginConditionalRender)
/// GLEW_FUN_EXPORT PFNGLBEGINCONDITIONALRENDERPROC __glewBeginConditionalRender
/// typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginConditionalRender;
void glBeginConditionalRender(int id, int mode) {
  final _glBeginConditionalRender = glad__glBeginConditionalRender!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 mode)>>()
      .asFunction<void Function(int id, int mode)>();
  return _glBeginConditionalRender(id, mode);
}

/// ```c
/// define glBeginTransformFeedback GLEW_GET_FUN(__glewBeginTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLBEGINTRANSFORMFEEDBACKPROC __glewBeginTransformFeedback
/// typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginTransformFeedback;
void glBeginTransformFeedback(int primitiveMode) {
  final _glBeginTransformFeedback = glad__glBeginTransformFeedback!
      .cast<NativeFunction<Void Function(Uint32 primitiveMode)>>()
      .asFunction<void Function(int primitiveMode)>();
  return _glBeginTransformFeedback(primitiveMode);
}

/// ```c
/// define glBindFragDataLocation GLEW_GET_FUN(__glewBindFragDataLocation)
/// GLEW_FUN_EXPORT PFNGLBINDFRAGDATALOCATIONPROC __glewBindFragDataLocation
/// typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint colorNumber, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFragDataLocation;
void glBindFragDataLocation(int program, int colorNumber, String name) {
  final _glBindFragDataLocation = glad__glBindFragDataLocation!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 colorNumber, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int program, int colorNumber, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glBindFragDataLocation(program, colorNumber, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glClampColor GLEW_GET_FUN(__glewClampColor)
/// GLEW_FUN_EXPORT PFNGLCLAMPCOLORPROC __glewClampColor
/// typedef void (GLAPIENTRY * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClampColor;
void glClampColor(int target, int clamp) {
  final _glClampColor = glad__glClampColor!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 clamp)>>()
      .asFunction<void Function(int target, int clamp)>();
  return _glClampColor(target, clamp);
}

/// ```c
/// define glClearBufferfi GLEW_GET_FUN(__glewClearBufferfi)
/// GLEW_FUN_EXPORT PFNGLCLEARBUFFERFIPROC __glewClearBufferfi
/// typedef void (GLAPIENTRY * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearBufferfi;
void glClearBufferfi(int buffer, int drawBuffer, double depth, int stencil) {
  final _glClearBufferfi = glad__glClearBufferfi!
      .cast<NativeFunction<Void Function(Uint32 buffer, Int32 drawBuffer, Float depth, Int32 stencil)>>()
      .asFunction<void Function(int buffer, int drawBuffer, double depth, int stencil)>();
  return _glClearBufferfi(buffer, drawBuffer, depth, stencil);
}

/// ```c
/// define glClearBufferfv GLEW_GET_FUN(__glewClearBufferfv)
/// GLEW_FUN_EXPORT PFNGLCLEARBUFFERFVPROC __glewClearBufferfv
/// typedef void (GLAPIENTRY * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawBuffer, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearBufferfv;
void glClearBufferfv(int buffer, int drawBuffer, Pointer<Float>? value) {
  final _glClearBufferfv = glad__glClearBufferfv!
      .cast<NativeFunction<Void Function(Uint32 buffer, Int32 drawBuffer, Pointer<Float>? value)>>()
      .asFunction<void Function(int buffer, int drawBuffer, Pointer<Float>? value)>();
  return _glClearBufferfv(buffer, drawBuffer, value);
}

/// ```c
/// define glClearBufferiv GLEW_GET_FUN(__glewClearBufferiv)
/// GLEW_FUN_EXPORT PFNGLCLEARBUFFERIVPROC __glewClearBufferiv
/// typedef void (GLAPIENTRY * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawBuffer, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearBufferiv;
void glClearBufferiv(int buffer, int drawBuffer, Pointer<Int32>? value) {
  final _glClearBufferiv = glad__glClearBufferiv!
      .cast<NativeFunction<Void Function(Uint32 buffer, Int32 drawBuffer, Pointer<Int32>? value)>>()
      .asFunction<void Function(int buffer, int drawBuffer, Pointer<Int32>? value)>();
  return _glClearBufferiv(buffer, drawBuffer, value);
}

/// ```c
/// define glClearBufferuiv GLEW_GET_FUN(__glewClearBufferuiv)
/// GLEW_FUN_EXPORT PFNGLCLEARBUFFERUIVPROC __glewClearBufferuiv
/// typedef void (GLAPIENTRY * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawBuffer, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearBufferuiv;
void glClearBufferuiv(int buffer, int drawBuffer, Pointer<Uint32>? value) {
  final _glClearBufferuiv = glad__glClearBufferuiv!
      .cast<NativeFunction<Void Function(Uint32 buffer, Int32 drawBuffer, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int buffer, int drawBuffer, Pointer<Uint32>? value)>();
  return _glClearBufferuiv(buffer, drawBuffer, value);
}

/// ```c
/// define glColorMaski GLEW_GET_FUN(__glewColorMaski)
/// GLEW_FUN_EXPORT PFNGLCOLORMASKIPROC __glewColorMaski
/// typedef void (GLAPIENTRY * PFNGLCOLORMASKIPROC) (GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorMaski;
void glColorMaski(int buf, int red, int green, int blue, int alpha) {
  final _glColorMaski = glad__glColorMaski!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha)>>()
      .asFunction<void Function(int buf, int red, int green, int blue, int alpha)>();
  return _glColorMaski(buf, red, green, blue, alpha);
}

/// ```c
/// define glDisablei GLEW_GET_FUN(__glewDisablei)
/// GLEW_FUN_EXPORT PFNGLDISABLEIPROC __glewDisablei
/// typedef void (GLAPIENTRY * PFNGLDISABLEIPROC) (GLenum cap, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisablei;
void glDisablei(int cap, int index) {
  final _glDisablei = glad__glDisablei!
      .cast<NativeFunction<Void Function(Uint32 cap, Uint32 index)>>()
      .asFunction<void Function(int cap, int index)>();
  return _glDisablei(cap, index);
}

/// ```c
/// define glEnablei GLEW_GET_FUN(__glewEnablei)
/// GLEW_FUN_EXPORT PFNGLENABLEIPROC __glewEnablei
/// typedef void (GLAPIENTRY * PFNGLENABLEIPROC) (GLenum cap, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnablei;
void glEnablei(int cap, int index) {
  final _glEnablei = glad__glEnablei!
      .cast<NativeFunction<Void Function(Uint32 cap, Uint32 index)>>()
      .asFunction<void Function(int cap, int index)>();
  return _glEnablei(cap, index);
}

/// ```c
/// define glEndConditionalRender GLEW_GET_FUN(__glewEndConditionalRender)
/// GLEW_FUN_EXPORT PFNGLENDCONDITIONALRENDERPROC __glewEndConditionalRender
/// typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndConditionalRender;
void glEndConditionalRender() {
  final _glEndConditionalRender = glad__glEndConditionalRender!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndConditionalRender();
}

/// ```c
/// define glEndTransformFeedback GLEW_GET_FUN(__glewEndTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLENDTRANSFORMFEEDBACKPROC __glewEndTransformFeedback
/// typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndTransformFeedback;
void glEndTransformFeedback() {
  final _glEndTransformFeedback = glad__glEndTransformFeedback!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndTransformFeedback();
}

/// ```c
/// define glGetBooleani_v GLEW_GET_FUN(__glewGetBooleani_v)
/// GLEW_FUN_EXPORT PFNGLGETBOOLEANI_VPROC __glewGetBooleani_v
/// typedef void (GLAPIENTRY * PFNGLGETBOOLEANI_VPROC) (GLenum pname, GLuint index, GLboolean* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBooleani_v;
void glGetBooleani_v(int pname, int index, Pointer<Uint8>? data) {
  final _glGetBooleani_v = glad__glGetBooleani_v!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int pname, int index, Pointer<Uint8>? data)>();
  return _glGetBooleani_v(pname, index, data);
}

/// ```c
/// define glGetFragDataLocation GLEW_GET_FUN(__glewGetFragDataLocation)
/// GLEW_FUN_EXPORT PFNGLGETFRAGDATALOCATIONPROC __glewGetFragDataLocation
/// typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragDataLocation;
int glGetFragDataLocation(int program, String name) {
  final _glGetFragDataLocation = glad__glGetFragDataLocation!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetFragDataLocation(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetStringi GLEW_GET_FUN(__glewGetStringi)
/// GLEW_FUN_EXPORT PFNGLGETSTRINGIPROC __glewGetStringi
/// typedef const GLubyte* (GLAPIENTRY * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetStringi;
Pointer<Uint8>? glGetStringi(int name, int index) {
  final _glGetStringi = glad__glGetStringi!
      .cast<NativeFunction<Pointer<Uint8>? Function(Uint32 name, Uint32 index)>>()
      .asFunction<Pointer<Uint8>? Function(int name, int index)>();
  return _glGetStringi(name, index);
}

/// ```c
/// define glGetTexParameterIiv GLEW_GET_FUN(__glewGetTexParameterIiv)
/// GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIIVPROC __glewGetTexParameterIiv
/// typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexParameterIiv;
void glGetTexParameterIiv(int target, int pname, Pointer<Int32>? params) {
  final _glGetTexParameterIiv = glad__glGetTexParameterIiv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetTexParameterIiv(target, pname, params);
}

/// ```c
/// define glGetTexParameterIuiv GLEW_GET_FUN(__glewGetTexParameterIuiv)
/// GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIUIVPROC __glewGetTexParameterIuiv
/// typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexParameterIuiv;
void glGetTexParameterIuiv(int target, int pname, Pointer<Uint32>? params) {
  final _glGetTexParameterIuiv = glad__glGetTexParameterIuiv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Uint32>? params)>();
  return _glGetTexParameterIuiv(target, pname, params);
}

/// ```c
/// define glGetTransformFeedbackVarying GLEW_GET_FUN(__glewGetTransformFeedbackVarying)
/// GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKVARYINGPROC __glewGetTransformFeedbackVarying
/// typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTransformFeedbackVarying;
void glGetTransformFeedbackVarying(int program, int index, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetTransformFeedbackVarying = glad__glGetTransformFeedbackVarying!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int index, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}

/// ```c
/// define glGetUniformuiv GLEW_GET_FUN(__glewGetUniformuiv)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMUIVPROC __glewGetUniformuiv
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformuiv;
void glGetUniformuiv(int program, int location, Pointer<Uint32>? params) {
  final _glGetUniformuiv = glad__glGetUniformuiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Uint32>? params)>();
  return _glGetUniformuiv(program, location, params);
}

/// ```c
/// define glGetVertexAttribIiv GLEW_GET_FUN(__glewGetVertexAttribIiv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIIVPROC __glewGetVertexAttribIiv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribIiv;
void glGetVertexAttribIiv(int index, int pname, Pointer<Int32>? params) {
  final _glGetVertexAttribIiv = glad__glGetVertexAttribIiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int32>? params)>();
  return _glGetVertexAttribIiv(index, pname, params);
}

/// ```c
/// define glGetVertexAttribIuiv GLEW_GET_FUN(__glewGetVertexAttribIuiv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIUIVPROC __glewGetVertexAttribIuiv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribIuiv;
void glGetVertexAttribIuiv(int index, int pname, Pointer<Uint32>? params) {
  final _glGetVertexAttribIuiv = glad__glGetVertexAttribIuiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Uint32>? params)>();
  return _glGetVertexAttribIuiv(index, pname, params);
}

/// ```c
/// define glIsEnabledi GLEW_GET_FUN(__glewIsEnabledi)
/// GLEW_FUN_EXPORT PFNGLISENABLEDIPROC __glewIsEnabledi
/// typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDIPROC) (GLenum cap, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsEnabledi;
int glIsEnabledi(int cap, int index) {
  final _glIsEnabledi = glad__glIsEnabledi!
      .cast<NativeFunction<Uint8 Function(Uint32 cap, Uint32 index)>>()
      .asFunction<int Function(int cap, int index)>();
  return _glIsEnabledi(cap, index);
}

/// ```c
/// define glTexParameterIiv GLEW_GET_FUN(__glewTexParameterIiv)
/// GLEW_FUN_EXPORT PFNGLTEXPARAMETERIIVPROC __glewTexParameterIiv
/// typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexParameterIiv;
void glTexParameterIiv(int target, int pname, Pointer<Int32>? params) {
  final _glTexParameterIiv = glad__glTexParameterIiv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glTexParameterIiv(target, pname, params);
}

/// ```c
/// define glTexParameterIuiv GLEW_GET_FUN(__glewTexParameterIuiv)
/// GLEW_FUN_EXPORT PFNGLTEXPARAMETERIUIVPROC __glewTexParameterIuiv
/// typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexParameterIuiv;
void glTexParameterIuiv(int target, int pname, Pointer<Uint32>? params) {
  final _glTexParameterIuiv = glad__glTexParameterIuiv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Uint32>? params)>();
  return _glTexParameterIuiv(target, pname, params);
}

/// ```c
/// define glTransformFeedbackVaryings GLEW_GET_FUN(__glewTransformFeedbackVaryings)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKVARYINGSPROC __glewTransformFeedbackVaryings
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformFeedbackVaryings;
void glTransformFeedbackVaryings(int program, int count, Pointer<Pointer<Utf8>>? varyings, int bufferMode) {
  final _glTransformFeedbackVaryings = glad__glTransformFeedbackVaryings!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 count, Pointer<Pointer<Utf8>>? varyings, Uint32 bufferMode)>>()
      .asFunction<void Function(int program, int count, Pointer<Pointer<Utf8>>? varyings, int bufferMode)>();
  return _glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}

/// ```c
/// define glUniform1ui GLEW_GET_FUN(__glewUniform1ui)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UIPROC __glewUniform1ui
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1ui;
void glUniform1ui(int location, int v0) {
  final _glUniform1ui = glad__glUniform1ui!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return _glUniform1ui(location, v0);
}

/// ```c
/// define glUniform1uiv GLEW_GET_FUN(__glewUniform1uiv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UIVPROC __glewUniform1uiv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1uiv;
void glUniform1uiv(int location, int count, Pointer<Uint32>? value) {
  final _glUniform1uiv = glad__glUniform1uiv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform1uiv(location, count, value);
}

/// ```c
/// define glUniform2ui GLEW_GET_FUN(__glewUniform2ui)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UIPROC __glewUniform2ui
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2ui;
void glUniform2ui(int location, int v0, int v1) {
  final _glUniform2ui = glad__glUniform2ui!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1)>>()
      .asFunction<void Function(int location, int v0, int v1)>();
  return _glUniform2ui(location, v0, v1);
}

/// ```c
/// define glUniform2uiv GLEW_GET_FUN(__glewUniform2uiv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UIVPROC __glewUniform2uiv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2uiv;
void glUniform2uiv(int location, int count, Pointer<Uint32>? value) {
  final _glUniform2uiv = glad__glUniform2uiv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform2uiv(location, count, value);
}

/// ```c
/// define glUniform3ui GLEW_GET_FUN(__glewUniform3ui)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UIPROC __glewUniform3ui
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3ui;
void glUniform3ui(int location, int v0, int v1, int v2) {
  final _glUniform3ui = glad__glUniform3ui!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return _glUniform3ui(location, v0, v1, v2);
}

/// ```c
/// define glUniform3uiv GLEW_GET_FUN(__glewUniform3uiv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UIVPROC __glewUniform3uiv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3uiv;
void glUniform3uiv(int location, int count, Pointer<Uint32>? value) {
  final _glUniform3uiv = glad__glUniform3uiv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform3uiv(location, count, value);
}

/// ```c
/// define glUniform4ui GLEW_GET_FUN(__glewUniform4ui)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UIPROC __glewUniform4ui
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4ui;
void glUniform4ui(int location, int v0, int v1, int v2, int v3) {
  final _glUniform4ui = glad__glUniform4ui!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2, Uint32 v3)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2, int v3)>();
  return _glUniform4ui(location, v0, v1, v2, v3);
}

/// ```c
/// define glUniform4uiv GLEW_GET_FUN(__glewUniform4uiv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UIVPROC __glewUniform4uiv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4uiv;
void glUniform4uiv(int location, int count, Pointer<Uint32>? value) {
  final _glUniform4uiv = glad__glUniform4uiv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform4uiv(location, count, value);
}

/// ```c
/// define glVertexAttribI1i GLEW_GET_FUN(__glewVertexAttribI1i)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IPROC __glewVertexAttribI1i
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1i;
void glVertexAttribI1i(int index, int v0) {
  final _glVertexAttribI1i = glad__glVertexAttribI1i!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 v0)>>()
      .asFunction<void Function(int index, int v0)>();
  return _glVertexAttribI1i(index, v0);
}

/// ```c
/// define glVertexAttribI1iv GLEW_GET_FUN(__glewVertexAttribI1iv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IVPROC __glewVertexAttribI1iv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1iv;
void glVertexAttribI1iv(int index, Pointer<Int32>? v0) {
  final _glVertexAttribI1iv = glad__glVertexAttribI1iv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v0)>();
  return _glVertexAttribI1iv(index, v0);
}

/// ```c
/// define glVertexAttribI1ui GLEW_GET_FUN(__glewVertexAttribI1ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIPROC __glewVertexAttribI1ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1ui;
void glVertexAttribI1ui(int index, int v0) {
  final _glVertexAttribI1ui = glad__glVertexAttribI1ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 v0)>>()
      .asFunction<void Function(int index, int v0)>();
  return _glVertexAttribI1ui(index, v0);
}

/// ```c
/// define glVertexAttribI1uiv GLEW_GET_FUN(__glewVertexAttribI1uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIVPROC __glewVertexAttribI1uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1uiv;
void glVertexAttribI1uiv(int index, Pointer<Uint32>? v0) {
  final _glVertexAttribI1uiv = glad__glVertexAttribI1uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v0)>();
  return _glVertexAttribI1uiv(index, v0);
}

/// ```c
/// define glVertexAttribI2i GLEW_GET_FUN(__glewVertexAttribI2i)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IPROC __glewVertexAttribI2i
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint v0, GLint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2i;
void glVertexAttribI2i(int index, int v0, int v1) {
  final _glVertexAttribI2i = glad__glVertexAttribI2i!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 v0, Int32 v1)>>()
      .asFunction<void Function(int index, int v0, int v1)>();
  return _glVertexAttribI2i(index, v0, v1);
}

/// ```c
/// define glVertexAttribI2iv GLEW_GET_FUN(__glewVertexAttribI2iv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IVPROC __glewVertexAttribI2iv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2iv;
void glVertexAttribI2iv(int index, Pointer<Int32>? v0) {
  final _glVertexAttribI2iv = glad__glVertexAttribI2iv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v0)>();
  return _glVertexAttribI2iv(index, v0);
}

/// ```c
/// define glVertexAttribI2ui GLEW_GET_FUN(__glewVertexAttribI2ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIPROC __glewVertexAttribI2ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint v0, GLuint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2ui;
void glVertexAttribI2ui(int index, int v0, int v1) {
  final _glVertexAttribI2ui = glad__glVertexAttribI2ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 v0, Uint32 v1)>>()
      .asFunction<void Function(int index, int v0, int v1)>();
  return _glVertexAttribI2ui(index, v0, v1);
}

/// ```c
/// define glVertexAttribI2uiv GLEW_GET_FUN(__glewVertexAttribI2uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIVPROC __glewVertexAttribI2uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2uiv;
void glVertexAttribI2uiv(int index, Pointer<Uint32>? v0) {
  final _glVertexAttribI2uiv = glad__glVertexAttribI2uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v0)>();
  return _glVertexAttribI2uiv(index, v0);
}

/// ```c
/// define glVertexAttribI3i GLEW_GET_FUN(__glewVertexAttribI3i)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IPROC __glewVertexAttribI3i
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint v0, GLint v1, GLint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3i;
void glVertexAttribI3i(int index, int v0, int v1, int v2) {
  final _glVertexAttribI3i = glad__glVertexAttribI3i!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 v0, Int32 v1, Int32 v2)>>()
      .asFunction<void Function(int index, int v0, int v1, int v2)>();
  return _glVertexAttribI3i(index, v0, v1, v2);
}

/// ```c
/// define glVertexAttribI3iv GLEW_GET_FUN(__glewVertexAttribI3iv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IVPROC __glewVertexAttribI3iv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3iv;
void glVertexAttribI3iv(int index, Pointer<Int32>? v0) {
  final _glVertexAttribI3iv = glad__glVertexAttribI3iv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v0)>();
  return _glVertexAttribI3iv(index, v0);
}

/// ```c
/// define glVertexAttribI3ui GLEW_GET_FUN(__glewVertexAttribI3ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIPROC __glewVertexAttribI3ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3ui;
void glVertexAttribI3ui(int index, int v0, int v1, int v2) {
  final _glVertexAttribI3ui = glad__glVertexAttribI3ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 v0, Uint32 v1, Uint32 v2)>>()
      .asFunction<void Function(int index, int v0, int v1, int v2)>();
  return _glVertexAttribI3ui(index, v0, v1, v2);
}

/// ```c
/// define glVertexAttribI3uiv GLEW_GET_FUN(__glewVertexAttribI3uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIVPROC __glewVertexAttribI3uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3uiv;
void glVertexAttribI3uiv(int index, Pointer<Uint32>? v0) {
  final _glVertexAttribI3uiv = glad__glVertexAttribI3uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v0)>();
  return _glVertexAttribI3uiv(index, v0);
}

/// ```c
/// define glVertexAttribI4bv GLEW_GET_FUN(__glewVertexAttribI4bv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4BVPROC __glewVertexAttribI4bv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4bv;
void glVertexAttribI4bv(int index, String v0) {
  final _glVertexAttribI4bv = glad__glVertexAttribI4bv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8>? v0)>>()
      .asFunction<void Function(int index, Pointer<Utf8>? v0)>();
  final _v0Pointer = v0.toNativeUtf8();
  final _result = _glVertexAttribI4bv(index, _v0Pointer);
  calloc.free(_v0Pointer);
  return _result;
}

/// ```c
/// define glVertexAttribI4i GLEW_GET_FUN(__glewVertexAttribI4i)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IPROC __glewVertexAttribI4i
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4i;
void glVertexAttribI4i(int index, int v0, int v1, int v2, int v3) {
  final _glVertexAttribI4i = glad__glVertexAttribI4i!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 v0, Int32 v1, Int32 v2, Int32 v3)>>()
      .asFunction<void Function(int index, int v0, int v1, int v2, int v3)>();
  return _glVertexAttribI4i(index, v0, v1, v2, v3);
}

/// ```c
/// define glVertexAttribI4iv GLEW_GET_FUN(__glewVertexAttribI4iv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IVPROC __glewVertexAttribI4iv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4iv;
void glVertexAttribI4iv(int index, Pointer<Int32>? v0) {
  final _glVertexAttribI4iv = glad__glVertexAttribI4iv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v0)>();
  return _glVertexAttribI4iv(index, v0);
}

/// ```c
/// define glVertexAttribI4sv GLEW_GET_FUN(__glewVertexAttribI4sv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4SVPROC __glewVertexAttribI4sv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4sv;
void glVertexAttribI4sv(int index, Pointer<Int16>? v0) {
  final _glVertexAttribI4sv = glad__glVertexAttribI4sv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v0)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v0)>();
  return _glVertexAttribI4sv(index, v0);
}

/// ```c
/// define glVertexAttribI4ubv GLEW_GET_FUN(__glewVertexAttribI4ubv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UBVPROC __glewVertexAttribI4ubv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4ubv;
void glVertexAttribI4ubv(int index, Pointer<Uint8>? v0) {
  final _glVertexAttribI4ubv = glad__glVertexAttribI4ubv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v0)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v0)>();
  return _glVertexAttribI4ubv(index, v0);
}

/// ```c
/// define glVertexAttribI4ui GLEW_GET_FUN(__glewVertexAttribI4ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIPROC __glewVertexAttribI4ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4ui;
void glVertexAttribI4ui(int index, int v0, int v1, int v2, int v3) {
  final _glVertexAttribI4ui = glad__glVertexAttribI4ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 v0, Uint32 v1, Uint32 v2, Uint32 v3)>>()
      .asFunction<void Function(int index, int v0, int v1, int v2, int v3)>();
  return _glVertexAttribI4ui(index, v0, v1, v2, v3);
}

/// ```c
/// define glVertexAttribI4uiv GLEW_GET_FUN(__glewVertexAttribI4uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIVPROC __glewVertexAttribI4uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4uiv;
void glVertexAttribI4uiv(int index, Pointer<Uint32>? v0) {
  final _glVertexAttribI4uiv = glad__glVertexAttribI4uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v0)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v0)>();
  return _glVertexAttribI4uiv(index, v0);
}

/// ```c
/// define glVertexAttribI4usv GLEW_GET_FUN(__glewVertexAttribI4usv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4USVPROC __glewVertexAttribI4usv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort* v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4usv;
void glVertexAttribI4usv(int index, Pointer<Uint16>? v0) {
  final _glVertexAttribI4usv = glad__glVertexAttribI4usv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16>? v0)>>()
      .asFunction<void Function(int index, Pointer<Uint16>? v0)>();
  return _glVertexAttribI4usv(index, v0);
}

/// ```c
/// define glVertexAttribIPointer GLEW_GET_FUN(__glewVertexAttribIPointer)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTERPROC __glewVertexAttribIPointer
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribIPointer;
void glVertexAttribIPointer(int index, int size, int type, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribIPointer = glad__glVertexAttribIPointer!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribIPointer(index, size, type, stride, pointer);
}

/// ----------------------------- GL_VERSION_3_1 ----------------------------
/// ```c
/// define glDrawArraysInstanced GLEW_GET_FUN(__glewDrawArraysInstanced)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDPROC __glewDrawArraysInstanced
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstanced;
void glDrawArraysInstanced(int mode, int first, int count, int primcount) {
  final _glDrawArraysInstanced = glad__glDrawArraysInstanced!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int first, int count, int primcount)>();
  return _glDrawArraysInstanced(mode, first, count, primcount);
}

/// ```c
/// define glDrawElementsInstanced GLEW_GET_FUN(__glewDrawElementsInstanced)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDPROC __glewDrawElementsInstanced
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstanced;
void glDrawElementsInstanced(int mode, int count, int type, Pointer<Void>? indices, int primcount) {
  final _glDrawElementsInstanced = glad__glDrawElementsInstanced!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount)>();
  return _glDrawElementsInstanced(mode, count, type, indices, primcount);
}

/// ```c
/// define glPrimitiveRestartIndex GLEW_GET_FUN(__glewPrimitiveRestartIndex)
/// GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTINDEXPROC __glewPrimitiveRestartIndex
/// typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPrimitiveRestartIndex;
void glPrimitiveRestartIndex(int buffer) {
  final _glPrimitiveRestartIndex = glad__glPrimitiveRestartIndex!
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return _glPrimitiveRestartIndex(buffer);
}

/// ```c
/// define glTexBuffer GLEW_GET_FUN(__glewTexBuffer)
/// GLEW_FUN_EXPORT PFNGLTEXBUFFERPROC __glewTexBuffer
/// typedef void (GLAPIENTRY * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalFormat, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexBuffer;
void glTexBuffer(int target, int internalFormat, int buffer) {
  final _glTexBuffer = glad__glTexBuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalFormat, Uint32 buffer)>>()
      .asFunction<void Function(int target, int internalFormat, int buffer)>();
  return _glTexBuffer(target, internalFormat, buffer);
}

/// ----------------------------- GL_VERSION_3_2 ----------------------------
/// ```c
/// define glFramebufferTexture GLEW_GET_FUN(__glewFramebufferTexture)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREPROC __glewFramebufferTexture
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture;
void glFramebufferTexture(int target, int attachment, int texture, int level) {
  final _glFramebufferTexture = glad__glFramebufferTexture!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level)>();
  return _glFramebufferTexture(target, attachment, texture, level);
}

/// ```c
/// define glGetBufferParameteri64v GLEW_GET_FUN(__glewGetBufferParameteri64v)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERI64VPROC __glewGetBufferParameteri64v
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum value, GLint64 * data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferParameteri64v;
void glGetBufferParameteri64v(int target, int value, Pointer<Int64>? data) {
  final _glGetBufferParameteri64v = glad__glGetBufferParameteri64v!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 value, Pointer<Int64>? data)>>()
      .asFunction<void Function(int target, int value, Pointer<Int64>? data)>();
  return _glGetBufferParameteri64v(target, value, data);
}

/// ```c
/// define glGetInteger64i_v GLEW_GET_FUN(__glewGetInteger64i_v)
/// GLEW_FUN_EXPORT PFNGLGETINTEGER64I_VPROC __glewGetInteger64i_v
/// typedef void (GLAPIENTRY * PFNGLGETINTEGER64I_VPROC) (GLenum pname, GLuint index, GLint64 * data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInteger64i_v;
void glGetInteger64i_v(int pname, int index, Pointer<Int64>? data) {
  final _glGetInteger64i_v = glad__glGetInteger64i_v!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Int64>? data)>>()
      .asFunction<void Function(int pname, int index, Pointer<Int64>? data)>();
  return _glGetInteger64i_v(pname, index, data);
}

/// ----------------------------- GL_VERSION_3_3 ----------------------------
/// ```c
/// define glVertexAttribDivisor GLEW_GET_FUN(__glewVertexAttribDivisor)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBDIVISORPROC __glewVertexAttribDivisor
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribDivisor;
void glVertexAttribDivisor(int index, int divisor) {
  final _glVertexAttribDivisor = glad__glVertexAttribDivisor!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return _glVertexAttribDivisor(index, divisor);
}

/// ----------------------------- GL_VERSION_4_0 ----------------------------
/// ```c
/// define glBlendEquationSeparatei GLEW_GET_FUN(__glewBlendEquationSeparatei)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEIPROC __glewBlendEquationSeparatei
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationSeparatei;
void glBlendEquationSeparatei(int buf, int modeRGB, int modeAlpha) {
  final _glBlendEquationSeparatei = glad__glBlendEquationSeparatei!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 modeRGB, Uint32 modeAlpha)>>()
      .asFunction<void Function(int buf, int modeRGB, int modeAlpha)>();
  return _glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}

/// ```c
/// define glBlendEquationi GLEW_GET_FUN(__glewBlendEquationi)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONIPROC __glewBlendEquationi
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationi;
void glBlendEquationi(int buf, int mode) {
  final _glBlendEquationi = glad__glBlendEquationi!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return _glBlendEquationi(buf, mode);
}

/// ```c
/// define glBlendFuncSeparatei GLEW_GET_FUN(__glewBlendFuncSeparatei)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEIPROC __glewBlendFuncSeparatei
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncSeparatei;
void glBlendFuncSeparatei(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
  final _glBlendFuncSeparatei = glad__glBlendFuncSeparatei!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 srcRGB, Uint32 dstRGB, Uint32 srcAlpha, Uint32 dstAlpha)>>()
      .asFunction<void Function(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)>();
  return _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

/// ```c
/// define glBlendFunci GLEW_GET_FUN(__glewBlendFunci)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCIPROC __glewBlendFunci
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFunci;
void glBlendFunci(int buf, int src, int dst) {
  final _glBlendFunci = glad__glBlendFunci!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return _glBlendFunci(buf, src, dst);
}

/// ```c
/// define glMinSampleShading GLEW_GET_FUN(__glewMinSampleShading)
/// GLEW_FUN_EXPORT PFNGLMINSAMPLESHADINGPROC __glewMinSampleShading
/// typedef void (GLAPIENTRY * PFNGLMINSAMPLESHADINGPROC) (GLclampf value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMinSampleShading;
void glMinSampleShading(double value) {
  final _glMinSampleShading = glad__glMinSampleShading!
      .cast<NativeFunction<Void Function(Float value)>>()
      .asFunction<void Function(double value)>();
  return _glMinSampleShading(value);
}

/// ----------------------------- GL_VERSION_4_5 ----------------------------
/// ```c
/// define glGetGraphicsResetStatus GLEW_GET_FUN(__glewGetGraphicsResetStatus)
/// GLEW_FUN_EXPORT PFNGLGETGRAPHICSRESETSTATUSPROC __glewGetGraphicsResetStatus
/// typedef GLenum (GLAPIENTRY * PFNGLGETGRAPHICSRESETSTATUSPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetGraphicsResetStatus;
int glGetGraphicsResetStatus() {
  final _glGetGraphicsResetStatus = glad__glGetGraphicsResetStatus!
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return _glGetGraphicsResetStatus();
}

/// ```c
/// define glGetnCompressedTexImage GLEW_GET_FUN(__glewGetnCompressedTexImage)
/// GLEW_FUN_EXPORT PFNGLGETNCOMPRESSEDTEXIMAGEPROC __glewGetnCompressedTexImage
/// typedef void (GLAPIENTRY * PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnCompressedTexImage;
void glGetnCompressedTexImage(int target, int lod, int bufSize, Pointer<Void>? pixels) {
  final _glGetnCompressedTexImage = glad__glGetnCompressedTexImage!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 lod, Uint32 bufSize, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int lod, int bufSize, Pointer<Void>? pixels)>();
  return _glGetnCompressedTexImage(target, lod, bufSize, pixels);
}

/// ```c
/// define glGetnTexImage GLEW_GET_FUN(__glewGetnTexImage)
/// GLEW_FUN_EXPORT PFNGLGETNTEXIMAGEPROC __glewGetnTexImage
/// typedef void (GLAPIENTRY * PFNGLGETNTEXIMAGEPROC) (GLenum tex, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnTexImage;
void glGetnTexImage(int tex, int level, int format, int type, int bufSize, Pointer<Void>? pixels) {
  final _glGetnTexImage = glad__glGetnTexImage!
      .cast<NativeFunction<Void Function(Uint32 tex, Int32 level, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int tex, int level, int format, int type, int bufSize, Pointer<Void>? pixels)>();
  return _glGetnTexImage(tex, level, format, type, bufSize, pixels);
}

/// ```c
/// define glGetnUniformdv GLEW_GET_FUN(__glewGetnUniformdv)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMDVPROC __glewGetnUniformdv
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformdv;
void glGetnUniformdv(int program, int location, int bufSize, Pointer<Double>? params) {
  final _glGetnUniformdv = glad__glGetnUniformdv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Double>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Double>? params)>();
  return _glGetnUniformdv(program, location, bufSize, params);
}

/// ----------------------------- GL_VERSION_4_6 ----------------------------
/// ```c
/// define glMultiDrawArraysIndirectCount GLEW_GET_FUN(__glewMultiDrawArraysIndirectCount)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC __glewMultiDrawArraysIndirectCount
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) (GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirectCount;
void glMultiDrawArraysIndirectCount(int mode, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride) {
  final _glMultiDrawArraysIndirectCount = glad__glMultiDrawArraysIndirectCount!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint64 drawcount, Uint32 maxdrawcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride)>();
  return _glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
}

/// ```c
/// define glMultiDrawElementsIndirectCount GLEW_GET_FUN(__glewMultiDrawElementsIndirectCount)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC __glewMultiDrawElementsIndirectCount
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) (GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirectCount;
void glMultiDrawElementsIndirectCount(int mode, int type, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride) {
  final _glMultiDrawElementsIndirectCount = glad__glMultiDrawElementsIndirectCount!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint64 drawcount, Uint32 maxdrawcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride)>();
  return _glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
}

/// ```c
/// define glSpecializeShader GLEW_GET_FUN(__glewSpecializeShader)
/// GLEW_FUN_EXPORT PFNGLSPECIALIZESHADERPROC __glewSpecializeShader
/// typedef void (GLAPIENTRY * PFNGLSPECIALIZESHADERPROC) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSpecializeShader;
void glSpecializeShader(int shader, String pEntryPoint, int numSpecializationConstants, Pointer<Uint32>? pConstantIndex, Pointer<Uint32>? pConstantValue) {
  final _glSpecializeShader = glad__glSpecializeShader!
      .cast<NativeFunction<Void Function(Uint32 shader, Pointer<Utf8>? pEntryPoint, Uint32 numSpecializationConstants, Pointer<Uint32>? pConstantIndex, Pointer<Uint32>? pConstantValue)>>()
      .asFunction<void Function(int shader, Pointer<Utf8>? pEntryPoint, int numSpecializationConstants, Pointer<Uint32>? pConstantIndex, Pointer<Uint32>? pConstantValue)>();
  final _pEntryPointPointer = pEntryPoint.toNativeUtf8();
  final _result = _glSpecializeShader(shader, _pEntryPointPointer, numSpecializationConstants, pConstantIndex, pConstantValue);
  calloc.free(_pEntryPointPointer);
  return _result;
}

/// ---------------------------- GL_3DFX_tbuffer ----------------------------
/// ```c
/// define glTbufferMask3DFX GLEW_GET_FUN(__glewTbufferMask3DFX)
/// GLEW_FUN_EXPORT PFNGLTBUFFERMASK3DFXPROC __glewTbufferMask3DFX
/// typedef void (GLAPIENTRY * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTbufferMask3DFX;
void glTbufferMask3DFX(int mask) {
  final _glTbufferMask3DFX = glad__glTbufferMask3DFX!
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return _glTbufferMask3DFX(mask);
}

/// -------------------------- GL_AMD_debug_output --------------------------
/// ```c
/// typedef void (GLAPIENTRY *GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar* message, void* userParam)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__GLDEBUGPROCAMD;
void GLDEBUGPROCAMD(int id, int category, int severity, int length, String message, Pointer<Void>? userParam) {
  final _GLDEBUGPROCAMD = glad__GLDEBUGPROCAMD!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 category, Uint32 severity, Uint32 length, Pointer<Utf8>? message, Pointer<Void>? userParam)>>()
      .asFunction<void Function(int id, int category, int severity, int length, Pointer<Utf8>? message, Pointer<Void>? userParam)>();
  final _messagePointer = message.toNativeUtf8();
  final _result = _GLDEBUGPROCAMD(id, category, severity, length, _messagePointer, userParam);
  calloc.free(_messagePointer);
  return _result;
}

/// ```c
/// define glDebugMessageCallbackAMD GLEW_GET_FUN(__glewDebugMessageCallbackAMD)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGECALLBACKAMDPROC __glewDebugMessageCallbackAMD
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageCallbackAMD;
void glDebugMessageCallbackAMD(Pointer<Void>? callback, Pointer<Void>? userParam) {
  final _glDebugMessageCallbackAMD = glad__glDebugMessageCallbackAMD!
      .cast<NativeFunction<Void Function(Pointer<Void>? callback, Pointer<Void>? userParam)>>()
      .asFunction<void Function(Pointer<Void>? callback, Pointer<Void>? userParam)>();
  return _glDebugMessageCallbackAMD(callback, userParam);
}

/// ```c
/// define glDebugMessageEnableAMD GLEW_GET_FUN(__glewDebugMessageEnableAMD)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGEENABLEAMDPROC __glewDebugMessageEnableAMD
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageEnableAMD;
void glDebugMessageEnableAMD(int category, int severity, int count, Pointer<Uint32>? ids, int enabled) {
  final _glDebugMessageEnableAMD = glad__glDebugMessageEnableAMD!
      .cast<NativeFunction<Void Function(Uint32 category, Uint32 severity, Uint32 count, Pointer<Uint32>? ids, Uint8 enabled)>>()
      .asFunction<void Function(int category, int severity, int count, Pointer<Uint32>? ids, int enabled)>();
  return _glDebugMessageEnableAMD(category, severity, count, ids, enabled);
}

/// ```c
/// define glDebugMessageInsertAMD GLEW_GET_FUN(__glewDebugMessageInsertAMD)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGEINSERTAMDPROC __glewDebugMessageInsertAMD
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageInsertAMD;
void glDebugMessageInsertAMD(int category, int severity, int id, int length, String buf) {
  final _glDebugMessageInsertAMD = glad__glDebugMessageInsertAMD!
      .cast<NativeFunction<Void Function(Uint32 category, Uint32 severity, Uint32 id, Uint32 length, Pointer<Utf8>? buf)>>()
      .asFunction<void Function(int category, int severity, int id, int length, Pointer<Utf8>? buf)>();
  final _bufPointer = buf.toNativeUtf8();
  final _result = _glDebugMessageInsertAMD(category, severity, id, length, _bufPointer);
  calloc.free(_bufPointer);
  return _result;
}

/// ```c
/// define glGetDebugMessageLogAMD GLEW_GET_FUN(__glewGetDebugMessageLogAMD)
/// GLEW_FUN_EXPORT PFNGLGETDEBUGMESSAGELOGAMDPROC __glewGetDebugMessageLogAMD
/// typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDebugMessageLogAMD;
int glGetDebugMessageLogAMD(int count, int bufsize, Pointer<Uint32>? categories, Pointer<Uint32>? severities, Pointer<Uint32>? ids, Pointer<Uint32>? lengths, Pointer<Int8>? message) {
  final _glGetDebugMessageLogAMD = glad__glGetDebugMessageLogAMD!
      .cast<NativeFunction<Uint32 Function(Uint32 count, Uint32 bufsize, Pointer<Uint32>? categories, Pointer<Uint32>? severities, Pointer<Uint32>? ids, Pointer<Uint32>? lengths, Pointer<Int8>? message)>>()
      .asFunction<int Function(int count, int bufsize, Pointer<Uint32>? categories, Pointer<Uint32>? severities, Pointer<Uint32>? ids, Pointer<Uint32>? lengths, Pointer<Int8>? message)>();
  return _glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
}

/// ----------------------- GL_AMD_draw_buffers_blend -----------------------
/// ```c
/// define glBlendEquationIndexedAMD GLEW_GET_FUN(__glewBlendEquationIndexedAMD)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONINDEXEDAMDPROC __glewBlendEquationIndexedAMD
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationIndexedAMD;
void glBlendEquationIndexedAMD(int buf, int mode) {
  final _glBlendEquationIndexedAMD = glad__glBlendEquationIndexedAMD!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return _glBlendEquationIndexedAMD(buf, mode);
}

/// ```c
/// define glBlendEquationSeparateIndexedAMD GLEW_GET_FUN(__glewBlendEquationSeparateIndexedAMD)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC __glewBlendEquationSeparateIndexedAMD
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationSeparateIndexedAMD;
void glBlendEquationSeparateIndexedAMD(int buf, int modeRGB, int modeAlpha) {
  final _glBlendEquationSeparateIndexedAMD = glad__glBlendEquationSeparateIndexedAMD!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 modeRGB, Uint32 modeAlpha)>>()
      .asFunction<void Function(int buf, int modeRGB, int modeAlpha)>();
  return _glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
}

/// ```c
/// define glBlendFuncIndexedAMD GLEW_GET_FUN(__glewBlendFuncIndexedAMD)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCINDEXEDAMDPROC __glewBlendFuncIndexedAMD
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncIndexedAMD;
void glBlendFuncIndexedAMD(int buf, int src, int dst) {
  final _glBlendFuncIndexedAMD = glad__glBlendFuncIndexedAMD!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return _glBlendFuncIndexedAMD(buf, src, dst);
}

/// ```c
/// define glBlendFuncSeparateIndexedAMD GLEW_GET_FUN(__glewBlendFuncSeparateIndexedAMD)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC __glewBlendFuncSeparateIndexedAMD
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncSeparateIndexedAMD;
void glBlendFuncSeparateIndexedAMD(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
  final _glBlendFuncSeparateIndexedAMD = glad__glBlendFuncSeparateIndexedAMD!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 srcRGB, Uint32 dstRGB, Uint32 srcAlpha, Uint32 dstAlpha)>>()
      .asFunction<void Function(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)>();
  return _glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

/// ------------------ GL_AMD_framebuffer_sample_positions ------------------
/// ```c
/// define glFramebufferSamplePositionsfvAMD GLEW_GET_FUN(__glewFramebufferSamplePositionsfvAMD)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC __glewFramebufferSamplePositionsfvAMD
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferSamplePositionsfvAMD;
void glFramebufferSamplePositionsfvAMD(int target, int numsamples, int pixelindex, Pointer<Float>? values) {
  final _glFramebufferSamplePositionsfvAMD = glad__glFramebufferSamplePositionsfvAMD!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 numsamples, Uint32 pixelindex, Pointer<Float>? values)>>()
      .asFunction<void Function(int target, int numsamples, int pixelindex, Pointer<Float>? values)>();
  return _glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);
}

/// ```c
/// define glGetFramebufferParameterfvAMD GLEW_GET_FUN(__glewGetFramebufferParameterfvAMD)
/// GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC __glewGetFramebufferParameterfvAMD
/// typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC) (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFramebufferParameterfvAMD;
void glGetFramebufferParameterfvAMD(int target, int pname, int numsamples, int pixelindex, int size, Pointer<Float>? values) {
  final _glGetFramebufferParameterfvAMD = glad__glGetFramebufferParameterfvAMD!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Uint32 numsamples, Uint32 pixelindex, Uint32 size, Pointer<Float>? values)>>()
      .asFunction<void Function(int target, int pname, int numsamples, int pixelindex, int size, Pointer<Float>? values)>();
  return _glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
}

/// ```c
/// define glGetNamedFramebufferParameterfvAMD GLEW_GET_FUN(__glewGetNamedFramebufferParameterfvAMD)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC __glewGetNamedFramebufferParameterfvAMD
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC) (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedFramebufferParameterfvAMD;
void glGetNamedFramebufferParameterfvAMD(int framebuffer, int pname, int numsamples, int pixelindex, int size, Pointer<Float>? values) {
  final _glGetNamedFramebufferParameterfvAMD = glad__glGetNamedFramebufferParameterfvAMD!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 pname, Uint32 numsamples, Uint32 pixelindex, Uint32 size, Pointer<Float>? values)>>()
      .asFunction<void Function(int framebuffer, int pname, int numsamples, int pixelindex, int size, Pointer<Float>? values)>();
  return _glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
}

/// ```c
/// define glNamedFramebufferSamplePositionsfvAMD GLEW_GET_FUN(__glewNamedFramebufferSamplePositionsfvAMD)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC __glewNamedFramebufferSamplePositionsfvAMD
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC) (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferSamplePositionsfvAMD;
void glNamedFramebufferSamplePositionsfvAMD(int framebuffer, int numsamples, int pixelindex, Pointer<Float>? values) {
  final _glNamedFramebufferSamplePositionsfvAMD = glad__glNamedFramebufferSamplePositionsfvAMD!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 numsamples, Uint32 pixelindex, Pointer<Float>? values)>>()
      .asFunction<void Function(int framebuffer, int numsamples, int pixelindex, Pointer<Float>? values)>();
  return _glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);
}

/// ---------------------- GL_AMD_interleaved_elements ----------------------
/// ```c
/// define glVertexAttribParameteriAMD GLEW_GET_FUN(__glewVertexAttribParameteriAMD)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPARAMETERIAMDPROC __glewVertexAttribParameteriAMD
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribParameteriAMD;
void glVertexAttribParameteriAMD(int index, int pname, int param) {
  final _glVertexAttribParameteriAMD = glad__glVertexAttribParameteriAMD!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int index, int pname, int param)>();
  return _glVertexAttribParameteriAMD(index, pname, param);
}

/// ----------------------- GL_AMD_multi_draw_indirect ----------------------
/// ```c
/// define glMultiDrawArraysIndirectAMD GLEW_GET_FUN(__glewMultiDrawArraysIndirectAMD)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC __glewMultiDrawArraysIndirectAMD
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirectAMD;
void glMultiDrawArraysIndirectAMD(int mode, Pointer<Void>? indirect, int primcount, int stride) {
  final _glMultiDrawArraysIndirectAMD = glad__glMultiDrawArraysIndirectAMD!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint32 primcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int primcount, int stride)>();
  return _glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
}

/// ```c
/// define glMultiDrawElementsIndirectAMD GLEW_GET_FUN(__glewMultiDrawElementsIndirectAMD)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC __glewMultiDrawElementsIndirectAMD
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirectAMD;
void glMultiDrawElementsIndirectAMD(int mode, int type, Pointer<Void>? indirect, int primcount, int stride) {
  final _glMultiDrawElementsIndirectAMD = glad__glMultiDrawElementsIndirectAMD!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint32 primcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int primcount, int stride)>();
  return _glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
}

/// ------------------------- GL_AMD_name_gen_delete ------------------------
/// ```c
/// define glDeleteNamesAMD GLEW_GET_FUN(__glewDeleteNamesAMD)
/// GLEW_FUN_EXPORT PFNGLDELETENAMESAMDPROC __glewDeleteNamesAMD
/// typedef void (GLAPIENTRY * PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint* names)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteNamesAMD;
void glDeleteNamesAMD(int identifier, int num, Pointer<Uint32>? names) {
  final _glDeleteNamesAMD = glad__glDeleteNamesAMD!
      .cast<NativeFunction<Void Function(Uint32 identifier, Uint32 num, Pointer<Uint32>? names)>>()
      .asFunction<void Function(int identifier, int num, Pointer<Uint32>? names)>();
  return _glDeleteNamesAMD(identifier, num, names);
}

/// ```c
/// define glGenNamesAMD GLEW_GET_FUN(__glewGenNamesAMD)
/// GLEW_FUN_EXPORT PFNGLGENNAMESAMDPROC __glewGenNamesAMD
/// typedef void (GLAPIENTRY * PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint* names)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenNamesAMD;
void glGenNamesAMD(int identifier, int num, Pointer<Uint32>? names) {
  final _glGenNamesAMD = glad__glGenNamesAMD!
      .cast<NativeFunction<Void Function(Uint32 identifier, Uint32 num, Pointer<Uint32>? names)>>()
      .asFunction<void Function(int identifier, int num, Pointer<Uint32>? names)>();
  return _glGenNamesAMD(identifier, num, names);
}

/// ```c
/// define glIsNameAMD GLEW_GET_FUN(__glewIsNameAMD)
/// GLEW_FUN_EXPORT PFNGLISNAMEAMDPROC __glewIsNameAMD
/// typedef GLboolean (GLAPIENTRY * PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsNameAMD;
int glIsNameAMD(int identifier, int name) {
  final _glIsNameAMD = glad__glIsNameAMD!
      .cast<NativeFunction<Uint8 Function(Uint32 identifier, Uint32 name)>>()
      .asFunction<int Function(int identifier, int name)>();
  return _glIsNameAMD(identifier, name);
}

/// ---------------------- GL_AMD_occlusion_query_event ---------------------
/// ```c
/// define glQueryObjectParameteruiAMD GLEW_GET_FUN(__glewQueryObjectParameteruiAMD)
/// GLEW_FUN_EXPORT PFNGLQUERYOBJECTPARAMETERUIAMDPROC __glewQueryObjectParameteruiAMD
/// typedef void (GLAPIENTRY * PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glQueryObjectParameteruiAMD;
void glQueryObjectParameteruiAMD(int target, int id, int pname, int param) {
  final _glQueryObjectParameteruiAMD = glad__glQueryObjectParameteruiAMD!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id, Uint32 pname, Uint32 param)>>()
      .asFunction<void Function(int target, int id, int pname, int param)>();
  return _glQueryObjectParameteruiAMD(target, id, pname, param);
}

/// ----------------------- GL_AMD_performance_monitor ----------------------
/// ```c
/// define glBeginPerfMonitorAMD GLEW_GET_FUN(__glewBeginPerfMonitorAMD)
/// GLEW_FUN_EXPORT PFNGLBEGINPERFMONITORAMDPROC __glewBeginPerfMonitorAMD
/// typedef void (GLAPIENTRY * PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginPerfMonitorAMD;
void glBeginPerfMonitorAMD(int monitor) {
  final _glBeginPerfMonitorAMD = glad__glBeginPerfMonitorAMD!
      .cast<NativeFunction<Void Function(Uint32 monitor)>>()
      .asFunction<void Function(int monitor)>();
  return _glBeginPerfMonitorAMD(monitor);
}

/// ```c
/// define glDeletePerfMonitorsAMD GLEW_GET_FUN(__glewDeletePerfMonitorsAMD)
/// GLEW_FUN_EXPORT PFNGLDELETEPERFMONITORSAMDPROC __glewDeletePerfMonitorsAMD
/// typedef void (GLAPIENTRY * PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint* monitors)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeletePerfMonitorsAMD;
void glDeletePerfMonitorsAMD(int n, Pointer<Uint32>? monitors) {
  final _glDeletePerfMonitorsAMD = glad__glDeletePerfMonitorsAMD!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? monitors)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? monitors)>();
  return _glDeletePerfMonitorsAMD(n, monitors);
}

/// ```c
/// define glEndPerfMonitorAMD GLEW_GET_FUN(__glewEndPerfMonitorAMD)
/// GLEW_FUN_EXPORT PFNGLENDPERFMONITORAMDPROC __glewEndPerfMonitorAMD
/// typedef void (GLAPIENTRY * PFNGLENDPERFMONITORAMDPROC) (GLuint monitor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndPerfMonitorAMD;
void glEndPerfMonitorAMD(int monitor) {
  final _glEndPerfMonitorAMD = glad__glEndPerfMonitorAMD!
      .cast<NativeFunction<Void Function(Uint32 monitor)>>()
      .asFunction<void Function(int monitor)>();
  return _glEndPerfMonitorAMD(monitor);
}

/// ```c
/// define glGenPerfMonitorsAMD GLEW_GET_FUN(__glewGenPerfMonitorsAMD)
/// GLEW_FUN_EXPORT PFNGLGENPERFMONITORSAMDPROC __glewGenPerfMonitorsAMD
/// typedef void (GLAPIENTRY * PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint* monitors)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenPerfMonitorsAMD;
void glGenPerfMonitorsAMD(int n, Pointer<Uint32>? monitors) {
  final _glGenPerfMonitorsAMD = glad__glGenPerfMonitorsAMD!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? monitors)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? monitors)>();
  return _glGenPerfMonitorsAMD(n, monitors);
}

/// ```c
/// define glGetPerfMonitorCounterDataAMD GLEW_GET_FUN(__glewGetPerfMonitorCounterDataAMD)
/// GLEW_FUN_EXPORT PFNGLGETPERFMONITORCOUNTERDATAAMDPROC __glewGetPerfMonitorCounterDataAMD
/// typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint *bytesWritten)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfMonitorCounterDataAMD;
void glGetPerfMonitorCounterDataAMD(int monitor, int pname, int dataSize, Pointer<Uint32>? data, Pointer<Int32>? bytesWritten) {
  final _glGetPerfMonitorCounterDataAMD = glad__glGetPerfMonitorCounterDataAMD!
      .cast<NativeFunction<Void Function(Uint32 monitor, Uint32 pname, Uint32 dataSize, Pointer<Uint32>? data, Pointer<Int32>? bytesWritten)>>()
      .asFunction<void Function(int monitor, int pname, int dataSize, Pointer<Uint32>? data, Pointer<Int32>? bytesWritten)>();
  return _glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
}

/// ```c
/// define glGetPerfMonitorCounterInfoAMD GLEW_GET_FUN(__glewGetPerfMonitorCounterInfoAMD)
/// GLEW_FUN_EXPORT PFNGLGETPERFMONITORCOUNTERINFOAMDPROC __glewGetPerfMonitorCounterInfoAMD
/// typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfMonitorCounterInfoAMD;
void glGetPerfMonitorCounterInfoAMD(int group, int counter, int pname, Pointer<Void>? data) {
  final _glGetPerfMonitorCounterInfoAMD = glad__glGetPerfMonitorCounterInfoAMD!
      .cast<NativeFunction<Void Function(Uint32 group, Uint32 counter, Uint32 pname, Pointer<Void>? data)>>()
      .asFunction<void Function(int group, int counter, int pname, Pointer<Void>? data)>();
  return _glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
}

/// ```c
/// define glGetPerfMonitorCounterStringAMD GLEW_GET_FUN(__glewGetPerfMonitorCounterStringAMD)
/// GLEW_FUN_EXPORT PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC __glewGetPerfMonitorCounterStringAMD
/// typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar *counterString)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfMonitorCounterStringAMD;
void glGetPerfMonitorCounterStringAMD(int group, int counter, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? counterString) {
  final _glGetPerfMonitorCounterStringAMD = glad__glGetPerfMonitorCounterStringAMD!
      .cast<NativeFunction<Void Function(Uint32 group, Uint32 counter, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? counterString)>>()
      .asFunction<void Function(int group, int counter, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? counterString)>();
  return _glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
}

/// ```c
/// define glGetPerfMonitorCountersAMD GLEW_GET_FUN(__glewGetPerfMonitorCountersAMD)
/// GLEW_FUN_EXPORT PFNGLGETPERFMONITORCOUNTERSAMDPROC __glewGetPerfMonitorCountersAMD
/// typedef void (GLAPIENTRY * PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint* numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfMonitorCountersAMD;
void glGetPerfMonitorCountersAMD(int group, Pointer<Int32>? numCounters, Pointer<Int32>? maxActiveCounters, int countersSize, Pointer<Uint32>? counters) {
  final _glGetPerfMonitorCountersAMD = glad__glGetPerfMonitorCountersAMD!
      .cast<NativeFunction<Void Function(Uint32 group, Pointer<Int32>? numCounters, Pointer<Int32>? maxActiveCounters, Uint32 countersSize, Pointer<Uint32>? counters)>>()
      .asFunction<void Function(int group, Pointer<Int32>? numCounters, Pointer<Int32>? maxActiveCounters, int countersSize, Pointer<Uint32>? counters)>();
  return _glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, countersSize, counters);
}

/// ```c
/// define glGetPerfMonitorGroupStringAMD GLEW_GET_FUN(__glewGetPerfMonitorGroupStringAMD)
/// GLEW_FUN_EXPORT PFNGLGETPERFMONITORGROUPSTRINGAMDPROC __glewGetPerfMonitorGroupStringAMD
/// typedef void (GLAPIENTRY * PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei* length, GLchar *groupString)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfMonitorGroupStringAMD;
void glGetPerfMonitorGroupStringAMD(int group, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? groupString) {
  final _glGetPerfMonitorGroupStringAMD = glad__glGetPerfMonitorGroupStringAMD!
      .cast<NativeFunction<Void Function(Uint32 group, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? groupString)>>()
      .asFunction<void Function(int group, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? groupString)>();
  return _glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
}

/// ```c
/// define glGetPerfMonitorGroupsAMD GLEW_GET_FUN(__glewGetPerfMonitorGroupsAMD)
/// GLEW_FUN_EXPORT PFNGLGETPERFMONITORGROUPSAMDPROC __glewGetPerfMonitorGroupsAMD
/// typedef void (GLAPIENTRY * PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint* numGroups, GLsizei groupsSize, GLuint *groups)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfMonitorGroupsAMD;
void glGetPerfMonitorGroupsAMD(Pointer<Int32>? numGroups, int groupsSize, Pointer<Uint32>? groups) {
  final _glGetPerfMonitorGroupsAMD = glad__glGetPerfMonitorGroupsAMD!
      .cast<NativeFunction<Void Function(Pointer<Int32>? numGroups, Uint32 groupsSize, Pointer<Uint32>? groups)>>()
      .asFunction<void Function(Pointer<Int32>? numGroups, int groupsSize, Pointer<Uint32>? groups)>();
  return _glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
}

/// ```c
/// define glSelectPerfMonitorCountersAMD GLEW_GET_FUN(__glewSelectPerfMonitorCountersAMD)
/// GLEW_FUN_EXPORT PFNGLSELECTPERFMONITORCOUNTERSAMDPROC __glewSelectPerfMonitorCountersAMD
/// typedef void (GLAPIENTRY * PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSelectPerfMonitorCountersAMD;
void glSelectPerfMonitorCountersAMD(int monitor, int enable, int group, int numCounters, Pointer<Uint32>? counterList) {
  final _glSelectPerfMonitorCountersAMD = glad__glSelectPerfMonitorCountersAMD!
      .cast<NativeFunction<Void Function(Uint32 monitor, Uint8 enable, Uint32 group, Int32 numCounters, Pointer<Uint32>? counterList)>>()
      .asFunction<void Function(int monitor, int enable, int group, int numCounters, Pointer<Uint32>? counterList)>();
  return _glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
}

/// ------------------------ GL_AMD_sample_positions ------------------------
/// ```c
/// define glSetMultisamplefvAMD GLEW_GET_FUN(__glewSetMultisamplefvAMD)
/// GLEW_FUN_EXPORT PFNGLSETMULTISAMPLEFVAMDPROC __glewSetMultisamplefvAMD
/// typedef void (GLAPIENTRY * PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat* val)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSetMultisamplefvAMD;
void glSetMultisamplefvAMD(int pname, int index, Pointer<Float>? val) {
  final _glSetMultisamplefvAMD = glad__glSetMultisamplefvAMD!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Float>? val)>>()
      .asFunction<void Function(int pname, int index, Pointer<Float>? val)>();
  return _glSetMultisamplefvAMD(pname, index, val);
}

/// ------------------------- GL_AMD_sparse_texture -------------------------
/// ```c
/// define glTexStorageSparseAMD GLEW_GET_FUN(__glewTexStorageSparseAMD)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGESPARSEAMDPROC __glewTexStorageSparseAMD
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorageSparseAMD;
void glTexStorageSparseAMD(int target, int internalFormat, int width, int height, int depth, int layers, int flags) {
  final _glTexStorageSparseAMD = glad__glTexStorageSparseAMD!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint32 layers, Uint32 flags)>>()
      .asFunction<void Function(int target, int internalFormat, int width, int height, int depth, int layers, int flags)>();
  return _glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
}

/// ```c
/// define glTextureStorageSparseAMD GLEW_GET_FUN(__glewTextureStorageSparseAMD)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGESPARSEAMDPROC __glewTextureStorageSparseAMD
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorageSparseAMD;
void glTextureStorageSparseAMD(int texture, int target, int internalFormat, int width, int height, int depth, int layers, int flags) {
  final _glTextureStorageSparseAMD = glad__glTextureStorageSparseAMD!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint32 layers, Uint32 flags)>>()
      .asFunction<void Function(int texture, int target, int internalFormat, int width, int height, int depth, int layers, int flags)>();
  return _glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
}

/// ------------------- GL_AMD_stencil_operation_extended -------------------
/// ```c
/// define glStencilOpValueAMD GLEW_GET_FUN(__glewStencilOpValueAMD)
/// GLEW_FUN_EXPORT PFNGLSTENCILOPVALUEAMDPROC __glewStencilOpValueAMD
/// typedef void (GLAPIENTRY * PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilOpValueAMD;
void glStencilOpValueAMD(int face, int value) {
  final _glStencilOpValueAMD = glad__glStencilOpValueAMD!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 value)>>()
      .asFunction<void Function(int face, int value)>();
  return _glStencilOpValueAMD(face, value);
}

/// -------------------- GL_AMD_vertex_shader_tessellator -------------------
/// ```c
/// define glTessellationFactorAMD GLEW_GET_FUN(__glewTessellationFactorAMD)
/// GLEW_FUN_EXPORT PFNGLTESSELLATIONFACTORAMDPROC __glewTessellationFactorAMD
/// typedef void (GLAPIENTRY * PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTessellationFactorAMD;
void glTessellationFactorAMD(double factor) {
  final _glTessellationFactorAMD = glad__glTessellationFactorAMD!
      .cast<NativeFunction<Void Function(Float factor)>>()
      .asFunction<void Function(double factor)>();
  return _glTessellationFactorAMD(factor);
}

/// ```c
/// define glTessellationModeAMD GLEW_GET_FUN(__glewTessellationModeAMD)
/// GLEW_FUN_EXPORT PFNGLTESSELLATIONMODEAMDPROC __glewTessellationModeAMD
/// typedef void (GLAPIENTRY * PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTessellationModeAMD;
void glTessellationModeAMD(int mode) {
  final _glTessellationModeAMD = glad__glTessellationModeAMD!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glTessellationModeAMD(mode);
}

/// ----------------------- GL_ANGLE_framebuffer_blit -----------------------
/// ```c
/// define glBlitFramebufferANGLE GLEW_GET_FUN(__glewBlitFramebufferANGLE)
/// GLEW_FUN_EXPORT PFNGLBLITFRAMEBUFFERANGLEPROC __glewBlitFramebufferANGLE
/// typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlitFramebufferANGLE;
void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
  final _glBlitFramebufferANGLE = glad__glBlitFramebufferANGLE!
      .cast<NativeFunction<Void Function(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Uint32 mask, Uint32 filter)>>()
      .asFunction<void Function(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)>();
  return _glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/// -------------------- GL_ANGLE_framebuffer_multisample -------------------
/// ```c
/// define glRenderbufferStorageMultisampleANGLE GLEW_GET_FUN(__glewRenderbufferStorageMultisampleANGLE)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC __glewRenderbufferStorageMultisampleANGLE
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageMultisampleANGLE;
void glRenderbufferStorageMultisampleANGLE(int target, int samples, int internalformat, int width, int height) {
  final _glRenderbufferStorageMultisampleANGLE = glad__glRenderbufferStorageMultisampleANGLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height)>();
  return _glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
}

/// ----------------------- GL_ANGLE_instanced_arrays -----------------------
/// ```c
/// define glDrawArraysInstancedANGLE GLEW_GET_FUN(__glewDrawArraysInstancedANGLE)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDANGLEPROC __glewDrawArraysInstancedANGLE
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstancedANGLE;
void glDrawArraysInstancedANGLE(int mode, int first, int count, int primcount) {
  final _glDrawArraysInstancedANGLE = glad__glDrawArraysInstancedANGLE!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int first, int count, int primcount)>();
  return _glDrawArraysInstancedANGLE(mode, first, count, primcount);
}

/// ```c
/// define glDrawElementsInstancedANGLE GLEW_GET_FUN(__glewDrawElementsInstancedANGLE)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDANGLEPROC __glewDrawElementsInstancedANGLE
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedANGLE;
void glDrawElementsInstancedANGLE(int mode, int count, int type, Pointer<Void>? indices, int primcount) {
  final _glDrawElementsInstancedANGLE = glad__glDrawElementsInstancedANGLE!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount)>();
  return _glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);
}

/// ```c
/// define glVertexAttribDivisorANGLE GLEW_GET_FUN(__glewVertexAttribDivisorANGLE)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBDIVISORANGLEPROC __glewVertexAttribDivisorANGLE
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribDivisorANGLE;
void glVertexAttribDivisorANGLE(int index, int divisor) {
  final _glVertexAttribDivisorANGLE = glad__glVertexAttribDivisorANGLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return _glVertexAttribDivisorANGLE(index, divisor);
}

/// -------------------------- GL_ANGLE_timer_query -------------------------
/// ```c
/// define glBeginQueryANGLE GLEW_GET_FUN(__glewBeginQueryANGLE)
/// GLEW_FUN_EXPORT PFNGLBEGINQUERYANGLEPROC __glewBeginQueryANGLE
/// typedef void (GLAPIENTRY * PFNGLBEGINQUERYANGLEPROC) (GLenum target, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginQueryANGLE;
void glBeginQueryANGLE(int target, int id) {
  final _glBeginQueryANGLE = glad__glBeginQueryANGLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return _glBeginQueryANGLE(target, id);
}

/// ```c
/// define glDeleteQueriesANGLE GLEW_GET_FUN(__glewDeleteQueriesANGLE)
/// GLEW_FUN_EXPORT PFNGLDELETEQUERIESANGLEPROC __glewDeleteQueriesANGLE
/// typedef void (GLAPIENTRY * PFNGLDELETEQUERIESANGLEPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteQueriesANGLE;
void glDeleteQueriesANGLE(int n, Pointer<Uint32>? ids) {
  final _glDeleteQueriesANGLE = glad__glDeleteQueriesANGLE!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteQueriesANGLE(n, ids);
}

/// ```c
/// define glEndQueryANGLE GLEW_GET_FUN(__glewEndQueryANGLE)
/// GLEW_FUN_EXPORT PFNGLENDQUERYANGLEPROC __glewEndQueryANGLE
/// typedef void (GLAPIENTRY * PFNGLENDQUERYANGLEPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndQueryANGLE;
void glEndQueryANGLE(int target) {
  final _glEndQueryANGLE = glad__glEndQueryANGLE!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glEndQueryANGLE(target);
}

/// ```c
/// define glGenQueriesANGLE GLEW_GET_FUN(__glewGenQueriesANGLE)
/// GLEW_FUN_EXPORT PFNGLGENQUERIESANGLEPROC __glewGenQueriesANGLE
/// typedef void (GLAPIENTRY * PFNGLGENQUERIESANGLEPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenQueriesANGLE;
void glGenQueriesANGLE(int n, Pointer<Uint32>? ids) {
  final _glGenQueriesANGLE = glad__glGenQueriesANGLE!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenQueriesANGLE(n, ids);
}

/// ```c
/// define glGetQueryObjecti64vANGLE GLEW_GET_FUN(__glewGetQueryObjecti64vANGLE)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTI64VANGLEPROC __glewGetQueryObjecti64vANGLE
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VANGLEPROC) (GLuint id, GLenum pname, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjecti64vANGLE;
void glGetQueryObjecti64vANGLE(int id, int pname, Pointer<Int64>? params) {
  final _glGetQueryObjecti64vANGLE = glad__glGetQueryObjecti64vANGLE!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int64>? params)>();
  return _glGetQueryObjecti64vANGLE(id, pname, params);
}

/// ```c
/// define glGetQueryObjectivANGLE GLEW_GET_FUN(__glewGetQueryObjectivANGLE)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVANGLEPROC __glewGetQueryObjectivANGLE
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVANGLEPROC) (GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectivANGLE;
void glGetQueryObjectivANGLE(int id, int pname, Pointer<Int32>? params) {
  final _glGetQueryObjectivANGLE = glad__glGetQueryObjectivANGLE!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int32>? params)>();
  return _glGetQueryObjectivANGLE(id, pname, params);
}

/// ```c
/// define glGetQueryObjectui64vANGLE GLEW_GET_FUN(__glewGetQueryObjectui64vANGLE)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUI64VANGLEPROC __glewGetQueryObjectui64vANGLE
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VANGLEPROC) (GLuint id, GLenum pname, GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectui64vANGLE;
void glGetQueryObjectui64vANGLE(int id, int pname, Pointer<Uint64>? params) {
  final _glGetQueryObjectui64vANGLE = glad__glGetQueryObjectui64vANGLE!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint64>? params)>();
  return _glGetQueryObjectui64vANGLE(id, pname, params);
}

/// ```c
/// define glGetQueryObjectuivANGLE GLEW_GET_FUN(__glewGetQueryObjectuivANGLE)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVANGLEPROC __glewGetQueryObjectuivANGLE
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVANGLEPROC) (GLuint id, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectuivANGLE;
void glGetQueryObjectuivANGLE(int id, int pname, Pointer<Uint32>? params) {
  final _glGetQueryObjectuivANGLE = glad__glGetQueryObjectuivANGLE!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint32>? params)>();
  return _glGetQueryObjectuivANGLE(id, pname, params);
}

/// ```c
/// define glGetQueryivANGLE GLEW_GET_FUN(__glewGetQueryivANGLE)
/// GLEW_FUN_EXPORT PFNGLGETQUERYIVANGLEPROC __glewGetQueryivANGLE
/// typedef void (GLAPIENTRY * PFNGLGETQUERYIVANGLEPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryivANGLE;
void glGetQueryivANGLE(int target, int pname, Pointer<Int32>? params) {
  final _glGetQueryivANGLE = glad__glGetQueryivANGLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetQueryivANGLE(target, pname, params);
}

/// ```c
/// define glIsQueryANGLE GLEW_GET_FUN(__glewIsQueryANGLE)
/// GLEW_FUN_EXPORT PFNGLISQUERYANGLEPROC __glewIsQueryANGLE
/// typedef GLboolean (GLAPIENTRY * PFNGLISQUERYANGLEPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsQueryANGLE;
int glIsQueryANGLE(int id) {
  final _glIsQueryANGLE = glad__glIsQueryANGLE!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsQueryANGLE(id);
}

/// ```c
/// define glQueryCounterANGLE GLEW_GET_FUN(__glewQueryCounterANGLE)
/// GLEW_FUN_EXPORT PFNGLQUERYCOUNTERANGLEPROC __glewQueryCounterANGLE
/// typedef void (GLAPIENTRY * PFNGLQUERYCOUNTERANGLEPROC) (GLuint id, GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glQueryCounterANGLE;
void glQueryCounterANGLE(int id, int target) {
  final _glQueryCounterANGLE = glad__glQueryCounterANGLE!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 target)>>()
      .asFunction<void Function(int id, int target)>();
  return _glQueryCounterANGLE(id, target);
}

/// ------------------- GL_ANGLE_translated_shader_source -------------------
/// ```c
/// define glGetTranslatedShaderSourceANGLE GLEW_GET_FUN(__glewGetTranslatedShaderSourceANGLE)
/// GLEW_FUN_EXPORT PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC __glewGetTranslatedShaderSourceANGLE
/// typedef void (GLAPIENTRY * PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) (GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTranslatedShaderSourceANGLE;
void glGetTranslatedShaderSourceANGLE(int shader, int bufsize, Pointer<Uint32>? length, Pointer<Int8>? source) {
  final _glGetTranslatedShaderSourceANGLE = glad__glGetTranslatedShaderSourceANGLE!
      .cast<NativeFunction<Void Function(Uint32 shader, Uint32 bufsize, Pointer<Uint32>? length, Pointer<Int8>? source)>>()
      .asFunction<void Function(int shader, int bufsize, Pointer<Uint32>? length, Pointer<Int8>? source)>();
  return _glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);
}

/// ---------------------- GL_APPLE_copy_texture_levels ---------------------
/// ```c
/// define glCopyTextureLevelsAPPLE GLEW_GET_FUN(__glewCopyTextureLevelsAPPLE)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURELEVELSAPPLEPROC __glewCopyTextureLevelsAPPLE
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURELEVELSAPPLEPROC) (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureLevelsAPPLE;
void glCopyTextureLevelsAPPLE(int destinationTexture, int sourceTexture, int sourceBaseLevel, int sourceLevelCount) {
  final _glCopyTextureLevelsAPPLE = glad__glCopyTextureLevelsAPPLE!
      .cast<NativeFunction<Void Function(Uint32 destinationTexture, Uint32 sourceTexture, Int32 sourceBaseLevel, Uint32 sourceLevelCount)>>()
      .asFunction<void Function(int destinationTexture, int sourceTexture, int sourceBaseLevel, int sourceLevelCount)>();
  return _glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}

/// ------------------------- GL_APPLE_element_array ------------------------
/// ```c
/// define glDrawElementArrayAPPLE GLEW_GET_FUN(__glewDrawElementArrayAPPLE)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTARRAYAPPLEPROC __glewDrawElementArrayAPPLE
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementArrayAPPLE;
void glDrawElementArrayAPPLE(int mode, int first, int count) {
  final _glDrawElementArrayAPPLE = glad__glDrawElementArrayAPPLE!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count)>>()
      .asFunction<void Function(int mode, int first, int count)>();
  return _glDrawElementArrayAPPLE(mode, first, count);
}

/// ```c
/// define glDrawRangeElementArrayAPPLE GLEW_GET_FUN(__glewDrawRangeElementArrayAPPLE)
/// GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glewDrawRangeElementArrayAPPLE
/// typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawRangeElementArrayAPPLE;
void glDrawRangeElementArrayAPPLE(int mode, int start, int end, int first, int count) {
  final _glDrawRangeElementArrayAPPLE = glad__glDrawRangeElementArrayAPPLE!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Int32 first, Uint32 count)>>()
      .asFunction<void Function(int mode, int start, int end, int first, int count)>();
  return _glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
}

/// ```c
/// define glElementPointerAPPLE GLEW_GET_FUN(__glewElementPointerAPPLE)
/// GLEW_FUN_EXPORT PFNGLELEMENTPOINTERAPPLEPROC __glewElementPointerAPPLE
/// typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glElementPointerAPPLE;
void glElementPointerAPPLE(int type, Pointer<Void>? pointer) {
  final _glElementPointerAPPLE = glad__glElementPointerAPPLE!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, Pointer<Void>? pointer)>();
  return _glElementPointerAPPLE(type, pointer);
}

/// ```c
/// define glMultiDrawElementArrayAPPLE GLEW_GET_FUN(__glewMultiDrawElementArrayAPPLE)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glewMultiDrawElementArrayAPPLE
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementArrayAPPLE;
void glMultiDrawElementArrayAPPLE(int mode, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount) {
  final _glMultiDrawElementArrayAPPLE = glad__glMultiDrawElementArrayAPPLE!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Int32>? first, Pointer<Uint32>? count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount)>();
  return _glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
}

/// ```c
/// define glMultiDrawRangeElementArrayAPPLE GLEW_GET_FUN(__glewMultiDrawRangeElementArrayAPPLE)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glewMultiDrawRangeElementArrayAPPLE
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawRangeElementArrayAPPLE;
void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount) {
  final _glMultiDrawRangeElementArrayAPPLE = glad__glMultiDrawRangeElementArrayAPPLE!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Pointer<Int32>? first, Pointer<Uint32>? count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int start, int end, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount)>();
  return _glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
}

/// ----------------------------- GL_APPLE_fence ----------------------------
/// ```c
/// define glDeleteFencesAPPLE GLEW_GET_FUN(__glewDeleteFencesAPPLE)
/// GLEW_FUN_EXPORT PFNGLDELETEFENCESAPPLEPROC __glewDeleteFencesAPPLE
/// typedef void (GLAPIENTRY * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint* fences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteFencesAPPLE;
void glDeleteFencesAPPLE(int n, Pointer<Uint32>? fences) {
  final _glDeleteFencesAPPLE = glad__glDeleteFencesAPPLE!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? fences)>();
  return _glDeleteFencesAPPLE(n, fences);
}

/// ```c
/// define glFinishFenceAPPLE GLEW_GET_FUN(__glewFinishFenceAPPLE)
/// GLEW_FUN_EXPORT PFNGLFINISHFENCEAPPLEPROC __glewFinishFenceAPPLE
/// typedef void (GLAPIENTRY * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFinishFenceAPPLE;
void glFinishFenceAPPLE(int fence) {
  final _glFinishFenceAPPLE = glad__glFinishFenceAPPLE!
      .cast<NativeFunction<Void Function(Uint32 fence)>>()
      .asFunction<void Function(int fence)>();
  return _glFinishFenceAPPLE(fence);
}

/// ```c
/// define glFinishObjectAPPLE GLEW_GET_FUN(__glewFinishObjectAPPLE)
/// GLEW_FUN_EXPORT PFNGLFINISHOBJECTAPPLEPROC __glewFinishObjectAPPLE
/// typedef void (GLAPIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFinishObjectAPPLE;
void glFinishObjectAPPLE(int object, int name) {
  final _glFinishObjectAPPLE = glad__glFinishObjectAPPLE!
      .cast<NativeFunction<Void Function(Uint32 object, Int32 name)>>()
      .asFunction<void Function(int object, int name)>();
  return _glFinishObjectAPPLE(object, name);
}

/// ```c
/// define glGenFencesAPPLE GLEW_GET_FUN(__glewGenFencesAPPLE)
/// GLEW_FUN_EXPORT PFNGLGENFENCESAPPLEPROC __glewGenFencesAPPLE
/// typedef void (GLAPIENTRY * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint* fences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenFencesAPPLE;
void glGenFencesAPPLE(int n, Pointer<Uint32>? fences) {
  final _glGenFencesAPPLE = glad__glGenFencesAPPLE!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? fences)>();
  return _glGenFencesAPPLE(n, fences);
}

/// ```c
/// define glIsFenceAPPLE GLEW_GET_FUN(__glewIsFenceAPPLE)
/// GLEW_FUN_EXPORT PFNGLISFENCEAPPLEPROC __glewIsFenceAPPLE
/// typedef GLboolean (GLAPIENTRY * PFNGLISFENCEAPPLEPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsFenceAPPLE;
int glIsFenceAPPLE(int fence) {
  final _glIsFenceAPPLE = glad__glIsFenceAPPLE!
      .cast<NativeFunction<Uint8 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return _glIsFenceAPPLE(fence);
}

/// ```c
/// define glSetFenceAPPLE GLEW_GET_FUN(__glewSetFenceAPPLE)
/// GLEW_FUN_EXPORT PFNGLSETFENCEAPPLEPROC __glewSetFenceAPPLE
/// typedef void (GLAPIENTRY * PFNGLSETFENCEAPPLEPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSetFenceAPPLE;
void glSetFenceAPPLE(int fence) {
  final _glSetFenceAPPLE = glad__glSetFenceAPPLE!
      .cast<NativeFunction<Void Function(Uint32 fence)>>()
      .asFunction<void Function(int fence)>();
  return _glSetFenceAPPLE(fence);
}

/// ```c
/// define glTestFenceAPPLE GLEW_GET_FUN(__glewTestFenceAPPLE)
/// GLEW_FUN_EXPORT PFNGLTESTFENCEAPPLEPROC __glewTestFenceAPPLE
/// typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCEAPPLEPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTestFenceAPPLE;
int glTestFenceAPPLE(int fence) {
  final _glTestFenceAPPLE = glad__glTestFenceAPPLE!
      .cast<NativeFunction<Uint8 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return _glTestFenceAPPLE(fence);
}

/// ```c
/// define glTestObjectAPPLE GLEW_GET_FUN(__glewTestObjectAPPLE)
/// GLEW_FUN_EXPORT PFNGLTESTOBJECTAPPLEPROC __glewTestObjectAPPLE
/// typedef GLboolean (GLAPIENTRY * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTestObjectAPPLE;
int glTestObjectAPPLE(int object, int name) {
  final _glTestObjectAPPLE = glad__glTestObjectAPPLE!
      .cast<NativeFunction<Uint8 Function(Uint32 object, Uint32 name)>>()
      .asFunction<int Function(int object, int name)>();
  return _glTestObjectAPPLE(object, name);
}

/// ---------------------- GL_APPLE_flush_buffer_range ----------------------
/// ```c
/// define glBufferParameteriAPPLE GLEW_GET_FUN(__glewBufferParameteriAPPLE)
/// GLEW_FUN_EXPORT PFNGLBUFFERPARAMETERIAPPLEPROC __glewBufferParameteriAPPLE
/// typedef void (GLAPIENTRY * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferParameteriAPPLE;
void glBufferParameteriAPPLE(int target, int pname, int param) {
  final _glBufferParameteriAPPLE = glad__glBufferParameteriAPPLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glBufferParameteriAPPLE(target, pname, param);
}

/// ```c
/// define glFlushMappedBufferRangeAPPLE GLEW_GET_FUN(__glewFlushMappedBufferRangeAPPLE)
/// GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glewFlushMappedBufferRangeAPPLE
/// typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushMappedBufferRangeAPPLE;
void glFlushMappedBufferRangeAPPLE(int target, int offset, int size) {
  final _glFlushMappedBufferRangeAPPLE = glad__glFlushMappedBufferRangeAPPLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int target, int offset, int size)>();
  return _glFlushMappedBufferRangeAPPLE(target, offset, size);
}

/// -------------------- GL_APPLE_framebuffer_multisample -------------------
/// ```c
/// define glRenderbufferStorageMultisampleAPPLE GLEW_GET_FUN(__glewRenderbufferStorageMultisampleAPPLE)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC __glewRenderbufferStorageMultisampleAPPLE
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageMultisampleAPPLE;
void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height) {
  final _glRenderbufferStorageMultisampleAPPLE = glad__glRenderbufferStorageMultisampleAPPLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height)>();
  return _glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
}

/// ```c
/// define glResolveMultisampleFramebufferAPPLE GLEW_GET_FUN(__glewResolveMultisampleFramebufferAPPLE)
/// GLEW_FUN_EXPORT PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC __glewResolveMultisampleFramebufferAPPLE
/// typedef void (GLAPIENTRY * PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResolveMultisampleFramebufferAPPLE;
void glResolveMultisampleFramebufferAPPLE() {
  final _glResolveMultisampleFramebufferAPPLE = glad__glResolveMultisampleFramebufferAPPLE!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glResolveMultisampleFramebufferAPPLE();
}

/// ----------------------- GL_APPLE_object_purgeable -----------------------
/// ```c
/// define glGetObjectParameterivAPPLE GLEW_GET_FUN(__glewGetObjectParameterivAPPLE)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERIVAPPLEPROC __glewGetObjectParameterivAPPLE
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectParameterivAPPLE;
void glGetObjectParameterivAPPLE(int objectType, int name, int pname, Pointer<Int32>? params) {
  final _glGetObjectParameterivAPPLE = glad__glGetObjectParameterivAPPLE!
      .cast<NativeFunction<Void Function(Uint32 objectType, Uint32 name, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int objectType, int name, int pname, Pointer<Int32>? params)>();
  return _glGetObjectParameterivAPPLE(objectType, name, pname, params);
}

/// ```c
/// define glObjectPurgeableAPPLE GLEW_GET_FUN(__glewObjectPurgeableAPPLE)
/// GLEW_FUN_EXPORT PFNGLOBJECTPURGEABLEAPPLEPROC __glewObjectPurgeableAPPLE
/// typedef GLenum (GLAPIENTRY * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glObjectPurgeableAPPLE;
int glObjectPurgeableAPPLE(int objectType, int name, int option) {
  final _glObjectPurgeableAPPLE = glad__glObjectPurgeableAPPLE!
      .cast<NativeFunction<Uint32 Function(Uint32 objectType, Uint32 name, Uint32 option)>>()
      .asFunction<int Function(int objectType, int name, int option)>();
  return _glObjectPurgeableAPPLE(objectType, name, option);
}

/// ```c
/// define glObjectUnpurgeableAPPLE GLEW_GET_FUN(__glewObjectUnpurgeableAPPLE)
/// GLEW_FUN_EXPORT PFNGLOBJECTUNPURGEABLEAPPLEPROC __glewObjectUnpurgeableAPPLE
/// typedef GLenum (GLAPIENTRY * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glObjectUnpurgeableAPPLE;
int glObjectUnpurgeableAPPLE(int objectType, int name, int option) {
  final _glObjectUnpurgeableAPPLE = glad__glObjectUnpurgeableAPPLE!
      .cast<NativeFunction<Uint32 Function(Uint32 objectType, Uint32 name, Uint32 option)>>()
      .asFunction<int Function(int objectType, int name, int option)>();
  return _glObjectUnpurgeableAPPLE(objectType, name, option);
}

/// ----------------------------- GL_APPLE_sync -----------------------------
/// ```c
/// define glClientWaitSyncAPPLE GLEW_GET_FUN(__glewClientWaitSyncAPPLE)
/// GLEW_FUN_EXPORT PFNGLCLIENTWAITSYNCAPPLEPROC __glewClientWaitSyncAPPLE
/// typedef GLenum (GLAPIENTRY * PFNGLCLIENTWAITSYNCAPPLEPROC) (GLsync GLsync, GLbitfield flags, GLuint64 timeout)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClientWaitSyncAPPLE;
int glClientWaitSyncAPPLE(int GLsync, int flags, int timeout) {
  final _glClientWaitSyncAPPLE = glad__glClientWaitSyncAPPLE!
      .cast<NativeFunction<Uint32 Function(Uint64 GLsync, Uint32 flags, Uint64 timeout)>>()
      .asFunction<int Function(int GLsync, int flags, int timeout)>();
  return _glClientWaitSyncAPPLE(GLsync, flags, timeout);
}

/// ```c
/// define glDeleteSyncAPPLE GLEW_GET_FUN(__glewDeleteSyncAPPLE)
/// GLEW_FUN_EXPORT PFNGLDELETESYNCAPPLEPROC __glewDeleteSyncAPPLE
/// typedef void (GLAPIENTRY * PFNGLDELETESYNCAPPLEPROC) (GLsync GLsync)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteSyncAPPLE;
void glDeleteSyncAPPLE(int GLsync) {
  final _glDeleteSyncAPPLE = glad__glDeleteSyncAPPLE!
      .cast<NativeFunction<Void Function(Uint64 GLsync)>>()
      .asFunction<void Function(int GLsync)>();
  return _glDeleteSyncAPPLE(GLsync);
}

/// ```c
/// define glFenceSyncAPPLE GLEW_GET_FUN(__glewFenceSyncAPPLE)
/// GLEW_FUN_EXPORT PFNGLFENCESYNCAPPLEPROC __glewFenceSyncAPPLE
/// typedef GLsync (GLAPIENTRY * PFNGLFENCESYNCAPPLEPROC) (GLenum condition, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFenceSyncAPPLE;
int glFenceSyncAPPLE(int condition, int flags) {
  final _glFenceSyncAPPLE = glad__glFenceSyncAPPLE!
      .cast<NativeFunction<Uint64 Function(Uint32 condition, Uint32 flags)>>()
      .asFunction<int Function(int condition, int flags)>();
  return _glFenceSyncAPPLE(condition, flags);
}

/// ```c
/// define glGetInteger64vAPPLE GLEW_GET_FUN(__glewGetInteger64vAPPLE)
/// GLEW_FUN_EXPORT PFNGLGETINTEGER64VAPPLEPROC __glewGetInteger64vAPPLE
/// typedef void (GLAPIENTRY * PFNGLGETINTEGER64VAPPLEPROC) (GLenum pname, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInteger64vAPPLE;
void glGetInteger64vAPPLE(int pname, Pointer<Int64>? params) {
  final _glGetInteger64vAPPLE = glad__glGetInteger64vAPPLE!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int64>? params)>();
  return _glGetInteger64vAPPLE(pname, params);
}

/// ```c
/// define glGetSyncivAPPLE GLEW_GET_FUN(__glewGetSyncivAPPLE)
/// GLEW_FUN_EXPORT PFNGLGETSYNCIVAPPLEPROC __glewGetSyncivAPPLE
/// typedef void (GLAPIENTRY * PFNGLGETSYNCIVAPPLEPROC) (GLsync GLsync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSyncivAPPLE;
void glGetSyncivAPPLE(int GLsync, int pname, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? values) {
  final _glGetSyncivAPPLE = glad__glGetSyncivAPPLE!
      .cast<NativeFunction<Void Function(Uint64 GLsync, Uint32 pname, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int32>? values)>>()
      .asFunction<void Function(int GLsync, int pname, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? values)>();
  return _glGetSyncivAPPLE(GLsync, pname, bufSize, length, values);
}

/// ```c
/// define glIsSyncAPPLE GLEW_GET_FUN(__glewIsSyncAPPLE)
/// GLEW_FUN_EXPORT PFNGLISSYNCAPPLEPROC __glewIsSyncAPPLE
/// typedef GLboolean (GLAPIENTRY * PFNGLISSYNCAPPLEPROC) (GLsync GLsync)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsSyncAPPLE;
int glIsSyncAPPLE(int GLsync) {
  final _glIsSyncAPPLE = glad__glIsSyncAPPLE!
      .cast<NativeFunction<Uint8 Function(Uint64 GLsync)>>()
      .asFunction<int Function(int GLsync)>();
  return _glIsSyncAPPLE(GLsync);
}

/// ```c
/// define glWaitSyncAPPLE GLEW_GET_FUN(__glewWaitSyncAPPLE)
/// GLEW_FUN_EXPORT PFNGLWAITSYNCAPPLEPROC __glewWaitSyncAPPLE
/// typedef void (GLAPIENTRY * PFNGLWAITSYNCAPPLEPROC) (GLsync GLsync, GLbitfield flags, GLuint64 timeout)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWaitSyncAPPLE;
void glWaitSyncAPPLE(int GLsync, int flags, int timeout) {
  final _glWaitSyncAPPLE = glad__glWaitSyncAPPLE!
      .cast<NativeFunction<Void Function(Uint64 GLsync, Uint32 flags, Uint64 timeout)>>()
      .asFunction<void Function(int GLsync, int flags, int timeout)>();
  return _glWaitSyncAPPLE(GLsync, flags, timeout);
}

/// ------------------------- GL_APPLE_texture_range ------------------------
/// ```c
/// define glGetTexParameterPointervAPPLE GLEW_GET_FUN(__glewGetTexParameterPointervAPPLE)
/// GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glewGetTexParameterPointervAPPLE
/// typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexParameterPointervAPPLE;
void glGetTexParameterPointervAPPLE(int target, int pname, Pointer<Pointer<Void>>? params) {
  final _glGetTexParameterPointervAPPLE = glad__glGetTexParameterPointervAPPLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Pointer<Void>>? params)>();
  return _glGetTexParameterPointervAPPLE(target, pname, params);
}

/// ```c
/// define glTextureRangeAPPLE GLEW_GET_FUN(__glewTextureRangeAPPLE)
/// GLEW_FUN_EXPORT PFNGLTEXTURERANGEAPPLEPROC __glewTextureRangeAPPLE
/// typedef void (GLAPIENTRY * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureRangeAPPLE;
void glTextureRangeAPPLE(int target, int length, Pointer<Void>? pointer) {
  final _glTextureRangeAPPLE = glad__glTextureRangeAPPLE!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 length, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int target, int length, Pointer<Void>? pointer)>();
  return _glTextureRangeAPPLE(target, length, pointer);
}

/// ---------------------- GL_APPLE_vertex_array_object ---------------------
/// ```c
/// define glBindVertexArrayAPPLE GLEW_GET_FUN(__glewBindVertexArrayAPPLE)
/// GLEW_FUN_EXPORT PFNGLBINDVERTEXARRAYAPPLEPROC __glewBindVertexArrayAPPLE
/// typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVertexArrayAPPLE;
void glBindVertexArrayAPPLE(int array) {
  final _glBindVertexArrayAPPLE = glad__glBindVertexArrayAPPLE!
      .cast<NativeFunction<Void Function(Uint32 array)>>()
      .asFunction<void Function(int array)>();
  return _glBindVertexArrayAPPLE(array);
}

/// ```c
/// define glDeleteVertexArraysAPPLE GLEW_GET_FUN(__glewDeleteVertexArraysAPPLE)
/// GLEW_FUN_EXPORT PFNGLDELETEVERTEXARRAYSAPPLEPROC __glewDeleteVertexArraysAPPLE
/// typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteVertexArraysAPPLE;
void glDeleteVertexArraysAPPLE(int n, Pointer<Uint32>? arrays) {
  final _glDeleteVertexArraysAPPLE = glad__glDeleteVertexArraysAPPLE!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glDeleteVertexArraysAPPLE(n, arrays);
}

/// ```c
/// define glGenVertexArraysAPPLE GLEW_GET_FUN(__glewGenVertexArraysAPPLE)
/// GLEW_FUN_EXPORT PFNGLGENVERTEXARRAYSAPPLEPROC __glewGenVertexArraysAPPLE
/// typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenVertexArraysAPPLE;
void glGenVertexArraysAPPLE(int n, Pointer<Uint32>? arrays) {
  final _glGenVertexArraysAPPLE = glad__glGenVertexArraysAPPLE!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glGenVertexArraysAPPLE(n, arrays);
}

/// ```c
/// define glIsVertexArrayAPPLE GLEW_GET_FUN(__glewIsVertexArrayAPPLE)
/// GLEW_FUN_EXPORT PFNGLISVERTEXARRAYAPPLEPROC __glewIsVertexArrayAPPLE
/// typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsVertexArrayAPPLE;
int glIsVertexArrayAPPLE(int array) {
  final _glIsVertexArrayAPPLE = glad__glIsVertexArrayAPPLE!
      .cast<NativeFunction<Uint8 Function(Uint32 array)>>()
      .asFunction<int Function(int array)>();
  return _glIsVertexArrayAPPLE(array);
}

/// ---------------------- GL_APPLE_vertex_array_range ----------------------
/// ```c
/// define glFlushVertexArrayRangeAPPLE GLEW_GET_FUN(__glewFlushVertexArrayRangeAPPLE)
/// GLEW_FUN_EXPORT PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glewFlushVertexArrayRangeAPPLE
/// typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushVertexArrayRangeAPPLE;
void glFlushVertexArrayRangeAPPLE(int length, Pointer<Void>? pointer) {
  final _glFlushVertexArrayRangeAPPLE = glad__glFlushVertexArrayRangeAPPLE!
      .cast<NativeFunction<Void Function(Uint32 length, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int length, Pointer<Void>? pointer)>();
  return _glFlushVertexArrayRangeAPPLE(length, pointer);
}

/// ```c
/// define glVertexArrayParameteriAPPLE GLEW_GET_FUN(__glewVertexArrayParameteriAPPLE)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glewVertexArrayParameteriAPPLE
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayParameteriAPPLE;
void glVertexArrayParameteriAPPLE(int pname, int param) {
  final _glVertexArrayParameteriAPPLE = glad__glVertexArrayParameteriAPPLE!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glVertexArrayParameteriAPPLE(pname, param);
}

/// ```c
/// define glVertexArrayRangeAPPLE GLEW_GET_FUN(__glewVertexArrayRangeAPPLE)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYRANGEAPPLEPROC __glewVertexArrayRangeAPPLE
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayRangeAPPLE;
void glVertexArrayRangeAPPLE(int length, Pointer<Void>? pointer) {
  final _glVertexArrayRangeAPPLE = glad__glVertexArrayRangeAPPLE!
      .cast<NativeFunction<Void Function(Uint32 length, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int length, Pointer<Void>? pointer)>();
  return _glVertexArrayRangeAPPLE(length, pointer);
}

/// ------------------- GL_APPLE_vertex_program_evaluators ------------------
/// ```c
/// define glDisableVertexAttribAPPLE GLEW_GET_FUN(__glewDisableVertexAttribAPPLE)
/// GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBAPPLEPROC __glewDisableVertexAttribAPPLE
/// typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVertexAttribAPPLE;
void glDisableVertexAttribAPPLE(int index, int pname) {
  final _glDisableVertexAttribAPPLE = glad__glDisableVertexAttribAPPLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname)>>()
      .asFunction<void Function(int index, int pname)>();
  return _glDisableVertexAttribAPPLE(index, pname);
}

/// ```c
/// define glEnableVertexAttribAPPLE GLEW_GET_FUN(__glewEnableVertexAttribAPPLE)
/// GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBAPPLEPROC __glewEnableVertexAttribAPPLE
/// typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVertexAttribAPPLE;
void glEnableVertexAttribAPPLE(int index, int pname) {
  final _glEnableVertexAttribAPPLE = glad__glEnableVertexAttribAPPLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname)>>()
      .asFunction<void Function(int index, int pname)>();
  return _glEnableVertexAttribAPPLE(index, pname);
}

/// ```c
/// define glIsVertexAttribEnabledAPPLE GLEW_GET_FUN(__glewIsVertexAttribEnabledAPPLE)
/// GLEW_FUN_EXPORT PFNGLISVERTEXATTRIBENABLEDAPPLEPROC __glewIsVertexAttribEnabledAPPLE
/// typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsVertexAttribEnabledAPPLE;
int glIsVertexAttribEnabledAPPLE(int index, int pname) {
  final _glIsVertexAttribEnabledAPPLE = glad__glIsVertexAttribEnabledAPPLE!
      .cast<NativeFunction<Uint8 Function(Uint32 index, Uint32 pname)>>()
      .asFunction<int Function(int index, int pname)>();
  return _glIsVertexAttribEnabledAPPLE(index, pname);
}

/// ```c
/// define glMapVertexAttrib1dAPPLE GLEW_GET_FUN(__glewMapVertexAttrib1dAPPLE)
/// GLEW_FUN_EXPORT PFNGLMAPVERTEXATTRIB1DAPPLEPROC __glewMapVertexAttrib1dAPPLE
/// typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapVertexAttrib1dAPPLE;
void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, Pointer<Double>? points) {
  final _glMapVertexAttrib1dAPPLE = glad__glMapVertexAttrib1dAPPLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 size, Double u1, Double u2, Int32 stride, Int32 order, Pointer<Double>? points)>>()
      .asFunction<void Function(int index, int size, double u1, double u2, int stride, int order, Pointer<Double>? points)>();
  return _glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
}

/// ```c
/// define glMapVertexAttrib1fAPPLE GLEW_GET_FUN(__glewMapVertexAttrib1fAPPLE)
/// GLEW_FUN_EXPORT PFNGLMAPVERTEXATTRIB1FAPPLEPROC __glewMapVertexAttrib1fAPPLE
/// typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapVertexAttrib1fAPPLE;
void glMapVertexAttrib1fAPPLE(int index, int size, double u1, double u2, int stride, int order, Pointer<Float>? points) {
  final _glMapVertexAttrib1fAPPLE = glad__glMapVertexAttrib1fAPPLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 size, Float u1, Float u2, Int32 stride, Int32 order, Pointer<Float>? points)>>()
      .asFunction<void Function(int index, int size, double u1, double u2, int stride, int order, Pointer<Float>? points)>();
  return _glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
}

/// ```c
/// define glMapVertexAttrib2dAPPLE GLEW_GET_FUN(__glewMapVertexAttrib2dAPPLE)
/// GLEW_FUN_EXPORT PFNGLMAPVERTEXATTRIB2DAPPLEPROC __glewMapVertexAttrib2dAPPLE
/// typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapVertexAttrib2dAPPLE;
void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, Pointer<Double>? points) {
  final _glMapVertexAttrib2dAPPLE = glad__glMapVertexAttrib2dAPPLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Pointer<Double>? points)>>()
      .asFunction<void Function(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, Pointer<Double>? points)>();
  return _glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

/// ```c
/// define glMapVertexAttrib2fAPPLE GLEW_GET_FUN(__glewMapVertexAttrib2fAPPLE)
/// GLEW_FUN_EXPORT PFNGLMAPVERTEXATTRIB2FAPPLEPROC __glewMapVertexAttrib2fAPPLE
/// typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapVertexAttrib2fAPPLE;
void glMapVertexAttrib2fAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, Pointer<Float>? points) {
  final _glMapVertexAttrib2fAPPLE = glad__glMapVertexAttrib2fAPPLE!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 size, Float u1, Float u2, Int32 ustride, Int32 uorder, Float v1, Float v2, Int32 vstride, Int32 vorder, Pointer<Float>? points)>>()
      .asFunction<void Function(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, Pointer<Float>? points)>();
  return _glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

/// ```c
/// define glClearDepthf GLEW_GET_FUN(__glewClearDepthf)
/// GLEW_FUN_EXPORT PFNGLCLEARDEPTHFPROC __glewClearDepthf
/// typedef void (GLAPIENTRY * PFNGLCLEARDEPTHFPROC) (GLclampf d)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearDepthf;
void glClearDepthf(double d) {
  final _glClearDepthf = glad__glClearDepthf!
      .cast<NativeFunction<Void Function(Float d)>>()
      .asFunction<void Function(double d)>();
  return _glClearDepthf(d);
}

/// ```c
/// define glDepthRangef GLEW_GET_FUN(__glewDepthRangef)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEFPROC __glewDepthRangef
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangef;
void glDepthRangef(double n, double f) {
  final _glDepthRangef = glad__glDepthRangef!
      .cast<NativeFunction<Void Function(Float n, Float f)>>()
      .asFunction<void Function(double n, double f)>();
  return _glDepthRangef(n, f);
}

/// ```c
/// define glGetShaderPrecisionFormat GLEW_GET_FUN(__glewGetShaderPrecisionFormat)
/// GLEW_FUN_EXPORT PFNGLGETSHADERPRECISIONFORMATPROC __glewGetShaderPrecisionFormat
/// typedef void (GLAPIENTRY * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetShaderPrecisionFormat;
void glGetShaderPrecisionFormat(int shadertype, int precisiontype, Pointer<Int32>? range, Pointer<Int32>? precision) {
  final _glGetShaderPrecisionFormat = glad__glGetShaderPrecisionFormat!
      .cast<NativeFunction<Void Function(Uint32 shadertype, Uint32 precisiontype, Pointer<Int32>? range, Pointer<Int32>? precision)>>()
      .asFunction<void Function(int shadertype, int precisiontype, Pointer<Int32>? range, Pointer<Int32>? precision)>();
  return _glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}

/// ```c
/// define glReleaseShaderCompiler GLEW_GET_FUN(__glewReleaseShaderCompiler)
/// GLEW_FUN_EXPORT PFNGLRELEASESHADERCOMPILERPROC __glewReleaseShaderCompiler
/// typedef void (GLAPIENTRY * PFNGLRELEASESHADERCOMPILERPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReleaseShaderCompiler;
void glReleaseShaderCompiler() {
  final _glReleaseShaderCompiler = glad__glReleaseShaderCompiler!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glReleaseShaderCompiler();
}

/// ```c
/// define glShaderBinary GLEW_GET_FUN(__glewShaderBinary)
/// GLEW_FUN_EXPORT PFNGLSHADERBINARYPROC __glewShaderBinary
/// typedef void (GLAPIENTRY * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderBinary;
void glShaderBinary(int count, Pointer<Uint32>? shaders, int binaryformat, Pointer<Void>? binary, int length) {
  final _glShaderBinary = glad__glShaderBinary!
      .cast<NativeFunction<Void Function(Uint32 count, Pointer<Uint32>? shaders, Uint32 binaryformat, Pointer<Void>? binary, Uint32 length)>>()
      .asFunction<void Function(int count, Pointer<Uint32>? shaders, int binaryformat, Pointer<Void>? binary, int length)>();
  return _glShaderBinary(count, shaders, binaryformat, binary, length);
}

/// ----------------------- GL_ARB_ES3_1_compatibility ----------------------
/// ```c
/// define glMemoryBarrierByRegion GLEW_GET_FUN(__glewMemoryBarrierByRegion)
/// GLEW_FUN_EXPORT PFNGLMEMORYBARRIERBYREGIONPROC __glewMemoryBarrierByRegion
/// typedef void (GLAPIENTRY * PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMemoryBarrierByRegion;
void glMemoryBarrierByRegion(int barriers) {
  final _glMemoryBarrierByRegion = glad__glMemoryBarrierByRegion!
      .cast<NativeFunction<Void Function(Uint32 barriers)>>()
      .asFunction<void Function(int barriers)>();
  return _glMemoryBarrierByRegion(barriers);
}

/// ----------------------- GL_ARB_ES3_2_compatibility ----------------------
/// ```c
/// define glPrimitiveBoundingBoxARB GLEW_GET_FUN(__glewPrimitiveBoundingBoxARB)
/// GLEW_FUN_EXPORT PFNGLPRIMITIVEBOUNDINGBOXARBPROC __glewPrimitiveBoundingBoxARB
/// typedef void (GLAPIENTRY * PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPrimitiveBoundingBoxARB;
void glPrimitiveBoundingBoxARB(double minX, double minY, double minZ, double minW, double maxX, double maxY, double maxZ, double maxW) {
  final _glPrimitiveBoundingBoxARB = glad__glPrimitiveBoundingBoxARB!
      .cast<NativeFunction<Void Function(Float minX, Float minY, Float minZ, Float minW, Float maxX, Float maxY, Float maxZ, Float maxW)>>()
      .asFunction<void Function(double minX, double minY, double minZ, double minW, double maxX, double maxY, double maxZ, double maxW)>();
  return _glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

/// -------------------------- GL_ARB_base_instance -------------------------
/// ```c
/// define glDrawArraysInstancedBaseInstance GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstance)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC __glewDrawArraysInstancedBaseInstance
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstancedBaseInstance;
void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int primcount, int baseinstance) {
  final _glDrawArraysInstancedBaseInstance = glad__glDrawArraysInstancedBaseInstance!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 primcount, Uint32 baseinstance)>>()
      .asFunction<void Function(int mode, int first, int count, int primcount, int baseinstance)>();
  return _glDrawArraysInstancedBaseInstance(mode, first, count, primcount, baseinstance);
}

/// ```c
/// define glDrawElementsInstancedBaseInstance GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstance)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC __glewDrawElementsInstancedBaseInstance
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLuint baseinstance)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedBaseInstance;
void glDrawElementsInstancedBaseInstance(int mode, int count, int type, Pointer<Void>? indices, int primcount, int baseinstance) {
  final _glDrawElementsInstancedBaseInstance = glad__glDrawElementsInstancedBaseInstance!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount, Uint32 baseinstance)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount, int baseinstance)>();
  return _glDrawElementsInstancedBaseInstance(mode, count, type, indices, primcount, baseinstance);
}

/// ```c
/// define glDrawElementsInstancedBaseVertexBaseInstance GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstance)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC __glewDrawElementsInstancedBaseVertexBaseInstance
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedBaseVertexBaseInstance;
void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, Pointer<Void>? indices, int primcount, int basevertex, int baseinstance) {
  final _glDrawElementsInstancedBaseVertexBaseInstance = glad__glDrawElementsInstancedBaseVertexBaseInstance!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount, Int32 basevertex, Uint32 baseinstance)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount, int basevertex, int baseinstance)>();
  return _glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, primcount, basevertex, baseinstance);
}

/// ------------------------ GL_ARB_bindless_texture ------------------------
/// ```c
/// define glGetImageHandleARB GLEW_GET_FUN(__glewGetImageHandleARB)
/// GLEW_FUN_EXPORT PFNGLGETIMAGEHANDLEARBPROC __glewGetImageHandleARB
/// typedef GLuint64 (GLAPIENTRY * PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetImageHandleARB;
int glGetImageHandleARB(int texture, int level, int layered, int layer, int format) {
  final _glGetImageHandleARB = glad__glGetImageHandleARB!
      .cast<NativeFunction<Uint64 Function(Uint32 texture, Int32 level, Uint8 layered, Int32 layer, Uint32 format)>>()
      .asFunction<int Function(int texture, int level, int layered, int layer, int format)>();
  return _glGetImageHandleARB(texture, level, layered, layer, format);
}

/// ```c
/// define glGetTextureHandleARB GLEW_GET_FUN(__glewGetTextureHandleARB)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREHANDLEARBPROC __glewGetTextureHandleARB
/// typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureHandleARB;
int glGetTextureHandleARB(int texture) {
  final _glGetTextureHandleARB = glad__glGetTextureHandleARB!
      .cast<NativeFunction<Uint64 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return _glGetTextureHandleARB(texture);
}

/// ```c
/// define glGetTextureSamplerHandleARB GLEW_GET_FUN(__glewGetTextureSamplerHandleARB)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURESAMPLERHANDLEARBPROC __glewGetTextureSamplerHandleARB
/// typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureSamplerHandleARB;
int glGetTextureSamplerHandleARB(int texture, int sampler) {
  final _glGetTextureSamplerHandleARB = glad__glGetTextureSamplerHandleARB!
      .cast<NativeFunction<Uint64 Function(Uint32 texture, Uint32 sampler)>>()
      .asFunction<int Function(int texture, int sampler)>();
  return _glGetTextureSamplerHandleARB(texture, sampler);
}

/// ```c
/// define glGetVertexAttribLui64vARB GLEW_GET_FUN(__glewGetVertexAttribLui64vARB)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBLUI64VARBPROC __glewGetVertexAttribLui64vARB
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribLui64vARB;
void glGetVertexAttribLui64vARB(int index, int pname, Pointer<Uint64>? params) {
  final _glGetVertexAttribLui64vARB = glad__glGetVertexAttribLui64vARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Uint64>? params)>();
  return _glGetVertexAttribLui64vARB(index, pname, params);
}

/// ```c
/// define glIsImageHandleResidentARB GLEW_GET_FUN(__glewIsImageHandleResidentARB)
/// GLEW_FUN_EXPORT PFNGLISIMAGEHANDLERESIDENTARBPROC __glewIsImageHandleResidentARB
/// typedef GLboolean (GLAPIENTRY * PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsImageHandleResidentARB;
int glIsImageHandleResidentARB(int handle) {
  final _glIsImageHandleResidentARB = glad__glIsImageHandleResidentARB!
      .cast<NativeFunction<Uint8 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return _glIsImageHandleResidentARB(handle);
}

/// ```c
/// define glIsTextureHandleResidentARB GLEW_GET_FUN(__glewIsTextureHandleResidentARB)
/// GLEW_FUN_EXPORT PFNGLISTEXTUREHANDLERESIDENTARBPROC __glewIsTextureHandleResidentARB
/// typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsTextureHandleResidentARB;
int glIsTextureHandleResidentARB(int handle) {
  final _glIsTextureHandleResidentARB = glad__glIsTextureHandleResidentARB!
      .cast<NativeFunction<Uint8 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return _glIsTextureHandleResidentARB(handle);
}

/// ```c
/// define glMakeImageHandleNonResidentARB GLEW_GET_FUN(__glewMakeImageHandleNonResidentARB)
/// GLEW_FUN_EXPORT PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC __glewMakeImageHandleNonResidentARB
/// typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeImageHandleNonResidentARB;
void glMakeImageHandleNonResidentARB(int handle) {
  final _glMakeImageHandleNonResidentARB = glad__glMakeImageHandleNonResidentARB!
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return _glMakeImageHandleNonResidentARB(handle);
}

/// ```c
/// define glMakeImageHandleResidentARB GLEW_GET_FUN(__glewMakeImageHandleResidentARB)
/// GLEW_FUN_EXPORT PFNGLMAKEIMAGEHANDLERESIDENTARBPROC __glewMakeImageHandleResidentARB
/// typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeImageHandleResidentARB;
void glMakeImageHandleResidentARB(int handle, int access) {
  final _glMakeImageHandleResidentARB = glad__glMakeImageHandleResidentARB!
      .cast<NativeFunction<Void Function(Uint64 handle, Uint32 access)>>()
      .asFunction<void Function(int handle, int access)>();
  return _glMakeImageHandleResidentARB(handle, access);
}

/// ```c
/// define glMakeTextureHandleNonResidentARB GLEW_GET_FUN(__glewMakeTextureHandleNonResidentARB)
/// GLEW_FUN_EXPORT PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC __glewMakeTextureHandleNonResidentARB
/// typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeTextureHandleNonResidentARB;
void glMakeTextureHandleNonResidentARB(int handle) {
  final _glMakeTextureHandleNonResidentARB = glad__glMakeTextureHandleNonResidentARB!
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return _glMakeTextureHandleNonResidentARB(handle);
}

/// ```c
/// define glMakeTextureHandleResidentARB GLEW_GET_FUN(__glewMakeTextureHandleResidentARB)
/// GLEW_FUN_EXPORT PFNGLMAKETEXTUREHANDLERESIDENTARBPROC __glewMakeTextureHandleResidentARB
/// typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeTextureHandleResidentARB;
void glMakeTextureHandleResidentARB(int handle) {
  final _glMakeTextureHandleResidentARB = glad__glMakeTextureHandleResidentARB!
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return _glMakeTextureHandleResidentARB(handle);
}

/// ```c
/// define glProgramUniformHandleui64ARB GLEW_GET_FUN(__glewProgramUniformHandleui64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC __glewProgramUniformHandleui64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformHandleui64ARB;
void glProgramUniformHandleui64ARB(int program, int location, int value) {
  final _glProgramUniformHandleui64ARB = glad__glProgramUniformHandleui64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 value)>>()
      .asFunction<void Function(int program, int location, int value)>();
  return _glProgramUniformHandleui64ARB(program, location, value);
}

/// ```c
/// define glProgramUniformHandleui64vARB GLEW_GET_FUN(__glewProgramUniformHandleui64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC __glewProgramUniformHandleui64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformHandleui64vARB;
void glProgramUniformHandleui64vARB(int program, int location, int count, Pointer<Uint64>? values) {
  final _glProgramUniformHandleui64vARB = glad__glProgramUniformHandleui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? values)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? values)>();
  return _glProgramUniformHandleui64vARB(program, location, count, values);
}

/// ```c
/// define glUniformHandleui64ARB GLEW_GET_FUN(__glewUniformHandleui64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORMHANDLEUI64ARBPROC __glewUniformHandleui64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformHandleui64ARB;
void glUniformHandleui64ARB(int location, int value) {
  final _glUniformHandleui64ARB = glad__glUniformHandleui64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 value)>>()
      .asFunction<void Function(int location, int value)>();
  return _glUniformHandleui64ARB(location, value);
}

/// ```c
/// define glUniformHandleui64vARB GLEW_GET_FUN(__glewUniformHandleui64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORMHANDLEUI64VARBPROC __glewUniformHandleui64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformHandleui64vARB;
void glUniformHandleui64vARB(int location, int count, Pointer<Uint64>? value) {
  final _glUniformHandleui64vARB = glad__glUniformHandleui64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniformHandleui64vARB(location, count, value);
}

/// ```c
/// define glVertexAttribL1ui64ARB GLEW_GET_FUN(__glewVertexAttribL1ui64ARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1UI64ARBPROC __glewVertexAttribL1ui64ARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1ui64ARB;
void glVertexAttribL1ui64ARB(int index, int x) {
  final _glVertexAttribL1ui64ARB = glad__glVertexAttribL1ui64ARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttribL1ui64ARB(index, x);
}

/// ```c
/// define glVertexAttribL1ui64vARB GLEW_GET_FUN(__glewVertexAttribL1ui64vARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1UI64VARBPROC __glewVertexAttribL1ui64vARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1ui64vARB;
void glVertexAttribL1ui64vARB(int index, Pointer<Uint64>? v) {
  final _glVertexAttribL1ui64vARB = glad__glVertexAttribL1ui64vARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint64>? v)>();
  return _glVertexAttribL1ui64vARB(index, v);
}

/// ----------------------- GL_ARB_blend_func_extended ----------------------
/// ```c
/// define glBindFragDataLocationIndexed GLEW_GET_FUN(__glewBindFragDataLocationIndexed)
/// GLEW_FUN_EXPORT PFNGLBINDFRAGDATALOCATIONINDEXEDPROC __glewBindFragDataLocationIndexed
/// typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFragDataLocationIndexed;
void glBindFragDataLocationIndexed(int program, int colorNumber, int index, String name) {
  final _glBindFragDataLocationIndexed = glad__glBindFragDataLocationIndexed!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 colorNumber, Uint32 index, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int program, int colorNumber, int index, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glBindFragDataLocationIndexed(program, colorNumber, index, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetFragDataIndex GLEW_GET_FUN(__glewGetFragDataIndex)
/// GLEW_FUN_EXPORT PFNGLGETFRAGDATAINDEXPROC __glewGetFragDataIndex
/// typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar * name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragDataIndex;
int glGetFragDataIndex(int program, String name) {
  final _glGetFragDataIndex = glad__glGetFragDataIndex!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetFragDataIndex(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ------------------------- GL_ARB_buffer_storage -------------------------
/// ```c
/// define glBufferStorage GLEW_GET_FUN(__glewBufferStorage)
/// GLEW_FUN_EXPORT PFNGLBUFFERSTORAGEPROC __glewBufferStorage
/// typedef void (GLAPIENTRY * PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferStorage;
void glBufferStorage(int target, int size, Pointer<Void>? data, int flags) {
  final _glBufferStorage = glad__glBufferStorage!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 size, Pointer<Void>? data, Uint32 flags)>>()
      .asFunction<void Function(int target, int size, Pointer<Void>? data, int flags)>();
  return _glBufferStorage(target, size, data, flags);
}

/// ```c
/// define glCreateSyncFromCLeventARB GLEW_GET_FUN(__glewCreateSyncFromCLeventARB)
/// GLEW_FUN_EXPORT PFNGLCREATESYNCFROMCLEVENTARBPROC __glewCreateSyncFromCLeventARB
/// typedef GLsync (GLAPIENTRY * PFNGLCREATESYNCFROMCLEVENTARBPROC) (cl_context context, cl_event event, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateSyncFromCLeventARB;
int glCreateSyncFromCLeventARB(Pointer<Void>? context, Pointer<Void>? event, int flags) {
  final _glCreateSyncFromCLeventARB = glad__glCreateSyncFromCLeventARB!
      .cast<NativeFunction<Uint64 Function(Pointer<Void>? context, Pointer<Void>? event, Uint32 flags)>>()
      .asFunction<int Function(Pointer<Void>? context, Pointer<Void>? event, int flags)>();
  return _glCreateSyncFromCLeventARB(context, event, flags);
}

/// ----------------------- GL_ARB_clear_buffer_object ----------------------
/// ```c
/// define glClearBufferData GLEW_GET_FUN(__glewClearBufferData)
/// GLEW_FUN_EXPORT PFNGLCLEARBUFFERDATAPROC __glewClearBufferData
/// typedef void (GLAPIENTRY * PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearBufferData;
void glClearBufferData(int target, int internalformat, int format, int type, Pointer<Void>? data) {
  final _glClearBufferData = glad__glClearBufferData!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int internalformat, int format, int type, Pointer<Void>? data)>();
  return _glClearBufferData(target, internalformat, format, type, data);
}

/// ```c
/// define glClearBufferSubData GLEW_GET_FUN(__glewClearBufferSubData)
/// GLEW_FUN_EXPORT PFNGLCLEARBUFFERSUBDATAPROC __glewClearBufferSubData
/// typedef void (GLAPIENTRY * PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearBufferSubData;
void glClearBufferSubData(int target, int internalformat, int offset, int size, int format, int type, Pointer<Void>? data) {
  final _glClearBufferSubData = glad__glClearBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint64 offset, Uint64 size, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int internalformat, int offset, int size, int format, int type, Pointer<Void>? data)>();
  return _glClearBufferSubData(target, internalformat, offset, size, format, type, data);
}

/// ```c
/// define glClearNamedBufferDataEXT GLEW_GET_FUN(__glewClearNamedBufferDataEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDBUFFERDATAEXTPROC __glewClearNamedBufferDataEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedBufferDataEXT;
void glClearNamedBufferDataEXT(int buffer, int internalformat, int format, int type, Pointer<Void>? data) {
  final _glClearNamedBufferDataEXT = glad__glClearNamedBufferDataEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 internalformat, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int internalformat, int format, int type, Pointer<Void>? data)>();
  return _glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
}

/// ```c
/// define glClearNamedBufferSubDataEXT GLEW_GET_FUN(__glewClearNamedBufferSubDataEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC __glewClearNamedBufferSubDataEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedBufferSubDataEXT;
void glClearNamedBufferSubDataEXT(int buffer, int internalformat, int offset, int size, int format, int type, Pointer<Void>? data) {
  final _glClearNamedBufferSubDataEXT = glad__glClearNamedBufferSubDataEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 internalformat, Uint64 offset, Uint64 size, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int internalformat, int offset, int size, int format, int type, Pointer<Void>? data)>();
  return _glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
}

/// -------------------------- GL_ARB_clear_texture -------------------------
/// ```c
/// define glClearTexImage GLEW_GET_FUN(__glewClearTexImage)
/// GLEW_FUN_EXPORT PFNGLCLEARTEXIMAGEPROC __glewClearTexImage
/// typedef void (GLAPIENTRY * PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearTexImage;
void glClearTexImage(int texture, int level, int format, int type, Pointer<Void>? data) {
  final _glClearTexImage = glad__glClearTexImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int format, int type, Pointer<Void>? data)>();
  return _glClearTexImage(texture, level, format, type, data);
}

/// ```c
/// define glClearTexSubImage GLEW_GET_FUN(__glewClearTexSubImage)
/// GLEW_FUN_EXPORT PFNGLCLEARTEXSUBIMAGEPROC __glewClearTexSubImage
/// typedef void (GLAPIENTRY * PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearTexSubImage;
void glClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? data) {
  final _glClearTexSubImage = glad__glClearTexSubImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? data)>();
  return _glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

/// -------------------------- GL_ARB_clip_control --------------------------
/// ```c
/// define glClipControl GLEW_GET_FUN(__glewClipControl)
/// GLEW_FUN_EXPORT PFNGLCLIPCONTROLPROC __glewClipControl
/// typedef void (GLAPIENTRY * PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClipControl;
void glClipControl(int origin, int depth) {
  final _glClipControl = glad__glClipControl!
      .cast<NativeFunction<Void Function(Uint32 origin, Uint32 depth)>>()
      .asFunction<void Function(int origin, int depth)>();
  return _glClipControl(origin, depth);
}

/// ----------------------- GL_ARB_color_buffer_float -----------------------
/// ```c
/// define glClampColorARB GLEW_GET_FUN(__glewClampColorARB)
/// GLEW_FUN_EXPORT PFNGLCLAMPCOLORARBPROC __glewClampColorARB
/// typedef void (GLAPIENTRY * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClampColorARB;
void glClampColorARB(int target, int clamp) {
  final _glClampColorARB = glad__glClampColorARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 clamp)>>()
      .asFunction<void Function(int target, int clamp)>();
  return _glClampColorARB(target, clamp);
}

/// ------------------------- GL_ARB_compute_shader -------------------------
/// ```c
/// define glDispatchCompute GLEW_GET_FUN(__glewDispatchCompute)
/// GLEW_FUN_EXPORT PFNGLDISPATCHCOMPUTEPROC __glewDispatchCompute
/// typedef void (GLAPIENTRY * PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDispatchCompute;
void glDispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z) {
  final _glDispatchCompute = glad__glDispatchCompute!
      .cast<NativeFunction<Void Function(Uint32 num_groups_x, Uint32 num_groups_y, Uint32 num_groups_z)>>()
      .asFunction<void Function(int num_groups_x, int num_groups_y, int num_groups_z)>();
  return _glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}

/// ```c
/// define glDispatchComputeIndirect GLEW_GET_FUN(__glewDispatchComputeIndirect)
/// GLEW_FUN_EXPORT PFNGLDISPATCHCOMPUTEINDIRECTPROC __glewDispatchComputeIndirect
/// typedef void (GLAPIENTRY * PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDispatchComputeIndirect;
void glDispatchComputeIndirect(int indirect) {
  final _glDispatchComputeIndirect = glad__glDispatchComputeIndirect!
      .cast<NativeFunction<Void Function(Uint64 indirect)>>()
      .asFunction<void Function(int indirect)>();
  return _glDispatchComputeIndirect(indirect);
}

/// ------------------- GL_ARB_compute_variable_group_size ------------------
/// ```c
/// define glDispatchComputeGroupSizeARB GLEW_GET_FUN(__glewDispatchComputeGroupSizeARB)
/// GLEW_FUN_EXPORT PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC __glewDispatchComputeGroupSizeARB
/// typedef void (GLAPIENTRY * PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDispatchComputeGroupSizeARB;
void glDispatchComputeGroupSizeARB(int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z) {
  final _glDispatchComputeGroupSizeARB = glad__glDispatchComputeGroupSizeARB!
      .cast<NativeFunction<Void Function(Uint32 num_groups_x, Uint32 num_groups_y, Uint32 num_groups_z, Uint32 group_size_x, Uint32 group_size_y, Uint32 group_size_z)>>()
      .asFunction<void Function(int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z)>();
  return _glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

/// --------------------------- GL_ARB_copy_buffer --------------------------
/// ```c
/// define glCopyBufferSubData GLEW_GET_FUN(__glewCopyBufferSubData)
/// GLEW_FUN_EXPORT PFNGLCOPYBUFFERSUBDATAPROC __glewCopyBufferSubData
/// typedef void (GLAPIENTRY * PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyBufferSubData;
void glCopyBufferSubData(int readtarget, int writetarget, int readoffset, int writeoffset, int size) {
  final _glCopyBufferSubData = glad__glCopyBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 readtarget, Uint32 writetarget, Uint64 readoffset, Uint64 writeoffset, Uint64 size)>>()
      .asFunction<void Function(int readtarget, int writetarget, int readoffset, int writeoffset, int size)>();
  return _glCopyBufferSubData(readtarget, writetarget, readoffset, writeoffset, size);
}

/// --------------------------- GL_ARB_copy_image ---------------------------
/// ```c
/// define glCopyImageSubData GLEW_GET_FUN(__glewCopyImageSubData)
/// GLEW_FUN_EXPORT PFNGLCOPYIMAGESUBDATAPROC __glewCopyImageSubData
/// typedef void (GLAPIENTRY * PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyImageSubData;
void glCopyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
  final _glCopyImageSubData = glad__glCopyImageSubData!
      .cast<NativeFunction<Void Function(Uint32 srcName, Uint32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Uint32 dstName, Uint32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Uint32 srcWidth, Uint32 srcHeight, Uint32 srcDepth)>>()
      .asFunction<void Function(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)>();
  return _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

/// -------------------------- GL_ARB_debug_output --------------------------
/// ```c
/// typedef void (GLAPIENTRY *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__GLDEBUGPROCARB;
void GLDEBUGPROCARB(int source, int type, int id, int severity, int length, String message, Pointer<Void>? userParam) {
  final _GLDEBUGPROCARB = glad__GLDEBUGPROCARB!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 type, Uint32 id, Uint32 severity, Uint32 length, Pointer<Utf8>? message, Pointer<Void>? userParam)>>()
      .asFunction<void Function(int source, int type, int id, int severity, int length, Pointer<Utf8>? message, Pointer<Void>? userParam)>();
  final _messagePointer = message.toNativeUtf8();
  final _result = _GLDEBUGPROCARB(source, type, id, severity, length, _messagePointer, userParam);
  calloc.free(_messagePointer);
  return _result;
}

/// ```c
/// define glDebugMessageCallbackARB GLEW_GET_FUN(__glewDebugMessageCallbackARB)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGECALLBACKARBPROC __glewDebugMessageCallbackARB
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageCallbackARB;
void glDebugMessageCallbackARB(Pointer<Void>? callback, Pointer<Void>? userParam) {
  final _glDebugMessageCallbackARB = glad__glDebugMessageCallbackARB!
      .cast<NativeFunction<Void Function(Pointer<Void>? callback, Pointer<Void>? userParam)>>()
      .asFunction<void Function(Pointer<Void>? callback, Pointer<Void>? userParam)>();
  return _glDebugMessageCallbackARB(callback, userParam);
}

/// ```c
/// define glDebugMessageControlARB GLEW_GET_FUN(__glewDebugMessageControlARB)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGECONTROLARBPROC __glewDebugMessageControlARB
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageControlARB;
void glDebugMessageControlARB(int source, int type, int severity, int count, Pointer<Uint32>? ids, int enabled) {
  final _glDebugMessageControlARB = glad__glDebugMessageControlARB!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 type, Uint32 severity, Uint32 count, Pointer<Uint32>? ids, Uint8 enabled)>>()
      .asFunction<void Function(int source, int type, int severity, int count, Pointer<Uint32>? ids, int enabled)>();
  return _glDebugMessageControlARB(source, type, severity, count, ids, enabled);
}

/// ```c
/// define glDebugMessageInsertARB GLEW_GET_FUN(__glewDebugMessageInsertARB)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGEINSERTARBPROC __glewDebugMessageInsertARB
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageInsertARB;
void glDebugMessageInsertARB(int source, int type, int id, int severity, int length, String buf) {
  final _glDebugMessageInsertARB = glad__glDebugMessageInsertARB!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 type, Uint32 id, Uint32 severity, Uint32 length, Pointer<Utf8>? buf)>>()
      .asFunction<void Function(int source, int type, int id, int severity, int length, Pointer<Utf8>? buf)>();
  final _bufPointer = buf.toNativeUtf8();
  final _result = _glDebugMessageInsertARB(source, type, id, severity, length, _bufPointer);
  calloc.free(_bufPointer);
  return _result;
}

/// ```c
/// define glGetDebugMessageLogARB GLEW_GET_FUN(__glewGetDebugMessageLogARB)
/// GLEW_FUN_EXPORT PFNGLGETDEBUGMESSAGELOGARBPROC __glewGetDebugMessageLogARB
/// typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDebugMessageLogARB;
int glGetDebugMessageLogARB(int count, int bufSize, Pointer<Uint32>? sources, Pointer<Uint32>? types, Pointer<Uint32>? ids, Pointer<Uint32>? severities, Pointer<Uint32>? lengths, Pointer<Int8>? messageLog) {
  final _glGetDebugMessageLogARB = glad__glGetDebugMessageLogARB!
      .cast<NativeFunction<Uint32 Function(Uint32 count, Uint32 bufSize, Pointer<Uint32>? sources, Pointer<Uint32>? types, Pointer<Uint32>? ids, Pointer<Uint32>? severities, Pointer<Uint32>? lengths, Pointer<Int8>? messageLog)>>()
      .asFunction<int Function(int count, int bufSize, Pointer<Uint32>? sources, Pointer<Uint32>? types, Pointer<Uint32>? ids, Pointer<Uint32>? severities, Pointer<Uint32>? lengths, Pointer<Int8>? messageLog)>();
  return _glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

/// ----------------------- GL_ARB_direct_state_access ----------------------
/// ```c
/// define glBindTextureUnit GLEW_GET_FUN(__glewBindTextureUnit)
/// GLEW_FUN_EXPORT PFNGLBINDTEXTUREUNITPROC __glewBindTextureUnit
/// typedef void (GLAPIENTRY * PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTextureUnit;
void glBindTextureUnit(int unit, int texture) {
  final _glBindTextureUnit = glad__glBindTextureUnit!
      .cast<NativeFunction<Void Function(Uint32 unit, Uint32 texture)>>()
      .asFunction<void Function(int unit, int texture)>();
  return _glBindTextureUnit(unit, texture);
}

/// ```c
/// define glBlitNamedFramebuffer GLEW_GET_FUN(__glewBlitNamedFramebuffer)
/// GLEW_FUN_EXPORT PFNGLBLITNAMEDFRAMEBUFFERPROC __glewBlitNamedFramebuffer
/// typedef void (GLAPIENTRY * PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlitNamedFramebuffer;
void glBlitNamedFramebuffer(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
  final _glBlitNamedFramebuffer = glad__glBlitNamedFramebuffer!
      .cast<NativeFunction<Void Function(Uint32 readFramebuffer, Uint32 drawFramebuffer, Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Uint32 mask, Uint32 filter)>>()
      .asFunction<void Function(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)>();
  return _glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/// ```c
/// define glCheckNamedFramebufferStatus GLEW_GET_FUN(__glewCheckNamedFramebufferStatus)
/// GLEW_FUN_EXPORT PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC __glewCheckNamedFramebufferStatus
/// typedef GLenum (GLAPIENTRY * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCheckNamedFramebufferStatus;
int glCheckNamedFramebufferStatus(int framebuffer, int target) {
  final _glCheckNamedFramebufferStatus = glad__glCheckNamedFramebufferStatus!
      .cast<NativeFunction<Uint32 Function(Uint32 framebuffer, Uint32 target)>>()
      .asFunction<int Function(int framebuffer, int target)>();
  return _glCheckNamedFramebufferStatus(framebuffer, target);
}

/// ```c
/// define glClearNamedBufferData GLEW_GET_FUN(__glewClearNamedBufferData)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDBUFFERDATAPROC __glewClearNamedBufferData
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedBufferData;
void glClearNamedBufferData(int buffer, int internalformat, int format, int type, Pointer<Void>? data) {
  final _glClearNamedBufferData = glad__glClearNamedBufferData!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 internalformat, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int internalformat, int format, int type, Pointer<Void>? data)>();
  return _glClearNamedBufferData(buffer, internalformat, format, type, data);
}

/// ```c
/// define glClearNamedBufferSubData GLEW_GET_FUN(__glewClearNamedBufferSubData)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDBUFFERSUBDATAPROC __glewClearNamedBufferSubData
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedBufferSubData;
void glClearNamedBufferSubData(int buffer, int internalformat, int offset, int size, int format, int type, Pointer<Void>? data) {
  final _glClearNamedBufferSubData = glad__glClearNamedBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 internalformat, Uint64 offset, Uint64 size, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int internalformat, int offset, int size, int format, int type, Pointer<Void>? data)>();
  return _glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
}

/// ```c
/// define glClearNamedFramebufferfi GLEW_GET_FUN(__glewClearNamedFramebufferfi)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDFRAMEBUFFERFIPROC __glewClearNamedFramebufferfi
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedFramebufferfi;
void glClearNamedFramebufferfi(int framebuffer, int buffer, int drawbuffer, double depth, int stencil) {
  final _glClearNamedFramebufferfi = glad__glClearNamedFramebufferfi!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 buffer, Int32 drawbuffer, Float depth, Int32 stencil)>>()
      .asFunction<void Function(int framebuffer, int buffer, int drawbuffer, double depth, int stencil)>();
  return _glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}

/// ```c
/// define glClearNamedFramebufferfv GLEW_GET_FUN(__glewClearNamedFramebufferfv)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDFRAMEBUFFERFVPROC __glewClearNamedFramebufferfv
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedFramebufferfv;
void glClearNamedFramebufferfv(int framebuffer, int buffer, int drawbuffer, Pointer<Float>? value) {
  final _glClearNamedFramebufferfv = glad__glClearNamedFramebufferfv!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 buffer, Int32 drawbuffer, Pointer<Float>? value)>>()
      .asFunction<void Function(int framebuffer, int buffer, int drawbuffer, Pointer<Float>? value)>();
  return _glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}

/// ```c
/// define glClearNamedFramebufferiv GLEW_GET_FUN(__glewClearNamedFramebufferiv)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDFRAMEBUFFERIVPROC __glewClearNamedFramebufferiv
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedFramebufferiv;
void glClearNamedFramebufferiv(int framebuffer, int buffer, int drawbuffer, Pointer<Int32>? value) {
  final _glClearNamedFramebufferiv = glad__glClearNamedFramebufferiv!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 buffer, Int32 drawbuffer, Pointer<Int32>? value)>>()
      .asFunction<void Function(int framebuffer, int buffer, int drawbuffer, Pointer<Int32>? value)>();
  return _glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}

/// ```c
/// define glClearNamedFramebufferuiv GLEW_GET_FUN(__glewClearNamedFramebufferuiv)
/// GLEW_FUN_EXPORT PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC __glewClearNamedFramebufferuiv
/// typedef void (GLAPIENTRY * PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearNamedFramebufferuiv;
void glClearNamedFramebufferuiv(int framebuffer, int buffer, int drawbuffer, Pointer<Uint32>? value) {
  final _glClearNamedFramebufferuiv = glad__glClearNamedFramebufferuiv!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 buffer, Int32 drawbuffer, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int framebuffer, int buffer, int drawbuffer, Pointer<Uint32>? value)>();
  return _glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}

/// ```c
/// define glCompressedTextureSubImage1D GLEW_GET_FUN(__glewCompressedTextureSubImage1D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC __glewCompressedTextureSubImage1D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureSubImage1D;
void glCompressedTextureSubImage1D(int texture, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureSubImage1D = glad__glCompressedTextureSubImage1D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}

/// ```c
/// define glCompressedTextureSubImage2D GLEW_GET_FUN(__glewCompressedTextureSubImage2D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC __glewCompressedTextureSubImage2D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureSubImage2D;
void glCompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureSubImage2D = glad__glCompressedTextureSubImage2D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}

/// ```c
/// define glCompressedTextureSubImage3D GLEW_GET_FUN(__glewCompressedTextureSubImage3D)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC __glewCompressedTextureSubImage3D
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureSubImage3D;
void glCompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureSubImage3D = glad__glCompressedTextureSubImage3D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

/// ```c
/// define glCopyNamedBufferSubData GLEW_GET_FUN(__glewCopyNamedBufferSubData)
/// GLEW_FUN_EXPORT PFNGLCOPYNAMEDBUFFERSUBDATAPROC __glewCopyNamedBufferSubData
/// typedef void (GLAPIENTRY * PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyNamedBufferSubData;
void glCopyNamedBufferSubData(int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size) {
  final _glCopyNamedBufferSubData = glad__glCopyNamedBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 readBuffer, Uint32 writeBuffer, Uint64 readOffset, Uint64 writeOffset, Uint64 size)>>()
      .asFunction<void Function(int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size)>();
  return _glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

/// ```c
/// define glCopyTextureSubImage1D GLEW_GET_FUN(__glewCopyTextureSubImage1D)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURESUBIMAGE1DPROC __glewCopyTextureSubImage1D
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureSubImage1D;
void glCopyTextureSubImage1D(int texture, int level, int xoffset, int x, int y, int width) {
  final _glCopyTextureSubImage1D = glad__glCopyTextureSubImage1D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int x, int y, int width)>();
  return _glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}

/// ```c
/// define glCopyTextureSubImage2D GLEW_GET_FUN(__glewCopyTextureSubImage2D)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURESUBIMAGE2DPROC __glewCopyTextureSubImage2D
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureSubImage2D;
void glCopyTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
  final _glCopyTextureSubImage2D = glad__glCopyTextureSubImage2D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)>();
  return _glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}

/// ```c
/// define glCopyTextureSubImage3D GLEW_GET_FUN(__glewCopyTextureSubImage3D)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURESUBIMAGE3DPROC __glewCopyTextureSubImage3D
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureSubImage3D;
void glCopyTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
  final _glCopyTextureSubImage3D = glad__glCopyTextureSubImage3D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)>();
  return _glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/// ```c
/// define glCreateBuffers GLEW_GET_FUN(__glewCreateBuffers)
/// GLEW_FUN_EXPORT PFNGLCREATEBUFFERSPROC __glewCreateBuffers
/// typedef void (GLAPIENTRY * PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint* buffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateBuffers;
void glCreateBuffers(int n, Pointer<Uint32>? buffers) {
  final _glCreateBuffers = glad__glCreateBuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? buffers)>();
  return _glCreateBuffers(n, buffers);
}

/// ```c
/// define glCreateFramebuffers GLEW_GET_FUN(__glewCreateFramebuffers)
/// GLEW_FUN_EXPORT PFNGLCREATEFRAMEBUFFERSPROC __glewCreateFramebuffers
/// typedef void (GLAPIENTRY * PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateFramebuffers;
void glCreateFramebuffers(int n, Pointer<Uint32>? framebuffers) {
  final _glCreateFramebuffers = glad__glCreateFramebuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? framebuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? framebuffers)>();
  return _glCreateFramebuffers(n, framebuffers);
}

/// ```c
/// define glCreateProgramPipelines GLEW_GET_FUN(__glewCreateProgramPipelines)
/// GLEW_FUN_EXPORT PFNGLCREATEPROGRAMPIPELINESPROC __glewCreateProgramPipelines
/// typedef void (GLAPIENTRY * PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint* pipelines)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateProgramPipelines;
void glCreateProgramPipelines(int n, Pointer<Uint32>? pipelines) {
  final _glCreateProgramPipelines = glad__glCreateProgramPipelines!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? pipelines)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? pipelines)>();
  return _glCreateProgramPipelines(n, pipelines);
}

/// ```c
/// define glCreateQueries GLEW_GET_FUN(__glewCreateQueries)
/// GLEW_FUN_EXPORT PFNGLCREATEQUERIESPROC __glewCreateQueries
/// typedef void (GLAPIENTRY * PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateQueries;
void glCreateQueries(int target, int n, Pointer<Uint32>? ids) {
  final _glCreateQueries = glad__glCreateQueries!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int target, int n, Pointer<Uint32>? ids)>();
  return _glCreateQueries(target, n, ids);
}

/// ```c
/// define glCreateRenderbuffers GLEW_GET_FUN(__glewCreateRenderbuffers)
/// GLEW_FUN_EXPORT PFNGLCREATERENDERBUFFERSPROC __glewCreateRenderbuffers
/// typedef void (GLAPIENTRY * PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateRenderbuffers;
void glCreateRenderbuffers(int n, Pointer<Uint32>? renderbuffers) {
  final _glCreateRenderbuffers = glad__glCreateRenderbuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? renderbuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? renderbuffers)>();
  return _glCreateRenderbuffers(n, renderbuffers);
}

/// ```c
/// define glCreateSamplers GLEW_GET_FUN(__glewCreateSamplers)
/// GLEW_FUN_EXPORT PFNGLCREATESAMPLERSPROC __glewCreateSamplers
/// typedef void (GLAPIENTRY * PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint* samplers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateSamplers;
void glCreateSamplers(int n, Pointer<Uint32>? samplers) {
  final _glCreateSamplers = glad__glCreateSamplers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? samplers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? samplers)>();
  return _glCreateSamplers(n, samplers);
}

/// ```c
/// define glCreateTextures GLEW_GET_FUN(__glewCreateTextures)
/// GLEW_FUN_EXPORT PFNGLCREATETEXTURESPROC __glewCreateTextures
/// typedef void (GLAPIENTRY * PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint* textures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateTextures;
void glCreateTextures(int target, int n, Pointer<Uint32>? textures) {
  final _glCreateTextures = glad__glCreateTextures!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 n, Pointer<Uint32>? textures)>>()
      .asFunction<void Function(int target, int n, Pointer<Uint32>? textures)>();
  return _glCreateTextures(target, n, textures);
}

/// ```c
/// define glCreateTransformFeedbacks GLEW_GET_FUN(__glewCreateTransformFeedbacks)
/// GLEW_FUN_EXPORT PFNGLCREATETRANSFORMFEEDBACKSPROC __glewCreateTransformFeedbacks
/// typedef void (GLAPIENTRY * PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateTransformFeedbacks;
void glCreateTransformFeedbacks(int n, Pointer<Uint32>? ids) {
  final _glCreateTransformFeedbacks = glad__glCreateTransformFeedbacks!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glCreateTransformFeedbacks(n, ids);
}

/// ```c
/// define glCreateVertexArrays GLEW_GET_FUN(__glewCreateVertexArrays)
/// GLEW_FUN_EXPORT PFNGLCREATEVERTEXARRAYSPROC __glewCreateVertexArrays
/// typedef void (GLAPIENTRY * PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateVertexArrays;
void glCreateVertexArrays(int n, Pointer<Uint32>? arrays) {
  final _glCreateVertexArrays = glad__glCreateVertexArrays!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glCreateVertexArrays(n, arrays);
}

/// ```c
/// define glDisableVertexArrayAttrib GLEW_GET_FUN(__glewDisableVertexArrayAttrib)
/// GLEW_FUN_EXPORT PFNGLDISABLEVERTEXARRAYATTRIBPROC __glewDisableVertexArrayAttrib
/// typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVertexArrayAttrib;
void glDisableVertexArrayAttrib(int vaobj, int index) {
  final _glDisableVertexArrayAttrib = glad__glDisableVertexArrayAttrib!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return _glDisableVertexArrayAttrib(vaobj, index);
}

/// ```c
/// define glEnableVertexArrayAttrib GLEW_GET_FUN(__glewEnableVertexArrayAttrib)
/// GLEW_FUN_EXPORT PFNGLENABLEVERTEXARRAYATTRIBPROC __glewEnableVertexArrayAttrib
/// typedef void (GLAPIENTRY * PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVertexArrayAttrib;
void glEnableVertexArrayAttrib(int vaobj, int index) {
  final _glEnableVertexArrayAttrib = glad__glEnableVertexArrayAttrib!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return _glEnableVertexArrayAttrib(vaobj, index);
}

/// ```c
/// define glFlushMappedNamedBufferRange GLEW_GET_FUN(__glewFlushMappedNamedBufferRange)
/// GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC __glewFlushMappedNamedBufferRange
/// typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushMappedNamedBufferRange;
void glFlushMappedNamedBufferRange(int buffer, int offset, int length) {
  final _glFlushMappedNamedBufferRange = glad__glFlushMappedNamedBufferRange!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 length)>>()
      .asFunction<void Function(int buffer, int offset, int length)>();
  return _glFlushMappedNamedBufferRange(buffer, offset, length);
}

/// ```c
/// define glGenerateTextureMipmap GLEW_GET_FUN(__glewGenerateTextureMipmap)
/// GLEW_FUN_EXPORT PFNGLGENERATETEXTUREMIPMAPPROC __glewGenerateTextureMipmap
/// typedef void (GLAPIENTRY * PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenerateTextureMipmap;
void glGenerateTextureMipmap(int texture) {
  final _glGenerateTextureMipmap = glad__glGenerateTextureMipmap!
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return _glGenerateTextureMipmap(texture);
}

/// ```c
/// define glGetCompressedTextureImage GLEW_GET_FUN(__glewGetCompressedTextureImage)
/// GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC __glewGetCompressedTextureImage
/// typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCompressedTextureImage;
void glGetCompressedTextureImage(int texture, int level, int bufSize, Pointer<Void>? pixels) {
  final _glGetCompressedTextureImage = glad__glGetCompressedTextureImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Uint32 bufSize, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int bufSize, Pointer<Void>? pixels)>();
  return _glGetCompressedTextureImage(texture, level, bufSize, pixels);
}

/// ```c
/// define glGetNamedBufferParameteri64v GLEW_GET_FUN(__glewGetNamedBufferParameteri64v)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERPARAMETERI64VPROC __glewGetNamedBufferParameteri64v
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferParameteri64v;
void glGetNamedBufferParameteri64v(int buffer, int pname, Pointer<Int64>? params) {
  final _glGetNamedBufferParameteri64v = glad__glGetNamedBufferParameteri64v!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Int64>? params)>();
  return _glGetNamedBufferParameteri64v(buffer, pname, params);
}

/// ```c
/// define glGetNamedBufferParameteriv GLEW_GET_FUN(__glewGetNamedBufferParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERPARAMETERIVPROC __glewGetNamedBufferParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferParameteriv;
void glGetNamedBufferParameteriv(int buffer, int pname, Pointer<Int32>? params) {
  final _glGetNamedBufferParameteriv = glad__glGetNamedBufferParameteriv!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Int32>? params)>();
  return _glGetNamedBufferParameteriv(buffer, pname, params);
}

/// ```c
/// define glGetNamedBufferPointerv GLEW_GET_FUN(__glewGetNamedBufferPointerv)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERPOINTERVPROC __glewGetNamedBufferPointerv
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferPointerv;
void glGetNamedBufferPointerv(int buffer, int pname, Pointer<Pointer<Void>>? params) {
  final _glGetNamedBufferPointerv = glad__glGetNamedBufferPointerv!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Pointer<Void>>? params)>();
  return _glGetNamedBufferPointerv(buffer, pname, params);
}

/// ```c
/// define glGetNamedBufferSubData GLEW_GET_FUN(__glewGetNamedBufferSubData)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERSUBDATAPROC __glewGetNamedBufferSubData
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferSubData;
void glGetNamedBufferSubData(int buffer, int offset, int size, Pointer<Void>? data) {
  final _glGetNamedBufferSubData = glad__glGetNamedBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int offset, int size, Pointer<Void>? data)>();
  return _glGetNamedBufferSubData(buffer, offset, size, data);
}

/// ```c
/// define glGetNamedFramebufferAttachmentParameteriv GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glewGetNamedFramebufferAttachmentParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedFramebufferAttachmentParameteriv;
void glGetNamedFramebufferAttachmentParameteriv(int framebuffer, int attachment, int pname, Pointer<Int32>? params) {
  final _glGetNamedFramebufferAttachmentParameteriv = glad__glGetNamedFramebufferAttachmentParameteriv!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int framebuffer, int attachment, int pname, Pointer<Int32>? params)>();
  return _glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}

/// ```c
/// define glGetNamedFramebufferParameteriv GLEW_GET_FUN(__glewGetNamedFramebufferParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC __glewGetNamedFramebufferParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedFramebufferParameteriv;
void glGetNamedFramebufferParameteriv(int framebuffer, int pname, Pointer<Int32>? param) {
  final _glGetNamedFramebufferParameteriv = glad__glGetNamedFramebufferParameteriv!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int framebuffer, int pname, Pointer<Int32>? param)>();
  return _glGetNamedFramebufferParameteriv(framebuffer, pname, param);
}

/// ```c
/// define glGetNamedRenderbufferParameteriv GLEW_GET_FUN(__glewGetNamedRenderbufferParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC __glewGetNamedRenderbufferParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedRenderbufferParameteriv;
void glGetNamedRenderbufferParameteriv(int renderbuffer, int pname, Pointer<Int32>? params) {
  final _glGetNamedRenderbufferParameteriv = glad__glGetNamedRenderbufferParameteriv!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int renderbuffer, int pname, Pointer<Int32>? params)>();
  return _glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}

/// ```c
/// define glGetQueryBufferObjecti64v GLEW_GET_FUN(__glewGetQueryBufferObjecti64v)
/// GLEW_FUN_EXPORT PFNGLGETQUERYBUFFEROBJECTI64VPROC __glewGetQueryBufferObjecti64v
/// typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryBufferObjecti64v;
void glGetQueryBufferObjecti64v(int id, int buffer, int pname, int offset) {
  final _glGetQueryBufferObjecti64v = glad__glGetQueryBufferObjecti64v!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 buffer, Uint32 pname, Uint64 offset)>>()
      .asFunction<void Function(int id, int buffer, int pname, int offset)>();
  return _glGetQueryBufferObjecti64v(id, buffer, pname, offset);
}

/// ```c
/// define glGetQueryBufferObjectiv GLEW_GET_FUN(__glewGetQueryBufferObjectiv)
/// GLEW_FUN_EXPORT PFNGLGETQUERYBUFFEROBJECTIVPROC __glewGetQueryBufferObjectiv
/// typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryBufferObjectiv;
void glGetQueryBufferObjectiv(int id, int buffer, int pname, int offset) {
  final _glGetQueryBufferObjectiv = glad__glGetQueryBufferObjectiv!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 buffer, Uint32 pname, Uint64 offset)>>()
      .asFunction<void Function(int id, int buffer, int pname, int offset)>();
  return _glGetQueryBufferObjectiv(id, buffer, pname, offset);
}

/// ```c
/// define glGetQueryBufferObjectui64v GLEW_GET_FUN(__glewGetQueryBufferObjectui64v)
/// GLEW_FUN_EXPORT PFNGLGETQUERYBUFFEROBJECTUI64VPROC __glewGetQueryBufferObjectui64v
/// typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryBufferObjectui64v;
void glGetQueryBufferObjectui64v(int id, int buffer, int pname, int offset) {
  final _glGetQueryBufferObjectui64v = glad__glGetQueryBufferObjectui64v!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 buffer, Uint32 pname, Uint64 offset)>>()
      .asFunction<void Function(int id, int buffer, int pname, int offset)>();
  return _glGetQueryBufferObjectui64v(id, buffer, pname, offset);
}

/// ```c
/// define glGetQueryBufferObjectuiv GLEW_GET_FUN(__glewGetQueryBufferObjectuiv)
/// GLEW_FUN_EXPORT PFNGLGETQUERYBUFFEROBJECTUIVPROC __glewGetQueryBufferObjectuiv
/// typedef void (GLAPIENTRY * PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryBufferObjectuiv;
void glGetQueryBufferObjectuiv(int id, int buffer, int pname, int offset) {
  final _glGetQueryBufferObjectuiv = glad__glGetQueryBufferObjectuiv!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 buffer, Uint32 pname, Uint64 offset)>>()
      .asFunction<void Function(int id, int buffer, int pname, int offset)>();
  return _glGetQueryBufferObjectuiv(id, buffer, pname, offset);
}

/// ```c
/// define glGetTextureImage GLEW_GET_FUN(__glewGetTextureImage)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREIMAGEPROC __glewGetTextureImage
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureImage;
void glGetTextureImage(int texture, int level, int format, int type, int bufSize, Pointer<Void>? pixels) {
  final _glGetTextureImage = glad__glGetTextureImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int format, int type, int bufSize, Pointer<Void>? pixels)>();
  return _glGetTextureImage(texture, level, format, type, bufSize, pixels);
}

/// ```c
/// define glGetTextureLevelParameterfv GLEW_GET_FUN(__glewGetTextureLevelParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURELEVELPARAMETERFVPROC __glewGetTextureLevelParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureLevelParameterfv;
void glGetTextureLevelParameterfv(int texture, int level, int pname, Pointer<Float>? params) {
  final _glGetTextureLevelParameterfv = glad__glGetTextureLevelParameterfv!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texture, int level, int pname, Pointer<Float>? params)>();
  return _glGetTextureLevelParameterfv(texture, level, pname, params);
}

/// ```c
/// define glGetTextureLevelParameteriv GLEW_GET_FUN(__glewGetTextureLevelParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURELEVELPARAMETERIVPROC __glewGetTextureLevelParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureLevelParameteriv;
void glGetTextureLevelParameteriv(int texture, int level, int pname, Pointer<Int32>? params) {
  final _glGetTextureLevelParameteriv = glad__glGetTextureLevelParameteriv!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int level, int pname, Pointer<Int32>? params)>();
  return _glGetTextureLevelParameteriv(texture, level, pname, params);
}

/// ```c
/// define glGetTextureParameterIiv GLEW_GET_FUN(__glewGetTextureParameterIiv)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERIIVPROC __glewGetTextureParameterIiv
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterIiv;
void glGetTextureParameterIiv(int texture, int pname, Pointer<Int32>? params) {
  final _glGetTextureParameterIiv = glad__glGetTextureParameterIiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Int32>? params)>();
  return _glGetTextureParameterIiv(texture, pname, params);
}

/// ```c
/// define glGetTextureParameterIuiv GLEW_GET_FUN(__glewGetTextureParameterIuiv)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERIUIVPROC __glewGetTextureParameterIuiv
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterIuiv;
void glGetTextureParameterIuiv(int texture, int pname, Pointer<Uint32>? params) {
  final _glGetTextureParameterIuiv = glad__glGetTextureParameterIuiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Uint32>? params)>();
  return _glGetTextureParameterIuiv(texture, pname, params);
}

/// ```c
/// define glGetTextureParameterfv GLEW_GET_FUN(__glewGetTextureParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERFVPROC __glewGetTextureParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterfv;
void glGetTextureParameterfv(int texture, int pname, Pointer<Float>? params) {
  final _glGetTextureParameterfv = glad__glGetTextureParameterfv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Float>? params)>();
  return _glGetTextureParameterfv(texture, pname, params);
}

/// ```c
/// define glGetTextureParameteriv GLEW_GET_FUN(__glewGetTextureParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERIVPROC __glewGetTextureParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameteriv;
void glGetTextureParameteriv(int texture, int pname, Pointer<Int32>? params) {
  final _glGetTextureParameteriv = glad__glGetTextureParameteriv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Int32>? params)>();
  return _glGetTextureParameteriv(texture, pname, params);
}

/// ```c
/// define glGetTransformFeedbacki64_v GLEW_GET_FUN(__glewGetTransformFeedbacki64_v)
/// GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKI64_VPROC __glewGetTransformFeedbacki64_v
/// typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTransformFeedbacki64_v;
void glGetTransformFeedbacki64_v(int xfb, int pname, int index, Pointer<Int64>? param) {
  final _glGetTransformFeedbacki64_v = glad__glGetTransformFeedbacki64_v!
      .cast<NativeFunction<Void Function(Uint32 xfb, Uint32 pname, Uint32 index, Pointer<Int64>? param)>>()
      .asFunction<void Function(int xfb, int pname, int index, Pointer<Int64>? param)>();
  return _glGetTransformFeedbacki64_v(xfb, pname, index, param);
}

/// ```c
/// define glGetTransformFeedbacki_v GLEW_GET_FUN(__glewGetTransformFeedbacki_v)
/// GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKI_VPROC __glewGetTransformFeedbacki_v
/// typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTransformFeedbacki_v;
void glGetTransformFeedbacki_v(int xfb, int pname, int index, Pointer<Int32>? param) {
  final _glGetTransformFeedbacki_v = glad__glGetTransformFeedbacki_v!
      .cast<NativeFunction<Void Function(Uint32 xfb, Uint32 pname, Uint32 index, Pointer<Int32>? param)>>()
      .asFunction<void Function(int xfb, int pname, int index, Pointer<Int32>? param)>();
  return _glGetTransformFeedbacki_v(xfb, pname, index, param);
}

/// ```c
/// define glGetTransformFeedbackiv GLEW_GET_FUN(__glewGetTransformFeedbackiv)
/// GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKIVPROC __glewGetTransformFeedbackiv
/// typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTransformFeedbackiv;
void glGetTransformFeedbackiv(int xfb, int pname, Pointer<Int32>? param) {
  final _glGetTransformFeedbackiv = glad__glGetTransformFeedbackiv!
      .cast<NativeFunction<Void Function(Uint32 xfb, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int xfb, int pname, Pointer<Int32>? param)>();
  return _glGetTransformFeedbackiv(xfb, pname, param);
}

/// ```c
/// define glGetVertexArrayIndexed64iv GLEW_GET_FUN(__glewGetVertexArrayIndexed64iv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYINDEXED64IVPROC __glewGetVertexArrayIndexed64iv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayIndexed64iv;
void glGetVertexArrayIndexed64iv(int vaobj, int index, int pname, Pointer<Int64>? param) {
  final _glGetVertexArrayIndexed64iv = glad__glGetVertexArrayIndexed64iv!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index, Uint32 pname, Pointer<Int64>? param)>>()
      .asFunction<void Function(int vaobj, int index, int pname, Pointer<Int64>? param)>();
  return _glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
}

/// ```c
/// define glGetVertexArrayIndexediv GLEW_GET_FUN(__glewGetVertexArrayIndexediv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYINDEXEDIVPROC __glewGetVertexArrayIndexediv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayIndexediv;
void glGetVertexArrayIndexediv(int vaobj, int index, int pname, Pointer<Int32>? param) {
  final _glGetVertexArrayIndexediv = glad__glGetVertexArrayIndexediv!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int vaobj, int index, int pname, Pointer<Int32>? param)>();
  return _glGetVertexArrayIndexediv(vaobj, index, pname, param);
}

/// ```c
/// define glGetVertexArrayiv GLEW_GET_FUN(__glewGetVertexArrayiv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYIVPROC __glewGetVertexArrayiv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayiv;
void glGetVertexArrayiv(int vaobj, int pname, Pointer<Int32>? param) {
  final _glGetVertexArrayiv = glad__glGetVertexArrayiv!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int vaobj, int pname, Pointer<Int32>? param)>();
  return _glGetVertexArrayiv(vaobj, pname, param);
}

/// ```c
/// define glInvalidateNamedFramebufferData GLEW_GET_FUN(__glewInvalidateNamedFramebufferData)
/// GLEW_FUN_EXPORT PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC __glewInvalidateNamedFramebufferData
/// typedef void (GLAPIENTRY * PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateNamedFramebufferData;
void glInvalidateNamedFramebufferData(int framebuffer, int numAttachments, Pointer<Uint32>? attachments) {
  final _glInvalidateNamedFramebufferData = glad__glInvalidateNamedFramebufferData!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 numAttachments, Pointer<Uint32>? attachments)>>()
      .asFunction<void Function(int framebuffer, int numAttachments, Pointer<Uint32>? attachments)>();
  return _glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}

/// ```c
/// define glInvalidateNamedFramebufferSubData GLEW_GET_FUN(__glewInvalidateNamedFramebufferSubData)
/// GLEW_FUN_EXPORT PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC __glewInvalidateNamedFramebufferSubData
/// typedef void (GLAPIENTRY * PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateNamedFramebufferSubData;
void glInvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, Pointer<Uint32>? attachments, int x, int y, int width, int height) {
  final _glInvalidateNamedFramebufferSubData = glad__glInvalidateNamedFramebufferSubData!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 numAttachments, Pointer<Uint32>? attachments, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int framebuffer, int numAttachments, Pointer<Uint32>? attachments, int x, int y, int width, int height)>();
  return _glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}

/// ```c
/// define glMapNamedBuffer GLEW_GET_FUN(__glewMapNamedBuffer)
/// GLEW_FUN_EXPORT PFNGLMAPNAMEDBUFFERPROC __glewMapNamedBuffer
/// typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapNamedBuffer;
Pointer<Void>? glMapNamedBuffer(int buffer, int access) {
  final _glMapNamedBuffer = glad__glMapNamedBuffer!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 buffer, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int buffer, int access)>();
  return _glMapNamedBuffer(buffer, access);
}

/// ```c
/// define glMapNamedBufferRange GLEW_GET_FUN(__glewMapNamedBufferRange)
/// GLEW_FUN_EXPORT PFNGLMAPNAMEDBUFFERRANGEPROC __glewMapNamedBufferRange
/// typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapNamedBufferRange;
Pointer<Void>? glMapNamedBufferRange(int buffer, int offset, int length, int access) {
  final _glMapNamedBufferRange = glad__glMapNamedBufferRange!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 buffer, Uint64 offset, Uint64 length, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int buffer, int offset, int length, int access)>();
  return _glMapNamedBufferRange(buffer, offset, length, access);
}

/// ```c
/// define glNamedBufferData GLEW_GET_FUN(__glewNamedBufferData)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERDATAPROC __glewNamedBufferData
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferData;
void glNamedBufferData(int buffer, int size, Pointer<Void>? data, int usage) {
  final _glNamedBufferData = glad__glNamedBufferData!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 size, Pointer<Void>? data, Uint32 usage)>>()
      .asFunction<void Function(int buffer, int size, Pointer<Void>? data, int usage)>();
  return _glNamedBufferData(buffer, size, data, usage);
}

/// ```c
/// define glNamedBufferStorage GLEW_GET_FUN(__glewNamedBufferStorage)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERSTORAGEPROC __glewNamedBufferStorage
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferStorage;
void glNamedBufferStorage(int buffer, int size, Pointer<Void>? data, int flags) {
  final _glNamedBufferStorage = glad__glNamedBufferStorage!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 size, Pointer<Void>? data, Uint32 flags)>>()
      .asFunction<void Function(int buffer, int size, Pointer<Void>? data, int flags)>();
  return _glNamedBufferStorage(buffer, size, data, flags);
}

/// ```c
/// define glNamedBufferSubData GLEW_GET_FUN(__glewNamedBufferSubData)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERSUBDATAPROC __glewNamedBufferSubData
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferSubData;
void glNamedBufferSubData(int buffer, int offset, int size, Pointer<Void>? data) {
  final _glNamedBufferSubData = glad__glNamedBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int offset, int size, Pointer<Void>? data)>();
  return _glNamedBufferSubData(buffer, offset, size, data);
}

/// ```c
/// define glNamedFramebufferDrawBuffer GLEW_GET_FUN(__glewNamedFramebufferDrawBuffer)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC __glewNamedFramebufferDrawBuffer
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferDrawBuffer;
void glNamedFramebufferDrawBuffer(int framebuffer, int mode) {
  final _glNamedFramebufferDrawBuffer = glad__glNamedFramebufferDrawBuffer!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 mode)>>()
      .asFunction<void Function(int framebuffer, int mode)>();
  return _glNamedFramebufferDrawBuffer(framebuffer, mode);
}

/// ```c
/// define glNamedFramebufferDrawBuffers GLEW_GET_FUN(__glewNamedFramebufferDrawBuffers)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC __glewNamedFramebufferDrawBuffers
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferDrawBuffers;
void glNamedFramebufferDrawBuffers(int framebuffer, int n, Pointer<Uint32>? bufs) {
  final _glNamedFramebufferDrawBuffers = glad__glNamedFramebufferDrawBuffers!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int framebuffer, int n, Pointer<Uint32>? bufs)>();
  return _glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
}

/// ```c
/// define glNamedFramebufferParameteri GLEW_GET_FUN(__glewNamedFramebufferParameteri)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC __glewNamedFramebufferParameteri
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferParameteri;
void glNamedFramebufferParameteri(int framebuffer, int pname, int param) {
  final _glNamedFramebufferParameteri = glad__glNamedFramebufferParameteri!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int framebuffer, int pname, int param)>();
  return _glNamedFramebufferParameteri(framebuffer, pname, param);
}

/// ```c
/// define glNamedFramebufferReadBuffer GLEW_GET_FUN(__glewNamedFramebufferReadBuffer)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC __glewNamedFramebufferReadBuffer
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferReadBuffer;
void glNamedFramebufferReadBuffer(int framebuffer, int mode) {
  final _glNamedFramebufferReadBuffer = glad__glNamedFramebufferReadBuffer!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 mode)>>()
      .asFunction<void Function(int framebuffer, int mode)>();
  return _glNamedFramebufferReadBuffer(framebuffer, mode);
}

/// ```c
/// define glNamedFramebufferRenderbuffer GLEW_GET_FUN(__glewNamedFramebufferRenderbuffer)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC __glewNamedFramebufferRenderbuffer
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferRenderbuffer;
void glNamedFramebufferRenderbuffer(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer) {
  final _glNamedFramebufferRenderbuffer = glad__glNamedFramebufferRenderbuffer!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 renderbuffertarget, Uint32 renderbuffer)>>()
      .asFunction<void Function(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer)>();
  return _glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

/// ```c
/// define glNamedFramebufferTexture GLEW_GET_FUN(__glewNamedFramebufferTexture)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTUREPROC __glewNamedFramebufferTexture
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTexture;
void glNamedFramebufferTexture(int framebuffer, int attachment, int texture, int level) {
  final _glNamedFramebufferTexture = glad__glNamedFramebufferTexture!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int framebuffer, int attachment, int texture, int level)>();
  return _glNamedFramebufferTexture(framebuffer, attachment, texture, level);
}

/// ```c
/// define glNamedFramebufferTextureLayer GLEW_GET_FUN(__glewNamedFramebufferTextureLayer)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC __glewNamedFramebufferTextureLayer
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTextureLayer;
void glNamedFramebufferTextureLayer(int framebuffer, int attachment, int texture, int level, int layer) {
  final _glNamedFramebufferTextureLayer = glad__glNamedFramebufferTextureLayer!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int framebuffer, int attachment, int texture, int level, int layer)>();
  return _glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}

/// ```c
/// define glNamedRenderbufferStorage GLEW_GET_FUN(__glewNamedRenderbufferStorage)
/// GLEW_FUN_EXPORT PFNGLNAMEDRENDERBUFFERSTORAGEPROC __glewNamedRenderbufferStorage
/// typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedRenderbufferStorage;
void glNamedRenderbufferStorage(int renderbuffer, int internalformat, int width, int height) {
  final _glNamedRenderbufferStorage = glad__glNamedRenderbufferStorage!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int renderbuffer, int internalformat, int width, int height)>();
  return _glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}

/// ```c
/// define glNamedRenderbufferStorageMultisample GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisample)
/// GLEW_FUN_EXPORT PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC __glewNamedRenderbufferStorageMultisample
/// typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedRenderbufferStorageMultisample;
void glNamedRenderbufferStorageMultisample(int renderbuffer, int samples, int internalformat, int width, int height) {
  final _glNamedRenderbufferStorageMultisample = glad__glNamedRenderbufferStorageMultisample!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int renderbuffer, int samples, int internalformat, int width, int height)>();
  return _glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}

/// ```c
/// define glTextureBuffer GLEW_GET_FUN(__glewTextureBuffer)
/// GLEW_FUN_EXPORT PFNGLTEXTUREBUFFERPROC __glewTextureBuffer
/// typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureBuffer;
void glTextureBuffer(int texture, int internalformat, int buffer) {
  final _glTextureBuffer = glad__glTextureBuffer!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 internalformat, Uint32 buffer)>>()
      .asFunction<void Function(int texture, int internalformat, int buffer)>();
  return _glTextureBuffer(texture, internalformat, buffer);
}

/// ```c
/// define glTextureBufferRange GLEW_GET_FUN(__glewTextureBufferRange)
/// GLEW_FUN_EXPORT PFNGLTEXTUREBUFFERRANGEPROC __glewTextureBufferRange
/// typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureBufferRange;
void glTextureBufferRange(int texture, int internalformat, int buffer, int offset, int size) {
  final _glTextureBufferRange = glad__glTextureBufferRange!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 internalformat, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int texture, int internalformat, int buffer, int offset, int size)>();
  return _glTextureBufferRange(texture, internalformat, buffer, offset, size);
}

/// ```c
/// define glTextureParameterIiv GLEW_GET_FUN(__glewTextureParameterIiv)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIIVPROC __glewTextureParameterIiv
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterIiv;
void glTextureParameterIiv(int texture, int pname, Pointer<Int32>? params) {
  final _glTextureParameterIiv = glad__glTextureParameterIiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Int32>? params)>();
  return _glTextureParameterIiv(texture, pname, params);
}

/// ```c
/// define glTextureParameterIuiv GLEW_GET_FUN(__glewTextureParameterIuiv)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIUIVPROC __glewTextureParameterIuiv
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterIuiv;
void glTextureParameterIuiv(int texture, int pname, Pointer<Uint32>? params) {
  final _glTextureParameterIuiv = glad__glTextureParameterIuiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Uint32>? params)>();
  return _glTextureParameterIuiv(texture, pname, params);
}

/// ```c
/// define glTextureParameterf GLEW_GET_FUN(__glewTextureParameterf)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERFPROC __glewTextureParameterf
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterf;
void glTextureParameterf(int texture, int pname, double param) {
  final _glTextureParameterf = glad__glTextureParameterf!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Float param)>>()
      .asFunction<void Function(int texture, int pname, double param)>();
  return _glTextureParameterf(texture, pname, param);
}

/// ```c
/// define glTextureParameterfv GLEW_GET_FUN(__glewTextureParameterfv)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERFVPROC __glewTextureParameterfv
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterfv;
void glTextureParameterfv(int texture, int pname, Pointer<Float>? param) {
  final _glTextureParameterfv = glad__glTextureParameterfv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Float>? param)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Float>? param)>();
  return _glTextureParameterfv(texture, pname, param);
}

/// ```c
/// define glTextureParameteri GLEW_GET_FUN(__glewTextureParameteri)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIPROC __glewTextureParameteri
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameteri;
void glTextureParameteri(int texture, int pname, int param) {
  final _glTextureParameteri = glad__glTextureParameteri!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int texture, int pname, int param)>();
  return _glTextureParameteri(texture, pname, param);
}

/// ```c
/// define glTextureParameteriv GLEW_GET_FUN(__glewTextureParameteriv)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIVPROC __glewTextureParameteriv
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameteriv;
void glTextureParameteriv(int texture, int pname, Pointer<Int32>? param) {
  final _glTextureParameteriv = glad__glTextureParameteriv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int texture, int pname, Pointer<Int32>? param)>();
  return _glTextureParameteriv(texture, pname, param);
}

/// ```c
/// define glTextureStorage1D GLEW_GET_FUN(__glewTextureStorage1D)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE1DPROC __glewTextureStorage1D
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage1D;
void glTextureStorage1D(int texture, int levels, int internalformat, int width) {
  final _glTextureStorage1D = glad__glTextureStorage1D!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 levels, Uint32 internalformat, Uint32 width)>>()
      .asFunction<void Function(int texture, int levels, int internalformat, int width)>();
  return _glTextureStorage1D(texture, levels, internalformat, width);
}

/// ```c
/// define glTextureStorage2D GLEW_GET_FUN(__glewTextureStorage2D)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE2DPROC __glewTextureStorage2D
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage2D;
void glTextureStorage2D(int texture, int levels, int internalformat, int width, int height) {
  final _glTextureStorage2D = glad__glTextureStorage2D!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texture, int levels, int internalformat, int width, int height)>();
  return _glTextureStorage2D(texture, levels, internalformat, width, height);
}

/// ```c
/// define glTextureStorage2DMultisample GLEW_GET_FUN(__glewTextureStorage2DMultisample)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC __glewTextureStorage2DMultisample
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage2DMultisample;
void glTextureStorage2DMultisample(int texture, int samples, int internalformat, int width, int height, int fixedsamplelocations) {
  final _glTextureStorage2DMultisample = glad__glTextureStorage2DMultisample!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int texture, int samples, int internalformat, int width, int height, int fixedsamplelocations)>();
  return _glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}

/// ```c
/// define glTextureStorage3D GLEW_GET_FUN(__glewTextureStorage3D)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE3DPROC __glewTextureStorage3D
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage3D;
void glTextureStorage3D(int texture, int levels, int internalformat, int width, int height, int depth) {
  final _glTextureStorage3D = glad__glTextureStorage3D!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int texture, int levels, int internalformat, int width, int height, int depth)>();
  return _glTextureStorage3D(texture, levels, internalformat, width, height, depth);
}

/// ```c
/// define glTextureStorage3DMultisample GLEW_GET_FUN(__glewTextureStorage3DMultisample)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC __glewTextureStorage3DMultisample
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage3DMultisample;
void glTextureStorage3DMultisample(int texture, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) {
  final _glTextureStorage3DMultisample = glad__glTextureStorage3DMultisample!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int texture, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations)>();
  return _glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}

/// ```c
/// define glTextureSubImage1D GLEW_GET_FUN(__glewTextureSubImage1D)
/// GLEW_FUN_EXPORT PFNGLTEXTURESUBIMAGE1DPROC __glewTextureSubImage1D
/// typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureSubImage1D;
void glTextureSubImage1D(int texture, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels) {
  final _glTextureSubImage1D = glad__glTextureSubImage1D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
}

/// ```c
/// define glTextureSubImage2D GLEW_GET_FUN(__glewTextureSubImage2D)
/// GLEW_FUN_EXPORT PFNGLTEXTURESUBIMAGE2DPROC __glewTextureSubImage2D
/// typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureSubImage2D;
void glTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels) {
  final _glTextureSubImage2D = glad__glTextureSubImage2D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}

/// ```c
/// define glTextureSubImage3D GLEW_GET_FUN(__glewTextureSubImage3D)
/// GLEW_FUN_EXPORT PFNGLTEXTURESUBIMAGE3DPROC __glewTextureSubImage3D
/// typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureSubImage3D;
void glTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels) {
  final _glTextureSubImage3D = glad__glTextureSubImage3D!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/// ```c
/// define glTransformFeedbackBufferBase GLEW_GET_FUN(__glewTransformFeedbackBufferBase)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC __glewTransformFeedbackBufferBase
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformFeedbackBufferBase;
void glTransformFeedbackBufferBase(int xfb, int index, int buffer) {
  final _glTransformFeedbackBufferBase = glad__glTransformFeedbackBufferBase!
      .cast<NativeFunction<Void Function(Uint32 xfb, Uint32 index, Uint32 buffer)>>()
      .asFunction<void Function(int xfb, int index, int buffer)>();
  return _glTransformFeedbackBufferBase(xfb, index, buffer);
}

/// ```c
/// define glTransformFeedbackBufferRange GLEW_GET_FUN(__glewTransformFeedbackBufferRange)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC __glewTransformFeedbackBufferRange
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformFeedbackBufferRange;
void glTransformFeedbackBufferRange(int xfb, int index, int buffer, int offset, int size) {
  final _glTransformFeedbackBufferRange = glad__glTransformFeedbackBufferRange!
      .cast<NativeFunction<Void Function(Uint32 xfb, Uint32 index, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int xfb, int index, int buffer, int offset, int size)>();
  return _glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}

/// ```c
/// define glUnmapNamedBuffer GLEW_GET_FUN(__glewUnmapNamedBuffer)
/// GLEW_FUN_EXPORT PFNGLUNMAPNAMEDBUFFERPROC __glewUnmapNamedBuffer
/// typedef GLboolean (GLAPIENTRY * PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnmapNamedBuffer;
int glUnmapNamedBuffer(int buffer) {
  final _glUnmapNamedBuffer = glad__glUnmapNamedBuffer!
      .cast<NativeFunction<Uint8 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return _glUnmapNamedBuffer(buffer);
}

/// ```c
/// define glVertexArrayAttribBinding GLEW_GET_FUN(__glewVertexArrayAttribBinding)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYATTRIBBINDINGPROC __glewVertexArrayAttribBinding
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayAttribBinding;
void glVertexArrayAttribBinding(int vaobj, int attribindex, int bindingindex) {
  final _glVertexArrayAttribBinding = glad__glVertexArrayAttribBinding!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Uint32 bindingindex)>>()
      .asFunction<void Function(int vaobj, int attribindex, int bindingindex)>();
  return _glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}

/// ```c
/// define glVertexArrayAttribFormat GLEW_GET_FUN(__glewVertexArrayAttribFormat)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYATTRIBFORMATPROC __glewVertexArrayAttribFormat
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayAttribFormat;
void glVertexArrayAttribFormat(int vaobj, int attribindex, int size, int type, int normalized, int relativeoffset) {
  final _glVertexArrayAttribFormat = glad__glVertexArrayAttribFormat!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Int32 size, Uint32 type, Uint8 normalized, Uint32 relativeoffset)>>()
      .asFunction<void Function(int vaobj, int attribindex, int size, int type, int normalized, int relativeoffset)>();
  return _glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
}

/// ```c
/// define glVertexArrayAttribIFormat GLEW_GET_FUN(__glewVertexArrayAttribIFormat)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYATTRIBIFORMATPROC __glewVertexArrayAttribIFormat
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayAttribIFormat;
void glVertexArrayAttribIFormat(int vaobj, int attribindex, int size, int type, int relativeoffset) {
  final _glVertexArrayAttribIFormat = glad__glVertexArrayAttribIFormat!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Int32 size, Uint32 type, Uint32 relativeoffset)>>()
      .asFunction<void Function(int vaobj, int attribindex, int size, int type, int relativeoffset)>();
  return _glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
}

/// ```c
/// define glVertexArrayAttribLFormat GLEW_GET_FUN(__glewVertexArrayAttribLFormat)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYATTRIBLFORMATPROC __glewVertexArrayAttribLFormat
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayAttribLFormat;
void glVertexArrayAttribLFormat(int vaobj, int attribindex, int size, int type, int relativeoffset) {
  final _glVertexArrayAttribLFormat = glad__glVertexArrayAttribLFormat!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Int32 size, Uint32 type, Uint32 relativeoffset)>>()
      .asFunction<void Function(int vaobj, int attribindex, int size, int type, int relativeoffset)>();
  return _glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
}

/// ```c
/// define glVertexArrayBindingDivisor GLEW_GET_FUN(__glewVertexArrayBindingDivisor)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYBINDINGDIVISORPROC __glewVertexArrayBindingDivisor
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayBindingDivisor;
void glVertexArrayBindingDivisor(int vaobj, int bindingindex, int divisor) {
  final _glVertexArrayBindingDivisor = glad__glVertexArrayBindingDivisor!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 divisor)>>()
      .asFunction<void Function(int vaobj, int bindingindex, int divisor)>();
  return _glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}

/// ```c
/// define glVertexArrayElementBuffer GLEW_GET_FUN(__glewVertexArrayElementBuffer)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYELEMENTBUFFERPROC __glewVertexArrayElementBuffer
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayElementBuffer;
void glVertexArrayElementBuffer(int vaobj, int buffer) {
  final _glVertexArrayElementBuffer = glad__glVertexArrayElementBuffer!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer)>>()
      .asFunction<void Function(int vaobj, int buffer)>();
  return _glVertexArrayElementBuffer(vaobj, buffer);
}

/// ```c
/// define glVertexArrayVertexBuffer GLEW_GET_FUN(__glewVertexArrayVertexBuffer)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXBUFFERPROC __glewVertexArrayVertexBuffer
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexBuffer;
void glVertexArrayVertexBuffer(int vaobj, int bindingindex, int buffer, int offset, int stride) {
  final _glVertexArrayVertexBuffer = glad__glVertexArrayVertexBuffer!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 buffer, Uint64 offset, Uint32 stride)>>()
      .asFunction<void Function(int vaobj, int bindingindex, int buffer, int offset, int stride)>();
  return _glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}

/// ```c
/// define glVertexArrayVertexBuffers GLEW_GET_FUN(__glewVertexArrayVertexBuffers)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXBUFFERSPROC __glewVertexArrayVertexBuffers
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexBuffers;
void glVertexArrayVertexBuffers(int vaobj, int first, int count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint32>? strides) {
  final _glVertexArrayVertexBuffers = glad__glVertexArrayVertexBuffers!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 first, Uint32 count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint32>? strides)>>()
      .asFunction<void Function(int vaobj, int first, int count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint32>? strides)>();
  return _glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}

/// -------------------------- GL_ARB_draw_buffers --------------------------
/// ```c
/// define glDrawBuffersARB GLEW_GET_FUN(__glewDrawBuffersARB)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERSARBPROC __glewDrawBuffersARB
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBuffersARB;
void glDrawBuffersARB(int n, Pointer<Uint32>? bufs) {
  final _glDrawBuffersARB = glad__glDrawBuffersARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? bufs)>();
  return _glDrawBuffersARB(n, bufs);
}

/// ----------------------- GL_ARB_draw_buffers_blend -----------------------
/// ```c
/// define glBlendEquationSeparateiARB GLEW_GET_FUN(__glewBlendEquationSeparateiARB)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEIARBPROC __glewBlendEquationSeparateiARB
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationSeparateiARB;
void glBlendEquationSeparateiARB(int buf, int modeRGB, int modeAlpha) {
  final _glBlendEquationSeparateiARB = glad__glBlendEquationSeparateiARB!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 modeRGB, Uint32 modeAlpha)>>()
      .asFunction<void Function(int buf, int modeRGB, int modeAlpha)>();
  return _glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
}

/// ```c
/// define glBlendEquationiARB GLEW_GET_FUN(__glewBlendEquationiARB)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONIARBPROC __glewBlendEquationiARB
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationiARB;
void glBlendEquationiARB(int buf, int mode) {
  final _glBlendEquationiARB = glad__glBlendEquationiARB!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return _glBlendEquationiARB(buf, mode);
}

/// ```c
/// define glBlendFuncSeparateiARB GLEW_GET_FUN(__glewBlendFuncSeparateiARB)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEIARBPROC __glewBlendFuncSeparateiARB
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncSeparateiARB;
void glBlendFuncSeparateiARB(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
  final _glBlendFuncSeparateiARB = glad__glBlendFuncSeparateiARB!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 srcRGB, Uint32 dstRGB, Uint32 srcAlpha, Uint32 dstAlpha)>>()
      .asFunction<void Function(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)>();
  return _glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

/// ```c
/// define glBlendFunciARB GLEW_GET_FUN(__glewBlendFunciARB)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCIARBPROC __glewBlendFunciARB
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFunciARB;
void glBlendFunciARB(int buf, int src, int dst) {
  final _glBlendFunciARB = glad__glBlendFunciARB!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return _glBlendFunciARB(buf, src, dst);
}

/// -------------------- GL_ARB_draw_elements_base_vertex -------------------
/// ```c
/// define glDrawElementsBaseVertex GLEW_GET_FUN(__glewDrawElementsBaseVertex)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSBASEVERTEXPROC __glewDrawElementsBaseVertex
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, void *indices, GLint basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsBaseVertex;
void glDrawElementsBaseVertex(int mode, int count, int type, Pointer<Void>? indices, int basevertex) {
  final _glDrawElementsBaseVertex = glad__glDrawElementsBaseVertex!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Int32 basevertex)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int basevertex)>();
  return _glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}

/// ```c
/// define glDrawElementsInstancedBaseVertex GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertex)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC __glewDrawElementsInstancedBaseVertex
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, GLint basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedBaseVertex;
void glDrawElementsInstancedBaseVertex(int mode, int count, int type, Pointer<Void>? indices, int primcount, int basevertex) {
  final _glDrawElementsInstancedBaseVertex = glad__glDrawElementsInstancedBaseVertex!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount, Int32 basevertex)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount, int basevertex)>();
  return _glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
}

/// ```c
/// define glDrawRangeElementsBaseVertex GLEW_GET_FUN(__glewDrawRangeElementsBaseVertex)
/// GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC __glewDrawRangeElementsBaseVertex
/// typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void *indices, GLint basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawRangeElementsBaseVertex;
void glDrawRangeElementsBaseVertex(int mode, int start, int end, int count, int type, Pointer<Void>? indices, int basevertex) {
  final _glDrawRangeElementsBaseVertex = glad__glDrawRangeElementsBaseVertex!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count, Uint32 type, Pointer<Void>? indices, Int32 basevertex)>>()
      .asFunction<void Function(int mode, int start, int end, int count, int type, Pointer<Void>? indices, int basevertex)>();
  return _glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}

/// ```c
/// define glMultiDrawElementsBaseVertex GLEW_GET_FUN(__glewMultiDrawElementsBaseVertex)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC __glewMultiDrawElementsBaseVertex
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei* count, GLenum type, void**indices, GLsizei primcount, GLint *basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsBaseVertex;
void glMultiDrawElementsBaseVertex(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount, Pointer<Int32>? basevertex) {
  final _glMultiDrawElementsBaseVertex = glad__glMultiDrawElementsBaseVertex!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Uint32>? count, Uint32 type, Pointer<Pointer<Void>>? indices, Uint32 primcount, Pointer<Int32>? basevertex)>>()
      .asFunction<void Function(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount, Pointer<Int32>? basevertex)>();
  return _glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
}

/// -------------------------- GL_ARB_draw_indirect -------------------------
/// ```c
/// define glDrawArraysIndirect GLEW_GET_FUN(__glewDrawArraysIndirect)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINDIRECTPROC __glewDrawArraysIndirect
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysIndirect;
void glDrawArraysIndirect(int mode, Pointer<Void>? indirect) {
  final _glDrawArraysIndirect = glad__glDrawArraysIndirect!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect)>();
  return _glDrawArraysIndirect(mode, indirect);
}

/// ```c
/// define glDrawElementsIndirect GLEW_GET_FUN(__glewDrawElementsIndirect)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINDIRECTPROC __glewDrawElementsIndirect
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsIndirect;
void glDrawElementsIndirect(int mode, int type, Pointer<Void>? indirect) {
  final _glDrawElementsIndirect = glad__glDrawElementsIndirect!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect)>();
  return _glDrawElementsIndirect(mode, type, indirect);
}

/// ------------------- GL_ARB_framebuffer_no_attachments -------------------
/// ```c
/// define glFramebufferParameteri GLEW_GET_FUN(__glewFramebufferParameteri)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERPARAMETERIPROC __glewFramebufferParameteri
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferParameteri;
void glFramebufferParameteri(int target, int pname, int param) {
  final _glFramebufferParameteri = glad__glFramebufferParameteri!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glFramebufferParameteri(target, pname, param);
}

/// ```c
/// define glGetFramebufferParameteriv GLEW_GET_FUN(__glewGetFramebufferParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERPARAMETERIVPROC __glewGetFramebufferParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFramebufferParameteriv;
void glGetFramebufferParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetFramebufferParameteriv = glad__glGetFramebufferParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetFramebufferParameteriv(target, pname, params);
}

/// ```c
/// define glGetNamedFramebufferParameterivEXT GLEW_GET_FUN(__glewGetNamedFramebufferParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC __glewGetNamedFramebufferParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedFramebufferParameterivEXT;
void glGetNamedFramebufferParameterivEXT(int framebuffer, int pname, Pointer<Int32>? params) {
  final _glGetNamedFramebufferParameterivEXT = glad__glGetNamedFramebufferParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int framebuffer, int pname, Pointer<Int32>? params)>();
  return _glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
}

/// ```c
/// define glNamedFramebufferParameteriEXT GLEW_GET_FUN(__glewNamedFramebufferParameteriEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC __glewNamedFramebufferParameteriEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferParameteriEXT;
void glNamedFramebufferParameteriEXT(int framebuffer, int pname, int param) {
  final _glNamedFramebufferParameteriEXT = glad__glNamedFramebufferParameteriEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int framebuffer, int pname, int param)>();
  return _glNamedFramebufferParameteriEXT(framebuffer, pname, param);
}

/// ----------------------- GL_ARB_framebuffer_object -----------------------
/// ```c
/// define glBindFramebuffer GLEW_GET_FUN(__glewBindFramebuffer)
/// GLEW_FUN_EXPORT PFNGLBINDFRAMEBUFFERPROC __glewBindFramebuffer
/// typedef void (GLAPIENTRY * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFramebuffer;
void glBindFramebuffer(int target, int framebuffer) {
  final _glBindFramebuffer = glad__glBindFramebuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 framebuffer)>>()
      .asFunction<void Function(int target, int framebuffer)>();
  return _glBindFramebuffer(target, framebuffer);
}

/// ```c
/// define glBindRenderbuffer GLEW_GET_FUN(__glewBindRenderbuffer)
/// GLEW_FUN_EXPORT PFNGLBINDRENDERBUFFERPROC __glewBindRenderbuffer
/// typedef void (GLAPIENTRY * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindRenderbuffer;
void glBindRenderbuffer(int target, int renderbuffer) {
  final _glBindRenderbuffer = glad__glBindRenderbuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int renderbuffer)>();
  return _glBindRenderbuffer(target, renderbuffer);
}

/// ```c
/// define glBlitFramebuffer GLEW_GET_FUN(__glewBlitFramebuffer)
/// GLEW_FUN_EXPORT PFNGLBLITFRAMEBUFFERPROC __glewBlitFramebuffer
/// typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlitFramebuffer;
void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
  final _glBlitFramebuffer = glad__glBlitFramebuffer!
      .cast<NativeFunction<Void Function(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Uint32 mask, Uint32 filter)>>()
      .asFunction<void Function(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)>();
  return _glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/// ```c
/// define glCheckFramebufferStatus GLEW_GET_FUN(__glewCheckFramebufferStatus)
/// GLEW_FUN_EXPORT PFNGLCHECKFRAMEBUFFERSTATUSPROC __glewCheckFramebufferStatus
/// typedef GLenum (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCheckFramebufferStatus;
int glCheckFramebufferStatus(int target) {
  final _glCheckFramebufferStatus = glad__glCheckFramebufferStatus!
      .cast<NativeFunction<Uint32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return _glCheckFramebufferStatus(target);
}

/// ```c
/// define glDeleteFramebuffers GLEW_GET_FUN(__glewDeleteFramebuffers)
/// GLEW_FUN_EXPORT PFNGLDELETEFRAMEBUFFERSPROC __glewDeleteFramebuffers
/// typedef void (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint* framebuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteFramebuffers;
void glDeleteFramebuffers(int n, Pointer<Uint32>? framebuffers) {
  final _glDeleteFramebuffers = glad__glDeleteFramebuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? framebuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? framebuffers)>();
  return _glDeleteFramebuffers(n, framebuffers);
}

/// ```c
/// define glDeleteRenderbuffers GLEW_GET_FUN(__glewDeleteRenderbuffers)
/// GLEW_FUN_EXPORT PFNGLDELETERENDERBUFFERSPROC __glewDeleteRenderbuffers
/// typedef void (GLAPIENTRY * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint* renderbuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteRenderbuffers;
void glDeleteRenderbuffers(int n, Pointer<Uint32>? renderbuffers) {
  final _glDeleteRenderbuffers = glad__glDeleteRenderbuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? renderbuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? renderbuffers)>();
  return _glDeleteRenderbuffers(n, renderbuffers);
}

/// ```c
/// define glFramebufferRenderbuffer GLEW_GET_FUN(__glewFramebufferRenderbuffer)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERRENDERBUFFERPROC __glewFramebufferRenderbuffer
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferRenderbuffer;
void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, int renderbuffer) {
  final _glFramebufferRenderbuffer = glad__glFramebufferRenderbuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 renderbuffertarget, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int attachment, int renderbuffertarget, int renderbuffer)>();
  return _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

/// ```c
/// define glFramebufferTexture1D GLEW_GET_FUN(__glewFramebufferTexture1D)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE1DPROC __glewFramebufferTexture1D
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture1D;
void glFramebufferTexture1D(int target, int attachment, int textarget, int texture, int level) {
  final _glFramebufferTexture1D = glad__glFramebufferTexture1D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level)>();
  return _glFramebufferTexture1D(target, attachment, textarget, texture, level);
}

/// ```c
/// define glFramebufferTexture2D GLEW_GET_FUN(__glewFramebufferTexture2D)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE2DPROC __glewFramebufferTexture2D
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture2D;
void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level) {
  final _glFramebufferTexture2D = glad__glFramebufferTexture2D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level)>();
  return _glFramebufferTexture2D(target, attachment, textarget, texture, level);
}

/// ```c
/// define glFramebufferTexture3D GLEW_GET_FUN(__glewFramebufferTexture3D)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE3DPROC __glewFramebufferTexture3D
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture3D;
void glFramebufferTexture3D(int target, int attachment, int textarget, int texture, int level, int layer) {
  final _glFramebufferTexture3D = glad__glFramebufferTexture3D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level, int layer)>();
  return _glFramebufferTexture3D(target, attachment, textarget, texture, level, layer);
}

/// ```c
/// define glFramebufferTextureLayer GLEW_GET_FUN(__glewFramebufferTextureLayer)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURELAYERPROC __glewFramebufferTextureLayer
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureLayer;
void glFramebufferTextureLayer(int target, int attachment, int texture, int level, int layer) {
  final _glFramebufferTextureLayer = glad__glFramebufferTextureLayer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int layer)>();
  return _glFramebufferTextureLayer(target, attachment, texture, level, layer);
}

/// ```c
/// define glGenFramebuffers GLEW_GET_FUN(__glewGenFramebuffers)
/// GLEW_FUN_EXPORT PFNGLGENFRAMEBUFFERSPROC __glewGenFramebuffers
/// typedef void (GLAPIENTRY * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenFramebuffers;
void glGenFramebuffers(int n, Pointer<Uint32>? framebuffers) {
  final _glGenFramebuffers = glad__glGenFramebuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? framebuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? framebuffers)>();
  return _glGenFramebuffers(n, framebuffers);
}

/// ```c
/// define glGenRenderbuffers GLEW_GET_FUN(__glewGenRenderbuffers)
/// GLEW_FUN_EXPORT PFNGLGENRENDERBUFFERSPROC __glewGenRenderbuffers
/// typedef void (GLAPIENTRY * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenRenderbuffers;
void glGenRenderbuffers(int n, Pointer<Uint32>? renderbuffers) {
  final _glGenRenderbuffers = glad__glGenRenderbuffers!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? renderbuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? renderbuffers)>();
  return _glGenRenderbuffers(n, renderbuffers);
}

/// ```c
/// define glGenerateMipmap GLEW_GET_FUN(__glewGenerateMipmap)
/// GLEW_FUN_EXPORT PFNGLGENERATEMIPMAPPROC __glewGenerateMipmap
/// typedef void (GLAPIENTRY * PFNGLGENERATEMIPMAPPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenerateMipmap;
void glGenerateMipmap(int target) {
  final _glGenerateMipmap = glad__glGenerateMipmap!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glGenerateMipmap(target);
}

/// ```c
/// define glGetFramebufferAttachmentParameteriv GLEW_GET_FUN(__glewGetFramebufferAttachmentParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC __glewGetFramebufferAttachmentParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFramebufferAttachmentParameteriv;
void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, Pointer<Int32>? params) {
  final _glGetFramebufferAttachmentParameteriv = glad__glGetFramebufferAttachmentParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int attachment, int pname, Pointer<Int32>? params)>();
  return _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}

/// ```c
/// define glGetRenderbufferParameteriv GLEW_GET_FUN(__glewGetRenderbufferParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETRENDERBUFFERPARAMETERIVPROC __glewGetRenderbufferParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetRenderbufferParameteriv;
void glGetRenderbufferParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetRenderbufferParameteriv = glad__glGetRenderbufferParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetRenderbufferParameteriv(target, pname, params);
}

/// ```c
/// define glIsFramebuffer GLEW_GET_FUN(__glewIsFramebuffer)
/// GLEW_FUN_EXPORT PFNGLISFRAMEBUFFERPROC __glewIsFramebuffer
/// typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsFramebuffer;
int glIsFramebuffer(int framebuffer) {
  final _glIsFramebuffer = glad__glIsFramebuffer!
      .cast<NativeFunction<Uint8 Function(Uint32 framebuffer)>>()
      .asFunction<int Function(int framebuffer)>();
  return _glIsFramebuffer(framebuffer);
}

/// ```c
/// define glIsRenderbuffer GLEW_GET_FUN(__glewIsRenderbuffer)
/// GLEW_FUN_EXPORT PFNGLISRENDERBUFFERPROC __glewIsRenderbuffer
/// typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsRenderbuffer;
int glIsRenderbuffer(int renderbuffer) {
  final _glIsRenderbuffer = glad__glIsRenderbuffer!
      .cast<NativeFunction<Uint8 Function(Uint32 renderbuffer)>>()
      .asFunction<int Function(int renderbuffer)>();
  return _glIsRenderbuffer(renderbuffer);
}

/// ```c
/// define glRenderbufferStorage GLEW_GET_FUN(__glewRenderbufferStorage)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEPROC __glewRenderbufferStorage
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorage;
void glRenderbufferStorage(int target, int internalformat, int width, int height) {
  final _glRenderbufferStorage = glad__glRenderbufferStorage!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int internalformat, int width, int height)>();
  return _glRenderbufferStorage(target, internalformat, width, height);
}

/// ```c
/// define glRenderbufferStorageMultisample GLEW_GET_FUN(__glewRenderbufferStorageMultisample)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC __glewRenderbufferStorageMultisample
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageMultisample;
void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height) {
  final _glRenderbufferStorageMultisample = glad__glRenderbufferStorageMultisample!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height)>();
  return _glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}

/// ------------------------ GL_ARB_geometry_shader4 ------------------------
/// ```c
/// define glFramebufferTextureARB GLEW_GET_FUN(__glewFramebufferTextureARB)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREARBPROC __glewFramebufferTextureARB
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureARB;
void glFramebufferTextureARB(int target, int attachment, int texture, int level) {
  final _glFramebufferTextureARB = glad__glFramebufferTextureARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level)>();
  return _glFramebufferTextureARB(target, attachment, texture, level);
}

/// ```c
/// define glFramebufferTextureFaceARB GLEW_GET_FUN(__glewFramebufferTextureFaceARB)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREFACEARBPROC __glewFramebufferTextureFaceARB
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureFaceARB;
void glFramebufferTextureFaceARB(int target, int attachment, int texture, int level, int face) {
  final _glFramebufferTextureFaceARB = glad__glFramebufferTextureFaceARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Uint32 face)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int face)>();
  return _glFramebufferTextureFaceARB(target, attachment, texture, level, face);
}

/// ```c
/// define glFramebufferTextureLayerARB GLEW_GET_FUN(__glewFramebufferTextureLayerARB)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURELAYERARBPROC __glewFramebufferTextureLayerARB
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureLayerARB;
void glFramebufferTextureLayerARB(int target, int attachment, int texture, int level, int layer) {
  final _glFramebufferTextureLayerARB = glad__glFramebufferTextureLayerARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int layer)>();
  return _glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
}

/// ```c
/// define glProgramParameteriARB GLEW_GET_FUN(__glewProgramParameteriARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERIARBPROC __glewProgramParameteriARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameteriARB;
void glProgramParameteriARB(int program, int pname, int value) {
  final _glProgramParameteriARB = glad__glProgramParameteriARB!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int program, int pname, int value)>();
  return _glProgramParameteriARB(program, pname, value);
}

/// ----------------------- GL_ARB_get_program_binary -----------------------
/// ```c
/// define glGetProgramBinary GLEW_GET_FUN(__glewGetProgramBinary)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMBINARYPROC __glewGetProgramBinary
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLenum *binaryFormat, void*binary)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramBinary;
void glGetProgramBinary(int program, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? binaryFormat, Pointer<Void>? binary) {
  final _glGetProgramBinary = glad__glGetProgramBinary!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Uint32>? binaryFormat, Pointer<Void>? binary)>>()
      .asFunction<void Function(int program, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? binaryFormat, Pointer<Void>? binary)>();
  return _glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}

/// ```c
/// define glProgramBinary GLEW_GET_FUN(__glewProgramBinary)
/// GLEW_FUN_EXPORT PFNGLPROGRAMBINARYPROC __glewProgramBinary
/// typedef void (GLAPIENTRY * PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramBinary;
void glProgramBinary(int program, int binaryFormat, Pointer<Void>? binary, int length) {
  final _glProgramBinary = glad__glProgramBinary!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 binaryFormat, Pointer<Void>? binary, Uint32 length)>>()
      .asFunction<void Function(int program, int binaryFormat, Pointer<Void>? binary, int length)>();
  return _glProgramBinary(program, binaryFormat, binary, length);
}

/// ```c
/// define glProgramParameteri GLEW_GET_FUN(__glewProgramParameteri)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERIPROC __glewProgramParameteri
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameteri;
void glProgramParameteri(int program, int pname, int value) {
  final _glProgramParameteri = glad__glProgramParameteri!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int program, int pname, int value)>();
  return _glProgramParameteri(program, pname, value);
}

/// ---------------------- GL_ARB_get_texture_sub_image ---------------------
/// ```c
/// define glGetCompressedTextureSubImage GLEW_GET_FUN(__glewGetCompressedTextureSubImage)
/// GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC __glewGetCompressedTextureSubImage
/// typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCompressedTextureSubImage;
void glGetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, Pointer<Void>? pixels) {
  final _glGetCompressedTextureSubImage = glad__glGetCompressedTextureSubImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 bufSize, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, Pointer<Void>? pixels)>();
  return _glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}

/// ```c
/// define glGetTextureSubImage GLEW_GET_FUN(__glewGetTextureSubImage)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURESUBIMAGEPROC __glewGetTextureSubImage
/// typedef void (GLAPIENTRY * PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureSubImage;
void glGetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, Pointer<Void>? pixels) {
  final _glGetTextureSubImage = glad__glGetTextureSubImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, Pointer<Void>? pixels)>();
  return _glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}

/// ---------------------------- GL_ARB_gl_spirv ----------------------------
/// ```c
/// define glSpecializeShaderARB GLEW_GET_FUN(__glewSpecializeShaderARB)
/// GLEW_FUN_EXPORT PFNGLSPECIALIZESHADERARBPROC __glewSpecializeShaderARB
/// typedef void (GLAPIENTRY * PFNGLSPECIALIZESHADERARBPROC) (GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSpecializeShaderARB;
void glSpecializeShaderARB(int shader, String pEntryPoint, int numSpecializationConstants, Pointer<Uint32>? pConstantIndex, Pointer<Uint32>? pConstantValue) {
  final _glSpecializeShaderARB = glad__glSpecializeShaderARB!
      .cast<NativeFunction<Void Function(Uint32 shader, Pointer<Utf8>? pEntryPoint, Uint32 numSpecializationConstants, Pointer<Uint32>? pConstantIndex, Pointer<Uint32>? pConstantValue)>>()
      .asFunction<void Function(int shader, Pointer<Utf8>? pEntryPoint, int numSpecializationConstants, Pointer<Uint32>? pConstantIndex, Pointer<Uint32>? pConstantValue)>();
  final _pEntryPointPointer = pEntryPoint.toNativeUtf8();
  final _result = _glSpecializeShaderARB(shader, _pEntryPointPointer, numSpecializationConstants, pConstantIndex, pConstantValue);
  calloc.free(_pEntryPointPointer);
  return _result;
}

/// ------------------------- GL_ARB_gpu_shader_fp64 ------------------------
/// ```c
/// define glGetUniformdv GLEW_GET_FUN(__glewGetUniformdv)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMDVPROC __glewGetUniformdv
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformdv;
void glGetUniformdv(int program, int location, Pointer<Double>? params) {
  final _glGetUniformdv = glad__glGetUniformdv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Double>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Double>? params)>();
  return _glGetUniformdv(program, location, params);
}

/// ```c
/// define glUniform1d GLEW_GET_FUN(__glewUniform1d)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1DPROC __glewUniform1d
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1DPROC) (GLint location, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1d;
void glUniform1d(int location, double x) {
  final _glUniform1d = glad__glUniform1d!
      .cast<NativeFunction<Void Function(Int32 location, Double x)>>()
      .asFunction<void Function(int location, double x)>();
  return _glUniform1d(location, x);
}

/// ```c
/// define glUniform1dv GLEW_GET_FUN(__glewUniform1dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1DVPROC __glewUniform1dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1dv;
void glUniform1dv(int location, int count, Pointer<Double>? value) {
  final _glUniform1dv = glad__glUniform1dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Double>? value)>();
  return _glUniform1dv(location, count, value);
}

/// ```c
/// define glUniform2d GLEW_GET_FUN(__glewUniform2d)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2DPROC __glewUniform2d
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2d;
void glUniform2d(int location, double x, double y) {
  final _glUniform2d = glad__glUniform2d!
      .cast<NativeFunction<Void Function(Int32 location, Double x, Double y)>>()
      .asFunction<void Function(int location, double x, double y)>();
  return _glUniform2d(location, x, y);
}

/// ```c
/// define glUniform2dv GLEW_GET_FUN(__glewUniform2dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2DVPROC __glewUniform2dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2dv;
void glUniform2dv(int location, int count, Pointer<Double>? value) {
  final _glUniform2dv = glad__glUniform2dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Double>? value)>();
  return _glUniform2dv(location, count, value);
}

/// ```c
/// define glUniform3d GLEW_GET_FUN(__glewUniform3d)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3DPROC __glewUniform3d
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3d;
void glUniform3d(int location, double x, double y, double z) {
  final _glUniform3d = glad__glUniform3d!
      .cast<NativeFunction<Void Function(Int32 location, Double x, Double y, Double z)>>()
      .asFunction<void Function(int location, double x, double y, double z)>();
  return _glUniform3d(location, x, y, z);
}

/// ```c
/// define glUniform3dv GLEW_GET_FUN(__glewUniform3dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3DVPROC __glewUniform3dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3dv;
void glUniform3dv(int location, int count, Pointer<Double>? value) {
  final _glUniform3dv = glad__glUniform3dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Double>? value)>();
  return _glUniform3dv(location, count, value);
}

/// ```c
/// define glUniform4d GLEW_GET_FUN(__glewUniform4d)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4DPROC __glewUniform4d
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4d;
void glUniform4d(int location, double x, double y, double z, double w) {
  final _glUniform4d = glad__glUniform4d!
      .cast<NativeFunction<Void Function(Int32 location, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int location, double x, double y, double z, double w)>();
  return _glUniform4d(location, x, y, z, w);
}

/// ```c
/// define glUniform4dv GLEW_GET_FUN(__glewUniform4dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4DVPROC __glewUniform4dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4dv;
void glUniform4dv(int location, int count, Pointer<Double>? value) {
  final _glUniform4dv = glad__glUniform4dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Double>? value)>();
  return _glUniform4dv(location, count, value);
}

/// ```c
/// define glUniformMatrix2dv GLEW_GET_FUN(__glewUniformMatrix2dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2DVPROC __glewUniformMatrix2dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2dv;
void glUniformMatrix2dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix2dv = glad__glUniformMatrix2dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix2dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix2x3dv GLEW_GET_FUN(__glewUniformMatrix2x3dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X3DVPROC __glewUniformMatrix2x3dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2x3dv;
void glUniformMatrix2x3dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix2x3dv = glad__glUniformMatrix2x3dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix2x3dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix2x4dv GLEW_GET_FUN(__glewUniformMatrix2x4dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X4DVPROC __glewUniformMatrix2x4dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2x4dv;
void glUniformMatrix2x4dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix2x4dv = glad__glUniformMatrix2x4dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix2x4dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3dv GLEW_GET_FUN(__glewUniformMatrix3dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3DVPROC __glewUniformMatrix3dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3dv;
void glUniformMatrix3dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix3dv = glad__glUniformMatrix3dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix3dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3x2dv GLEW_GET_FUN(__glewUniformMatrix3x2dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X2DVPROC __glewUniformMatrix3x2dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3x2dv;
void glUniformMatrix3x2dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix3x2dv = glad__glUniformMatrix3x2dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix3x2dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3x4dv GLEW_GET_FUN(__glewUniformMatrix3x4dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X4DVPROC __glewUniformMatrix3x4dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3x4dv;
void glUniformMatrix3x4dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix3x4dv = glad__glUniformMatrix3x4dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix3x4dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4dv GLEW_GET_FUN(__glewUniformMatrix4dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4DVPROC __glewUniformMatrix4dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4dv;
void glUniformMatrix4dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix4dv = glad__glUniformMatrix4dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix4dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4x2dv GLEW_GET_FUN(__glewUniformMatrix4x2dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X2DVPROC __glewUniformMatrix4x2dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4x2dv;
void glUniformMatrix4x2dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix4x2dv = glad__glUniformMatrix4x2dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix4x2dv(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4x3dv GLEW_GET_FUN(__glewUniformMatrix4x3dv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X3DVPROC __glewUniformMatrix4x3dv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4x3dv;
void glUniformMatrix4x3dv(int location, int count, int transpose, Pointer<Double>? value) {
  final _glUniformMatrix4x3dv = glad__glUniformMatrix4x3dv!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Double>? value)>();
  return _glUniformMatrix4x3dv(location, count, transpose, value);
}

/// ------------------------ GL_ARB_gpu_shader_int64 ------------------------
/// ```c
/// define glGetUniformi64vARB GLEW_GET_FUN(__glewGetUniformi64vARB)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMI64VARBPROC __glewGetUniformi64vARB
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformi64vARB;
void glGetUniformi64vARB(int program, int location, Pointer<Int64>? params) {
  final _glGetUniformi64vARB = glad__glGetUniformi64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Int64>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Int64>? params)>();
  return _glGetUniformi64vARB(program, location, params);
}

/// ```c
/// define glGetUniformui64vARB GLEW_GET_FUN(__glewGetUniformui64vARB)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMUI64VARBPROC __glewGetUniformui64vARB
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformui64vARB;
void glGetUniformui64vARB(int program, int location, Pointer<Uint64>? params) {
  final _glGetUniformui64vARB = glad__glGetUniformui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Uint64>? params)>();
  return _glGetUniformui64vARB(program, location, params);
}

/// ```c
/// define glGetnUniformi64vARB GLEW_GET_FUN(__glewGetnUniformi64vARB)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMI64VARBPROC __glewGetnUniformi64vARB
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformi64vARB;
void glGetnUniformi64vARB(int program, int location, int bufSize, Pointer<Int64>? params) {
  final _glGetnUniformi64vARB = glad__glGetnUniformi64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Int64>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Int64>? params)>();
  return _glGetnUniformi64vARB(program, location, bufSize, params);
}

/// ```c
/// define glGetnUniformui64vARB GLEW_GET_FUN(__glewGetnUniformui64vARB)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMUI64VARBPROC __glewGetnUniformui64vARB
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformui64vARB;
void glGetnUniformui64vARB(int program, int location, int bufSize, Pointer<Uint64>? params) {
  final _glGetnUniformui64vARB = glad__glGetnUniformui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Uint64>? params)>();
  return _glGetnUniformui64vARB(program, location, bufSize, params);
}

/// ```c
/// define glProgramUniform1i64ARB GLEW_GET_FUN(__glewProgramUniform1i64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1I64ARBPROC __glewProgramUniform1i64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1i64ARB;
void glProgramUniform1i64ARB(int program, int location, int x) {
  final _glProgramUniform1i64ARB = glad__glProgramUniform1i64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x)>>()
      .asFunction<void Function(int program, int location, int x)>();
  return _glProgramUniform1i64ARB(program, location, x);
}

/// ```c
/// define glProgramUniform1i64vARB GLEW_GET_FUN(__glewProgramUniform1i64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1I64VARBPROC __glewProgramUniform1i64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1i64vARB;
void glProgramUniform1i64vARB(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform1i64vARB = glad__glProgramUniform1i64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform1i64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform1ui64ARB GLEW_GET_FUN(__glewProgramUniform1ui64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UI64ARBPROC __glewProgramUniform1ui64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1ui64ARB;
void glProgramUniform1ui64ARB(int program, int location, int x) {
  final _glProgramUniform1ui64ARB = glad__glProgramUniform1ui64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x)>>()
      .asFunction<void Function(int program, int location, int x)>();
  return _glProgramUniform1ui64ARB(program, location, x);
}

/// ```c
/// define glProgramUniform1ui64vARB GLEW_GET_FUN(__glewProgramUniform1ui64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UI64VARBPROC __glewProgramUniform1ui64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1ui64vARB;
void glProgramUniform1ui64vARB(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform1ui64vARB = glad__glProgramUniform1ui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform1ui64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform2i64ARB GLEW_GET_FUN(__glewProgramUniform2i64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2I64ARBPROC __glewProgramUniform2i64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2i64ARB;
void glProgramUniform2i64ARB(int program, int location, int x, int y) {
  final _glProgramUniform2i64ARB = glad__glProgramUniform2i64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x, Int64 y)>>()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return _glProgramUniform2i64ARB(program, location, x, y);
}

/// ```c
/// define glProgramUniform2i64vARB GLEW_GET_FUN(__glewProgramUniform2i64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2I64VARBPROC __glewProgramUniform2i64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2i64vARB;
void glProgramUniform2i64vARB(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform2i64vARB = glad__glProgramUniform2i64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform2i64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform2ui64ARB GLEW_GET_FUN(__glewProgramUniform2ui64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UI64ARBPROC __glewProgramUniform2ui64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2ui64ARB;
void glProgramUniform2ui64ARB(int program, int location, int x, int y) {
  final _glProgramUniform2ui64ARB = glad__glProgramUniform2ui64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return _glProgramUniform2ui64ARB(program, location, x, y);
}

/// ```c
/// define glProgramUniform2ui64vARB GLEW_GET_FUN(__glewProgramUniform2ui64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UI64VARBPROC __glewProgramUniform2ui64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2ui64vARB;
void glProgramUniform2ui64vARB(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform2ui64vARB = glad__glProgramUniform2ui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform2ui64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform3i64ARB GLEW_GET_FUN(__glewProgramUniform3i64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3I64ARBPROC __glewProgramUniform3i64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3i64ARB;
void glProgramUniform3i64ARB(int program, int location, int x, int y, int z) {
  final _glProgramUniform3i64ARB = glad__glProgramUniform3i64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x, Int64 y, Int64 z)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z)>();
  return _glProgramUniform3i64ARB(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3i64vARB GLEW_GET_FUN(__glewProgramUniform3i64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3I64VARBPROC __glewProgramUniform3i64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3i64vARB;
void glProgramUniform3i64vARB(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform3i64vARB = glad__glProgramUniform3i64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform3i64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform3ui64ARB GLEW_GET_FUN(__glewProgramUniform3ui64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UI64ARBPROC __glewProgramUniform3ui64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3ui64ARB;
void glProgramUniform3ui64ARB(int program, int location, int x, int y, int z) {
  final _glProgramUniform3ui64ARB = glad__glProgramUniform3ui64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y, Uint64 z)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z)>();
  return _glProgramUniform3ui64ARB(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3ui64vARB GLEW_GET_FUN(__glewProgramUniform3ui64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UI64VARBPROC __glewProgramUniform3ui64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3ui64vARB;
void glProgramUniform3ui64vARB(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform3ui64vARB = glad__glProgramUniform3ui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform3ui64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform4i64ARB GLEW_GET_FUN(__glewProgramUniform4i64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4I64ARBPROC __glewProgramUniform4i64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4i64ARB;
void glProgramUniform4i64ARB(int program, int location, int x, int y, int z, int w) {
  final _glProgramUniform4i64ARB = glad__glProgramUniform4i64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z, int w)>();
  return _glProgramUniform4i64ARB(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4i64vARB GLEW_GET_FUN(__glewProgramUniform4i64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4I64VARBPROC __glewProgramUniform4i64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4i64vARB;
void glProgramUniform4i64vARB(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform4i64vARB = glad__glProgramUniform4i64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform4i64vARB(program, location, count, value);
}

/// ```c
/// define glProgramUniform4ui64ARB GLEW_GET_FUN(__glewProgramUniform4ui64ARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UI64ARBPROC __glewProgramUniform4ui64ARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4ui64ARB;
void glProgramUniform4ui64ARB(int program, int location, int x, int y, int z, int w) {
  final _glProgramUniform4ui64ARB = glad__glProgramUniform4ui64ARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z, int w)>();
  return _glProgramUniform4ui64ARB(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4ui64vARB GLEW_GET_FUN(__glewProgramUniform4ui64vARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UI64VARBPROC __glewProgramUniform4ui64vARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4ui64vARB;
void glProgramUniform4ui64vARB(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform4ui64vARB = glad__glProgramUniform4ui64vARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform4ui64vARB(program, location, count, value);
}

/// ```c
/// define glUniform1i64ARB GLEW_GET_FUN(__glewUniform1i64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1I64ARBPROC __glewUniform1i64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1i64ARB;
void glUniform1i64ARB(int location, int x) {
  final _glUniform1i64ARB = glad__glUniform1i64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return _glUniform1i64ARB(location, x);
}

/// ```c
/// define glUniform1i64vARB GLEW_GET_FUN(__glewUniform1i64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1I64VARBPROC __glewUniform1i64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1i64vARB;
void glUniform1i64vARB(int location, int count, Pointer<Int64>? value) {
  final _glUniform1i64vARB = glad__glUniform1i64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform1i64vARB(location, count, value);
}

/// ```c
/// define glUniform1ui64ARB GLEW_GET_FUN(__glewUniform1ui64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UI64ARBPROC __glewUniform1ui64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1ui64ARB;
void glUniform1ui64ARB(int location, int x) {
  final _glUniform1ui64ARB = glad__glUniform1ui64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return _glUniform1ui64ARB(location, x);
}

/// ```c
/// define glUniform1ui64vARB GLEW_GET_FUN(__glewUniform1ui64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UI64VARBPROC __glewUniform1ui64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1ui64vARB;
void glUniform1ui64vARB(int location, int count, Pointer<Uint64>? value) {
  final _glUniform1ui64vARB = glad__glUniform1ui64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform1ui64vARB(location, count, value);
}

/// ```c
/// define glUniform2i64ARB GLEW_GET_FUN(__glewUniform2i64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2I64ARBPROC __glewUniform2i64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2i64ARB;
void glUniform2i64ARB(int location, int x, int y) {
  final _glUniform2i64ARB = glad__glUniform2i64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return _glUniform2i64ARB(location, x, y);
}

/// ```c
/// define glUniform2i64vARB GLEW_GET_FUN(__glewUniform2i64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2I64VARBPROC __glewUniform2i64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2i64vARB;
void glUniform2i64vARB(int location, int count, Pointer<Int64>? value) {
  final _glUniform2i64vARB = glad__glUniform2i64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform2i64vARB(location, count, value);
}

/// ```c
/// define glUniform2ui64ARB GLEW_GET_FUN(__glewUniform2ui64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UI64ARBPROC __glewUniform2ui64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2ui64ARB;
void glUniform2ui64ARB(int location, int x, int y) {
  final _glUniform2ui64ARB = glad__glUniform2ui64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return _glUniform2ui64ARB(location, x, y);
}

/// ```c
/// define glUniform2ui64vARB GLEW_GET_FUN(__glewUniform2ui64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UI64VARBPROC __glewUniform2ui64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2ui64vARB;
void glUniform2ui64vARB(int location, int count, Pointer<Uint64>? value) {
  final _glUniform2ui64vARB = glad__glUniform2ui64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform2ui64vARB(location, count, value);
}

/// ```c
/// define glUniform3i64ARB GLEW_GET_FUN(__glewUniform3i64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3I64ARBPROC __glewUniform3i64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3i64ARB;
void glUniform3i64ARB(int location, int x, int y, int z) {
  final _glUniform3i64ARB = glad__glUniform3i64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y, Int64 z)>>()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return _glUniform3i64ARB(location, x, y, z);
}

/// ```c
/// define glUniform3i64vARB GLEW_GET_FUN(__glewUniform3i64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3I64VARBPROC __glewUniform3i64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3i64vARB;
void glUniform3i64vARB(int location, int count, Pointer<Int64>? value) {
  final _glUniform3i64vARB = glad__glUniform3i64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform3i64vARB(location, count, value);
}

/// ```c
/// define glUniform3ui64ARB GLEW_GET_FUN(__glewUniform3ui64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UI64ARBPROC __glewUniform3ui64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3ui64ARB;
void glUniform3ui64ARB(int location, int x, int y, int z) {
  final _glUniform3ui64ARB = glad__glUniform3ui64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z)>>()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return _glUniform3ui64ARB(location, x, y, z);
}

/// ```c
/// define glUniform3ui64vARB GLEW_GET_FUN(__glewUniform3ui64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UI64VARBPROC __glewUniform3ui64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3ui64vARB;
void glUniform3ui64vARB(int location, int count, Pointer<Uint64>? value) {
  final _glUniform3ui64vARB = glad__glUniform3ui64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform3ui64vARB(location, count, value);
}

/// ```c
/// define glUniform4i64ARB GLEW_GET_FUN(__glewUniform4i64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4I64ARBPROC __glewUniform4i64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4i64ARB;
void glUniform4i64ARB(int location, int x, int y, int z, int w) {
  final _glUniform4i64ARB = glad__glUniform4i64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w)>>()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return _glUniform4i64ARB(location, x, y, z, w);
}

/// ```c
/// define glUniform4i64vARB GLEW_GET_FUN(__glewUniform4i64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4I64VARBPROC __glewUniform4i64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4i64vARB;
void glUniform4i64vARB(int location, int count, Pointer<Int64>? value) {
  final _glUniform4i64vARB = glad__glUniform4i64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform4i64vARB(location, count, value);
}

/// ```c
/// define glUniform4ui64ARB GLEW_GET_FUN(__glewUniform4ui64ARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UI64ARBPROC __glewUniform4ui64ARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4ui64ARB;
void glUniform4ui64ARB(int location, int x, int y, int z, int w) {
  final _glUniform4ui64ARB = glad__glUniform4ui64ARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w)>>()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return _glUniform4ui64ARB(location, x, y, z, w);
}

/// ```c
/// define glUniform4ui64vARB GLEW_GET_FUN(__glewUniform4ui64vARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UI64VARBPROC __glewUniform4ui64vARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4ui64vARB;
void glUniform4ui64vARB(int location, int count, Pointer<Uint64>? value) {
  final _glUniform4ui64vARB = glad__glUniform4ui64vARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform4ui64vARB(location, count, value);
}

/// ----------------------------- GL_ARB_imaging ----------------------------
/// ```c
/// define glColorSubTable GLEW_GET_FUN(__glewColorSubTable)
/// GLEW_FUN_EXPORT PFNGLCOLORSUBTABLEPROC __glewColorSubTable
/// typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorSubTable;
void glColorSubTable(int target, int start, int count, int format, int type, Pointer<Void>? data) {
  final _glColorSubTable = glad__glColorSubTable!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 start, Uint32 count, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int start, int count, int format, int type, Pointer<Void>? data)>();
  return _glColorSubTable(target, start, count, format, type, data);
}

/// ```c
/// define glColorTable GLEW_GET_FUN(__glewColorTable)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLEPROC __glewColorTable
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTable;
void glColorTable(int target, int internalformat, int width, int format, int type, Pointer<Void>? table) {
  final _glColorTable = glad__glColorTable!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? table)>>()
      .asFunction<void Function(int target, int internalformat, int width, int format, int type, Pointer<Void>? table)>();
  return _glColorTable(target, internalformat, width, format, type, table);
}

/// ```c
/// define glColorTableParameterfv GLEW_GET_FUN(__glewColorTableParameterfv)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERFVPROC __glewColorTableParameterfv
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTableParameterfv;
void glColorTableParameterfv(int target, int pname, Pointer<Float>? params) {
  final _glColorTableParameterfv = glad__glColorTableParameterfv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glColorTableParameterfv(target, pname, params);
}

/// ```c
/// define glColorTableParameteriv GLEW_GET_FUN(__glewColorTableParameteriv)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERIVPROC __glewColorTableParameteriv
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTableParameteriv;
void glColorTableParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glColorTableParameteriv = glad__glColorTableParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glColorTableParameteriv(target, pname, params);
}

/// ```c
/// define glConvolutionFilter1D GLEW_GET_FUN(__glewConvolutionFilter1D)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER1DPROC __glewConvolutionFilter1D
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionFilter1D;
void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, Pointer<Void>? image) {
  final _glConvolutionFilter1D = glad__glConvolutionFilter1D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int internalformat, int width, int format, int type, Pointer<Void>? image)>();
  return _glConvolutionFilter1D(target, internalformat, width, format, type, image);
}

/// ```c
/// define glConvolutionFilter2D GLEW_GET_FUN(__glewConvolutionFilter2D)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER2DPROC __glewConvolutionFilter2D
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionFilter2D;
void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? image) {
  final _glConvolutionFilter2D = glad__glConvolutionFilter2D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? image)>();
  return _glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
}

/// ```c
/// define glConvolutionParameterf GLEW_GET_FUN(__glewConvolutionParameterf)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFPROC __glewConvolutionParameterf
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameterf;
void glConvolutionParameterf(int target, int pname, double params) {
  final _glConvolutionParameterf = glad__glConvolutionParameterf!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Float params)>>()
      .asFunction<void Function(int target, int pname, double params)>();
  return _glConvolutionParameterf(target, pname, params);
}

/// ```c
/// define glConvolutionParameterfv GLEW_GET_FUN(__glewConvolutionParameterfv)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFVPROC __glewConvolutionParameterfv
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameterfv;
void glConvolutionParameterfv(int target, int pname, Pointer<Float>? params) {
  final _glConvolutionParameterfv = glad__glConvolutionParameterfv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glConvolutionParameterfv(target, pname, params);
}

/// ```c
/// define glConvolutionParameteri GLEW_GET_FUN(__glewConvolutionParameteri)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIPROC __glewConvolutionParameteri
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameteri;
void glConvolutionParameteri(int target, int pname, int params) {
  final _glConvolutionParameteri = glad__glConvolutionParameteri!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 params)>>()
      .asFunction<void Function(int target, int pname, int params)>();
  return _glConvolutionParameteri(target, pname, params);
}

/// ```c
/// define glConvolutionParameteriv GLEW_GET_FUN(__glewConvolutionParameteriv)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIVPROC __glewConvolutionParameteriv
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameteriv;
void glConvolutionParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glConvolutionParameteriv = glad__glConvolutionParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glConvolutionParameteriv(target, pname, params);
}

/// ```c
/// define glCopyColorSubTable GLEW_GET_FUN(__glewCopyColorSubTable)
/// GLEW_FUN_EXPORT PFNGLCOPYCOLORSUBTABLEPROC __glewCopyColorSubTable
/// typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyColorSubTable;
void glCopyColorSubTable(int target, int start, int x, int y, int width) {
  final _glCopyColorSubTable = glad__glCopyColorSubTable!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 start, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int start, int x, int y, int width)>();
  return _glCopyColorSubTable(target, start, x, y, width);
}

/// ```c
/// define glCopyColorTable GLEW_GET_FUN(__glewCopyColorTable)
/// GLEW_FUN_EXPORT PFNGLCOPYCOLORTABLEPROC __glewCopyColorTable
/// typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyColorTable;
void glCopyColorTable(int target, int internalformat, int x, int y, int width) {
  final _glCopyColorTable = glad__glCopyColorTable!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int internalformat, int x, int y, int width)>();
  return _glCopyColorTable(target, internalformat, x, y, width);
}

/// ```c
/// define glCopyConvolutionFilter1D GLEW_GET_FUN(__glewCopyConvolutionFilter1D)
/// GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DPROC __glewCopyConvolutionFilter1D
/// typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyConvolutionFilter1D;
void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width) {
  final _glCopyConvolutionFilter1D = glad__glCopyConvolutionFilter1D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int internalformat, int x, int y, int width)>();
  return _glCopyConvolutionFilter1D(target, internalformat, x, y, width);
}

/// ```c
/// define glCopyConvolutionFilter2D GLEW_GET_FUN(__glewCopyConvolutionFilter2D)
/// GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DPROC __glewCopyConvolutionFilter2D
/// typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyConvolutionFilter2D;
void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height) {
  final _glCopyConvolutionFilter2D = glad__glCopyConvolutionFilter2D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int internalformat, int x, int y, int width, int height)>();
  return _glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
}

/// ```c
/// define glGetColorTable GLEW_GET_FUN(__glewGetColorTable)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPROC __glewGetColorTable
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, void *table)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTable;
void glGetColorTable(int target, int format, int type, Pointer<Void>? table) {
  final _glGetColorTable = glad__glGetColorTable!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? table)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? table)>();
  return _glGetColorTable(target, format, type, table);
}

/// ```c
/// define glGetColorTableParameterfv GLEW_GET_FUN(__glewGetColorTableParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVPROC __glewGetColorTableParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableParameterfv;
void glGetColorTableParameterfv(int target, int pname, Pointer<Float>? params) {
  final _glGetColorTableParameterfv = glad__glGetColorTableParameterfv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetColorTableParameterfv(target, pname, params);
}

/// ```c
/// define glGetColorTableParameteriv GLEW_GET_FUN(__glewGetColorTableParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVPROC __glewGetColorTableParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableParameteriv;
void glGetColorTableParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetColorTableParameteriv = glad__glGetColorTableParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetColorTableParameteriv(target, pname, params);
}

/// ```c
/// define glGetConvolutionFilter GLEW_GET_FUN(__glewGetConvolutionFilter)
/// GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONFILTERPROC __glewGetConvolutionFilter
/// typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, void *image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetConvolutionFilter;
void glGetConvolutionFilter(int target, int format, int type, Pointer<Void>? image) {
  final _glGetConvolutionFilter = glad__glGetConvolutionFilter!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? image)>();
  return _glGetConvolutionFilter(target, format, type, image);
}

/// ```c
/// define glGetConvolutionParameterfv GLEW_GET_FUN(__glewGetConvolutionParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVPROC __glewGetConvolutionParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetConvolutionParameterfv;
void glGetConvolutionParameterfv(int target, int pname, Pointer<Float>? params) {
  final _glGetConvolutionParameterfv = glad__glGetConvolutionParameterfv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetConvolutionParameterfv(target, pname, params);
}

/// ```c
/// define glGetConvolutionParameteriv GLEW_GET_FUN(__glewGetConvolutionParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVPROC __glewGetConvolutionParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetConvolutionParameteriv;
void glGetConvolutionParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetConvolutionParameteriv = glad__glGetConvolutionParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetConvolutionParameteriv(target, pname, params);
}

/// ```c
/// define glGetHistogram GLEW_GET_FUN(__glewGetHistogram)
/// GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPROC __glewGetHistogram
/// typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHistogram;
void glGetHistogram(int target, int reset, int format, int type, Pointer<Void>? values) {
  final _glGetHistogram = glad__glGetHistogram!
      .cast<NativeFunction<Void Function(Uint32 target, Uint8 reset, Uint32 format, Uint32 type, Pointer<Void>? values)>>()
      .asFunction<void Function(int target, int reset, int format, int type, Pointer<Void>? values)>();
  return _glGetHistogram(target, reset, format, type, values);
}

/// ```c
/// define glGetHistogramParameterfv GLEW_GET_FUN(__glewGetHistogramParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERFVPROC __glewGetHistogramParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHistogramParameterfv;
void glGetHistogramParameterfv(int target, int pname, Pointer<Float>? params) {
  final _glGetHistogramParameterfv = glad__glGetHistogramParameterfv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetHistogramParameterfv(target, pname, params);
}

/// ```c
/// define glGetHistogramParameteriv GLEW_GET_FUN(__glewGetHistogramParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERIVPROC __glewGetHistogramParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHistogramParameteriv;
void glGetHistogramParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetHistogramParameteriv = glad__glGetHistogramParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetHistogramParameteriv(target, pname, params);
}

/// ```c
/// define glGetMinmax GLEW_GET_FUN(__glewGetMinmax)
/// GLEW_FUN_EXPORT PFNGLGETMINMAXPROC __glewGetMinmax
/// typedef void (GLAPIENTRY * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum types, void *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMinmax;
void glGetMinmax(int target, int reset, int format, int types, Pointer<Void>? values) {
  final _glGetMinmax = glad__glGetMinmax!
      .cast<NativeFunction<Void Function(Uint32 target, Uint8 reset, Uint32 format, Uint32 types, Pointer<Void>? values)>>()
      .asFunction<void Function(int target, int reset, int format, int types, Pointer<Void>? values)>();
  return _glGetMinmax(target, reset, format, types, values);
}

/// ```c
/// define glGetMinmaxParameterfv GLEW_GET_FUN(__glewGetMinmaxParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERFVPROC __glewGetMinmaxParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMinmaxParameterfv;
void glGetMinmaxParameterfv(int target, int pname, Pointer<Float>? params) {
  final _glGetMinmaxParameterfv = glad__glGetMinmaxParameterfv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetMinmaxParameterfv(target, pname, params);
}

/// ```c
/// define glGetMinmaxParameteriv GLEW_GET_FUN(__glewGetMinmaxParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERIVPROC __glewGetMinmaxParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMinmaxParameteriv;
void glGetMinmaxParameteriv(int target, int pname, Pointer<Int32>? params) {
  final _glGetMinmaxParameteriv = glad__glGetMinmaxParameteriv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetMinmaxParameteriv(target, pname, params);
}

/// ```c
/// define glGetSeparableFilter GLEW_GET_FUN(__glewGetSeparableFilter)
/// GLEW_FUN_EXPORT PFNGLGETSEPARABLEFILTERPROC __glewGetSeparableFilter
/// typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSeparableFilter;
void glGetSeparableFilter(int target, int format, int type, Pointer<Void>? row, Pointer<Void>? column, Pointer<Void>? span) {
  final _glGetSeparableFilter = glad__glGetSeparableFilter!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? row, Pointer<Void>? column, Pointer<Void>? span)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? row, Pointer<Void>? column, Pointer<Void>? span)>();
  return _glGetSeparableFilter(target, format, type, row, column, span);
}

/// ```c
/// define glHistogram GLEW_GET_FUN(__glewHistogram)
/// GLEW_FUN_EXPORT PFNGLHISTOGRAMPROC __glewHistogram
/// typedef void (GLAPIENTRY * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glHistogram;
void glHistogram(int target, int width, int internalformat, int sink) {
  final _glHistogram = glad__glHistogram!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 width, Uint32 internalformat, Uint8 sink)>>()
      .asFunction<void Function(int target, int width, int internalformat, int sink)>();
  return _glHistogram(target, width, internalformat, sink);
}

/// ```c
/// define glMinmax GLEW_GET_FUN(__glewMinmax)
/// GLEW_FUN_EXPORT PFNGLMINMAXPROC __glewMinmax
/// typedef void (GLAPIENTRY * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMinmax;
void glMinmax(int target, int internalformat, int sink) {
  final _glMinmax = glad__glMinmax!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint8 sink)>>()
      .asFunction<void Function(int target, int internalformat, int sink)>();
  return _glMinmax(target, internalformat, sink);
}

/// ```c
/// define glResetHistogram GLEW_GET_FUN(__glewResetHistogram)
/// GLEW_FUN_EXPORT PFNGLRESETHISTOGRAMPROC __glewResetHistogram
/// typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResetHistogram;
void glResetHistogram(int target) {
  final _glResetHistogram = glad__glResetHistogram!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glResetHistogram(target);
}

/// ```c
/// define glResetMinmax GLEW_GET_FUN(__glewResetMinmax)
/// GLEW_FUN_EXPORT PFNGLRESETMINMAXPROC __glewResetMinmax
/// typedef void (GLAPIENTRY * PFNGLRESETMINMAXPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResetMinmax;
void glResetMinmax(int target) {
  final _glResetMinmax = glad__glResetMinmax!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glResetMinmax(target);
}

/// ```c
/// define glSeparableFilter2D GLEW_GET_FUN(__glewSeparableFilter2D)
/// GLEW_FUN_EXPORT PFNGLSEPARABLEFILTER2DPROC __glewSeparableFilter2D
/// typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSeparableFilter2D;
void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? row, Pointer<Void>? column) {
  final _glSeparableFilter2D = glad__glSeparableFilter2D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? row, Pointer<Void>? column)>>()
      .asFunction<void Function(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? row, Pointer<Void>? column)>();
  return _glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
}

/// ----------------------- GL_ARB_indirect_parameters ----------------------
/// ```c
/// define glMultiDrawArraysIndirectCountARB GLEW_GET_FUN(__glewMultiDrawArraysIndirectCountARB)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC __glewMultiDrawArraysIndirectCountARB
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirectCountARB;
void glMultiDrawArraysIndirectCountARB(int mode, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride) {
  final _glMultiDrawArraysIndirectCountARB = glad__glMultiDrawArraysIndirectCountARB!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint64 drawcount, Uint32 maxdrawcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride)>();
  return _glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
}

/// ```c
/// define glMultiDrawElementsIndirectCountARB GLEW_GET_FUN(__glewMultiDrawElementsIndirectCountARB)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC __glewMultiDrawElementsIndirectCountARB
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirectCountARB;
void glMultiDrawElementsIndirectCountARB(int mode, int type, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride) {
  final _glMultiDrawElementsIndirectCountARB = glad__glMultiDrawElementsIndirectCountARB!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint64 drawcount, Uint32 maxdrawcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int drawcount, int maxdrawcount, int stride)>();
  return _glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
}

/// ------------------------ GL_ARB_instanced_arrays ------------------------
/// ```c
/// define glDrawArraysInstancedARB GLEW_GET_FUN(__glewDrawArraysInstancedARB)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDARBPROC __glewDrawArraysInstancedARB
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstancedARB;
void glDrawArraysInstancedARB(int mode, int first, int count, int primcount) {
  final _glDrawArraysInstancedARB = glad__glDrawArraysInstancedARB!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int first, int count, int primcount)>();
  return _glDrawArraysInstancedARB(mode, first, count, primcount);
}

/// ```c
/// define glDrawElementsInstancedARB GLEW_GET_FUN(__glewDrawElementsInstancedARB)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDARBPROC __glewDrawElementsInstancedARB
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedARB;
void glDrawElementsInstancedARB(int mode, int count, int type, Pointer<Void>? indices, int primcount) {
  final _glDrawElementsInstancedARB = glad__glDrawElementsInstancedARB!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount)>();
  return _glDrawElementsInstancedARB(mode, count, type, indices, primcount);
}

/// ```c
/// define glVertexAttribDivisorARB GLEW_GET_FUN(__glewVertexAttribDivisorARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBDIVISORARBPROC __glewVertexAttribDivisorARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribDivisorARB;
void glVertexAttribDivisorARB(int index, int divisor) {
  final _glVertexAttribDivisorARB = glad__glVertexAttribDivisorARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return _glVertexAttribDivisorARB(index, divisor);
}

/// ---------------------- GL_ARB_internalformat_query ----------------------
/// ```c
/// define glGetInternalformativ GLEW_GET_FUN(__glewGetInternalformativ)
/// GLEW_FUN_EXPORT PFNGLGETINTERNALFORMATIVPROC __glewGetInternalformativ
/// typedef void (GLAPIENTRY * PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInternalformativ;
void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, Pointer<Int32>? params) {
  final _glGetInternalformativ = glad__glGetInternalformativ!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 pname, Uint32 bufSize, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int internalformat, int pname, int bufSize, Pointer<Int32>? params)>();
  return _glGetInternalformativ(target, internalformat, pname, bufSize, params);
}

/// ---------------------- GL_ARB_internalformat_query2 ---------------------
/// ```c
/// define glGetInternalformati64v GLEW_GET_FUN(__glewGetInternalformati64v)
/// GLEW_FUN_EXPORT PFNGLGETINTERNALFORMATI64VPROC __glewGetInternalformati64v
/// typedef void (GLAPIENTRY * PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInternalformati64v;
void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, Pointer<Int64>? params) {
  final _glGetInternalformati64v = glad__glGetInternalformati64v!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 pname, Uint32 bufSize, Pointer<Int64>? params)>>()
      .asFunction<void Function(int target, int internalformat, int pname, int bufSize, Pointer<Int64>? params)>();
  return _glGetInternalformati64v(target, internalformat, pname, bufSize, params);
}

/// ----------------------- GL_ARB_invalidate_subdata -----------------------
/// ```c
/// define glInvalidateBufferData GLEW_GET_FUN(__glewInvalidateBufferData)
/// GLEW_FUN_EXPORT PFNGLINVALIDATEBUFFERDATAPROC __glewInvalidateBufferData
/// typedef void (GLAPIENTRY * PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateBufferData;
void glInvalidateBufferData(int buffer) {
  final _glInvalidateBufferData = glad__glInvalidateBufferData!
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return _glInvalidateBufferData(buffer);
}

/// ```c
/// define glInvalidateBufferSubData GLEW_GET_FUN(__glewInvalidateBufferSubData)
/// GLEW_FUN_EXPORT PFNGLINVALIDATEBUFFERSUBDATAPROC __glewInvalidateBufferSubData
/// typedef void (GLAPIENTRY * PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateBufferSubData;
void glInvalidateBufferSubData(int buffer, int offset, int length) {
  final _glInvalidateBufferSubData = glad__glInvalidateBufferSubData!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 length)>>()
      .asFunction<void Function(int buffer, int offset, int length)>();
  return _glInvalidateBufferSubData(buffer, offset, length);
}

/// ```c
/// define glInvalidateFramebuffer GLEW_GET_FUN(__glewInvalidateFramebuffer)
/// GLEW_FUN_EXPORT PFNGLINVALIDATEFRAMEBUFFERPROC __glewInvalidateFramebuffer
/// typedef void (GLAPIENTRY * PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateFramebuffer;
void glInvalidateFramebuffer(int target, int numAttachments, Pointer<Uint32>? attachments) {
  final _glInvalidateFramebuffer = glad__glInvalidateFramebuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 numAttachments, Pointer<Uint32>? attachments)>>()
      .asFunction<void Function(int target, int numAttachments, Pointer<Uint32>? attachments)>();
  return _glInvalidateFramebuffer(target, numAttachments, attachments);
}

/// ```c
/// define glInvalidateSubFramebuffer GLEW_GET_FUN(__glewInvalidateSubFramebuffer)
/// GLEW_FUN_EXPORT PFNGLINVALIDATESUBFRAMEBUFFERPROC __glewInvalidateSubFramebuffer
/// typedef void (GLAPIENTRY * PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateSubFramebuffer;
void glInvalidateSubFramebuffer(int target, int numAttachments, Pointer<Uint32>? attachments, int x, int y, int width, int height) {
  final _glInvalidateSubFramebuffer = glad__glInvalidateSubFramebuffer!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 numAttachments, Pointer<Uint32>? attachments, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int numAttachments, Pointer<Uint32>? attachments, int x, int y, int width, int height)>();
  return _glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}

/// ```c
/// define glInvalidateTexImage GLEW_GET_FUN(__glewInvalidateTexImage)
/// GLEW_FUN_EXPORT PFNGLINVALIDATETEXIMAGEPROC __glewInvalidateTexImage
/// typedef void (GLAPIENTRY * PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateTexImage;
void glInvalidateTexImage(int texture, int level) {
  final _glInvalidateTexImage = glad__glInvalidateTexImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int texture, int level)>();
  return _glInvalidateTexImage(texture, level);
}

/// ```c
/// define glInvalidateTexSubImage GLEW_GET_FUN(__glewInvalidateTexSubImage)
/// GLEW_FUN_EXPORT PFNGLINVALIDATETEXSUBIMAGEPROC __glewInvalidateTexSubImage
/// typedef void (GLAPIENTRY * PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInvalidateTexSubImage;
void glInvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) {
  final _glInvalidateTexSubImage = glad__glInvalidateTexSubImage!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)>();
  return _glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

/// ------------------------ GL_ARB_map_buffer_range ------------------------
/// ```c
/// define glFlushMappedBufferRange GLEW_GET_FUN(__glewFlushMappedBufferRange)
/// GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDBUFFERRANGEPROC __glewFlushMappedBufferRange
/// typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushMappedBufferRange;
void glFlushMappedBufferRange(int target, int offset, int length) {
  final _glFlushMappedBufferRange = glad__glFlushMappedBufferRange!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 length)>>()
      .asFunction<void Function(int target, int offset, int length)>();
  return _glFlushMappedBufferRange(target, offset, length);
}

/// ```c
/// define glMapBufferRange GLEW_GET_FUN(__glewMapBufferRange)
/// GLEW_FUN_EXPORT PFNGLMAPBUFFERRANGEPROC __glewMapBufferRange
/// typedef void * (GLAPIENTRY * PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapBufferRange;
Pointer<Void>? glMapBufferRange(int target, int offset, int length, int access) {
  final _glMapBufferRange = glad__glMapBufferRange!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 target, Uint64 offset, Uint64 length, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int target, int offset, int length, int access)>();
  return _glMapBufferRange(target, offset, length, access);
}

/// ------------------------- GL_ARB_matrix_palette -------------------------
/// ```c
/// define glCurrentPaletteMatrixARB GLEW_GET_FUN(__glewCurrentPaletteMatrixARB)
/// GLEW_FUN_EXPORT PFNGLCURRENTPALETTEMATRIXARBPROC __glewCurrentPaletteMatrixARB
/// typedef void (GLAPIENTRY * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCurrentPaletteMatrixARB;
void glCurrentPaletteMatrixARB(int index) {
  final _glCurrentPaletteMatrixARB = glad__glCurrentPaletteMatrixARB!
      .cast<NativeFunction<Void Function(Int32 index)>>()
      .asFunction<void Function(int index)>();
  return _glCurrentPaletteMatrixARB(index);
}

/// ```c
/// define glMatrixIndexPointerARB GLEW_GET_FUN(__glewMatrixIndexPointerARB)
/// GLEW_FUN_EXPORT PFNGLMATRIXINDEXPOINTERARBPROC __glewMatrixIndexPointerARB
/// typedef void (GLAPIENTRY * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixIndexPointerARB;
void glMatrixIndexPointerARB(int size, int type, int stride, Pointer<Void>? pointer) {
  final _glMatrixIndexPointerARB = glad__glMatrixIndexPointerARB!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glMatrixIndexPointerARB(size, type, stride, pointer);
}

/// ```c
/// define glMatrixIndexubvARB GLEW_GET_FUN(__glewMatrixIndexubvARB)
/// GLEW_FUN_EXPORT PFNGLMATRIXINDEXUBVARBPROC __glewMatrixIndexubvARB
/// typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, GLubyte *indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixIndexubvARB;
void glMatrixIndexubvARB(int size, Pointer<Uint8>? indices) {
  final _glMatrixIndexubvARB = glad__glMatrixIndexubvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint8>? indices)>>()
      .asFunction<void Function(int size, Pointer<Uint8>? indices)>();
  return _glMatrixIndexubvARB(size, indices);
}

/// ```c
/// define glMatrixIndexuivARB GLEW_GET_FUN(__glewMatrixIndexuivARB)
/// GLEW_FUN_EXPORT PFNGLMATRIXINDEXUIVARBPROC __glewMatrixIndexuivARB
/// typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, GLuint *indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixIndexuivARB;
void glMatrixIndexuivARB(int size, Pointer<Uint32>? indices) {
  final _glMatrixIndexuivARB = glad__glMatrixIndexuivARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint32>? indices)>>()
      .asFunction<void Function(int size, Pointer<Uint32>? indices)>();
  return _glMatrixIndexuivARB(size, indices);
}

/// ```c
/// define glMatrixIndexusvARB GLEW_GET_FUN(__glewMatrixIndexusvARB)
/// GLEW_FUN_EXPORT PFNGLMATRIXINDEXUSVARBPROC __glewMatrixIndexusvARB
/// typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, GLushort *indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixIndexusvARB;
void glMatrixIndexusvARB(int size, Pointer<Uint16>? indices) {
  final _glMatrixIndexusvARB = glad__glMatrixIndexusvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint16>? indices)>>()
      .asFunction<void Function(int size, Pointer<Uint16>? indices)>();
  return _glMatrixIndexusvARB(size, indices);
}

/// --------------------------- GL_ARB_multi_bind ---------------------------
/// ```c
/// define glBindBuffersBase GLEW_GET_FUN(__glewBindBuffersBase)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERSBASEPROC __glewBindBuffersBase
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBuffersBase;
void glBindBuffersBase(int target, int first, int count, Pointer<Uint32>? buffers) {
  final _glBindBuffersBase = glad__glBindBuffersBase!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 first, Uint32 count, Pointer<Uint32>? buffers)>>()
      .asFunction<void Function(int target, int first, int count, Pointer<Uint32>? buffers)>();
  return _glBindBuffersBase(target, first, count, buffers);
}

/// ```c
/// define glBindBuffersRange GLEW_GET_FUN(__glewBindBuffersRange)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERSRANGEPROC __glewBindBuffersRange
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBuffersRange;
void glBindBuffersRange(int target, int first, int count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint64>? sizes) {
  final _glBindBuffersRange = glad__glBindBuffersRange!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 first, Uint32 count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint64>? sizes)>>()
      .asFunction<void Function(int target, int first, int count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint64>? sizes)>();
  return _glBindBuffersRange(target, first, count, buffers, offsets, sizes);
}

/// ```c
/// define glBindImageTextures GLEW_GET_FUN(__glewBindImageTextures)
/// GLEW_FUN_EXPORT PFNGLBINDIMAGETEXTURESPROC __glewBindImageTextures
/// typedef void (GLAPIENTRY * PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint* textures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindImageTextures;
void glBindImageTextures(int first, int count, Pointer<Uint32>? textures) {
  final _glBindImageTextures = glad__glBindImageTextures!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Uint32>? textures)>>()
      .asFunction<void Function(int first, int count, Pointer<Uint32>? textures)>();
  return _glBindImageTextures(first, count, textures);
}

/// ```c
/// define glBindSamplers GLEW_GET_FUN(__glewBindSamplers)
/// GLEW_FUN_EXPORT PFNGLBINDSAMPLERSPROC __glewBindSamplers
/// typedef void (GLAPIENTRY * PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint* samplers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindSamplers;
void glBindSamplers(int first, int count, Pointer<Uint32>? samplers) {
  final _glBindSamplers = glad__glBindSamplers!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Uint32>? samplers)>>()
      .asFunction<void Function(int first, int count, Pointer<Uint32>? samplers)>();
  return _glBindSamplers(first, count, samplers);
}

/// ```c
/// define glBindTextures GLEW_GET_FUN(__glewBindTextures)
/// GLEW_FUN_EXPORT PFNGLBINDTEXTURESPROC __glewBindTextures
/// typedef void (GLAPIENTRY * PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint* textures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTextures;
void glBindTextures(int first, int count, Pointer<Uint32>? textures) {
  final _glBindTextures = glad__glBindTextures!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Uint32>? textures)>>()
      .asFunction<void Function(int first, int count, Pointer<Uint32>? textures)>();
  return _glBindTextures(first, count, textures);
}

/// ```c
/// define glBindVertexBuffers GLEW_GET_FUN(__glewBindVertexBuffers)
/// GLEW_FUN_EXPORT PFNGLBINDVERTEXBUFFERSPROC __glewBindVertexBuffers
/// typedef void (GLAPIENTRY * PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint* buffers, const GLintptr *offsets, const GLsizei *strides)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVertexBuffers;
void glBindVertexBuffers(int first, int count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint32>? strides) {
  final _glBindVertexBuffers = glad__glBindVertexBuffers!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint32>? strides)>>()
      .asFunction<void Function(int first, int count, Pointer<Uint32>? buffers, Pointer<Uint64>? offsets, Pointer<Uint32>? strides)>();
  return _glBindVertexBuffers(first, count, buffers, offsets, strides);
}

/// ----------------------- GL_ARB_multi_draw_indirect ----------------------
/// ```c
/// define glMultiDrawArraysIndirect GLEW_GET_FUN(__glewMultiDrawArraysIndirect)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTPROC __glewMultiDrawArraysIndirect
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirect;
void glMultiDrawArraysIndirect(int mode, Pointer<Void>? indirect, int primcount, int stride) {
  final _glMultiDrawArraysIndirect = glad__glMultiDrawArraysIndirect!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint32 primcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int primcount, int stride)>();
  return _glMultiDrawArraysIndirect(mode, indirect, primcount, stride);
}

/// ```c
/// define glMultiDrawElementsIndirect GLEW_GET_FUN(__glewMultiDrawElementsIndirect)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTPROC __glewMultiDrawElementsIndirect
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirect;
void glMultiDrawElementsIndirect(int mode, int type, Pointer<Void>? indirect, int primcount, int stride) {
  final _glMultiDrawElementsIndirect = glad__glMultiDrawElementsIndirect!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint32 primcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int primcount, int stride)>();
  return _glMultiDrawElementsIndirect(mode, type, indirect, primcount, stride);
}

/// --------------------------- GL_ARB_multisample --------------------------
/// ```c
/// define glSampleCoverageARB GLEW_GET_FUN(__glewSampleCoverageARB)
/// GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEARBPROC __glewSampleCoverageARB
/// typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleCoverageARB;
void glSampleCoverageARB(double value, int invert) {
  final _glSampleCoverageARB = glad__glSampleCoverageARB!
      .cast<NativeFunction<Void Function(Float value, Uint8 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return _glSampleCoverageARB(value, invert);
}

/// -------------------------- GL_ARB_multitexture --------------------------
/// ```c
/// define glActiveTextureARB GLEW_GET_FUN(__glewActiveTextureARB)
/// GLEW_FUN_EXPORT PFNGLACTIVETEXTUREARBPROC __glewActiveTextureARB
/// typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREARBPROC) (GLenum texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glActiveTextureARB;
void glActiveTextureARB(int texture) {
  final _glActiveTextureARB = glad__glActiveTextureARB!
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return _glActiveTextureARB(texture);
}

/// ```c
/// define glClientActiveTextureARB GLEW_GET_FUN(__glewClientActiveTextureARB)
/// GLEW_FUN_EXPORT PFNGLCLIENTACTIVETEXTUREARBPROC __glewClientActiveTextureARB
/// typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClientActiveTextureARB;
void glClientActiveTextureARB(int texture) {
  final _glClientActiveTextureARB = glad__glClientActiveTextureARB!
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return _glClientActiveTextureARB(texture);
}

/// ```c
/// define glMultiTexCoord1dARB GLEW_GET_FUN(__glewMultiTexCoord1dARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DARBPROC __glewMultiTexCoord1dARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1dARB;
void glMultiTexCoord1dARB(int target, double s) {
  final _glMultiTexCoord1dARB = glad__glMultiTexCoord1dARB!
      .cast<NativeFunction<Void Function(Uint32 target, Double s)>>()
      .asFunction<void Function(int target, double s)>();
  return _glMultiTexCoord1dARB(target, s);
}

/// ```c
/// define glMultiTexCoord1dvARB GLEW_GET_FUN(__glewMultiTexCoord1dvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DVARBPROC __glewMultiTexCoord1dvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1dvARB;
void glMultiTexCoord1dvARB(int target, Pointer<Double>? v) {
  final _glMultiTexCoord1dvARB = glad__glMultiTexCoord1dvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord1dvARB(target, v);
}

/// ```c
/// define glMultiTexCoord1fARB GLEW_GET_FUN(__glewMultiTexCoord1fARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FARBPROC __glewMultiTexCoord1fARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1fARB;
void glMultiTexCoord1fARB(int target, double s) {
  final _glMultiTexCoord1fARB = glad__glMultiTexCoord1fARB!
      .cast<NativeFunction<Void Function(Uint32 target, Float s)>>()
      .asFunction<void Function(int target, double s)>();
  return _glMultiTexCoord1fARB(target, s);
}

/// ```c
/// define glMultiTexCoord1fvARB GLEW_GET_FUN(__glewMultiTexCoord1fvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FVARBPROC __glewMultiTexCoord1fvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1fvARB;
void glMultiTexCoord1fvARB(int target, Pointer<Float>? v) {
  final _glMultiTexCoord1fvARB = glad__glMultiTexCoord1fvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord1fvARB(target, v);
}

/// ```c
/// define glMultiTexCoord1iARB GLEW_GET_FUN(__glewMultiTexCoord1iARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IARBPROC __glewMultiTexCoord1iARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1iARB;
void glMultiTexCoord1iARB(int target, int s) {
  final _glMultiTexCoord1iARB = glad__glMultiTexCoord1iARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s)>>()
      .asFunction<void Function(int target, int s)>();
  return _glMultiTexCoord1iARB(target, s);
}

/// ```c
/// define glMultiTexCoord1ivARB GLEW_GET_FUN(__glewMultiTexCoord1ivARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IVARBPROC __glewMultiTexCoord1ivARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1ivARB;
void glMultiTexCoord1ivARB(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord1ivARB = glad__glMultiTexCoord1ivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord1ivARB(target, v);
}

/// ```c
/// define glMultiTexCoord1sARB GLEW_GET_FUN(__glewMultiTexCoord1sARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SARBPROC __glewMultiTexCoord1sARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1sARB;
void glMultiTexCoord1sARB(int target, int s) {
  final _glMultiTexCoord1sARB = glad__glMultiTexCoord1sARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s)>>()
      .asFunction<void Function(int target, int s)>();
  return _glMultiTexCoord1sARB(target, s);
}

/// ```c
/// define glMultiTexCoord1svARB GLEW_GET_FUN(__glewMultiTexCoord1svARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SVARBPROC __glewMultiTexCoord1svARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1svARB;
void glMultiTexCoord1svARB(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord1svARB = glad__glMultiTexCoord1svARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord1svARB(target, v);
}

/// ```c
/// define glMultiTexCoord2dARB GLEW_GET_FUN(__glewMultiTexCoord2dARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DARBPROC __glewMultiTexCoord2dARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2dARB;
void glMultiTexCoord2dARB(int target, double s, double t) {
  final _glMultiTexCoord2dARB = glad__glMultiTexCoord2dARB!
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return _glMultiTexCoord2dARB(target, s, t);
}

/// ```c
/// define glMultiTexCoord2dvARB GLEW_GET_FUN(__glewMultiTexCoord2dvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DVARBPROC __glewMultiTexCoord2dvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2dvARB;
void glMultiTexCoord2dvARB(int target, Pointer<Double>? v) {
  final _glMultiTexCoord2dvARB = glad__glMultiTexCoord2dvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord2dvARB(target, v);
}

/// ```c
/// define glMultiTexCoord2fARB GLEW_GET_FUN(__glewMultiTexCoord2fARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FARBPROC __glewMultiTexCoord2fARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2fARB;
void glMultiTexCoord2fARB(int target, double s, double t) {
  final _glMultiTexCoord2fARB = glad__glMultiTexCoord2fARB!
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t)>>()
      .asFunction<void Function(int target, double s, double t)>();
  return _glMultiTexCoord2fARB(target, s, t);
}

/// ```c
/// define glMultiTexCoord2fvARB GLEW_GET_FUN(__glewMultiTexCoord2fvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FVARBPROC __glewMultiTexCoord2fvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2fvARB;
void glMultiTexCoord2fvARB(int target, Pointer<Float>? v) {
  final _glMultiTexCoord2fvARB = glad__glMultiTexCoord2fvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord2fvARB(target, v);
}

/// ```c
/// define glMultiTexCoord2iARB GLEW_GET_FUN(__glewMultiTexCoord2iARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IARBPROC __glewMultiTexCoord2iARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2iARB;
void glMultiTexCoord2iARB(int target, int s, int t) {
  final _glMultiTexCoord2iARB = glad__glMultiTexCoord2iARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return _glMultiTexCoord2iARB(target, s, t);
}

/// ```c
/// define glMultiTexCoord2ivARB GLEW_GET_FUN(__glewMultiTexCoord2ivARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IVARBPROC __glewMultiTexCoord2ivARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2ivARB;
void glMultiTexCoord2ivARB(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord2ivARB = glad__glMultiTexCoord2ivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord2ivARB(target, v);
}

/// ```c
/// define glMultiTexCoord2sARB GLEW_GET_FUN(__glewMultiTexCoord2sARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SARBPROC __glewMultiTexCoord2sARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2sARB;
void glMultiTexCoord2sARB(int target, int s, int t) {
  final _glMultiTexCoord2sARB = glad__glMultiTexCoord2sARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return _glMultiTexCoord2sARB(target, s, t);
}

/// ```c
/// define glMultiTexCoord2svARB GLEW_GET_FUN(__glewMultiTexCoord2svARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SVARBPROC __glewMultiTexCoord2svARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2svARB;
void glMultiTexCoord2svARB(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord2svARB = glad__glMultiTexCoord2svARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord2svARB(target, v);
}

/// ```c
/// define glMultiTexCoord3dARB GLEW_GET_FUN(__glewMultiTexCoord3dARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DARBPROC __glewMultiTexCoord3dARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3dARB;
void glMultiTexCoord3dARB(int target, double s, double t, double r) {
  final _glMultiTexCoord3dARB = glad__glMultiTexCoord3dARB!
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t, Double r)>>()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return _glMultiTexCoord3dARB(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3dvARB GLEW_GET_FUN(__glewMultiTexCoord3dvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DVARBPROC __glewMultiTexCoord3dvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3dvARB;
void glMultiTexCoord3dvARB(int target, Pointer<Double>? v) {
  final _glMultiTexCoord3dvARB = glad__glMultiTexCoord3dvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord3dvARB(target, v);
}

/// ```c
/// define glMultiTexCoord3fARB GLEW_GET_FUN(__glewMultiTexCoord3fARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FARBPROC __glewMultiTexCoord3fARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3fARB;
void glMultiTexCoord3fARB(int target, double s, double t, double r) {
  final _glMultiTexCoord3fARB = glad__glMultiTexCoord3fARB!
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t, Float r)>>()
      .asFunction<void Function(int target, double s, double t, double r)>();
  return _glMultiTexCoord3fARB(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3fvARB GLEW_GET_FUN(__glewMultiTexCoord3fvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FVARBPROC __glewMultiTexCoord3fvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3fvARB;
void glMultiTexCoord3fvARB(int target, Pointer<Float>? v) {
  final _glMultiTexCoord3fvARB = glad__glMultiTexCoord3fvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord3fvARB(target, v);
}

/// ```c
/// define glMultiTexCoord3iARB GLEW_GET_FUN(__glewMultiTexCoord3iARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IARBPROC __glewMultiTexCoord3iARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3iARB;
void glMultiTexCoord3iARB(int target, int s, int t, int r) {
  final _glMultiTexCoord3iARB = glad__glMultiTexCoord3iARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r)>>()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return _glMultiTexCoord3iARB(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3ivARB GLEW_GET_FUN(__glewMultiTexCoord3ivARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IVARBPROC __glewMultiTexCoord3ivARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3ivARB;
void glMultiTexCoord3ivARB(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord3ivARB = glad__glMultiTexCoord3ivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord3ivARB(target, v);
}

/// ```c
/// define glMultiTexCoord3sARB GLEW_GET_FUN(__glewMultiTexCoord3sARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SARBPROC __glewMultiTexCoord3sARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3sARB;
void glMultiTexCoord3sARB(int target, int s, int t, int r) {
  final _glMultiTexCoord3sARB = glad__glMultiTexCoord3sARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r)>>()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return _glMultiTexCoord3sARB(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3svARB GLEW_GET_FUN(__glewMultiTexCoord3svARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SVARBPROC __glewMultiTexCoord3svARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3svARB;
void glMultiTexCoord3svARB(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord3svARB = glad__glMultiTexCoord3svARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord3svARB(target, v);
}

/// ```c
/// define glMultiTexCoord4dARB GLEW_GET_FUN(__glewMultiTexCoord4dARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DARBPROC __glewMultiTexCoord4dARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4dARB;
void glMultiTexCoord4dARB(int target, double s, double t, double r, double q) {
  final _glMultiTexCoord4dARB = glad__glMultiTexCoord4dARB!
      .cast<NativeFunction<Void Function(Uint32 target, Double s, Double t, Double r, Double q)>>()
      .asFunction<void Function(int target, double s, double t, double r, double q)>();
  return _glMultiTexCoord4dARB(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4dvARB GLEW_GET_FUN(__glewMultiTexCoord4dvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DVARBPROC __glewMultiTexCoord4dvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4dvARB;
void glMultiTexCoord4dvARB(int target, Pointer<Double>? v) {
  final _glMultiTexCoord4dvARB = glad__glMultiTexCoord4dvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, Pointer<Double>? v)>();
  return _glMultiTexCoord4dvARB(target, v);
}

/// ```c
/// define glMultiTexCoord4fARB GLEW_GET_FUN(__glewMultiTexCoord4fARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FARBPROC __glewMultiTexCoord4fARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4fARB;
void glMultiTexCoord4fARB(int target, double s, double t, double r, double q) {
  final _glMultiTexCoord4fARB = glad__glMultiTexCoord4fARB!
      .cast<NativeFunction<Void Function(Uint32 target, Float s, Float t, Float r, Float q)>>()
      .asFunction<void Function(int target, double s, double t, double r, double q)>();
  return _glMultiTexCoord4fARB(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4fvARB GLEW_GET_FUN(__glewMultiTexCoord4fvARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FVARBPROC __glewMultiTexCoord4fvARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4fvARB;
void glMultiTexCoord4fvARB(int target, Pointer<Float>? v) {
  final _glMultiTexCoord4fvARB = glad__glMultiTexCoord4fvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, Pointer<Float>? v)>();
  return _glMultiTexCoord4fvARB(target, v);
}

/// ```c
/// define glMultiTexCoord4iARB GLEW_GET_FUN(__glewMultiTexCoord4iARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IARBPROC __glewMultiTexCoord4iARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4iARB;
void glMultiTexCoord4iARB(int target, int s, int t, int r, int q) {
  final _glMultiTexCoord4iARB = glad__glMultiTexCoord4iARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q)>>()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return _glMultiTexCoord4iARB(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4ivARB GLEW_GET_FUN(__glewMultiTexCoord4ivARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IVARBPROC __glewMultiTexCoord4ivARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4ivARB;
void glMultiTexCoord4ivARB(int target, Pointer<Int32>? v) {
  final _glMultiTexCoord4ivARB = glad__glMultiTexCoord4ivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, Pointer<Int32>? v)>();
  return _glMultiTexCoord4ivARB(target, v);
}

/// ```c
/// define glMultiTexCoord4sARB GLEW_GET_FUN(__glewMultiTexCoord4sARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SARBPROC __glewMultiTexCoord4sARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4sARB;
void glMultiTexCoord4sARB(int target, int s, int t, int r, int q) {
  final _glMultiTexCoord4sARB = glad__glMultiTexCoord4sARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q)>>()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return _glMultiTexCoord4sARB(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4svARB GLEW_GET_FUN(__glewMultiTexCoord4svARB)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SVARBPROC __glewMultiTexCoord4svARB
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4svARB;
void glMultiTexCoord4svARB(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord4svARB = glad__glMultiTexCoord4svARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord4svARB(target, v);
}

/// ------------------------- GL_ARB_occlusion_query ------------------------
/// ```c
/// define glBeginQueryARB GLEW_GET_FUN(__glewBeginQueryARB)
/// GLEW_FUN_EXPORT PFNGLBEGINQUERYARBPROC __glewBeginQueryARB
/// typedef void (GLAPIENTRY * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginQueryARB;
void glBeginQueryARB(int target, int id) {
  final _glBeginQueryARB = glad__glBeginQueryARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return _glBeginQueryARB(target, id);
}

/// ```c
/// define glDeleteQueriesARB GLEW_GET_FUN(__glewDeleteQueriesARB)
/// GLEW_FUN_EXPORT PFNGLDELETEQUERIESARBPROC __glewDeleteQueriesARB
/// typedef void (GLAPIENTRY * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteQueriesARB;
void glDeleteQueriesARB(int n, Pointer<Uint32>? ids) {
  final _glDeleteQueriesARB = glad__glDeleteQueriesARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteQueriesARB(n, ids);
}

/// ```c
/// define glEndQueryARB GLEW_GET_FUN(__glewEndQueryARB)
/// GLEW_FUN_EXPORT PFNGLENDQUERYARBPROC __glewEndQueryARB
/// typedef void (GLAPIENTRY * PFNGLENDQUERYARBPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndQueryARB;
void glEndQueryARB(int target) {
  final _glEndQueryARB = glad__glEndQueryARB!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glEndQueryARB(target);
}

/// ```c
/// define glGenQueriesARB GLEW_GET_FUN(__glewGenQueriesARB)
/// GLEW_FUN_EXPORT PFNGLGENQUERIESARBPROC __glewGenQueriesARB
/// typedef void (GLAPIENTRY * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenQueriesARB;
void glGenQueriesARB(int n, Pointer<Uint32>? ids) {
  final _glGenQueriesARB = glad__glGenQueriesARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenQueriesARB(n, ids);
}

/// ```c
/// define glGetQueryObjectivARB GLEW_GET_FUN(__glewGetQueryObjectivARB)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVARBPROC __glewGetQueryObjectivARB
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectivARB;
void glGetQueryObjectivARB(int id, int pname, Pointer<Int32>? params) {
  final _glGetQueryObjectivARB = glad__glGetQueryObjectivARB!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int32>? params)>();
  return _glGetQueryObjectivARB(id, pname, params);
}

/// ```c
/// define glGetQueryObjectuivARB GLEW_GET_FUN(__glewGetQueryObjectuivARB)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVARBPROC __glewGetQueryObjectuivARB
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectuivARB;
void glGetQueryObjectuivARB(int id, int pname, Pointer<Uint32>? params) {
  final _glGetQueryObjectuivARB = glad__glGetQueryObjectuivARB!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint32>? params)>();
  return _glGetQueryObjectuivARB(id, pname, params);
}

/// ```c
/// define glGetQueryivARB GLEW_GET_FUN(__glewGetQueryivARB)
/// GLEW_FUN_EXPORT PFNGLGETQUERYIVARBPROC __glewGetQueryivARB
/// typedef void (GLAPIENTRY * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryivARB;
void glGetQueryivARB(int target, int pname, Pointer<Int32>? params) {
  final _glGetQueryivARB = glad__glGetQueryivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetQueryivARB(target, pname, params);
}

/// ```c
/// define glIsQueryARB GLEW_GET_FUN(__glewIsQueryARB)
/// GLEW_FUN_EXPORT PFNGLISQUERYARBPROC __glewIsQueryARB
/// typedef GLboolean (GLAPIENTRY * PFNGLISQUERYARBPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsQueryARB;
int glIsQueryARB(int id) {
  final _glIsQueryARB = glad__glIsQueryARB!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsQueryARB(id);
}

/// --------------------- GL_ARB_parallel_shader_compile --------------------
/// ```c
/// define glMaxShaderCompilerThreadsARB GLEW_GET_FUN(__glewMaxShaderCompilerThreadsARB)
/// GLEW_FUN_EXPORT PFNGLMAXSHADERCOMPILERTHREADSARBPROC __glewMaxShaderCompilerThreadsARB
/// typedef void (GLAPIENTRY * PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMaxShaderCompilerThreadsARB;
void glMaxShaderCompilerThreadsARB(int count) {
  final _glMaxShaderCompilerThreadsARB = glad__glMaxShaderCompilerThreadsARB!
      .cast<NativeFunction<Void Function(Uint32 count)>>()
      .asFunction<void Function(int count)>();
  return _glMaxShaderCompilerThreadsARB(count);
}

/// ------------------------ GL_ARB_point_parameters ------------------------
/// ```c
/// define glPointParameterfARB GLEW_GET_FUN(__glewPointParameterfARB)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFARBPROC __glewPointParameterfARB
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterfARB;
void glPointParameterfARB(int pname, double param) {
  final _glPointParameterfARB = glad__glPointParameterfARB!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glPointParameterfARB(pname, param);
}

/// ```c
/// define glPointParameterfvARB GLEW_GET_FUN(__glewPointParameterfvARB)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVARBPROC __glewPointParameterfvARB
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterfvARB;
void glPointParameterfvARB(int pname, Pointer<Float>? params) {
  final _glPointParameterfvARB = glad__glPointParameterfvARB!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glPointParameterfvARB(pname, params);
}

/// ---------------------- GL_ARB_polygon_offset_clamp ----------------------
/// ```c
/// define glPolygonOffsetClamp GLEW_GET_FUN(__glewPolygonOffsetClamp)
/// GLEW_FUN_EXPORT PFNGLPOLYGONOFFSETCLAMPPROC __glewPolygonOffsetClamp
/// typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETCLAMPPROC) (GLfloat factor, GLfloat units, GLfloat clamp)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPolygonOffsetClamp;
void glPolygonOffsetClamp(double factor, double units, double clamp) {
  final _glPolygonOffsetClamp = glad__glPolygonOffsetClamp!
      .cast<NativeFunction<Void Function(Float factor, Float units, Float clamp)>>()
      .asFunction<void Function(double factor, double units, double clamp)>();
  return _glPolygonOffsetClamp(factor, units, clamp);
}

/// --------------------- GL_ARB_program_interface_query --------------------
/// ```c
/// define glGetProgramInterfaceiv GLEW_GET_FUN(__glewGetProgramInterfaceiv)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMINTERFACEIVPROC __glewGetProgramInterfaceiv
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramInterfaceiv;
void glGetProgramInterfaceiv(int program, int programInterface, int pname, Pointer<Int32>? params) {
  final _glGetProgramInterfaceiv = glad__glGetProgramInterfaceiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 programInterface, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int programInterface, int pname, Pointer<Int32>? params)>();
  return _glGetProgramInterfaceiv(program, programInterface, pname, params);
}

/// ```c
/// define glGetProgramResourceIndex GLEW_GET_FUN(__glewGetProgramResourceIndex)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCEINDEXPROC __glewGetProgramResourceIndex
/// typedef GLuint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourceIndex;
int glGetProgramResourceIndex(int program, int programInterface, String name) {
  final _glGetProgramResourceIndex = glad__glGetProgramResourceIndex!
      .cast<NativeFunction<Uint32 Function(Uint32 program, Uint32 programInterface, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, int programInterface, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetProgramResourceIndex(program, programInterface, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetProgramResourceLocation GLEW_GET_FUN(__glewGetProgramResourceLocation)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCELOCATIONPROC __glewGetProgramResourceLocation
/// typedef GLint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourceLocation;
int glGetProgramResourceLocation(int program, int programInterface, String name) {
  final _glGetProgramResourceLocation = glad__glGetProgramResourceLocation!
      .cast<NativeFunction<Int32 Function(Uint32 program, Uint32 programInterface, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, int programInterface, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetProgramResourceLocation(program, programInterface, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetProgramResourceLocationIndex GLEW_GET_FUN(__glewGetProgramResourceLocationIndex)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC __glewGetProgramResourceLocationIndex
/// typedef GLint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourceLocationIndex;
int glGetProgramResourceLocationIndex(int program, int programInterface, String name) {
  final _glGetProgramResourceLocationIndex = glad__glGetProgramResourceLocationIndex!
      .cast<NativeFunction<Int32 Function(Uint32 program, Uint32 programInterface, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, int programInterface, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetProgramResourceLocationIndex(program, programInterface, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetProgramResourceName GLEW_GET_FUN(__glewGetProgramResourceName)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCENAMEPROC __glewGetProgramResourceName
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourceName;
void glGetProgramResourceName(int program, int programInterface, int index, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? name) {
  final _glGetProgramResourceName = glad__glGetProgramResourceName!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 programInterface, Uint32 index, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int programInterface, int index, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? name)>();
  return _glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}

/// ```c
/// define glGetProgramResourceiv GLEW_GET_FUN(__glewGetProgramResourceiv)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCEIVPROC __glewGetProgramResourceiv
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourceiv;
void glGetProgramResourceiv(int program, int programInterface, int index, int propCount, Pointer<Uint32>? props, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? params) {
  final _glGetProgramResourceiv = glad__glGetProgramResourceiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 programInterface, Uint32 index, Uint32 propCount, Pointer<Uint32>? props, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int programInterface, int index, int propCount, Pointer<Uint32>? props, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? params)>();
  return _glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}

/// ------------------------ GL_ARB_provoking_vertex ------------------------
/// ```c
/// define glProvokingVertex GLEW_GET_FUN(__glewProvokingVertex)
/// GLEW_FUN_EXPORT PFNGLPROVOKINGVERTEXPROC __glewProvokingVertex
/// typedef void (GLAPIENTRY * PFNGLPROVOKINGVERTEXPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProvokingVertex;
void glProvokingVertex(int mode) {
  final _glProvokingVertex = glad__glProvokingVertex!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glProvokingVertex(mode);
}

/// --------------------------- GL_ARB_robustness ---------------------------
/// ```c
/// define glGetGraphicsResetStatusARB GLEW_GET_FUN(__glewGetGraphicsResetStatusARB)
/// GLEW_FUN_EXPORT PFNGLGETGRAPHICSRESETSTATUSARBPROC __glewGetGraphicsResetStatusARB
/// typedef GLenum (GLAPIENTRY * PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetGraphicsResetStatusARB;
int glGetGraphicsResetStatusARB() {
  final _glGetGraphicsResetStatusARB = glad__glGetGraphicsResetStatusARB!
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return _glGetGraphicsResetStatusARB();
}

/// ```c
/// define glGetnColorTableARB GLEW_GET_FUN(__glewGetnColorTableARB)
/// GLEW_FUN_EXPORT PFNGLGETNCOLORTABLEARBPROC __glewGetnColorTableARB
/// typedef void (GLAPIENTRY * PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnColorTableARB;
void glGetnColorTableARB(int target, int format, int type, int bufSize, Pointer<Void>? table) {
  final _glGetnColorTableARB = glad__glGetnColorTableARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? table)>>()
      .asFunction<void Function(int target, int format, int type, int bufSize, Pointer<Void>? table)>();
  return _glGetnColorTableARB(target, format, type, bufSize, table);
}

/// ```c
/// define glGetnCompressedTexImageARB GLEW_GET_FUN(__glewGetnCompressedTexImageARB)
/// GLEW_FUN_EXPORT PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC __glewGetnCompressedTexImageARB
/// typedef void (GLAPIENTRY * PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void* img)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnCompressedTexImageARB;
void glGetnCompressedTexImageARB(int target, int lod, int bufSize, Pointer<Void>? img) {
  final _glGetnCompressedTexImageARB = glad__glGetnCompressedTexImageARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 lod, Uint32 bufSize, Pointer<Void>? img)>>()
      .asFunction<void Function(int target, int lod, int bufSize, Pointer<Void>? img)>();
  return _glGetnCompressedTexImageARB(target, lod, bufSize, img);
}

/// ```c
/// define glGetnConvolutionFilterARB GLEW_GET_FUN(__glewGetnConvolutionFilterARB)
/// GLEW_FUN_EXPORT PFNGLGETNCONVOLUTIONFILTERARBPROC __glewGetnConvolutionFilterARB
/// typedef void (GLAPIENTRY * PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnConvolutionFilterARB;
void glGetnConvolutionFilterARB(int target, int format, int type, int bufSize, Pointer<Void>? image) {
  final _glGetnConvolutionFilterARB = glad__glGetnConvolutionFilterARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int format, int type, int bufSize, Pointer<Void>? image)>();
  return _glGetnConvolutionFilterARB(target, format, type, bufSize, image);
}

/// ```c
/// define glGetnHistogramARB GLEW_GET_FUN(__glewGetnHistogramARB)
/// GLEW_FUN_EXPORT PFNGLGETNHISTOGRAMARBPROC __glewGetnHistogramARB
/// typedef void (GLAPIENTRY * PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnHistogramARB;
void glGetnHistogramARB(int target, int reset, int format, int type, int bufSize, Pointer<Void>? values) {
  final _glGetnHistogramARB = glad__glGetnHistogramARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint8 reset, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? values)>>()
      .asFunction<void Function(int target, int reset, int format, int type, int bufSize, Pointer<Void>? values)>();
  return _glGetnHistogramARB(target, reset, format, type, bufSize, values);
}

/// ```c
/// define glGetnMapdvARB GLEW_GET_FUN(__glewGetnMapdvARB)
/// GLEW_FUN_EXPORT PFNGLGETNMAPDVARBPROC __glewGetnMapdvARB
/// typedef void (GLAPIENTRY * PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnMapdvARB;
void glGetnMapdvARB(int target, int query, int bufSize, Pointer<Double>? v) {
  final _glGetnMapdvARB = glad__glGetnMapdvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 query, Uint32 bufSize, Pointer<Double>? v)>>()
      .asFunction<void Function(int target, int query, int bufSize, Pointer<Double>? v)>();
  return _glGetnMapdvARB(target, query, bufSize, v);
}

/// ```c
/// define glGetnMapfvARB GLEW_GET_FUN(__glewGetnMapfvARB)
/// GLEW_FUN_EXPORT PFNGLGETNMAPFVARBPROC __glewGetnMapfvARB
/// typedef void (GLAPIENTRY * PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnMapfvARB;
void glGetnMapfvARB(int target, int query, int bufSize, Pointer<Float>? v) {
  final _glGetnMapfvARB = glad__glGetnMapfvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 query, Uint32 bufSize, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, int query, int bufSize, Pointer<Float>? v)>();
  return _glGetnMapfvARB(target, query, bufSize, v);
}

/// ```c
/// define glGetnMapivARB GLEW_GET_FUN(__glewGetnMapivARB)
/// GLEW_FUN_EXPORT PFNGLGETNMAPIVARBPROC __glewGetnMapivARB
/// typedef void (GLAPIENTRY * PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnMapivARB;
void glGetnMapivARB(int target, int query, int bufSize, Pointer<Int32>? v) {
  final _glGetnMapivARB = glad__glGetnMapivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 query, Uint32 bufSize, Pointer<Int32>? v)>>()
      .asFunction<void Function(int target, int query, int bufSize, Pointer<Int32>? v)>();
  return _glGetnMapivARB(target, query, bufSize, v);
}

/// ```c
/// define glGetnMinmaxARB GLEW_GET_FUN(__glewGetnMinmaxARB)
/// GLEW_FUN_EXPORT PFNGLGETNMINMAXARBPROC __glewGetnMinmaxARB
/// typedef void (GLAPIENTRY * PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnMinmaxARB;
void glGetnMinmaxARB(int target, int reset, int format, int type, int bufSize, Pointer<Void>? values) {
  final _glGetnMinmaxARB = glad__glGetnMinmaxARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint8 reset, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? values)>>()
      .asFunction<void Function(int target, int reset, int format, int type, int bufSize, Pointer<Void>? values)>();
  return _glGetnMinmaxARB(target, reset, format, type, bufSize, values);
}

/// ```c
/// define glGetnPixelMapfvARB GLEW_GET_FUN(__glewGetnPixelMapfvARB)
/// GLEW_FUN_EXPORT PFNGLGETNPIXELMAPFVARBPROC __glewGetnPixelMapfvARB
/// typedef void (GLAPIENTRY * PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnPixelMapfvARB;
void glGetnPixelMapfvARB(int map, int bufSize, Pointer<Float>? values) {
  final _glGetnPixelMapfvARB = glad__glGetnPixelMapfvARB!
      .cast<NativeFunction<Void Function(Uint32 map, Uint32 bufSize, Pointer<Float>? values)>>()
      .asFunction<void Function(int map, int bufSize, Pointer<Float>? values)>();
  return _glGetnPixelMapfvARB(map, bufSize, values);
}

/// ```c
/// define glGetnPixelMapuivARB GLEW_GET_FUN(__glewGetnPixelMapuivARB)
/// GLEW_FUN_EXPORT PFNGLGETNPIXELMAPUIVARBPROC __glewGetnPixelMapuivARB
/// typedef void (GLAPIENTRY * PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnPixelMapuivARB;
void glGetnPixelMapuivARB(int map, int bufSize, Pointer<Uint32>? values) {
  final _glGetnPixelMapuivARB = glad__glGetnPixelMapuivARB!
      .cast<NativeFunction<Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint32>? values)>>()
      .asFunction<void Function(int map, int bufSize, Pointer<Uint32>? values)>();
  return _glGetnPixelMapuivARB(map, bufSize, values);
}

/// ```c
/// define glGetnPixelMapusvARB GLEW_GET_FUN(__glewGetnPixelMapusvARB)
/// GLEW_FUN_EXPORT PFNGLGETNPIXELMAPUSVARBPROC __glewGetnPixelMapusvARB
/// typedef void (GLAPIENTRY * PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnPixelMapusvARB;
void glGetnPixelMapusvARB(int map, int bufSize, Pointer<Uint16>? values) {
  final _glGetnPixelMapusvARB = glad__glGetnPixelMapusvARB!
      .cast<NativeFunction<Void Function(Uint32 map, Uint32 bufSize, Pointer<Uint16>? values)>>()
      .asFunction<void Function(int map, int bufSize, Pointer<Uint16>? values)>();
  return _glGetnPixelMapusvARB(map, bufSize, values);
}

/// ```c
/// define glGetnPolygonStippleARB GLEW_GET_FUN(__glewGetnPolygonStippleARB)
/// GLEW_FUN_EXPORT PFNGLGETNPOLYGONSTIPPLEARBPROC __glewGetnPolygonStippleARB
/// typedef void (GLAPIENTRY * PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte* pattern)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnPolygonStippleARB;
void glGetnPolygonStippleARB(int bufSize, Pointer<Uint8>? pattern) {
  final _glGetnPolygonStippleARB = glad__glGetnPolygonStippleARB!
      .cast<NativeFunction<Void Function(Uint32 bufSize, Pointer<Uint8>? pattern)>>()
      .asFunction<void Function(int bufSize, Pointer<Uint8>? pattern)>();
  return _glGetnPolygonStippleARB(bufSize, pattern);
}

/// ```c
/// define glGetnSeparableFilterARB GLEW_GET_FUN(__glewGetnSeparableFilterARB)
/// GLEW_FUN_EXPORT PFNGLGETNSEPARABLEFILTERARBPROC __glewGetnSeparableFilterARB
/// typedef void (GLAPIENTRY * PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void*column, void*span)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnSeparableFilterARB;
void glGetnSeparableFilterARB(int target, int format, int type, int rowBufSize, Pointer<Void>? row, int columnBufSize, Pointer<Void>? column, Pointer<Void>? span) {
  final _glGetnSeparableFilterARB = glad__glGetnSeparableFilterARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Uint32 rowBufSize, Pointer<Void>? row, Uint32 columnBufSize, Pointer<Void>? column, Pointer<Void>? span)>>()
      .asFunction<void Function(int target, int format, int type, int rowBufSize, Pointer<Void>? row, int columnBufSize, Pointer<Void>? column, Pointer<Void>? span)>();
  return _glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

/// ```c
/// define glGetnTexImageARB GLEW_GET_FUN(__glewGetnTexImageARB)
/// GLEW_FUN_EXPORT PFNGLGETNTEXIMAGEARBPROC __glewGetnTexImageARB
/// typedef void (GLAPIENTRY * PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnTexImageARB;
void glGetnTexImageARB(int target, int level, int format, int type, int bufSize, Pointer<Void>? img) {
  final _glGetnTexImageARB = glad__glGetnTexImageARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? img)>>()
      .asFunction<void Function(int target, int level, int format, int type, int bufSize, Pointer<Void>? img)>();
  return _glGetnTexImageARB(target, level, format, type, bufSize, img);
}

/// ```c
/// define glGetnUniformdvARB GLEW_GET_FUN(__glewGetnUniformdvARB)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMDVARBPROC __glewGetnUniformdvARB
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformdvARB;
void glGetnUniformdvARB(int program, int location, int bufSize, Pointer<Double>? params) {
  final _glGetnUniformdvARB = glad__glGetnUniformdvARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Double>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Double>? params)>();
  return _glGetnUniformdvARB(program, location, bufSize, params);
}

/// ```c
/// define glGetnUniformfvARB GLEW_GET_FUN(__glewGetnUniformfvARB)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMFVARBPROC __glewGetnUniformfvARB
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformfvARB;
void glGetnUniformfvARB(int program, int location, int bufSize, Pointer<Float>? params) {
  final _glGetnUniformfvARB = glad__glGetnUniformfvARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Float>? params)>();
  return _glGetnUniformfvARB(program, location, bufSize, params);
}

/// ```c
/// define glGetnUniformivARB GLEW_GET_FUN(__glewGetnUniformivARB)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMIVARBPROC __glewGetnUniformivARB
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformivARB;
void glGetnUniformivARB(int program, int location, int bufSize, Pointer<Int32>? params) {
  final _glGetnUniformivARB = glad__glGetnUniformivARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Int32>? params)>();
  return _glGetnUniformivARB(program, location, bufSize, params);
}

/// ```c
/// define glGetnUniformuivARB GLEW_GET_FUN(__glewGetnUniformuivARB)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMUIVARBPROC __glewGetnUniformuivARB
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformuivARB;
void glGetnUniformuivARB(int program, int location, int bufSize, Pointer<Uint32>? params) {
  final _glGetnUniformuivARB = glad__glGetnUniformuivARB!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Uint32>? params)>();
  return _glGetnUniformuivARB(program, location, bufSize, params);
}

/// ```c
/// define glReadnPixelsARB GLEW_GET_FUN(__glewReadnPixelsARB)
/// GLEW_FUN_EXPORT PFNGLREADNPIXELSARBPROC __glewReadnPixelsARB
/// typedef void (GLAPIENTRY * PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReadnPixelsARB;
void glReadnPixelsARB(int x, int y, int width, int height, int format, int type, int bufSize, Pointer<Void>? data) {
  final _glReadnPixelsARB = glad__glReadnPixelsARB!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int x, int y, int width, int height, int format, int type, int bufSize, Pointer<Void>? data)>();
  return _glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
}

/// ------------------------ GL_ARB_sample_locations ------------------------
/// ```c
/// define glFramebufferSampleLocationsfvARB GLEW_GET_FUN(__glewFramebufferSampleLocationsfvARB)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC __glewFramebufferSampleLocationsfvARB
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferSampleLocationsfvARB;
void glFramebufferSampleLocationsfvARB(int target, int start, int count, Pointer<Float>? v) {
  final _glFramebufferSampleLocationsfvARB = glad__glFramebufferSampleLocationsfvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 start, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, int start, int count, Pointer<Float>? v)>();
  return _glFramebufferSampleLocationsfvARB(target, start, count, v);
}

/// ```c
/// define glNamedFramebufferSampleLocationsfvARB GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvARB)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC __glewNamedFramebufferSampleLocationsfvARB
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferSampleLocationsfvARB;
void glNamedFramebufferSampleLocationsfvARB(int framebuffer, int start, int count, Pointer<Float>? v) {
  final _glNamedFramebufferSampleLocationsfvARB = glad__glNamedFramebufferSampleLocationsfvARB!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 start, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int framebuffer, int start, int count, Pointer<Float>? v)>();
  return _glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
}

/// ------------------------- GL_ARB_sample_shading -------------------------
/// ```c
/// define glMinSampleShadingARB GLEW_GET_FUN(__glewMinSampleShadingARB)
/// GLEW_FUN_EXPORT PFNGLMINSAMPLESHADINGARBPROC __glewMinSampleShadingARB
/// typedef void (GLAPIENTRY * PFNGLMINSAMPLESHADINGARBPROC) (GLclampf value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMinSampleShadingARB;
void glMinSampleShadingARB(double value) {
  final _glMinSampleShadingARB = glad__glMinSampleShadingARB!
      .cast<NativeFunction<Void Function(Float value)>>()
      .asFunction<void Function(double value)>();
  return _glMinSampleShadingARB(value);
}

/// ------------------------- GL_ARB_sampler_objects ------------------------
/// ```c
/// define glBindSampler GLEW_GET_FUN(__glewBindSampler)
/// GLEW_FUN_EXPORT PFNGLBINDSAMPLERPROC __glewBindSampler
/// typedef void (GLAPIENTRY * PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindSampler;
void glBindSampler(int unit, int sampler) {
  final _glBindSampler = glad__glBindSampler!
      .cast<NativeFunction<Void Function(Uint32 unit, Uint32 sampler)>>()
      .asFunction<void Function(int unit, int sampler)>();
  return _glBindSampler(unit, sampler);
}

/// ```c
/// define glDeleteSamplers GLEW_GET_FUN(__glewDeleteSamplers)
/// GLEW_FUN_EXPORT PFNGLDELETESAMPLERSPROC __glewDeleteSamplers
/// typedef void (GLAPIENTRY * PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint * samplers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteSamplers;
void glDeleteSamplers(int count, Pointer<Uint32>? samplers) {
  final _glDeleteSamplers = glad__glDeleteSamplers!
      .cast<NativeFunction<Void Function(Uint32 count, Pointer<Uint32>? samplers)>>()
      .asFunction<void Function(int count, Pointer<Uint32>? samplers)>();
  return _glDeleteSamplers(count, samplers);
}

/// ```c
/// define glGenSamplers GLEW_GET_FUN(__glewGenSamplers)
/// GLEW_FUN_EXPORT PFNGLGENSAMPLERSPROC __glewGenSamplers
/// typedef void (GLAPIENTRY * PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint* samplers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenSamplers;
void glGenSamplers(int count, Pointer<Uint32>? samplers) {
  final _glGenSamplers = glad__glGenSamplers!
      .cast<NativeFunction<Void Function(Uint32 count, Pointer<Uint32>? samplers)>>()
      .asFunction<void Function(int count, Pointer<Uint32>? samplers)>();
  return _glGenSamplers(count, samplers);
}

/// ```c
/// define glGetSamplerParameterIiv GLEW_GET_FUN(__glewGetSamplerParameterIiv)
/// GLEW_FUN_EXPORT PFNGLGETSAMPLERPARAMETERIIVPROC __glewGetSamplerParameterIiv
/// typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSamplerParameterIiv;
void glGetSamplerParameterIiv(int sampler, int pname, Pointer<Int32>? params) {
  final _glGetSamplerParameterIiv = glad__glGetSamplerParameterIiv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Int32>? params)>();
  return _glGetSamplerParameterIiv(sampler, pname, params);
}

/// ```c
/// define glGetSamplerParameterIuiv GLEW_GET_FUN(__glewGetSamplerParameterIuiv)
/// GLEW_FUN_EXPORT PFNGLGETSAMPLERPARAMETERIUIVPROC __glewGetSamplerParameterIuiv
/// typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSamplerParameterIuiv;
void glGetSamplerParameterIuiv(int sampler, int pname, Pointer<Uint32>? params) {
  final _glGetSamplerParameterIuiv = glad__glGetSamplerParameterIuiv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Uint32>? params)>();
  return _glGetSamplerParameterIuiv(sampler, pname, params);
}

/// ```c
/// define glGetSamplerParameterfv GLEW_GET_FUN(__glewGetSamplerParameterfv)
/// GLEW_FUN_EXPORT PFNGLGETSAMPLERPARAMETERFVPROC __glewGetSamplerParameterfv
/// typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSamplerParameterfv;
void glGetSamplerParameterfv(int sampler, int pname, Pointer<Float>? params) {
  final _glGetSamplerParameterfv = glad__glGetSamplerParameterfv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Float>? params)>();
  return _glGetSamplerParameterfv(sampler, pname, params);
}

/// ```c
/// define glGetSamplerParameteriv GLEW_GET_FUN(__glewGetSamplerParameteriv)
/// GLEW_FUN_EXPORT PFNGLGETSAMPLERPARAMETERIVPROC __glewGetSamplerParameteriv
/// typedef void (GLAPIENTRY * PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSamplerParameteriv;
void glGetSamplerParameteriv(int sampler, int pname, Pointer<Int32>? params) {
  final _glGetSamplerParameteriv = glad__glGetSamplerParameteriv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Int32>? params)>();
  return _glGetSamplerParameteriv(sampler, pname, params);
}

/// ```c
/// define glIsSampler GLEW_GET_FUN(__glewIsSampler)
/// GLEW_FUN_EXPORT PFNGLISSAMPLERPROC __glewIsSampler
/// typedef GLboolean (GLAPIENTRY * PFNGLISSAMPLERPROC) (GLuint sampler)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsSampler;
int glIsSampler(int sampler) {
  final _glIsSampler = glad__glIsSampler!
      .cast<NativeFunction<Uint8 Function(Uint32 sampler)>>()
      .asFunction<int Function(int sampler)>();
  return _glIsSampler(sampler);
}

/// ```c
/// define glSamplerParameterIiv GLEW_GET_FUN(__glewSamplerParameterIiv)
/// GLEW_FUN_EXPORT PFNGLSAMPLERPARAMETERIIVPROC __glewSamplerParameterIiv
/// typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplerParameterIiv;
void glSamplerParameterIiv(int sampler, int pname, Pointer<Int32>? params) {
  final _glSamplerParameterIiv = glad__glSamplerParameterIiv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Int32>? params)>();
  return _glSamplerParameterIiv(sampler, pname, params);
}

/// ```c
/// define glSamplerParameterIuiv GLEW_GET_FUN(__glewSamplerParameterIuiv)
/// GLEW_FUN_EXPORT PFNGLSAMPLERPARAMETERIUIVPROC __glewSamplerParameterIuiv
/// typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplerParameterIuiv;
void glSamplerParameterIuiv(int sampler, int pname, Pointer<Uint32>? params) {
  final _glSamplerParameterIuiv = glad__glSamplerParameterIuiv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Uint32>? params)>();
  return _glSamplerParameterIuiv(sampler, pname, params);
}

/// ```c
/// define glSamplerParameterf GLEW_GET_FUN(__glewSamplerParameterf)
/// GLEW_FUN_EXPORT PFNGLSAMPLERPARAMETERFPROC __glewSamplerParameterf
/// typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplerParameterf;
void glSamplerParameterf(int sampler, int pname, double param) {
  final _glSamplerParameterf = glad__glSamplerParameterf!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Float param)>>()
      .asFunction<void Function(int sampler, int pname, double param)>();
  return _glSamplerParameterf(sampler, pname, param);
}

/// ```c
/// define glSamplerParameterfv GLEW_GET_FUN(__glewSamplerParameterfv)
/// GLEW_FUN_EXPORT PFNGLSAMPLERPARAMETERFVPROC __glewSamplerParameterfv
/// typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplerParameterfv;
void glSamplerParameterfv(int sampler, int pname, Pointer<Float>? params) {
  final _glSamplerParameterfv = glad__glSamplerParameterfv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Float>? params)>();
  return _glSamplerParameterfv(sampler, pname, params);
}

/// ```c
/// define glSamplerParameteri GLEW_GET_FUN(__glewSamplerParameteri)
/// GLEW_FUN_EXPORT PFNGLSAMPLERPARAMETERIPROC __glewSamplerParameteri
/// typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplerParameteri;
void glSamplerParameteri(int sampler, int pname, int param) {
  final _glSamplerParameteri = glad__glSamplerParameteri!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int sampler, int pname, int param)>();
  return _glSamplerParameteri(sampler, pname, param);
}

/// ```c
/// define glSamplerParameteriv GLEW_GET_FUN(__glewSamplerParameteriv)
/// GLEW_FUN_EXPORT PFNGLSAMPLERPARAMETERIVPROC __glewSamplerParameteriv
/// typedef void (GLAPIENTRY * PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplerParameteriv;
void glSamplerParameteriv(int sampler, int pname, Pointer<Int32>? params) {
  final _glSamplerParameteriv = glad__glSamplerParameteriv!
      .cast<NativeFunction<Void Function(Uint32 sampler, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int sampler, int pname, Pointer<Int32>? params)>();
  return _glSamplerParameteriv(sampler, pname, params);
}

/// --------------------- GL_ARB_separate_shader_objects --------------------
/// ```c
/// define glActiveShaderProgram GLEW_GET_FUN(__glewActiveShaderProgram)
/// GLEW_FUN_EXPORT PFNGLACTIVESHADERPROGRAMPROC __glewActiveShaderProgram
/// typedef void (GLAPIENTRY * PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glActiveShaderProgram;
void glActiveShaderProgram(int pipeline, int program) {
  final _glActiveShaderProgram = glad__glActiveShaderProgram!
      .cast<NativeFunction<Void Function(Uint32 pipeline, Uint32 program)>>()
      .asFunction<void Function(int pipeline, int program)>();
  return _glActiveShaderProgram(pipeline, program);
}

/// ```c
/// define glBindProgramPipeline GLEW_GET_FUN(__glewBindProgramPipeline)
/// GLEW_FUN_EXPORT PFNGLBINDPROGRAMPIPELINEPROC __glewBindProgramPipeline
/// typedef void (GLAPIENTRY * PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindProgramPipeline;
void glBindProgramPipeline(int pipeline) {
  final _glBindProgramPipeline = glad__glBindProgramPipeline!
      .cast<NativeFunction<Void Function(Uint32 pipeline)>>()
      .asFunction<void Function(int pipeline)>();
  return _glBindProgramPipeline(pipeline);
}

/// ```c
/// define glCreateShaderProgramv GLEW_GET_FUN(__glewCreateShaderProgramv)
/// GLEW_FUN_EXPORT PFNGLCREATESHADERPROGRAMVPROC __glewCreateShaderProgramv
/// typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar * const * strings)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateShaderProgramv;
int glCreateShaderProgramv(int type, int count, Pointer<Pointer<Utf8>>? strings) {
  final _glCreateShaderProgramv = glad__glCreateShaderProgramv!
      .cast<NativeFunction<Uint32 Function(Uint32 type, Uint32 count, Pointer<Pointer<Utf8>>? strings)>>()
      .asFunction<int Function(int type, int count, Pointer<Pointer<Utf8>>? strings)>();
  return _glCreateShaderProgramv(type, count, strings);
}

/// ```c
/// define glDeleteProgramPipelines GLEW_GET_FUN(__glewDeleteProgramPipelines)
/// GLEW_FUN_EXPORT PFNGLDELETEPROGRAMPIPELINESPROC __glewDeleteProgramPipelines
/// typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint* pipelines)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteProgramPipelines;
void glDeleteProgramPipelines(int n, Pointer<Uint32>? pipelines) {
  final _glDeleteProgramPipelines = glad__glDeleteProgramPipelines!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? pipelines)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? pipelines)>();
  return _glDeleteProgramPipelines(n, pipelines);
}

/// ```c
/// define glGenProgramPipelines GLEW_GET_FUN(__glewGenProgramPipelines)
/// GLEW_FUN_EXPORT PFNGLGENPROGRAMPIPELINESPROC __glewGenProgramPipelines
/// typedef void (GLAPIENTRY * PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint* pipelines)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenProgramPipelines;
void glGenProgramPipelines(int n, Pointer<Uint32>? pipelines) {
  final _glGenProgramPipelines = glad__glGenProgramPipelines!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? pipelines)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? pipelines)>();
  return _glGenProgramPipelines(n, pipelines);
}

/// ```c
/// define glGetProgramPipelineInfoLog GLEW_GET_FUN(__glewGetProgramPipelineInfoLog)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMPIPELINEINFOLOGPROC __glewGetProgramPipelineInfoLog
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar *infoLog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramPipelineInfoLog;
void glGetProgramPipelineInfoLog(int pipeline, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog) {
  final _glGetProgramPipelineInfoLog = glad__glGetProgramPipelineInfoLog!
      .cast<NativeFunction<Void Function(Uint32 pipeline, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>>()
      .asFunction<void Function(int pipeline, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>();
  return _glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}

/// ```c
/// define glGetProgramPipelineiv GLEW_GET_FUN(__glewGetProgramPipelineiv)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMPIPELINEIVPROC __glewGetProgramPipelineiv
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramPipelineiv;
void glGetProgramPipelineiv(int pipeline, int pname, Pointer<Int32>? params) {
  final _glGetProgramPipelineiv = glad__glGetProgramPipelineiv!
      .cast<NativeFunction<Void Function(Uint32 pipeline, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pipeline, int pname, Pointer<Int32>? params)>();
  return _glGetProgramPipelineiv(pipeline, pname, params);
}

/// ```c
/// define glIsProgramPipeline GLEW_GET_FUN(__glewIsProgramPipeline)
/// GLEW_FUN_EXPORT PFNGLISPROGRAMPIPELINEPROC __glewIsProgramPipeline
/// typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsProgramPipeline;
int glIsProgramPipeline(int pipeline) {
  final _glIsProgramPipeline = glad__glIsProgramPipeline!
      .cast<NativeFunction<Uint8 Function(Uint32 pipeline)>>()
      .asFunction<int Function(int pipeline)>();
  return _glIsProgramPipeline(pipeline);
}

/// ```c
/// define glProgramUniform1d GLEW_GET_FUN(__glewProgramUniform1d)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1DPROC __glewProgramUniform1d
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1d;
void glProgramUniform1d(int program, int location, double x) {
  final _glProgramUniform1d = glad__glProgramUniform1d!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Double x)>>()
      .asFunction<void Function(int program, int location, double x)>();
  return _glProgramUniform1d(program, location, x);
}

/// ```c
/// define glProgramUniform1dv GLEW_GET_FUN(__glewProgramUniform1dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1DVPROC __glewProgramUniform1dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1dv;
void glProgramUniform1dv(int program, int location, int count, Pointer<Double>? value) {
  final _glProgramUniform1dv = glad__glProgramUniform1dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Double>? value)>();
  return _glProgramUniform1dv(program, location, count, value);
}

/// ```c
/// define glProgramUniform1f GLEW_GET_FUN(__glewProgramUniform1f)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1FPROC __glewProgramUniform1f
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1f;
void glProgramUniform1f(int program, int location, double x) {
  final _glProgramUniform1f = glad__glProgramUniform1f!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float x)>>()
      .asFunction<void Function(int program, int location, double x)>();
  return _glProgramUniform1f(program, location, x);
}

/// ```c
/// define glProgramUniform1fv GLEW_GET_FUN(__glewProgramUniform1fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1FVPROC __glewProgramUniform1fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1fv;
void glProgramUniform1fv(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform1fv = glad__glProgramUniform1fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform1fv(program, location, count, value);
}

/// ```c
/// define glProgramUniform1i GLEW_GET_FUN(__glewProgramUniform1i)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1IPROC __glewProgramUniform1i
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1i;
void glProgramUniform1i(int program, int location, int x) {
  final _glProgramUniform1i = glad__glProgramUniform1i!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 x)>>()
      .asFunction<void Function(int program, int location, int x)>();
  return _glProgramUniform1i(program, location, x);
}

/// ```c
/// define glProgramUniform1iv GLEW_GET_FUN(__glewProgramUniform1iv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1IVPROC __glewProgramUniform1iv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1iv;
void glProgramUniform1iv(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform1iv = glad__glProgramUniform1iv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform1iv(program, location, count, value);
}

/// ```c
/// define glProgramUniform1ui GLEW_GET_FUN(__glewProgramUniform1ui)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UIPROC __glewProgramUniform1ui
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1ui;
void glProgramUniform1ui(int program, int location, int x) {
  final _glProgramUniform1ui = glad__glProgramUniform1ui!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 x)>>()
      .asFunction<void Function(int program, int location, int x)>();
  return _glProgramUniform1ui(program, location, x);
}

/// ```c
/// define glProgramUniform1uiv GLEW_GET_FUN(__glewProgramUniform1uiv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UIVPROC __glewProgramUniform1uiv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1uiv;
void glProgramUniform1uiv(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform1uiv = glad__glProgramUniform1uiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform1uiv(program, location, count, value);
}

/// ```c
/// define glProgramUniform2d GLEW_GET_FUN(__glewProgramUniform2d)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2DPROC __glewProgramUniform2d
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2d;
void glProgramUniform2d(int program, int location, double x, double y) {
  final _glProgramUniform2d = glad__glProgramUniform2d!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Double x, Double y)>>()
      .asFunction<void Function(int program, int location, double x, double y)>();
  return _glProgramUniform2d(program, location, x, y);
}

/// ```c
/// define glProgramUniform2dv GLEW_GET_FUN(__glewProgramUniform2dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2DVPROC __glewProgramUniform2dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2dv;
void glProgramUniform2dv(int program, int location, int count, Pointer<Double>? value) {
  final _glProgramUniform2dv = glad__glProgramUniform2dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Double>? value)>();
  return _glProgramUniform2dv(program, location, count, value);
}

/// ```c
/// define glProgramUniform2f GLEW_GET_FUN(__glewProgramUniform2f)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2FPROC __glewProgramUniform2f
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2f;
void glProgramUniform2f(int program, int location, double x, double y) {
  final _glProgramUniform2f = glad__glProgramUniform2f!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float x, Float y)>>()
      .asFunction<void Function(int program, int location, double x, double y)>();
  return _glProgramUniform2f(program, location, x, y);
}

/// ```c
/// define glProgramUniform2fv GLEW_GET_FUN(__glewProgramUniform2fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2FVPROC __glewProgramUniform2fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2fv;
void glProgramUniform2fv(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform2fv = glad__glProgramUniform2fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform2fv(program, location, count, value);
}

/// ```c
/// define glProgramUniform2i GLEW_GET_FUN(__glewProgramUniform2i)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2IPROC __glewProgramUniform2i
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2i;
void glProgramUniform2i(int program, int location, int x, int y) {
  final _glProgramUniform2i = glad__glProgramUniform2i!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 x, Int32 y)>>()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return _glProgramUniform2i(program, location, x, y);
}

/// ```c
/// define glProgramUniform2iv GLEW_GET_FUN(__glewProgramUniform2iv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2IVPROC __glewProgramUniform2iv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2iv;
void glProgramUniform2iv(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform2iv = glad__glProgramUniform2iv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform2iv(program, location, count, value);
}

/// ```c
/// define glProgramUniform2ui GLEW_GET_FUN(__glewProgramUniform2ui)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UIPROC __glewProgramUniform2ui
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint x, GLuint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2ui;
void glProgramUniform2ui(int program, int location, int x, int y) {
  final _glProgramUniform2ui = glad__glProgramUniform2ui!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 x, Uint32 y)>>()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return _glProgramUniform2ui(program, location, x, y);
}

/// ```c
/// define glProgramUniform2uiv GLEW_GET_FUN(__glewProgramUniform2uiv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UIVPROC __glewProgramUniform2uiv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2uiv;
void glProgramUniform2uiv(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform2uiv = glad__glProgramUniform2uiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform2uiv(program, location, count, value);
}

/// ```c
/// define glProgramUniform3d GLEW_GET_FUN(__glewProgramUniform3d)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3DPROC __glewProgramUniform3d
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3d;
void glProgramUniform3d(int program, int location, double x, double y, double z) {
  final _glProgramUniform3d = glad__glProgramUniform3d!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Double x, Double y, Double z)>>()
      .asFunction<void Function(int program, int location, double x, double y, double z)>();
  return _glProgramUniform3d(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3dv GLEW_GET_FUN(__glewProgramUniform3dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3DVPROC __glewProgramUniform3dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3dv;
void glProgramUniform3dv(int program, int location, int count, Pointer<Double>? value) {
  final _glProgramUniform3dv = glad__glProgramUniform3dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Double>? value)>();
  return _glProgramUniform3dv(program, location, count, value);
}

/// ```c
/// define glProgramUniform3f GLEW_GET_FUN(__glewProgramUniform3f)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3FPROC __glewProgramUniform3f
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3f;
void glProgramUniform3f(int program, int location, double x, double y, double z) {
  final _glProgramUniform3f = glad__glProgramUniform3f!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float x, Float y, Float z)>>()
      .asFunction<void Function(int program, int location, double x, double y, double z)>();
  return _glProgramUniform3f(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3fv GLEW_GET_FUN(__glewProgramUniform3fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3FVPROC __glewProgramUniform3fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3fv;
void glProgramUniform3fv(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform3fv = glad__glProgramUniform3fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform3fv(program, location, count, value);
}

/// ```c
/// define glProgramUniform3i GLEW_GET_FUN(__glewProgramUniform3i)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3IPROC __glewProgramUniform3i
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3i;
void glProgramUniform3i(int program, int location, int x, int y, int z) {
  final _glProgramUniform3i = glad__glProgramUniform3i!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z)>();
  return _glProgramUniform3i(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3iv GLEW_GET_FUN(__glewProgramUniform3iv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3IVPROC __glewProgramUniform3iv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3iv;
void glProgramUniform3iv(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform3iv = glad__glProgramUniform3iv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform3iv(program, location, count, value);
}

/// ```c
/// define glProgramUniform3ui GLEW_GET_FUN(__glewProgramUniform3ui)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UIPROC __glewProgramUniform3ui
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3ui;
void glProgramUniform3ui(int program, int location, int x, int y, int z) {
  final _glProgramUniform3ui = glad__glProgramUniform3ui!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 x, Uint32 y, Uint32 z)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z)>();
  return _glProgramUniform3ui(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3uiv GLEW_GET_FUN(__glewProgramUniform3uiv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UIVPROC __glewProgramUniform3uiv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3uiv;
void glProgramUniform3uiv(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform3uiv = glad__glProgramUniform3uiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform3uiv(program, location, count, value);
}

/// ```c
/// define glProgramUniform4d GLEW_GET_FUN(__glewProgramUniform4d)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4DPROC __glewProgramUniform4d
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4d;
void glProgramUniform4d(int program, int location, double x, double y, double z, double w) {
  final _glProgramUniform4d = glad__glProgramUniform4d!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int program, int location, double x, double y, double z, double w)>();
  return _glProgramUniform4d(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4dv GLEW_GET_FUN(__glewProgramUniform4dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4DVPROC __glewProgramUniform4dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4dv;
void glProgramUniform4dv(int program, int location, int count, Pointer<Double>? value) {
  final _glProgramUniform4dv = glad__glProgramUniform4dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Double>? value)>();
  return _glProgramUniform4dv(program, location, count, value);
}

/// ```c
/// define glProgramUniform4f GLEW_GET_FUN(__glewProgramUniform4f)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4FPROC __glewProgramUniform4f
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4f;
void glProgramUniform4f(int program, int location, double x, double y, double z, double w) {
  final _glProgramUniform4f = glad__glProgramUniform4f!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int program, int location, double x, double y, double z, double w)>();
  return _glProgramUniform4f(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4fv GLEW_GET_FUN(__glewProgramUniform4fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4FVPROC __glewProgramUniform4fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4fv;
void glProgramUniform4fv(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform4fv = glad__glProgramUniform4fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform4fv(program, location, count, value);
}

/// ```c
/// define glProgramUniform4i GLEW_GET_FUN(__glewProgramUniform4i)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4IPROC __glewProgramUniform4i
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4i;
void glProgramUniform4i(int program, int location, int x, int y, int z, int w) {
  final _glProgramUniform4i = glad__glProgramUniform4i!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z, int w)>();
  return _glProgramUniform4i(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4iv GLEW_GET_FUN(__glewProgramUniform4iv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4IVPROC __glewProgramUniform4iv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4iv;
void glProgramUniform4iv(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform4iv = glad__glProgramUniform4iv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform4iv(program, location, count, value);
}

/// ```c
/// define glProgramUniform4ui GLEW_GET_FUN(__glewProgramUniform4ui)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UIPROC __glewProgramUniform4ui
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4ui;
void glProgramUniform4ui(int program, int location, int x, int y, int z, int w) {
  final _glProgramUniform4ui = glad__glProgramUniform4ui!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 x, Uint32 y, Uint32 z, Uint32 w)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z, int w)>();
  return _glProgramUniform4ui(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4uiv GLEW_GET_FUN(__glewProgramUniform4uiv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UIVPROC __glewProgramUniform4uiv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4uiv;
void glProgramUniform4uiv(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform4uiv = glad__glProgramUniform4uiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform4uiv(program, location, count, value);
}

/// ```c
/// define glProgramUniformMatrix2dv GLEW_GET_FUN(__glewProgramUniformMatrix2dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2DVPROC __glewProgramUniformMatrix2dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2dv;
void glProgramUniformMatrix2dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix2dv = glad__glProgramUniformMatrix2dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix2dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2fv GLEW_GET_FUN(__glewProgramUniformMatrix2fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2FVPROC __glewProgramUniformMatrix2fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2fv;
void glProgramUniformMatrix2fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix2fv = glad__glProgramUniformMatrix2fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix2fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2x3dv GLEW_GET_FUN(__glewProgramUniformMatrix2x3dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC __glewProgramUniformMatrix2x3dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2x3dv;
void glProgramUniformMatrix2x3dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix2x3dv = glad__glProgramUniformMatrix2x3dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2x3fv GLEW_GET_FUN(__glewProgramUniformMatrix2x3fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC __glewProgramUniformMatrix2x3fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2x3fv;
void glProgramUniformMatrix2x3fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix2x3fv = glad__glProgramUniformMatrix2x3fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2x4dv GLEW_GET_FUN(__glewProgramUniformMatrix2x4dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC __glewProgramUniformMatrix2x4dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2x4dv;
void glProgramUniformMatrix2x4dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix2x4dv = glad__glProgramUniformMatrix2x4dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2x4fv GLEW_GET_FUN(__glewProgramUniformMatrix2x4fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC __glewProgramUniformMatrix2x4fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2x4fv;
void glProgramUniformMatrix2x4fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix2x4fv = glad__glProgramUniformMatrix2x4fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3dv GLEW_GET_FUN(__glewProgramUniformMatrix3dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3DVPROC __glewProgramUniformMatrix3dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3dv;
void glProgramUniformMatrix3dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix3dv = glad__glProgramUniformMatrix3dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix3dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3fv GLEW_GET_FUN(__glewProgramUniformMatrix3fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3FVPROC __glewProgramUniformMatrix3fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3fv;
void glProgramUniformMatrix3fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix3fv = glad__glProgramUniformMatrix3fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix3fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3x2dv GLEW_GET_FUN(__glewProgramUniformMatrix3x2dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC __glewProgramUniformMatrix3x2dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3x2dv;
void glProgramUniformMatrix3x2dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix3x2dv = glad__glProgramUniformMatrix3x2dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3x2fv GLEW_GET_FUN(__glewProgramUniformMatrix3x2fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC __glewProgramUniformMatrix3x2fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3x2fv;
void glProgramUniformMatrix3x2fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix3x2fv = glad__glProgramUniformMatrix3x2fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3x4dv GLEW_GET_FUN(__glewProgramUniformMatrix3x4dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC __glewProgramUniformMatrix3x4dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3x4dv;
void glProgramUniformMatrix3x4dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix3x4dv = glad__glProgramUniformMatrix3x4dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3x4fv GLEW_GET_FUN(__glewProgramUniformMatrix3x4fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC __glewProgramUniformMatrix3x4fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3x4fv;
void glProgramUniformMatrix3x4fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix3x4fv = glad__glProgramUniformMatrix3x4fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4dv GLEW_GET_FUN(__glewProgramUniformMatrix4dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4DVPROC __glewProgramUniformMatrix4dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4dv;
void glProgramUniformMatrix4dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix4dv = glad__glProgramUniformMatrix4dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix4dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4fv GLEW_GET_FUN(__glewProgramUniformMatrix4fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4FVPROC __glewProgramUniformMatrix4fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4fv;
void glProgramUniformMatrix4fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix4fv = glad__glProgramUniformMatrix4fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix4fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4x2dv GLEW_GET_FUN(__glewProgramUniformMatrix4x2dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC __glewProgramUniformMatrix4x2dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4x2dv;
void glProgramUniformMatrix4x2dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix4x2dv = glad__glProgramUniformMatrix4x2dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4x2fv GLEW_GET_FUN(__glewProgramUniformMatrix4x2fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC __glewProgramUniformMatrix4x2fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4x2fv;
void glProgramUniformMatrix4x2fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix4x2fv = glad__glProgramUniformMatrix4x2fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4x3dv GLEW_GET_FUN(__glewProgramUniformMatrix4x3dv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC __glewProgramUniformMatrix4x3dv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4x3dv;
void glProgramUniformMatrix4x3dv(int program, int location, int count, int transpose, Pointer<Double>? value) {
  final _glProgramUniformMatrix4x3dv = glad__glProgramUniformMatrix4x3dv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Double>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Double>? value)>();
  return _glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4x3fv GLEW_GET_FUN(__glewProgramUniformMatrix4x3fv)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC __glewProgramUniformMatrix4x3fv
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4x3fv;
void glProgramUniformMatrix4x3fv(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix4x3fv = glad__glProgramUniformMatrix4x3fv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}

/// ```c
/// define glUseProgramStages GLEW_GET_FUN(__glewUseProgramStages)
/// GLEW_FUN_EXPORT PFNGLUSEPROGRAMSTAGESPROC __glewUseProgramStages
/// typedef void (GLAPIENTRY * PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUseProgramStages;
void glUseProgramStages(int pipeline, int stages, int program) {
  final _glUseProgramStages = glad__glUseProgramStages!
      .cast<NativeFunction<Void Function(Uint32 pipeline, Uint32 stages, Uint32 program)>>()
      .asFunction<void Function(int pipeline, int stages, int program)>();
  return _glUseProgramStages(pipeline, stages, program);
}

/// ```c
/// define glValidateProgramPipeline GLEW_GET_FUN(__glewValidateProgramPipeline)
/// GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMPIPELINEPROC __glewValidateProgramPipeline
/// typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glValidateProgramPipeline;
void glValidateProgramPipeline(int pipeline) {
  final _glValidateProgramPipeline = glad__glValidateProgramPipeline!
      .cast<NativeFunction<Void Function(Uint32 pipeline)>>()
      .asFunction<void Function(int pipeline)>();
  return _glValidateProgramPipeline(pipeline);
}

/// --------------------- GL_ARB_shader_atomic_counters ---------------------
/// ```c
/// define glGetActiveAtomicCounterBufferiv GLEW_GET_FUN(__glewGetActiveAtomicCounterBufferiv)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC __glewGetActiveAtomicCounterBufferiv
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveAtomicCounterBufferiv;
void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, Pointer<Int32>? params) {
  final _glGetActiveAtomicCounterBufferiv = glad__glGetActiveAtomicCounterBufferiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 bufferIndex, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int bufferIndex, int pname, Pointer<Int32>? params)>();
  return _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}

/// --------------------- GL_ARB_shader_image_load_store --------------------
/// ```c
/// define glBindImageTexture GLEW_GET_FUN(__glewBindImageTexture)
/// GLEW_FUN_EXPORT PFNGLBINDIMAGETEXTUREPROC __glewBindImageTexture
/// typedef void (GLAPIENTRY * PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindImageTexture;
void glBindImageTexture(int unit, int texture, int level, int layered, int layer, int access, int format) {
  final _glBindImageTexture = glad__glBindImageTexture!
      .cast<NativeFunction<Void Function(Uint32 unit, Uint32 texture, Int32 level, Uint8 layered, Int32 layer, Uint32 access, Uint32 format)>>()
      .asFunction<void Function(int unit, int texture, int level, int layered, int layer, int access, int format)>();
  return _glBindImageTexture(unit, texture, level, layered, layer, access, format);
}

/// ```c
/// define glMemoryBarrier GLEW_GET_FUN(__glewMemoryBarrier)
/// GLEW_FUN_EXPORT PFNGLMEMORYBARRIERPROC __glewMemoryBarrier
/// typedef void (GLAPIENTRY * PFNGLMEMORYBARRIERPROC) (GLbitfield barriers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMemoryBarrier;
void glMemoryBarrier(int barriers) {
  final _glMemoryBarrier = glad__glMemoryBarrier!
      .cast<NativeFunction<Void Function(Uint32 barriers)>>()
      .asFunction<void Function(int barriers)>();
  return _glMemoryBarrier(barriers);
}

/// ```c
/// define glAttachObjectARB GLEW_GET_FUN(__glewAttachObjectARB)
/// GLEW_FUN_EXPORT PFNGLATTACHOBJECTARBPROC __glewAttachObjectARB
/// typedef void (GLAPIENTRY * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAttachObjectARB;
void glAttachObjectARB(int containerObj, int obj) {
  final _glAttachObjectARB = glad__glAttachObjectARB!
      .cast<NativeFunction<Void Function(Uint32 containerObj, Uint32 obj)>>()
      .asFunction<void Function(int containerObj, int obj)>();
  return _glAttachObjectARB(containerObj, obj);
}

/// ```c
/// define glCompileShaderARB GLEW_GET_FUN(__glewCompileShaderARB)
/// GLEW_FUN_EXPORT PFNGLCOMPILESHADERARBPROC __glewCompileShaderARB
/// typedef void (GLAPIENTRY * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompileShaderARB;
void glCompileShaderARB(int shaderObj) {
  final _glCompileShaderARB = glad__glCompileShaderARB!
      .cast<NativeFunction<Void Function(Uint32 shaderObj)>>()
      .asFunction<void Function(int shaderObj)>();
  return _glCompileShaderARB(shaderObj);
}

/// ```c
/// define glCreateProgramObjectARB GLEW_GET_FUN(__glewCreateProgramObjectARB)
/// GLEW_FUN_EXPORT PFNGLCREATEPROGRAMOBJECTARBPROC __glewCreateProgramObjectARB
/// typedef GLhandleARB (GLAPIENTRY * PFNGLCREATEPROGRAMOBJECTARBPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateProgramObjectARB;
int glCreateProgramObjectARB() {
  final _glCreateProgramObjectARB = glad__glCreateProgramObjectARB!
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return _glCreateProgramObjectARB();
}

/// ```c
/// define glCreateShaderObjectARB GLEW_GET_FUN(__glewCreateShaderObjectARB)
/// GLEW_FUN_EXPORT PFNGLCREATESHADEROBJECTARBPROC __glewCreateShaderObjectARB
/// typedef GLhandleARB (GLAPIENTRY * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateShaderObjectARB;
int glCreateShaderObjectARB(int shaderType) {
  final _glCreateShaderObjectARB = glad__glCreateShaderObjectARB!
      .cast<NativeFunction<Uint32 Function(Uint32 shaderType)>>()
      .asFunction<int Function(int shaderType)>();
  return _glCreateShaderObjectARB(shaderType);
}

/// ```c
/// define glDeleteObjectARB GLEW_GET_FUN(__glewDeleteObjectARB)
/// GLEW_FUN_EXPORT PFNGLDELETEOBJECTARBPROC __glewDeleteObjectARB
/// typedef void (GLAPIENTRY * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteObjectARB;
void glDeleteObjectARB(int obj) {
  final _glDeleteObjectARB = glad__glDeleteObjectARB!
      .cast<NativeFunction<Void Function(Uint32 obj)>>()
      .asFunction<void Function(int obj)>();
  return _glDeleteObjectARB(obj);
}

/// ```c
/// define glDetachObjectARB GLEW_GET_FUN(__glewDetachObjectARB)
/// GLEW_FUN_EXPORT PFNGLDETACHOBJECTARBPROC __glewDetachObjectARB
/// typedef void (GLAPIENTRY * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDetachObjectARB;
void glDetachObjectARB(int containerObj, int attachedObj) {
  final _glDetachObjectARB = glad__glDetachObjectARB!
      .cast<NativeFunction<Void Function(Uint32 containerObj, Uint32 attachedObj)>>()
      .asFunction<void Function(int containerObj, int attachedObj)>();
  return _glDetachObjectARB(containerObj, attachedObj);
}

/// ```c
/// define glGetActiveUniformARB GLEW_GET_FUN(__glewGetActiveUniformARB)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMARBPROC __glewGetActiveUniformARB
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveUniformARB;
void glGetActiveUniformARB(int programObj, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetActiveUniformARB = glad__glGetActiveUniformARB!
      .cast<NativeFunction<Void Function(Uint32 programObj, Uint32 index, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int programObj, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
}

/// ```c
/// define glGetAttachedObjectsARB GLEW_GET_FUN(__glewGetAttachedObjectsARB)
/// GLEW_FUN_EXPORT PFNGLGETATTACHEDOBJECTSARBPROC __glewGetAttachedObjectsARB
/// typedef void (GLAPIENTRY * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetAttachedObjectsARB;
void glGetAttachedObjectsARB(int containerObj, int maxCount, Pointer<Uint32>? count, Pointer<Uint32>? obj) {
  final _glGetAttachedObjectsARB = glad__glGetAttachedObjectsARB!
      .cast<NativeFunction<Void Function(Uint32 containerObj, Uint32 maxCount, Pointer<Uint32>? count, Pointer<Uint32>? obj)>>()
      .asFunction<void Function(int containerObj, int maxCount, Pointer<Uint32>? count, Pointer<Uint32>? obj)>();
  return _glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
}

/// ```c
/// define glGetHandleARB GLEW_GET_FUN(__glewGetHandleARB)
/// GLEW_FUN_EXPORT PFNGLGETHANDLEARBPROC __glewGetHandleARB
/// typedef GLhandleARB (GLAPIENTRY * PFNGLGETHANDLEARBPROC) (GLenum pname)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHandleARB;
int glGetHandleARB(int pname) {
  final _glGetHandleARB = glad__glGetHandleARB!
      .cast<NativeFunction<Uint32 Function(Uint32 pname)>>()
      .asFunction<int Function(int pname)>();
  return _glGetHandleARB(pname);
}

/// ```c
/// define glGetInfoLogARB GLEW_GET_FUN(__glewGetInfoLogARB)
/// GLEW_FUN_EXPORT PFNGLGETINFOLOGARBPROC __glewGetInfoLogARB
/// typedef void (GLAPIENTRY * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInfoLogARB;
void glGetInfoLogARB(int obj, int maxLength, Pointer<Uint32>? length, Pointer<Int8>? infoLog) {
  final _glGetInfoLogARB = glad__glGetInfoLogARB!
      .cast<NativeFunction<Void Function(Uint32 obj, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>>()
      .asFunction<void Function(int obj, int maxLength, Pointer<Uint32>? length, Pointer<Int8>? infoLog)>();
  return _glGetInfoLogARB(obj, maxLength, length, infoLog);
}

/// ```c
/// define glGetObjectParameterfvARB GLEW_GET_FUN(__glewGetObjectParameterfvARB)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERFVARBPROC __glewGetObjectParameterfvARB
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectParameterfvARB;
void glGetObjectParameterfvARB(int obj, int pname, Pointer<Float>? params) {
  final _glGetObjectParameterfvARB = glad__glGetObjectParameterfvARB!
      .cast<NativeFunction<Void Function(Uint32 obj, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int obj, int pname, Pointer<Float>? params)>();
  return _glGetObjectParameterfvARB(obj, pname, params);
}

/// ```c
/// define glGetObjectParameterivARB GLEW_GET_FUN(__glewGetObjectParameterivARB)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERIVARBPROC __glewGetObjectParameterivARB
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectParameterivARB;
void glGetObjectParameterivARB(int obj, int pname, Pointer<Int32>? params) {
  final _glGetObjectParameterivARB = glad__glGetObjectParameterivARB!
      .cast<NativeFunction<Void Function(Uint32 obj, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int obj, int pname, Pointer<Int32>? params)>();
  return _glGetObjectParameterivARB(obj, pname, params);
}

/// ```c
/// define glGetShaderSourceARB GLEW_GET_FUN(__glewGetShaderSourceARB)
/// GLEW_FUN_EXPORT PFNGLGETSHADERSOURCEARBPROC __glewGetShaderSourceARB
/// typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetShaderSourceARB;
void glGetShaderSourceARB(int obj, int maxLength, Pointer<Uint32>? length, Pointer<Int8>? source) {
  final _glGetShaderSourceARB = glad__glGetShaderSourceARB!
      .cast<NativeFunction<Void Function(Uint32 obj, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int8>? source)>>()
      .asFunction<void Function(int obj, int maxLength, Pointer<Uint32>? length, Pointer<Int8>? source)>();
  return _glGetShaderSourceARB(obj, maxLength, length, source);
}

/// ```c
/// define glGetUniformLocationARB GLEW_GET_FUN(__glewGetUniformLocationARB)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMLOCATIONARBPROC __glewGetUniformLocationARB
/// typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformLocationARB;
int glGetUniformLocationARB(int programObj, String name) {
  final _glGetUniformLocationARB = glad__glGetUniformLocationARB!
      .cast<NativeFunction<Int32 Function(Uint32 programObj, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int programObj, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetUniformLocationARB(programObj, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetUniformfvARB GLEW_GET_FUN(__glewGetUniformfvARB)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMFVARBPROC __glewGetUniformfvARB
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformfvARB;
void glGetUniformfvARB(int programObj, int location, Pointer<Float>? params) {
  final _glGetUniformfvARB = glad__glGetUniformfvARB!
      .cast<NativeFunction<Void Function(Uint32 programObj, Int32 location, Pointer<Float>? params)>>()
      .asFunction<void Function(int programObj, int location, Pointer<Float>? params)>();
  return _glGetUniformfvARB(programObj, location, params);
}

/// ```c
/// define glGetUniformivARB GLEW_GET_FUN(__glewGetUniformivARB)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMIVARBPROC __glewGetUniformivARB
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformivARB;
void glGetUniformivARB(int programObj, int location, Pointer<Int32>? params) {
  final _glGetUniformivARB = glad__glGetUniformivARB!
      .cast<NativeFunction<Void Function(Uint32 programObj, Int32 location, Pointer<Int32>? params)>>()
      .asFunction<void Function(int programObj, int location, Pointer<Int32>? params)>();
  return _glGetUniformivARB(programObj, location, params);
}

/// ```c
/// define glLinkProgramARB GLEW_GET_FUN(__glewLinkProgramARB)
/// GLEW_FUN_EXPORT PFNGLLINKPROGRAMARBPROC __glewLinkProgramARB
/// typedef void (GLAPIENTRY * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLinkProgramARB;
void glLinkProgramARB(int programObj) {
  final _glLinkProgramARB = glad__glLinkProgramARB!
      .cast<NativeFunction<Void Function(Uint32 programObj)>>()
      .asFunction<void Function(int programObj)>();
  return _glLinkProgramARB(programObj);
}

/// ```c
/// define glShaderSourceARB GLEW_GET_FUN(__glewShaderSourceARB)
/// GLEW_FUN_EXPORT PFNGLSHADERSOURCEARBPROC __glewShaderSourceARB
/// typedef void (GLAPIENTRY * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderSourceARB;
void glShaderSourceARB(int shaderObj, int count, Pointer<Pointer<Utf8>>? string, Pointer<Int32>? length) {
  final _glShaderSourceARB = glad__glShaderSourceARB!
      .cast<NativeFunction<Void Function(Uint32 shaderObj, Uint32 count, Pointer<Pointer<Utf8>>? string, Pointer<Int32>? length)>>()
      .asFunction<void Function(int shaderObj, int count, Pointer<Pointer<Utf8>>? string, Pointer<Int32>? length)>();
  return _glShaderSourceARB(shaderObj, count, string, length);
}

/// ```c
/// define glUniform1fARB GLEW_GET_FUN(__glewUniform1fARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1FARBPROC __glewUniform1fARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1fARB;
void glUniform1fARB(int location, double v0) {
  final _glUniform1fARB = glad__glUniform1fARB!
      .cast<NativeFunction<Void Function(Int32 location, Float v0)>>()
      .asFunction<void Function(int location, double v0)>();
  return _glUniform1fARB(location, v0);
}

/// ```c
/// define glUniform1fvARB GLEW_GET_FUN(__glewUniform1fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1FVARBPROC __glewUniform1fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1fvARB;
void glUniform1fvARB(int location, int count, Pointer<Float>? value) {
  final _glUniform1fvARB = glad__glUniform1fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform1fvARB(location, count, value);
}

/// ```c
/// define glUniform1iARB GLEW_GET_FUN(__glewUniform1iARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1IARBPROC __glewUniform1iARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1iARB;
void glUniform1iARB(int location, int v0) {
  final _glUniform1iARB = glad__glUniform1iARB!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return _glUniform1iARB(location, v0);
}

/// ```c
/// define glUniform1ivARB GLEW_GET_FUN(__glewUniform1ivARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1IVARBPROC __glewUniform1ivARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1ivARB;
void glUniform1ivARB(int location, int count, Pointer<Int32>? value) {
  final _glUniform1ivARB = glad__glUniform1ivARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform1ivARB(location, count, value);
}

/// ```c
/// define glUniform2fARB GLEW_GET_FUN(__glewUniform2fARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2FARBPROC __glewUniform2fARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2fARB;
void glUniform2fARB(int location, double v0, double v1) {
  final _glUniform2fARB = glad__glUniform2fARB!
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1)>>()
      .asFunction<void Function(int location, double v0, double v1)>();
  return _glUniform2fARB(location, v0, v1);
}

/// ```c
/// define glUniform2fvARB GLEW_GET_FUN(__glewUniform2fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2FVARBPROC __glewUniform2fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2fvARB;
void glUniform2fvARB(int location, int count, Pointer<Float>? value) {
  final _glUniform2fvARB = glad__glUniform2fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform2fvARB(location, count, value);
}

/// ```c
/// define glUniform2iARB GLEW_GET_FUN(__glewUniform2iARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2IARBPROC __glewUniform2iARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2iARB;
void glUniform2iARB(int location, int v0, int v1) {
  final _glUniform2iARB = glad__glUniform2iARB!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1)>>()
      .asFunction<void Function(int location, int v0, int v1)>();
  return _glUniform2iARB(location, v0, v1);
}

/// ```c
/// define glUniform2ivARB GLEW_GET_FUN(__glewUniform2ivARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2IVARBPROC __glewUniform2ivARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2ivARB;
void glUniform2ivARB(int location, int count, Pointer<Int32>? value) {
  final _glUniform2ivARB = glad__glUniform2ivARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform2ivARB(location, count, value);
}

/// ```c
/// define glUniform3fARB GLEW_GET_FUN(__glewUniform3fARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3FARBPROC __glewUniform3fARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3fARB;
void glUniform3fARB(int location, double v0, double v1, double v2) {
  final _glUniform3fARB = glad__glUniform3fARB!
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1, Float v2)>>()
      .asFunction<void Function(int location, double v0, double v1, double v2)>();
  return _glUniform3fARB(location, v0, v1, v2);
}

/// ```c
/// define glUniform3fvARB GLEW_GET_FUN(__glewUniform3fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3FVARBPROC __glewUniform3fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3fvARB;
void glUniform3fvARB(int location, int count, Pointer<Float>? value) {
  final _glUniform3fvARB = glad__glUniform3fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform3fvARB(location, count, value);
}

/// ```c
/// define glUniform3iARB GLEW_GET_FUN(__glewUniform3iARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3IARBPROC __glewUniform3iARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3iARB;
void glUniform3iARB(int location, int v0, int v1, int v2) {
  final _glUniform3iARB = glad__glUniform3iARB!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return _glUniform3iARB(location, v0, v1, v2);
}

/// ```c
/// define glUniform3ivARB GLEW_GET_FUN(__glewUniform3ivARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3IVARBPROC __glewUniform3ivARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3ivARB;
void glUniform3ivARB(int location, int count, Pointer<Int32>? value) {
  final _glUniform3ivARB = glad__glUniform3ivARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform3ivARB(location, count, value);
}

/// ```c
/// define glUniform4fARB GLEW_GET_FUN(__glewUniform4fARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4FARBPROC __glewUniform4fARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4fARB;
void glUniform4fARB(int location, double v0, double v1, double v2, double v3) {
  final _glUniform4fARB = glad__glUniform4fARB!
      .cast<NativeFunction<Void Function(Int32 location, Float v0, Float v1, Float v2, Float v3)>>()
      .asFunction<void Function(int location, double v0, double v1, double v2, double v3)>();
  return _glUniform4fARB(location, v0, v1, v2, v3);
}

/// ```c
/// define glUniform4fvARB GLEW_GET_FUN(__glewUniform4fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4FVARBPROC __glewUniform4fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4fvARB;
void glUniform4fvARB(int location, int count, Pointer<Float>? value) {
  final _glUniform4fvARB = glad__glUniform4fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Float>? value)>();
  return _glUniform4fvARB(location, count, value);
}

/// ```c
/// define glUniform4iARB GLEW_GET_FUN(__glewUniform4iARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4IARBPROC __glewUniform4iARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4iARB;
void glUniform4iARB(int location, int v0, int v1, int v2, int v3) {
  final _glUniform4iARB = glad__glUniform4iARB!
      .cast<NativeFunction<Void Function(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2, int v3)>();
  return _glUniform4iARB(location, v0, v1, v2, v3);
}

/// ```c
/// define glUniform4ivARB GLEW_GET_FUN(__glewUniform4ivARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4IVARBPROC __glewUniform4ivARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4ivARB;
void glUniform4ivARB(int location, int count, Pointer<Int32>? value) {
  final _glUniform4ivARB = glad__glUniform4ivARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int32>? value)>();
  return _glUniform4ivARB(location, count, value);
}

/// ```c
/// define glUniformMatrix2fvARB GLEW_GET_FUN(__glewUniformMatrix2fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2FVARBPROC __glewUniformMatrix2fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2fvARB;
void glUniformMatrix2fvARB(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix2fvARB = glad__glUniformMatrix2fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix2fvARB(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3fvARB GLEW_GET_FUN(__glewUniformMatrix3fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3FVARBPROC __glewUniformMatrix3fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3fvARB;
void glUniformMatrix3fvARB(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix3fvARB = glad__glUniformMatrix3fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix3fvARB(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4fvARB GLEW_GET_FUN(__glewUniformMatrix4fvARB)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4FVARBPROC __glewUniformMatrix4fvARB
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4fvARB;
void glUniformMatrix4fvARB(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix4fvARB = glad__glUniformMatrix4fvARB!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix4fvARB(location, count, transpose, value);
}

/// ```c
/// define glUseProgramObjectARB GLEW_GET_FUN(__glewUseProgramObjectARB)
/// GLEW_FUN_EXPORT PFNGLUSEPROGRAMOBJECTARBPROC __glewUseProgramObjectARB
/// typedef void (GLAPIENTRY * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUseProgramObjectARB;
void glUseProgramObjectARB(int programObj) {
  final _glUseProgramObjectARB = glad__glUseProgramObjectARB!
      .cast<NativeFunction<Void Function(Uint32 programObj)>>()
      .asFunction<void Function(int programObj)>();
  return _glUseProgramObjectARB(programObj);
}

/// ```c
/// define glValidateProgramARB GLEW_GET_FUN(__glewValidateProgramARB)
/// GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMARBPROC __glewValidateProgramARB
/// typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glValidateProgramARB;
void glValidateProgramARB(int programObj) {
  final _glValidateProgramARB = glad__glValidateProgramARB!
      .cast<NativeFunction<Void Function(Uint32 programObj)>>()
      .asFunction<void Function(int programObj)>();
  return _glValidateProgramARB(programObj);
}

/// ------------------ GL_ARB_shader_storage_buffer_object ------------------
/// ```c
/// define glShaderStorageBlockBinding GLEW_GET_FUN(__glewShaderStorageBlockBinding)
/// GLEW_FUN_EXPORT PFNGLSHADERSTORAGEBLOCKBINDINGPROC __glewShaderStorageBlockBinding
/// typedef void (GLAPIENTRY * PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderStorageBlockBinding;
void glShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding) {
  final _glShaderStorageBlockBinding = glad__glShaderStorageBlockBinding!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 storageBlockIndex, Uint32 storageBlockBinding)>>()
      .asFunction<void Function(int program, int storageBlockIndex, int storageBlockBinding)>();
  return _glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}

/// ------------------------ GL_ARB_shader_subroutine -----------------------
/// ```c
/// define glGetActiveSubroutineName GLEW_GET_FUN(__glewGetActiveSubroutineName)
/// GLEW_FUN_EXPORT PFNGLGETACTIVESUBROUTINENAMEPROC __glewGetActiveSubroutineName
/// typedef void (GLAPIENTRY * PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveSubroutineName;
void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, Pointer<Uint32>? length, Pointer<Int8>? name) {
  final _glGetActiveSubroutineName = glad__glGetActiveSubroutineName!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shadertype, Uint32 index, Uint32 bufsize, Pointer<Uint32>? length, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int shadertype, int index, int bufsize, Pointer<Uint32>? length, Pointer<Int8>? name)>();
  return _glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
}

/// ```c
/// define glGetActiveSubroutineUniformName GLEW_GET_FUN(__glewGetActiveSubroutineUniformName)
/// GLEW_FUN_EXPORT PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC __glewGetActiveSubroutineUniformName
/// typedef void (GLAPIENTRY * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveSubroutineUniformName;
void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, Pointer<Uint32>? length, Pointer<Int8>? name) {
  final _glGetActiveSubroutineUniformName = glad__glGetActiveSubroutineUniformName!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shadertype, Uint32 index, Uint32 bufsize, Pointer<Uint32>? length, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int shadertype, int index, int bufsize, Pointer<Uint32>? length, Pointer<Int8>? name)>();
  return _glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
}

/// ```c
/// define glGetActiveSubroutineUniformiv GLEW_GET_FUN(__glewGetActiveSubroutineUniformiv)
/// GLEW_FUN_EXPORT PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC __glewGetActiveSubroutineUniformiv
/// typedef void (GLAPIENTRY * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveSubroutineUniformiv;
void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, Pointer<Int32>? values) {
  final _glGetActiveSubroutineUniformiv = glad__glGetActiveSubroutineUniformiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shadertype, Uint32 index, Uint32 pname, Pointer<Int32>? values)>>()
      .asFunction<void Function(int program, int shadertype, int index, int pname, Pointer<Int32>? values)>();
  return _glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}

/// ```c
/// define glGetProgramStageiv GLEW_GET_FUN(__glewGetProgramStageiv)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMSTAGEIVPROC __glewGetProgramStageiv
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramStageiv;
void glGetProgramStageiv(int program, int shadertype, int pname, Pointer<Int32>? values) {
  final _glGetProgramStageiv = glad__glGetProgramStageiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shadertype, Uint32 pname, Pointer<Int32>? values)>>()
      .asFunction<void Function(int program, int shadertype, int pname, Pointer<Int32>? values)>();
  return _glGetProgramStageiv(program, shadertype, pname, values);
}

/// ```c
/// define glGetSubroutineIndex GLEW_GET_FUN(__glewGetSubroutineIndex)
/// GLEW_FUN_EXPORT PFNGLGETSUBROUTINEINDEXPROC __glewGetSubroutineIndex
/// typedef GLuint (GLAPIENTRY * PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSubroutineIndex;
int glGetSubroutineIndex(int program, int shadertype, String name) {
  final _glGetSubroutineIndex = glad__glGetSubroutineIndex!
      .cast<NativeFunction<Uint32 Function(Uint32 program, Uint32 shadertype, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, int shadertype, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetSubroutineIndex(program, shadertype, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetSubroutineUniformLocation GLEW_GET_FUN(__glewGetSubroutineUniformLocation)
/// GLEW_FUN_EXPORT PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC __glewGetSubroutineUniformLocation
/// typedef GLint (GLAPIENTRY * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSubroutineUniformLocation;
int glGetSubroutineUniformLocation(int program, int shadertype, String name) {
  final _glGetSubroutineUniformLocation = glad__glGetSubroutineUniformLocation!
      .cast<NativeFunction<Int32 Function(Uint32 program, Uint32 shadertype, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, int shadertype, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetSubroutineUniformLocation(program, shadertype, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetUniformSubroutineuiv GLEW_GET_FUN(__glewGetUniformSubroutineuiv)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMSUBROUTINEUIVPROC __glewGetUniformSubroutineuiv
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformSubroutineuiv;
void glGetUniformSubroutineuiv(int shadertype, int location, Pointer<Uint32>? params) {
  final _glGetUniformSubroutineuiv = glad__glGetUniformSubroutineuiv!
      .cast<NativeFunction<Void Function(Uint32 shadertype, Int32 location, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int shadertype, int location, Pointer<Uint32>? params)>();
  return _glGetUniformSubroutineuiv(shadertype, location, params);
}

/// ```c
/// define glUniformSubroutinesuiv GLEW_GET_FUN(__glewUniformSubroutinesuiv)
/// GLEW_FUN_EXPORT PFNGLUNIFORMSUBROUTINESUIVPROC __glewUniformSubroutinesuiv
/// typedef void (GLAPIENTRY * PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint* indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformSubroutinesuiv;
void glUniformSubroutinesuiv(int shadertype, int count, Pointer<Uint32>? indices) {
  final _glUniformSubroutinesuiv = glad__glUniformSubroutinesuiv!
      .cast<NativeFunction<Void Function(Uint32 shadertype, Uint32 count, Pointer<Uint32>? indices)>>()
      .asFunction<void Function(int shadertype, int count, Pointer<Uint32>? indices)>();
  return _glUniformSubroutinesuiv(shadertype, count, indices);
}

/// -------------------- GL_ARB_shading_language_include --------------------
/// ```c
/// define glCompileShaderIncludeARB GLEW_GET_FUN(__glewCompileShaderIncludeARB)
/// GLEW_FUN_EXPORT PFNGLCOMPILESHADERINCLUDEARBPROC __glewCompileShaderIncludeARB
/// typedef void (GLAPIENTRY * PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* const *path, const GLint *length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompileShaderIncludeARB;
void glCompileShaderIncludeARB(int shader, int count, Pointer<Pointer<Utf8>>? path, Pointer<Int32>? length) {
  final _glCompileShaderIncludeARB = glad__glCompileShaderIncludeARB!
      .cast<NativeFunction<Void Function(Uint32 shader, Uint32 count, Pointer<Pointer<Utf8>>? path, Pointer<Int32>? length)>>()
      .asFunction<void Function(int shader, int count, Pointer<Pointer<Utf8>>? path, Pointer<Int32>? length)>();
  return _glCompileShaderIncludeARB(shader, count, path, length);
}

/// ```c
/// define glDeleteNamedStringARB GLEW_GET_FUN(__glewDeleteNamedStringARB)
/// GLEW_FUN_EXPORT PFNGLDELETENAMEDSTRINGARBPROC __glewDeleteNamedStringARB
/// typedef void (GLAPIENTRY * PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteNamedStringARB;
void glDeleteNamedStringARB(int namelen, String name) {
  final _glDeleteNamedStringARB = glad__glDeleteNamedStringARB!
      .cast<NativeFunction<Void Function(Int32 namelen, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int namelen, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glDeleteNamedStringARB(namelen, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetNamedStringARB GLEW_GET_FUN(__glewGetNamedStringARB)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDSTRINGARBPROC __glewGetNamedStringARB
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedStringARB;
void glGetNamedStringARB(int namelen, String name, int bufSize, Pointer<Int32>? stringlen, Pointer<Int8>? string) {
  final _glGetNamedStringARB = glad__glGetNamedStringARB!
      .cast<NativeFunction<Void Function(Int32 namelen, Pointer<Utf8>? name, Uint32 bufSize, Pointer<Int32>? stringlen, Pointer<Int8>? string)>>()
      .asFunction<void Function(int namelen, Pointer<Utf8>? name, int bufSize, Pointer<Int32>? stringlen, Pointer<Int8>? string)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetNamedStringARB(namelen, _namePointer, bufSize, stringlen, string);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetNamedStringivARB GLEW_GET_FUN(__glewGetNamedStringivARB)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDSTRINGIVARBPROC __glewGetNamedStringivARB
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar* name, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedStringivARB;
void glGetNamedStringivARB(int namelen, String name, int pname, Pointer<Int32>? params) {
  final _glGetNamedStringivARB = glad__glGetNamedStringivARB!
      .cast<NativeFunction<Void Function(Int32 namelen, Pointer<Utf8>? name, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int namelen, Pointer<Utf8>? name, int pname, Pointer<Int32>? params)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetNamedStringivARB(namelen, _namePointer, pname, params);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glIsNamedStringARB GLEW_GET_FUN(__glewIsNamedStringARB)
/// GLEW_FUN_EXPORT PFNGLISNAMEDSTRINGARBPROC __glewIsNamedStringARB
/// typedef GLboolean (GLAPIENTRY * PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsNamedStringARB;
int glIsNamedStringARB(int namelen, String name) {
  final _glIsNamedStringARB = glad__glIsNamedStringARB!
      .cast<NativeFunction<Uint8 Function(Int32 namelen, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int namelen, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glIsNamedStringARB(namelen, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glNamedStringARB GLEW_GET_FUN(__glewNamedStringARB)
/// GLEW_FUN_EXPORT PFNGLNAMEDSTRINGARBPROC __glewNamedStringARB
/// typedef void (GLAPIENTRY * PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedStringARB;
void glNamedStringARB(int type, int namelen, String name, int stringlen, String string) {
  final _glNamedStringARB = glad__glNamedStringARB!
      .cast<NativeFunction<Void Function(Uint32 type, Int32 namelen, Pointer<Utf8>? name, Int32 stringlen, Pointer<Utf8>? string)>>()
      .asFunction<void Function(int type, int namelen, Pointer<Utf8>? name, int stringlen, Pointer<Utf8>? string)>();
  final _namePointer = name.toNativeUtf8();
  final _stringPointer = string.toNativeUtf8();
  final _result = _glNamedStringARB(type, namelen, _namePointer, stringlen, _stringPointer);
  calloc.free(_namePointer);
  calloc.free(_stringPointer);
  return _result;
}

/// -------------------------- GL_ARB_sparse_buffer -------------------------
/// ```c
/// define glBufferPageCommitmentARB GLEW_GET_FUN(__glewBufferPageCommitmentARB)
/// GLEW_FUN_EXPORT PFNGLBUFFERPAGECOMMITMENTARBPROC __glewBufferPageCommitmentARB
/// typedef void (GLAPIENTRY * PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferPageCommitmentARB;
void glBufferPageCommitmentARB(int target, int offset, int size, int commit) {
  final _glBufferPageCommitmentARB = glad__glBufferPageCommitmentARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 size, Uint8 commit)>>()
      .asFunction<void Function(int target, int offset, int size, int commit)>();
  return _glBufferPageCommitmentARB(target, offset, size, commit);
}

/// ------------------------- GL_ARB_sparse_texture -------------------------
/// ```c
/// define glTexPageCommitmentARB GLEW_GET_FUN(__glewTexPageCommitmentARB)
/// GLEW_FUN_EXPORT PFNGLTEXPAGECOMMITMENTARBPROC __glewTexPageCommitmentARB
/// typedef void (GLAPIENTRY * PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexPageCommitmentARB;
void glTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit) {
  final _glTexPageCommitmentARB = glad__glTexPageCommitmentARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint8 commit)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit)>();
  return _glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

/// ------------------------------ GL_ARB_sync ------------------------------
/// ```c
/// define glClientWaitSync GLEW_GET_FUN(__glewClientWaitSync)
/// GLEW_FUN_EXPORT PFNGLCLIENTWAITSYNCPROC __glewClientWaitSync
/// typedef GLenum (GLAPIENTRY * PFNGLCLIENTWAITSYNCPROC) (GLsync GLsync,GLbitfield flags,GLuint64 timeout)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClientWaitSync;
int glClientWaitSync(int GLsync, int flags, int timeout) {
  final _glClientWaitSync = glad__glClientWaitSync!
      .cast<NativeFunction<Uint32 Function(Uint64 GLsync, Uint32 flags, Uint64 timeout)>>()
      .asFunction<int Function(int GLsync, int flags, int timeout)>();
  return _glClientWaitSync(GLsync, flags, timeout);
}

/// ```c
/// define glDeleteSync GLEW_GET_FUN(__glewDeleteSync)
/// GLEW_FUN_EXPORT PFNGLDELETESYNCPROC __glewDeleteSync
/// typedef void (GLAPIENTRY * PFNGLDELETESYNCPROC) (GLsync GLsync)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteSync;
void glDeleteSync(int GLsync) {
  final _glDeleteSync = glad__glDeleteSync!
      .cast<NativeFunction<Void Function(Uint64 GLsync)>>()
      .asFunction<void Function(int GLsync)>();
  return _glDeleteSync(GLsync);
}

/// ```c
/// define glFenceSync GLEW_GET_FUN(__glewFenceSync)
/// GLEW_FUN_EXPORT PFNGLFENCESYNCPROC __glewFenceSync
/// typedef GLsync (GLAPIENTRY * PFNGLFENCESYNCPROC) (GLenum condition,GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFenceSync;
int glFenceSync(int condition, int flags) {
  final _glFenceSync = glad__glFenceSync!
      .cast<NativeFunction<Uint64 Function(Uint32 condition, Uint32 flags)>>()
      .asFunction<int Function(int condition, int flags)>();
  return _glFenceSync(condition, flags);
}

/// ```c
/// define glGetInteger64v GLEW_GET_FUN(__glewGetInteger64v)
/// GLEW_FUN_EXPORT PFNGLGETINTEGER64VPROC __glewGetInteger64v
/// typedef void (GLAPIENTRY * PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInteger64v;
void glGetInteger64v(int pname, Pointer<Int64>? params) {
  final _glGetInteger64v = glad__glGetInteger64v!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int64>? params)>();
  return _glGetInteger64v(pname, params);
}

/// ```c
/// define glGetSynciv GLEW_GET_FUN(__glewGetSynciv)
/// GLEW_FUN_EXPORT PFNGLGETSYNCIVPROC __glewGetSynciv
/// typedef void (GLAPIENTRY * PFNGLGETSYNCIVPROC) (GLsync GLsync,GLenum pname,GLsizei bufSize,GLsizei* length, GLint *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSynciv;
void glGetSynciv(int GLsync, int pname, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? values) {
  final _glGetSynciv = glad__glGetSynciv!
      .cast<NativeFunction<Void Function(Uint64 GLsync, Uint32 pname, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int32>? values)>>()
      .asFunction<void Function(int GLsync, int pname, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? values)>();
  return _glGetSynciv(GLsync, pname, bufSize, length, values);
}

/// ```c
/// define glIsSync GLEW_GET_FUN(__glewIsSync)
/// GLEW_FUN_EXPORT PFNGLISSYNCPROC __glewIsSync
/// typedef GLboolean (GLAPIENTRY * PFNGLISSYNCPROC) (GLsync GLsync)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsSync;
int glIsSync(int GLsync) {
  final _glIsSync = glad__glIsSync!
      .cast<NativeFunction<Uint8 Function(Uint64 GLsync)>>()
      .asFunction<int Function(int GLsync)>();
  return _glIsSync(GLsync);
}

/// ```c
/// define glWaitSync GLEW_GET_FUN(__glewWaitSync)
/// GLEW_FUN_EXPORT PFNGLWAITSYNCPROC __glewWaitSync
/// typedef void (GLAPIENTRY * PFNGLWAITSYNCPROC) (GLsync GLsync,GLbitfield flags,GLuint64 timeout)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWaitSync;
void glWaitSync(int GLsync, int flags, int timeout) {
  final _glWaitSync = glad__glWaitSync!
      .cast<NativeFunction<Void Function(Uint64 GLsync, Uint32 flags, Uint64 timeout)>>()
      .asFunction<void Function(int GLsync, int flags, int timeout)>();
  return _glWaitSync(GLsync, flags, timeout);
}

/// ----------------------- GL_ARB_tessellation_shader ----------------------
/// ```c
/// define glPatchParameterfv GLEW_GET_FUN(__glewPatchParameterfv)
/// GLEW_FUN_EXPORT PFNGLPATCHPARAMETERFVPROC __glewPatchParameterfv
/// typedef void (GLAPIENTRY * PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPatchParameterfv;
void glPatchParameterfv(int pname, Pointer<Float>? values) {
  final _glPatchParameterfv = glad__glPatchParameterfv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? values)>>()
      .asFunction<void Function(int pname, Pointer<Float>? values)>();
  return _glPatchParameterfv(pname, values);
}

/// ```c
/// define glPatchParameteri GLEW_GET_FUN(__glewPatchParameteri)
/// GLEW_FUN_EXPORT PFNGLPATCHPARAMETERIPROC __glewPatchParameteri
/// typedef void (GLAPIENTRY * PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPatchParameteri;
void glPatchParameteri(int pname, int value) {
  final _glPatchParameteri = glad__glPatchParameteri!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int pname, int value)>();
  return _glPatchParameteri(pname, value);
}

/// ------------------------- GL_ARB_texture_barrier ------------------------
/// ```c
/// define glTextureBarrier GLEW_GET_FUN(__glewTextureBarrier)
/// GLEW_FUN_EXPORT PFNGLTEXTUREBARRIERPROC __glewTextureBarrier
/// typedef void (GLAPIENTRY * PFNGLTEXTUREBARRIERPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureBarrier;
void glTextureBarrier() {
  final _glTextureBarrier = glad__glTextureBarrier!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glTextureBarrier();
}

/// ---------------------- GL_ARB_texture_buffer_object ---------------------
/// ```c
/// define glTexBufferARB GLEW_GET_FUN(__glewTexBufferARB)
/// GLEW_FUN_EXPORT PFNGLTEXBUFFERARBPROC __glewTexBufferARB
/// typedef void (GLAPIENTRY * PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexBufferARB;
void glTexBufferARB(int target, int internalformat, int buffer) {
  final _glTexBufferARB = glad__glTexBufferARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer)>>()
      .asFunction<void Function(int target, int internalformat, int buffer)>();
  return _glTexBufferARB(target, internalformat, buffer);
}

/// ---------------------- GL_ARB_texture_buffer_range ----------------------
/// ```c
/// define glTexBufferRange GLEW_GET_FUN(__glewTexBufferRange)
/// GLEW_FUN_EXPORT PFNGLTEXBUFFERRANGEPROC __glewTexBufferRange
/// typedef void (GLAPIENTRY * PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexBufferRange;
void glTexBufferRange(int target, int internalformat, int buffer, int offset, int size) {
  final _glTexBufferRange = glad__glTexBufferRange!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int target, int internalformat, int buffer, int offset, int size)>();
  return _glTexBufferRange(target, internalformat, buffer, offset, size);
}

/// ```c
/// define glTextureBufferRangeEXT GLEW_GET_FUN(__glewTextureBufferRangeEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREBUFFERRANGEEXTPROC __glewTextureBufferRangeEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureBufferRangeEXT;
void glTextureBufferRangeEXT(int texture, int target, int internalformat, int buffer, int offset, int size) {
  final _glTextureBufferRangeEXT = glad__glTextureBufferRangeEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 internalformat, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int texture, int target, int internalformat, int buffer, int offset, int size)>();
  return _glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
}

/// ----------------------- GL_ARB_texture_compression ----------------------
/// ```c
/// define glCompressedTexImage1DARB GLEW_GET_FUN(__glewCompressedTexImage1DARB)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glewCompressedTexImage1DARB
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage1DARB;
void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage1DARB = glad__glCompressedTexImage1DARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
}

/// ```c
/// define glCompressedTexImage2DARB GLEW_GET_FUN(__glewCompressedTexImage2DARB)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glewCompressedTexImage2DARB
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage2DARB;
void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage2DARB = glad__glCompressedTexImage2DARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
}

/// ```c
/// define glCompressedTexImage3DARB GLEW_GET_FUN(__glewCompressedTexImage3DARB)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glewCompressedTexImage3DARB
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage3DARB;
void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage3DARB = glad__glCompressedTexImage3DARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage1DARB GLEW_GET_FUN(__glewCompressedTexSubImage1DARB)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glewCompressedTexSubImage1DARB
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage1DARB;
void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage1DARB = glad__glCompressedTexSubImage1DARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage2DARB GLEW_GET_FUN(__glewCompressedTexSubImage2DARB)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glewCompressedTexSubImage2DARB
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage2DARB;
void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage2DARB = glad__glCompressedTexSubImage2DARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage3DARB GLEW_GET_FUN(__glewCompressedTexSubImage3DARB)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glewCompressedTexSubImage3DARB
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage3DARB;
void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage3DARB = glad__glCompressedTexSubImage3DARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

/// ```c
/// define glGetCompressedTexImageARB GLEW_GET_FUN(__glewGetCompressedTexImageARB)
/// GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glewGetCompressedTexImageARB
/// typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, void *img)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCompressedTexImageARB;
void glGetCompressedTexImageARB(int target, int lod, Pointer<Void>? img) {
  final _glGetCompressedTexImageARB = glad__glGetCompressedTexImageARB!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 lod, Pointer<Void>? img)>>()
      .asFunction<void Function(int target, int lod, Pointer<Void>? img)>();
  return _glGetCompressedTexImageARB(target, lod, img);
}

/// ----------------------- GL_ARB_texture_multisample ----------------------
/// ```c
/// define glGetMultisamplefv GLEW_GET_FUN(__glewGetMultisamplefv)
/// GLEW_FUN_EXPORT PFNGLGETMULTISAMPLEFVPROC __glewGetMultisamplefv
/// typedef void (GLAPIENTRY * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat* val)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultisamplefv;
void glGetMultisamplefv(int pname, int index, Pointer<Float>? val) {
  final _glGetMultisamplefv = glad__glGetMultisamplefv!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Float>? val)>>()
      .asFunction<void Function(int pname, int index, Pointer<Float>? val)>();
  return _glGetMultisamplefv(pname, index, val);
}

/// ```c
/// define glSampleMaski GLEW_GET_FUN(__glewSampleMaski)
/// GLEW_FUN_EXPORT PFNGLSAMPLEMASKIPROC __glewSampleMaski
/// typedef void (GLAPIENTRY * PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleMaski;
void glSampleMaski(int index, int mask) {
  final _glSampleMaski = glad__glSampleMaski!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 mask)>>()
      .asFunction<void Function(int index, int mask)>();
  return _glSampleMaski(index, mask);
}

/// ```c
/// define glTexImage2DMultisample GLEW_GET_FUN(__glewTexImage2DMultisample)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE2DMULTISAMPLEPROC __glewTexImage2DMultisample
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage2DMultisample;
void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, int fixedsamplelocations) {
  final _glTexImage2DMultisample = glad__glTexImage2DMultisample!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height, int fixedsamplelocations)>();
  return _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

/// ```c
/// define glTexImage3DMultisample GLEW_GET_FUN(__glewTexImage3DMultisample)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE3DMULTISAMPLEPROC __glewTexImage3DMultisample
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage3DMultisample;
void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) {
  final _glTexImage3DMultisample = glad__glTexImage3DMultisample!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations)>();
  return _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

/// ------------------------- GL_ARB_texture_storage ------------------------
/// ```c
/// define glTexStorage1D GLEW_GET_FUN(__glewTexStorage1D)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE1DPROC __glewTexStorage1D
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage1D;
void glTexStorage1D(int target, int levels, int internalformat, int width) {
  final _glTexStorage1D = glad__glTexStorage1D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width)>>()
      .asFunction<void Function(int target, int levels, int internalformat, int width)>();
  return _glTexStorage1D(target, levels, internalformat, width);
}

/// ```c
/// define glTexStorage2D GLEW_GET_FUN(__glewTexStorage2D)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE2DPROC __glewTexStorage2D
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage2D;
void glTexStorage2D(int target, int levels, int internalformat, int width, int height) {
  final _glTexStorage2D = glad__glTexStorage2D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int levels, int internalformat, int width, int height)>();
  return _glTexStorage2D(target, levels, internalformat, width, height);
}

/// ```c
/// define glTexStorage3D GLEW_GET_FUN(__glewTexStorage3D)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE3DPROC __glewTexStorage3D
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage3D;
void glTexStorage3D(int target, int levels, int internalformat, int width, int height, int depth) {
  final _glTexStorage3D = glad__glTexStorage3D!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int target, int levels, int internalformat, int width, int height, int depth)>();
  return _glTexStorage3D(target, levels, internalformat, width, height, depth);
}

/// ------------------- GL_ARB_texture_storage_multisample ------------------
/// ```c
/// define glTexStorage2DMultisample GLEW_GET_FUN(__glewTexStorage2DMultisample)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE2DMULTISAMPLEPROC __glewTexStorage2DMultisample
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage2DMultisample;
void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, int fixedsamplelocations) {
  final _glTexStorage2DMultisample = glad__glTexStorage2DMultisample!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height, int fixedsamplelocations)>();
  return _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

/// ```c
/// define glTexStorage3DMultisample GLEW_GET_FUN(__glewTexStorage3DMultisample)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE3DMULTISAMPLEPROC __glewTexStorage3DMultisample
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage3DMultisample;
void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) {
  final _glTexStorage3DMultisample = glad__glTexStorage3DMultisample!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations)>();
  return _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

/// ```c
/// define glTextureStorage2DMultisampleEXT GLEW_GET_FUN(__glewTextureStorage2DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC __glewTextureStorage2DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage2DMultisampleEXT;
void glTextureStorage2DMultisampleEXT(int texture, int target, int samples, int internalformat, int width, int height, int fixedsamplelocations) {
  final _glTextureStorage2DMultisampleEXT = glad__glTextureStorage2DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int texture, int target, int samples, int internalformat, int width, int height, int fixedsamplelocations)>();
  return _glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

/// ```c
/// define glTextureStorage3DMultisampleEXT GLEW_GET_FUN(__glewTextureStorage3DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC __glewTextureStorage3DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage3DMultisampleEXT;
void glTextureStorage3DMultisampleEXT(int texture, int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations) {
  final _glTextureStorage3DMultisampleEXT = glad__glTextureStorage3DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int texture, int target, int samples, int internalformat, int width, int height, int depth, int fixedsamplelocations)>();
  return _glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

/// -------------------------- GL_ARB_texture_view --------------------------
/// ```c
/// define glTextureView GLEW_GET_FUN(__glewTextureView)
/// GLEW_FUN_EXPORT PFNGLTEXTUREVIEWPROC __glewTextureView
/// typedef void (GLAPIENTRY * PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureView;
void glTextureView(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers) {
  final _glTextureView = glad__glTextureView!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 origtexture, Uint32 internalformat, Uint32 minlevel, Uint32 numlevels, Uint32 minlayer, Uint32 numlayers)>>()
      .asFunction<void Function(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers)>();
  return _glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

/// --------------------------- GL_ARB_timer_query --------------------------
/// ```c
/// define glGetQueryObjecti64v GLEW_GET_FUN(__glewGetQueryObjecti64v)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTI64VPROC __glewGetQueryObjecti64v
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjecti64v;
void glGetQueryObjecti64v(int id, int pname, Pointer<Int64>? params) {
  final _glGetQueryObjecti64v = glad__glGetQueryObjecti64v!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int64>? params)>();
  return _glGetQueryObjecti64v(id, pname, params);
}

/// ```c
/// define glGetQueryObjectui64v GLEW_GET_FUN(__glewGetQueryObjectui64v)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUI64VPROC __glewGetQueryObjectui64v
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectui64v;
void glGetQueryObjectui64v(int id, int pname, Pointer<Uint64>? params) {
  final _glGetQueryObjectui64v = glad__glGetQueryObjectui64v!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint64>? params)>();
  return _glGetQueryObjectui64v(id, pname, params);
}

/// ```c
/// define glQueryCounter GLEW_GET_FUN(__glewQueryCounter)
/// GLEW_FUN_EXPORT PFNGLQUERYCOUNTERPROC __glewQueryCounter
/// typedef void (GLAPIENTRY * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glQueryCounter;
void glQueryCounter(int id, int target) {
  final _glQueryCounter = glad__glQueryCounter!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 target)>>()
      .asFunction<void Function(int id, int target)>();
  return _glQueryCounter(id, target);
}

/// ----------------------- GL_ARB_transform_feedback2 ----------------------
/// ```c
/// define glBindTransformFeedback GLEW_GET_FUN(__glewBindTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLBINDTRANSFORMFEEDBACKPROC __glewBindTransformFeedback
/// typedef void (GLAPIENTRY * PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTransformFeedback;
void glBindTransformFeedback(int target, int id) {
  final _glBindTransformFeedback = glad__glBindTransformFeedback!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return _glBindTransformFeedback(target, id);
}

/// ```c
/// define glDeleteTransformFeedbacks GLEW_GET_FUN(__glewDeleteTransformFeedbacks)
/// GLEW_FUN_EXPORT PFNGLDELETETRANSFORMFEEDBACKSPROC __glewDeleteTransformFeedbacks
/// typedef void (GLAPIENTRY * PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteTransformFeedbacks;
void glDeleteTransformFeedbacks(int n, Pointer<Uint32>? ids) {
  final _glDeleteTransformFeedbacks = glad__glDeleteTransformFeedbacks!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteTransformFeedbacks(n, ids);
}

/// ```c
/// define glDrawTransformFeedback GLEW_GET_FUN(__glewDrawTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLDRAWTRANSFORMFEEDBACKPROC __glewDrawTransformFeedback
/// typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawTransformFeedback;
void glDrawTransformFeedback(int mode, int id) {
  final _glDrawTransformFeedback = glad__glDrawTransformFeedback!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id)>>()
      .asFunction<void Function(int mode, int id)>();
  return _glDrawTransformFeedback(mode, id);
}

/// ```c
/// define glGenTransformFeedbacks GLEW_GET_FUN(__glewGenTransformFeedbacks)
/// GLEW_FUN_EXPORT PFNGLGENTRANSFORMFEEDBACKSPROC __glewGenTransformFeedbacks
/// typedef void (GLAPIENTRY * PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenTransformFeedbacks;
void glGenTransformFeedbacks(int n, Pointer<Uint32>? ids) {
  final _glGenTransformFeedbacks = glad__glGenTransformFeedbacks!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenTransformFeedbacks(n, ids);
}

/// ```c
/// define glIsTransformFeedback GLEW_GET_FUN(__glewIsTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLISTRANSFORMFEEDBACKPROC __glewIsTransformFeedback
/// typedef GLboolean (GLAPIENTRY * PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsTransformFeedback;
int glIsTransformFeedback(int id) {
  final _glIsTransformFeedback = glad__glIsTransformFeedback!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsTransformFeedback(id);
}

/// ```c
/// define glPauseTransformFeedback GLEW_GET_FUN(__glewPauseTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLPAUSETRANSFORMFEEDBACKPROC __glewPauseTransformFeedback
/// typedef void (GLAPIENTRY * PFNGLPAUSETRANSFORMFEEDBACKPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPauseTransformFeedback;
void glPauseTransformFeedback() {
  final _glPauseTransformFeedback = glad__glPauseTransformFeedback!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glPauseTransformFeedback();
}

/// ```c
/// define glResumeTransformFeedback GLEW_GET_FUN(__glewResumeTransformFeedback)
/// GLEW_FUN_EXPORT PFNGLRESUMETRANSFORMFEEDBACKPROC __glewResumeTransformFeedback
/// typedef void (GLAPIENTRY * PFNGLRESUMETRANSFORMFEEDBACKPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResumeTransformFeedback;
void glResumeTransformFeedback() {
  final _glResumeTransformFeedback = glad__glResumeTransformFeedback!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glResumeTransformFeedback();
}

/// ----------------------- GL_ARB_transform_feedback3 ----------------------
/// ```c
/// define glBeginQueryIndexed GLEW_GET_FUN(__glewBeginQueryIndexed)
/// GLEW_FUN_EXPORT PFNGLBEGINQUERYINDEXEDPROC __glewBeginQueryIndexed
/// typedef void (GLAPIENTRY * PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginQueryIndexed;
void glBeginQueryIndexed(int target, int index, int id) {
  final _glBeginQueryIndexed = glad__glBeginQueryIndexed!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 id)>>()
      .asFunction<void Function(int target, int index, int id)>();
  return _glBeginQueryIndexed(target, index, id);
}

/// ```c
/// define glDrawTransformFeedbackStream GLEW_GET_FUN(__glewDrawTransformFeedbackStream)
/// GLEW_FUN_EXPORT PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC __glewDrawTransformFeedbackStream
/// typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawTransformFeedbackStream;
void glDrawTransformFeedbackStream(int mode, int id, int stream) {
  final _glDrawTransformFeedbackStream = glad__glDrawTransformFeedbackStream!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id, Uint32 stream)>>()
      .asFunction<void Function(int mode, int id, int stream)>();
  return _glDrawTransformFeedbackStream(mode, id, stream);
}

/// ```c
/// define glEndQueryIndexed GLEW_GET_FUN(__glewEndQueryIndexed)
/// GLEW_FUN_EXPORT PFNGLENDQUERYINDEXEDPROC __glewEndQueryIndexed
/// typedef void (GLAPIENTRY * PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndQueryIndexed;
void glEndQueryIndexed(int target, int index) {
  final _glEndQueryIndexed = glad__glEndQueryIndexed!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glEndQueryIndexed(target, index);
}

/// ```c
/// define glGetQueryIndexediv GLEW_GET_FUN(__glewGetQueryIndexediv)
/// GLEW_FUN_EXPORT PFNGLGETQUERYINDEXEDIVPROC __glewGetQueryIndexediv
/// typedef void (GLAPIENTRY * PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryIndexediv;
void glGetQueryIndexediv(int target, int index, int pname, Pointer<Int32>? params) {
  final _glGetQueryIndexediv = glad__glGetQueryIndexediv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int index, int pname, Pointer<Int32>? params)>();
  return _glGetQueryIndexediv(target, index, pname, params);
}

/// ------------------ GL_ARB_transform_feedback_instanced ------------------
/// ```c
/// define glDrawTransformFeedbackInstanced GLEW_GET_FUN(__glewDrawTransformFeedbackInstanced)
/// GLEW_FUN_EXPORT PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC __glewDrawTransformFeedbackInstanced
/// typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawTransformFeedbackInstanced;
void glDrawTransformFeedbackInstanced(int mode, int id, int primcount) {
  final _glDrawTransformFeedbackInstanced = glad__glDrawTransformFeedbackInstanced!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int id, int primcount)>();
  return _glDrawTransformFeedbackInstanced(mode, id, primcount);
}

/// ```c
/// define glDrawTransformFeedbackStreamInstanced GLEW_GET_FUN(__glewDrawTransformFeedbackStreamInstanced)
/// GLEW_FUN_EXPORT PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC __glewDrawTransformFeedbackStreamInstanced
/// typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawTransformFeedbackStreamInstanced;
void glDrawTransformFeedbackStreamInstanced(int mode, int id, int stream, int primcount) {
  final _glDrawTransformFeedbackStreamInstanced = glad__glDrawTransformFeedbackStreamInstanced!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id, Uint32 stream, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int id, int stream, int primcount)>();
  return _glDrawTransformFeedbackStreamInstanced(mode, id, stream, primcount);
}

/// ------------------------ GL_ARB_transpose_matrix ------------------------
/// ```c
/// define glLoadTransposeMatrixdARB GLEW_GET_FUN(__glewLoadTransposeMatrixdARB)
/// GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXDARBPROC __glewLoadTransposeMatrixdARB
/// typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (GLdouble m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadTransposeMatrixdARB;
void glLoadTransposeMatrixdARB(double m) {
  final _glLoadTransposeMatrixdARB = glad__glLoadTransposeMatrixdARB!
      .cast<NativeFunction<Void Function(Double m)>>()
      .asFunction<void Function(double m)>();
  return _glLoadTransposeMatrixdARB(m);
}

/// ```c
/// define glLoadTransposeMatrixfARB GLEW_GET_FUN(__glewLoadTransposeMatrixfARB)
/// GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXFARBPROC __glewLoadTransposeMatrixfARB
/// typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (GLfloat m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadTransposeMatrixfARB;
void glLoadTransposeMatrixfARB(double m) {
  final _glLoadTransposeMatrixfARB = glad__glLoadTransposeMatrixfARB!
      .cast<NativeFunction<Void Function(Float m)>>()
      .asFunction<void Function(double m)>();
  return _glLoadTransposeMatrixfARB(m);
}

/// ```c
/// define glMultTransposeMatrixdARB GLEW_GET_FUN(__glewMultTransposeMatrixdARB)
/// GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXDARBPROC __glewMultTransposeMatrixdARB
/// typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (GLdouble m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultTransposeMatrixdARB;
void glMultTransposeMatrixdARB(double m) {
  final _glMultTransposeMatrixdARB = glad__glMultTransposeMatrixdARB!
      .cast<NativeFunction<Void Function(Double m)>>()
      .asFunction<void Function(double m)>();
  return _glMultTransposeMatrixdARB(m);
}

/// ```c
/// define glMultTransposeMatrixfARB GLEW_GET_FUN(__glewMultTransposeMatrixfARB)
/// GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXFARBPROC __glewMultTransposeMatrixfARB
/// typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (GLfloat m[16])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultTransposeMatrixfARB;
void glMultTransposeMatrixfARB(double m) {
  final _glMultTransposeMatrixfARB = glad__glMultTransposeMatrixfARB!
      .cast<NativeFunction<Void Function(Float m)>>()
      .asFunction<void Function(double m)>();
  return _glMultTransposeMatrixfARB(m);
}

/// ---------------------- GL_ARB_uniform_buffer_object ---------------------
/// ```c
/// define glBindBufferBase GLEW_GET_FUN(__glewBindBufferBase)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERBASEPROC __glewBindBufferBase
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferBase;
void glBindBufferBase(int target, int index, int buffer) {
  final _glBindBufferBase = glad__glBindBufferBase!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer)>>()
      .asFunction<void Function(int target, int index, int buffer)>();
  return _glBindBufferBase(target, index, buffer);
}

/// ```c
/// define glBindBufferRange GLEW_GET_FUN(__glewBindBufferRange)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERRANGEPROC __glewBindBufferRange
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferRange;
void glBindBufferRange(int target, int index, int buffer, int offset, int size) {
  final _glBindBufferRange = glad__glBindBufferRange!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int target, int index, int buffer, int offset, int size)>();
  return _glBindBufferRange(target, index, buffer, offset, size);
}

/// ```c
/// define glGetActiveUniformBlockName GLEW_GET_FUN(__glewGetActiveUniformBlockName)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC __glewGetActiveUniformBlockName
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveUniformBlockName;
void glGetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? uniformBlockName) {
  final _glGetActiveUniformBlockName = glad__glGetActiveUniformBlockName!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 uniformBlockIndex, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? uniformBlockName)>>()
      .asFunction<void Function(int program, int uniformBlockIndex, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? uniformBlockName)>();
  return _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

/// ```c
/// define glGetActiveUniformBlockiv GLEW_GET_FUN(__glewGetActiveUniformBlockiv)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMBLOCKIVPROC __glewGetActiveUniformBlockiv
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveUniformBlockiv;
void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, Pointer<Int32>? params) {
  final _glGetActiveUniformBlockiv = glad__glGetActiveUniformBlockiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 uniformBlockIndex, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int uniformBlockIndex, int pname, Pointer<Int32>? params)>();
  return _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}

/// ```c
/// define glGetActiveUniformName GLEW_GET_FUN(__glewGetActiveUniformName)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMNAMEPROC __glewGetActiveUniformName
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveUniformName;
void glGetActiveUniformName(int program, int uniformIndex, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? uniformName) {
  final _glGetActiveUniformName = glad__glGetActiveUniformName!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 uniformIndex, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? uniformName)>>()
      .asFunction<void Function(int program, int uniformIndex, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? uniformName)>();
  return _glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}

/// ```c
/// define glGetActiveUniformsiv GLEW_GET_FUN(__glewGetActiveUniformsiv)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMSIVPROC __glewGetActiveUniformsiv
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveUniformsiv;
void glGetActiveUniformsiv(int program, int uniformCount, Pointer<Uint32>? uniformIndices, int pname, Pointer<Int32>? params) {
  final _glGetActiveUniformsiv = glad__glGetActiveUniformsiv!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 uniformCount, Pointer<Uint32>? uniformIndices, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int uniformCount, Pointer<Uint32>? uniformIndices, int pname, Pointer<Int32>? params)>();
  return _glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}

/// ```c
/// define glGetIntegeri_v GLEW_GET_FUN(__glewGetIntegeri_v)
/// GLEW_FUN_EXPORT PFNGLGETINTEGERI_VPROC __glewGetIntegeri_v
/// typedef void (GLAPIENTRY * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetIntegeri_v;
void glGetIntegeri_v(int target, int index, Pointer<Int32>? data) {
  final _glGetIntegeri_v = glad__glGetIntegeri_v!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Int32>? data)>>()
      .asFunction<void Function(int target, int index, Pointer<Int32>? data)>();
  return _glGetIntegeri_v(target, index, data);
}

/// ```c
/// define glGetUniformBlockIndex GLEW_GET_FUN(__glewGetUniformBlockIndex)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMBLOCKINDEXPROC __glewGetUniformBlockIndex
/// typedef GLuint (GLAPIENTRY * PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar* uniformBlockName)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformBlockIndex;
int glGetUniformBlockIndex(int program, String uniformBlockName) {
  final _glGetUniformBlockIndex = glad__glGetUniformBlockIndex!
      .cast<NativeFunction<Uint32 Function(Uint32 program, Pointer<Utf8>? uniformBlockName)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? uniformBlockName)>();
  final _uniformBlockNamePointer = uniformBlockName.toNativeUtf8();
  final _result = _glGetUniformBlockIndex(program, _uniformBlockNamePointer);
  calloc.free(_uniformBlockNamePointer);
  return _result;
}

/// ```c
/// define glGetUniformIndices GLEW_GET_FUN(__glewGetUniformIndices)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMINDICESPROC __glewGetUniformIndices
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const * uniformNames, GLuint* uniformIndices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformIndices;
void glGetUniformIndices(int program, int uniformCount, Pointer<Pointer<Utf8>>? uniformNames, Pointer<Uint32>? uniformIndices) {
  final _glGetUniformIndices = glad__glGetUniformIndices!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 uniformCount, Pointer<Pointer<Utf8>>? uniformNames, Pointer<Uint32>? uniformIndices)>>()
      .asFunction<void Function(int program, int uniformCount, Pointer<Pointer<Utf8>>? uniformNames, Pointer<Uint32>? uniformIndices)>();
  return _glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}

/// ```c
/// define glUniformBlockBinding GLEW_GET_FUN(__glewUniformBlockBinding)
/// GLEW_FUN_EXPORT PFNGLUNIFORMBLOCKBINDINGPROC __glewUniformBlockBinding
/// typedef void (GLAPIENTRY * PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformBlockBinding;
void glUniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding) {
  final _glUniformBlockBinding = glad__glUniformBlockBinding!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 uniformBlockIndex, Uint32 uniformBlockBinding)>>()
      .asFunction<void Function(int program, int uniformBlockIndex, int uniformBlockBinding)>();
  return _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}

/// ----------------------- GL_ARB_vertex_array_object ----------------------
/// ```c
/// define glBindVertexArray GLEW_GET_FUN(__glewBindVertexArray)
/// GLEW_FUN_EXPORT PFNGLBINDVERTEXARRAYPROC __glewBindVertexArray
/// typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYPROC) (GLuint array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVertexArray;
void glBindVertexArray(int array) {
  final _glBindVertexArray = glad__glBindVertexArray!
      .cast<NativeFunction<Void Function(Uint32 array)>>()
      .asFunction<void Function(int array)>();
  return _glBindVertexArray(array);
}

/// ```c
/// define glDeleteVertexArrays GLEW_GET_FUN(__glewDeleteVertexArrays)
/// GLEW_FUN_EXPORT PFNGLDELETEVERTEXARRAYSPROC __glewDeleteVertexArrays
/// typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteVertexArrays;
void glDeleteVertexArrays(int n, Pointer<Uint32>? arrays) {
  final _glDeleteVertexArrays = glad__glDeleteVertexArrays!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glDeleteVertexArrays(n, arrays);
}

/// ```c
/// define glGenVertexArrays GLEW_GET_FUN(__glewGenVertexArrays)
/// GLEW_FUN_EXPORT PFNGLGENVERTEXARRAYSPROC __glewGenVertexArrays
/// typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenVertexArrays;
void glGenVertexArrays(int n, Pointer<Uint32>? arrays) {
  final _glGenVertexArrays = glad__glGenVertexArrays!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glGenVertexArrays(n, arrays);
}

/// ```c
/// define glIsVertexArray GLEW_GET_FUN(__glewIsVertexArray)
/// GLEW_FUN_EXPORT PFNGLISVERTEXARRAYPROC __glewIsVertexArray
/// typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYPROC) (GLuint array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsVertexArray;
int glIsVertexArray(int array) {
  final _glIsVertexArray = glad__glIsVertexArray!
      .cast<NativeFunction<Uint8 Function(Uint32 array)>>()
      .asFunction<int Function(int array)>();
  return _glIsVertexArray(array);
}

/// ----------------------- GL_ARB_vertex_attrib_64bit ----------------------
/// ```c
/// define glGetVertexAttribLdv GLEW_GET_FUN(__glewGetVertexAttribLdv)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBLDVPROC __glewGetVertexAttribLdv
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribLdv;
void glGetVertexAttribLdv(int index, int pname, Pointer<Double>? params) {
  final _glGetVertexAttribLdv = glad__glGetVertexAttribLdv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Double>? params)>();
  return _glGetVertexAttribLdv(index, pname, params);
}

/// ```c
/// define glVertexAttribL1d GLEW_GET_FUN(__glewVertexAttribL1d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1DPROC __glewVertexAttribL1d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1d;
void glVertexAttribL1d(int index, double x) {
  final _glVertexAttribL1d = glad__glVertexAttribL1d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttribL1d(index, x);
}

/// ```c
/// define glVertexAttribL1dv GLEW_GET_FUN(__glewVertexAttribL1dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1DVPROC __glewVertexAttribL1dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1dv;
void glVertexAttribL1dv(int index, Pointer<Double>? v) {
  final _glVertexAttribL1dv = glad__glVertexAttribL1dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL1dv(index, v);
}

/// ```c
/// define glVertexAttribL2d GLEW_GET_FUN(__glewVertexAttribL2d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2DPROC __glewVertexAttribL2d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2d;
void glVertexAttribL2d(int index, double x, double y) {
  final _glVertexAttribL2d = glad__glVertexAttribL2d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttribL2d(index, x, y);
}

/// ```c
/// define glVertexAttribL2dv GLEW_GET_FUN(__glewVertexAttribL2dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2DVPROC __glewVertexAttribL2dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2dv;
void glVertexAttribL2dv(int index, Pointer<Double>? v) {
  final _glVertexAttribL2dv = glad__glVertexAttribL2dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL2dv(index, v);
}

/// ```c
/// define glVertexAttribL3d GLEW_GET_FUN(__glewVertexAttribL3d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3DPROC __glewVertexAttribL3d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3d;
void glVertexAttribL3d(int index, double x, double y, double z) {
  final _glVertexAttribL3d = glad__glVertexAttribL3d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttribL3d(index, x, y, z);
}

/// ```c
/// define glVertexAttribL3dv GLEW_GET_FUN(__glewVertexAttribL3dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3DVPROC __glewVertexAttribL3dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3dv;
void glVertexAttribL3dv(int index, Pointer<Double>? v) {
  final _glVertexAttribL3dv = glad__glVertexAttribL3dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL3dv(index, v);
}

/// ```c
/// define glVertexAttribL4d GLEW_GET_FUN(__glewVertexAttribL4d)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4DPROC __glewVertexAttribL4d
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4d;
void glVertexAttribL4d(int index, double x, double y, double z, double w) {
  final _glVertexAttribL4d = glad__glVertexAttribL4d!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttribL4d(index, x, y, z, w);
}

/// ```c
/// define glVertexAttribL4dv GLEW_GET_FUN(__glewVertexAttribL4dv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4DVPROC __glewVertexAttribL4dv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4dv;
void glVertexAttribL4dv(int index, Pointer<Double>? v) {
  final _glVertexAttribL4dv = glad__glVertexAttribL4dv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL4dv(index, v);
}

/// ```c
/// define glVertexAttribLPointer GLEW_GET_FUN(__glewVertexAttribLPointer)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBLPOINTERPROC __glewVertexAttribLPointer
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribLPointer;
void glVertexAttribLPointer(int index, int size, int type, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribLPointer = glad__glVertexAttribLPointer!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribLPointer(index, size, type, stride, pointer);
}

/// ---------------------- GL_ARB_vertex_attrib_binding ---------------------
/// ```c
/// define glBindVertexBuffer GLEW_GET_FUN(__glewBindVertexBuffer)
/// GLEW_FUN_EXPORT PFNGLBINDVERTEXBUFFERPROC __glewBindVertexBuffer
/// typedef void (GLAPIENTRY * PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVertexBuffer;
void glBindVertexBuffer(int bindingindex, int buffer, int offset, int stride) {
  final _glBindVertexBuffer = glad__glBindVertexBuffer!
      .cast<NativeFunction<Void Function(Uint32 bindingindex, Uint32 buffer, Uint64 offset, Uint32 stride)>>()
      .asFunction<void Function(int bindingindex, int buffer, int offset, int stride)>();
  return _glBindVertexBuffer(bindingindex, buffer, offset, stride);
}

/// ```c
/// define glVertexArrayBindVertexBufferEXT GLEW_GET_FUN(__glewVertexArrayBindVertexBufferEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC __glewVertexArrayBindVertexBufferEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayBindVertexBufferEXT;
void glVertexArrayBindVertexBufferEXT(int vaobj, int bindingindex, int buffer, int offset, int stride) {
  final _glVertexArrayBindVertexBufferEXT = glad__glVertexArrayBindVertexBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 buffer, Uint64 offset, Uint32 stride)>>()
      .asFunction<void Function(int vaobj, int bindingindex, int buffer, int offset, int stride)>();
  return _glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
}

/// ```c
/// define glVertexArrayVertexAttribBindingEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribBindingEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC __glewVertexArrayVertexAttribBindingEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribBindingEXT;
void glVertexArrayVertexAttribBindingEXT(int vaobj, int attribindex, int bindingindex) {
  final _glVertexArrayVertexAttribBindingEXT = glad__glVertexArrayVertexAttribBindingEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Uint32 bindingindex)>>()
      .asFunction<void Function(int vaobj, int attribindex, int bindingindex)>();
  return _glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
}

/// ```c
/// define glVertexArrayVertexAttribFormatEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribFormatEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC __glewVertexArrayVertexAttribFormatEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribFormatEXT;
void glVertexArrayVertexAttribFormatEXT(int vaobj, int attribindex, int size, int type, int normalized, int relativeoffset) {
  final _glVertexArrayVertexAttribFormatEXT = glad__glVertexArrayVertexAttribFormatEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Int32 size, Uint32 type, Uint8 normalized, Uint32 relativeoffset)>>()
      .asFunction<void Function(int vaobj, int attribindex, int size, int type, int normalized, int relativeoffset)>();
  return _glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
}

/// ```c
/// define glVertexArrayVertexAttribIFormatEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribIFormatEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC __glewVertexArrayVertexAttribIFormatEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribIFormatEXT;
void glVertexArrayVertexAttribIFormatEXT(int vaobj, int attribindex, int size, int type, int relativeoffset) {
  final _glVertexArrayVertexAttribIFormatEXT = glad__glVertexArrayVertexAttribIFormatEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Int32 size, Uint32 type, Uint32 relativeoffset)>>()
      .asFunction<void Function(int vaobj, int attribindex, int size, int type, int relativeoffset)>();
  return _glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}

/// ```c
/// define glVertexArrayVertexAttribLFormatEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribLFormatEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC __glewVertexArrayVertexAttribLFormatEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribLFormatEXT;
void glVertexArrayVertexAttribLFormatEXT(int vaobj, int attribindex, int size, int type, int relativeoffset) {
  final _glVertexArrayVertexAttribLFormatEXT = glad__glVertexArrayVertexAttribLFormatEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 attribindex, Int32 size, Uint32 type, Uint32 relativeoffset)>>()
      .asFunction<void Function(int vaobj, int attribindex, int size, int type, int relativeoffset)>();
  return _glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}

/// ```c
/// define glVertexArrayVertexBindingDivisorEXT GLEW_GET_FUN(__glewVertexArrayVertexBindingDivisorEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC __glewVertexArrayVertexBindingDivisorEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexBindingDivisorEXT;
void glVertexArrayVertexBindingDivisorEXT(int vaobj, int bindingindex, int divisor) {
  final _glVertexArrayVertexBindingDivisorEXT = glad__glVertexArrayVertexBindingDivisorEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 bindingindex, Uint32 divisor)>>()
      .asFunction<void Function(int vaobj, int bindingindex, int divisor)>();
  return _glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
}

/// ```c
/// define glVertexAttribBinding GLEW_GET_FUN(__glewVertexAttribBinding)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBBINDINGPROC __glewVertexAttribBinding
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribBinding;
void glVertexAttribBinding(int attribindex, int bindingindex) {
  final _glVertexAttribBinding = glad__glVertexAttribBinding!
      .cast<NativeFunction<Void Function(Uint32 attribindex, Uint32 bindingindex)>>()
      .asFunction<void Function(int attribindex, int bindingindex)>();
  return _glVertexAttribBinding(attribindex, bindingindex);
}

/// ```c
/// define glVertexAttribFormat GLEW_GET_FUN(__glewVertexAttribFormat)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBFORMATPROC __glewVertexAttribFormat
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribFormat;
void glVertexAttribFormat(int attribindex, int size, int type, int normalized, int relativeoffset) {
  final _glVertexAttribFormat = glad__glVertexAttribFormat!
      .cast<NativeFunction<Void Function(Uint32 attribindex, Int32 size, Uint32 type, Uint8 normalized, Uint32 relativeoffset)>>()
      .asFunction<void Function(int attribindex, int size, int type, int normalized, int relativeoffset)>();
  return _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}

/// ```c
/// define glVertexAttribIFormat GLEW_GET_FUN(__glewVertexAttribIFormat)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIFORMATPROC __glewVertexAttribIFormat
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribIFormat;
void glVertexAttribIFormat(int attribindex, int size, int type, int relativeoffset) {
  final _glVertexAttribIFormat = glad__glVertexAttribIFormat!
      .cast<NativeFunction<Void Function(Uint32 attribindex, Int32 size, Uint32 type, Uint32 relativeoffset)>>()
      .asFunction<void Function(int attribindex, int size, int type, int relativeoffset)>();
  return _glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}

/// ```c
/// define glVertexAttribLFormat GLEW_GET_FUN(__glewVertexAttribLFormat)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBLFORMATPROC __glewVertexAttribLFormat
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribLFormat;
void glVertexAttribLFormat(int attribindex, int size, int type, int relativeoffset) {
  final _glVertexAttribLFormat = glad__glVertexAttribLFormat!
      .cast<NativeFunction<Void Function(Uint32 attribindex, Int32 size, Uint32 type, Uint32 relativeoffset)>>()
      .asFunction<void Function(int attribindex, int size, int type, int relativeoffset)>();
  return _glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}

/// ```c
/// define glVertexBindingDivisor GLEW_GET_FUN(__glewVertexBindingDivisor)
/// GLEW_FUN_EXPORT PFNGLVERTEXBINDINGDIVISORPROC __glewVertexBindingDivisor
/// typedef void (GLAPIENTRY * PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexBindingDivisor;
void glVertexBindingDivisor(int bindingindex, int divisor) {
  final _glVertexBindingDivisor = glad__glVertexBindingDivisor!
      .cast<NativeFunction<Void Function(Uint32 bindingindex, Uint32 divisor)>>()
      .asFunction<void Function(int bindingindex, int divisor)>();
  return _glVertexBindingDivisor(bindingindex, divisor);
}

/// -------------------------- GL_ARB_vertex_blend --------------------------
/// ```c
/// define glVertexBlendARB GLEW_GET_FUN(__glewVertexBlendARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXBLENDARBPROC __glewVertexBlendARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXBLENDARBPROC) (GLint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexBlendARB;
void glVertexBlendARB(int count) {
  final _glVertexBlendARB = glad__glVertexBlendARB!
      .cast<NativeFunction<Void Function(Int32 count)>>()
      .asFunction<void Function(int count)>();
  return _glVertexBlendARB(count);
}

/// ```c
/// define glWeightPointerARB GLEW_GET_FUN(__glewWeightPointerARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTPOINTERARBPROC __glewWeightPointerARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightPointerARB;
void glWeightPointerARB(int size, int type, int stride, Pointer<Void>? pointer) {
  final _glWeightPointerARB = glad__glWeightPointerARB!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glWeightPointerARB(size, type, stride, pointer);
}

/// ```c
/// define glWeightbvARB GLEW_GET_FUN(__glewWeightbvARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTBVARBPROC __glewWeightbvARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTBVARBPROC) (GLint size, GLbyte *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightbvARB;
void glWeightbvARB(int size, Pointer<Int8>? weights) {
  final _glWeightbvARB = glad__glWeightbvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Int8>? weights)>>()
      .asFunction<void Function(int size, Pointer<Int8>? weights)>();
  return _glWeightbvARB(size, weights);
}

/// ```c
/// define glWeightdvARB GLEW_GET_FUN(__glewWeightdvARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTDVARBPROC __glewWeightdvARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTDVARBPROC) (GLint size, GLdouble *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightdvARB;
void glWeightdvARB(int size, Pointer<Double>? weights) {
  final _glWeightdvARB = glad__glWeightdvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Double>? weights)>>()
      .asFunction<void Function(int size, Pointer<Double>? weights)>();
  return _glWeightdvARB(size, weights);
}

/// ```c
/// define glWeightfvARB GLEW_GET_FUN(__glewWeightfvARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTFVARBPROC __glewWeightfvARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTFVARBPROC) (GLint size, GLfloat *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightfvARB;
void glWeightfvARB(int size, Pointer<Float>? weights) {
  final _glWeightfvARB = glad__glWeightfvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Float>? weights)>>()
      .asFunction<void Function(int size, Pointer<Float>? weights)>();
  return _glWeightfvARB(size, weights);
}

/// ```c
/// define glWeightivARB GLEW_GET_FUN(__glewWeightivARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTIVARBPROC __glewWeightivARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTIVARBPROC) (GLint size, GLint *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightivARB;
void glWeightivARB(int size, Pointer<Int32>? weights) {
  final _glWeightivARB = glad__glWeightivARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Int32>? weights)>>()
      .asFunction<void Function(int size, Pointer<Int32>? weights)>();
  return _glWeightivARB(size, weights);
}

/// ```c
/// define glWeightsvARB GLEW_GET_FUN(__glewWeightsvARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTSVARBPROC __glewWeightsvARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTSVARBPROC) (GLint size, GLshort *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightsvARB;
void glWeightsvARB(int size, Pointer<Int16>? weights) {
  final _glWeightsvARB = glad__glWeightsvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Int16>? weights)>>()
      .asFunction<void Function(int size, Pointer<Int16>? weights)>();
  return _glWeightsvARB(size, weights);
}

/// ```c
/// define glWeightubvARB GLEW_GET_FUN(__glewWeightubvARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTUBVARBPROC __glewWeightubvARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTUBVARBPROC) (GLint size, GLubyte *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightubvARB;
void glWeightubvARB(int size, Pointer<Uint8>? weights) {
  final _glWeightubvARB = glad__glWeightubvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint8>? weights)>>()
      .asFunction<void Function(int size, Pointer<Uint8>? weights)>();
  return _glWeightubvARB(size, weights);
}

/// ```c
/// define glWeightuivARB GLEW_GET_FUN(__glewWeightuivARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTUIVARBPROC __glewWeightuivARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTUIVARBPROC) (GLint size, GLuint *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightuivARB;
void glWeightuivARB(int size, Pointer<Uint32>? weights) {
  final _glWeightuivARB = glad__glWeightuivARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint32>? weights)>>()
      .asFunction<void Function(int size, Pointer<Uint32>? weights)>();
  return _glWeightuivARB(size, weights);
}

/// ```c
/// define glWeightusvARB GLEW_GET_FUN(__glewWeightusvARB)
/// GLEW_FUN_EXPORT PFNGLWEIGHTUSVARBPROC __glewWeightusvARB
/// typedef void (GLAPIENTRY * PFNGLWEIGHTUSVARBPROC) (GLint size, GLushort *weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightusvARB;
void glWeightusvARB(int size, Pointer<Uint16>? weights) {
  final _glWeightusvARB = glad__glWeightusvARB!
      .cast<NativeFunction<Void Function(Int32 size, Pointer<Uint16>? weights)>>()
      .asFunction<void Function(int size, Pointer<Uint16>? weights)>();
  return _glWeightusvARB(size, weights);
}

/// ```c
/// define glBindBufferARB GLEW_GET_FUN(__glewBindBufferARB)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERARBPROC __glewBindBufferARB
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferARB;
void glBindBufferARB(int target, int buffer) {
  final _glBindBufferARB = glad__glBindBufferARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer)>>()
      .asFunction<void Function(int target, int buffer)>();
  return _glBindBufferARB(target, buffer);
}

/// ```c
/// define glBufferDataARB GLEW_GET_FUN(__glewBufferDataARB)
/// GLEW_FUN_EXPORT PFNGLBUFFERDATAARBPROC __glewBufferDataARB
/// typedef void (GLAPIENTRY * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferDataARB;
void glBufferDataARB(int target, Pointer<Void>? size, Pointer<Void>? data, int usage) {
  final _glBufferDataARB = glad__glBufferDataARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Void>? size, Pointer<Void>? data, Uint32 usage)>>()
      .asFunction<void Function(int target, Pointer<Void>? size, Pointer<Void>? data, int usage)>();
  return _glBufferDataARB(target, size, data, usage);
}

/// ```c
/// define glBufferSubDataARB GLEW_GET_FUN(__glewBufferSubDataARB)
/// GLEW_FUN_EXPORT PFNGLBUFFERSUBDATAARBPROC __glewBufferSubDataARB
/// typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferSubDataARB;
void glBufferSubDataARB(int target, Pointer<Void>? offset, Pointer<Void>? size, Pointer<Void>? data) {
  final _glBufferSubDataARB = glad__glBufferSubDataARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Void>? offset, Pointer<Void>? size, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, Pointer<Void>? offset, Pointer<Void>? size, Pointer<Void>? data)>();
  return _glBufferSubDataARB(target, offset, size, data);
}

/// ```c
/// define glDeleteBuffersARB GLEW_GET_FUN(__glewDeleteBuffersARB)
/// GLEW_FUN_EXPORT PFNGLDELETEBUFFERSARBPROC __glewDeleteBuffersARB
/// typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint* buffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteBuffersARB;
void glDeleteBuffersARB(int n, Pointer<Uint32>? buffers) {
  final _glDeleteBuffersARB = glad__glDeleteBuffersARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? buffers)>();
  return _glDeleteBuffersARB(n, buffers);
}

/// ```c
/// define glGenBuffersARB GLEW_GET_FUN(__glewGenBuffersARB)
/// GLEW_FUN_EXPORT PFNGLGENBUFFERSARBPROC __glewGenBuffersARB
/// typedef void (GLAPIENTRY * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint* buffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenBuffersARB;
void glGenBuffersARB(int n, Pointer<Uint32>? buffers) {
  final _glGenBuffersARB = glad__glGenBuffersARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? buffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? buffers)>();
  return _glGenBuffersARB(n, buffers);
}

/// ```c
/// define glGetBufferParameterivARB GLEW_GET_FUN(__glewGetBufferParameterivARB)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERIVARBPROC __glewGetBufferParameterivARB
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferParameterivARB;
void glGetBufferParameterivARB(int target, int pname, Pointer<Int32>? params) {
  final _glGetBufferParameterivARB = glad__glGetBufferParameterivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetBufferParameterivARB(target, pname, params);
}

/// ```c
/// define glGetBufferPointervARB GLEW_GET_FUN(__glewGetBufferPointervARB)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERPOINTERVARBPROC __glewGetBufferPointervARB
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferPointervARB;
void glGetBufferPointervARB(int target, int pname, Pointer<Pointer<Void>>? params) {
  final _glGetBufferPointervARB = glad__glGetBufferPointervARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Pointer<Void>>? params)>();
  return _glGetBufferPointervARB(target, pname, params);
}

/// ```c
/// define glGetBufferSubDataARB GLEW_GET_FUN(__glewGetBufferSubDataARB)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERSUBDATAARBPROC __glewGetBufferSubDataARB
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferSubDataARB;
void glGetBufferSubDataARB(int target, Pointer<Void>? offset, Pointer<Void>? size, Pointer<Void>? data) {
  final _glGetBufferSubDataARB = glad__glGetBufferSubDataARB!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Void>? offset, Pointer<Void>? size, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, Pointer<Void>? offset, Pointer<Void>? size, Pointer<Void>? data)>();
  return _glGetBufferSubDataARB(target, offset, size, data);
}

/// ```c
/// define glIsBufferARB GLEW_GET_FUN(__glewIsBufferARB)
/// GLEW_FUN_EXPORT PFNGLISBUFFERARBPROC __glewIsBufferARB
/// typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERARBPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsBufferARB;
int glIsBufferARB(int buffer) {
  final _glIsBufferARB = glad__glIsBufferARB!
      .cast<NativeFunction<Uint8 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return _glIsBufferARB(buffer);
}

/// ```c
/// define glMapBufferARB GLEW_GET_FUN(__glewMapBufferARB)
/// GLEW_FUN_EXPORT PFNGLMAPBUFFERARBPROC __glewMapBufferARB
/// typedef void * (GLAPIENTRY * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapBufferARB;
Pointer<Void>? glMapBufferARB(int target, int access) {
  final _glMapBufferARB = glad__glMapBufferARB!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 target, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int target, int access)>();
  return _glMapBufferARB(target, access);
}

/// ```c
/// define glUnmapBufferARB GLEW_GET_FUN(__glewUnmapBufferARB)
/// GLEW_FUN_EXPORT PFNGLUNMAPBUFFERARBPROC __glewUnmapBufferARB
/// typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERARBPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnmapBufferARB;
int glUnmapBufferARB(int target) {
  final _glUnmapBufferARB = glad__glUnmapBufferARB!
      .cast<NativeFunction<Uint8 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return _glUnmapBufferARB(target);
}

/// ------------------------- GL_ARB_vertex_program -------------------------
/// ```c
/// define glBindProgramARB GLEW_GET_FUN(__glewBindProgramARB)
/// GLEW_FUN_EXPORT PFNGLBINDPROGRAMARBPROC __glewBindProgramARB
/// typedef void (GLAPIENTRY * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindProgramARB;
void glBindProgramARB(int target, int program) {
  final _glBindProgramARB = glad__glBindProgramARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 program)>>()
      .asFunction<void Function(int target, int program)>();
  return _glBindProgramARB(target, program);
}

/// ```c
/// define glDeleteProgramsARB GLEW_GET_FUN(__glewDeleteProgramsARB)
/// GLEW_FUN_EXPORT PFNGLDELETEPROGRAMSARBPROC __glewDeleteProgramsARB
/// typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint* programs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteProgramsARB;
void glDeleteProgramsARB(int n, Pointer<Uint32>? programs) {
  final _glDeleteProgramsARB = glad__glDeleteProgramsARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? programs)>();
  return _glDeleteProgramsARB(n, programs);
}

/// ```c
/// define glDisableVertexAttribArrayARB GLEW_GET_FUN(__glewDisableVertexAttribArrayARB)
/// GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glewDisableVertexAttribArrayARB
/// typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVertexAttribArrayARB;
void glDisableVertexAttribArrayARB(int index) {
  final _glDisableVertexAttribArrayARB = glad__glDisableVertexAttribArrayARB!
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return _glDisableVertexAttribArrayARB(index);
}

/// ```c
/// define glEnableVertexAttribArrayARB GLEW_GET_FUN(__glewEnableVertexAttribArrayARB)
/// GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glewEnableVertexAttribArrayARB
/// typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVertexAttribArrayARB;
void glEnableVertexAttribArrayARB(int index) {
  final _glEnableVertexAttribArrayARB = glad__glEnableVertexAttribArrayARB!
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return _glEnableVertexAttribArrayARB(index);
}

/// ```c
/// define glGenProgramsARB GLEW_GET_FUN(__glewGenProgramsARB)
/// GLEW_FUN_EXPORT PFNGLGENPROGRAMSARBPROC __glewGenProgramsARB
/// typedef void (GLAPIENTRY * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint* programs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenProgramsARB;
void glGenProgramsARB(int n, Pointer<Uint32>? programs) {
  final _glGenProgramsARB = glad__glGenProgramsARB!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? programs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? programs)>();
  return _glGenProgramsARB(n, programs);
}

/// ```c
/// define glGetProgramEnvParameterdvARB GLEW_GET_FUN(__glewGetProgramEnvParameterdvARB)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glewGetProgramEnvParameterdvARB
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramEnvParameterdvARB;
void glGetProgramEnvParameterdvARB(int target, int index, Pointer<Double>? params) {
  final _glGetProgramEnvParameterdvARB = glad__glGetProgramEnvParameterdvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? params)>();
  return _glGetProgramEnvParameterdvARB(target, index, params);
}

/// ```c
/// define glGetProgramEnvParameterfvARB GLEW_GET_FUN(__glewGetProgramEnvParameterfvARB)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glewGetProgramEnvParameterfvARB
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramEnvParameterfvARB;
void glGetProgramEnvParameterfvARB(int target, int index, Pointer<Float>? params) {
  final _glGetProgramEnvParameterfvARB = glad__glGetProgramEnvParameterfvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? params)>();
  return _glGetProgramEnvParameterfvARB(target, index, params);
}

/// ```c
/// define glGetProgramLocalParameterdvARB GLEW_GET_FUN(__glewGetProgramLocalParameterdvARB)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glewGetProgramLocalParameterdvARB
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramLocalParameterdvARB;
void glGetProgramLocalParameterdvARB(int target, int index, Pointer<Double>? params) {
  final _glGetProgramLocalParameterdvARB = glad__glGetProgramLocalParameterdvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? params)>();
  return _glGetProgramLocalParameterdvARB(target, index, params);
}

/// ```c
/// define glGetProgramLocalParameterfvARB GLEW_GET_FUN(__glewGetProgramLocalParameterfvARB)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glewGetProgramLocalParameterfvARB
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramLocalParameterfvARB;
void glGetProgramLocalParameterfvARB(int target, int index, Pointer<Float>? params) {
  final _glGetProgramLocalParameterfvARB = glad__glGetProgramLocalParameterfvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? params)>();
  return _glGetProgramLocalParameterfvARB(target, index, params);
}

/// ```c
/// define glGetProgramStringARB GLEW_GET_FUN(__glewGetProgramStringARB)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMSTRINGARBPROC __glewGetProgramStringARB
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramStringARB;
void glGetProgramStringARB(int target, int pname, Pointer<Void>? string) {
  final _glGetProgramStringARB = glad__glGetProgramStringARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Void>? string)>>()
      .asFunction<void Function(int target, int pname, Pointer<Void>? string)>();
  return _glGetProgramStringARB(target, pname, string);
}

/// ```c
/// define glGetProgramivARB GLEW_GET_FUN(__glewGetProgramivARB)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMIVARBPROC __glewGetProgramivARB
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramivARB;
void glGetProgramivARB(int target, int pname, Pointer<Int32>? params) {
  final _glGetProgramivARB = glad__glGetProgramivARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetProgramivARB(target, pname, params);
}

/// ```c
/// define glGetVertexAttribPointervARB GLEW_GET_FUN(__glewGetVertexAttribPointervARB)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glewGetVertexAttribPointervARB
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribPointervARB;
void glGetVertexAttribPointervARB(int index, int pname, Pointer<Pointer<Void>>? pointer) {
  final _glGetVertexAttribPointervARB = glad__glGetVertexAttribPointervARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int index, int pname, Pointer<Pointer<Void>>? pointer)>();
  return _glGetVertexAttribPointervARB(index, pname, pointer);
}

/// ```c
/// define glGetVertexAttribdvARB GLEW_GET_FUN(__glewGetVertexAttribdvARB)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVARBPROC __glewGetVertexAttribdvARB
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribdvARB;
void glGetVertexAttribdvARB(int index, int pname, Pointer<Double>? params) {
  final _glGetVertexAttribdvARB = glad__glGetVertexAttribdvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Double>? params)>();
  return _glGetVertexAttribdvARB(index, pname, params);
}

/// ```c
/// define glGetVertexAttribfvARB GLEW_GET_FUN(__glewGetVertexAttribfvARB)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVARBPROC __glewGetVertexAttribfvARB
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribfvARB;
void glGetVertexAttribfvARB(int index, int pname, Pointer<Float>? params) {
  final _glGetVertexAttribfvARB = glad__glGetVertexAttribfvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Float>? params)>();
  return _glGetVertexAttribfvARB(index, pname, params);
}

/// ```c
/// define glGetVertexAttribivARB GLEW_GET_FUN(__glewGetVertexAttribivARB)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVARBPROC __glewGetVertexAttribivARB
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribivARB;
void glGetVertexAttribivARB(int index, int pname, Pointer<Int32>? params) {
  final _glGetVertexAttribivARB = glad__glGetVertexAttribivARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int32>? params)>();
  return _glGetVertexAttribivARB(index, pname, params);
}

/// ```c
/// define glIsProgramARB GLEW_GET_FUN(__glewIsProgramARB)
/// GLEW_FUN_EXPORT PFNGLISPROGRAMARBPROC __glewIsProgramARB
/// typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMARBPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsProgramARB;
int glIsProgramARB(int program) {
  final _glIsProgramARB = glad__glIsProgramARB!
      .cast<NativeFunction<Uint8 Function(Uint32 program)>>()
      .asFunction<int Function(int program)>();
  return _glIsProgramARB(program);
}

/// ```c
/// define glProgramEnvParameter4dARB GLEW_GET_FUN(__glewProgramEnvParameter4dARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4DARBPROC __glewProgramEnvParameter4dARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameter4dARB;
void glProgramEnvParameter4dARB(int target, int index, double x, double y, double z, double w) {
  final _glProgramEnvParameter4dARB = glad__glProgramEnvParameter4dARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int target, int index, double x, double y, double z, double w)>();
  return _glProgramEnvParameter4dARB(target, index, x, y, z, w);
}

/// ```c
/// define glProgramEnvParameter4dvARB GLEW_GET_FUN(__glewProgramEnvParameter4dvARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4DVARBPROC __glewProgramEnvParameter4dvARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameter4dvARB;
void glProgramEnvParameter4dvARB(int target, int index, Pointer<Double>? params) {
  final _glProgramEnvParameter4dvARB = glad__glProgramEnvParameter4dvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? params)>();
  return _glProgramEnvParameter4dvARB(target, index, params);
}

/// ```c
/// define glProgramEnvParameter4fARB GLEW_GET_FUN(__glewProgramEnvParameter4fARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4FARBPROC __glewProgramEnvParameter4fARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameter4fARB;
void glProgramEnvParameter4fARB(int target, int index, double x, double y, double z, double w) {
  final _glProgramEnvParameter4fARB = glad__glProgramEnvParameter4fARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int target, int index, double x, double y, double z, double w)>();
  return _glProgramEnvParameter4fARB(target, index, x, y, z, w);
}

/// ```c
/// define glProgramEnvParameter4fvARB GLEW_GET_FUN(__glewProgramEnvParameter4fvARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4FVARBPROC __glewProgramEnvParameter4fvARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameter4fvARB;
void glProgramEnvParameter4fvARB(int target, int index, Pointer<Float>? params) {
  final _glProgramEnvParameter4fvARB = glad__glProgramEnvParameter4fvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? params)>();
  return _glProgramEnvParameter4fvARB(target, index, params);
}

/// ```c
/// define glProgramLocalParameter4dARB GLEW_GET_FUN(__glewProgramLocalParameter4dARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glewProgramLocalParameter4dARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameter4dARB;
void glProgramLocalParameter4dARB(int target, int index, double x, double y, double z, double w) {
  final _glProgramLocalParameter4dARB = glad__glProgramLocalParameter4dARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int target, int index, double x, double y, double z, double w)>();
  return _glProgramLocalParameter4dARB(target, index, x, y, z, w);
}

/// ```c
/// define glProgramLocalParameter4dvARB GLEW_GET_FUN(__glewProgramLocalParameter4dvARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glewProgramLocalParameter4dvARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameter4dvARB;
void glProgramLocalParameter4dvARB(int target, int index, Pointer<Double>? params) {
  final _glProgramLocalParameter4dvARB = glad__glProgramLocalParameter4dvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? params)>();
  return _glProgramLocalParameter4dvARB(target, index, params);
}

/// ```c
/// define glProgramLocalParameter4fARB GLEW_GET_FUN(__glewProgramLocalParameter4fARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glewProgramLocalParameter4fARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameter4fARB;
void glProgramLocalParameter4fARB(int target, int index, double x, double y, double z, double w) {
  final _glProgramLocalParameter4fARB = glad__glProgramLocalParameter4fARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int target, int index, double x, double y, double z, double w)>();
  return _glProgramLocalParameter4fARB(target, index, x, y, z, w);
}

/// ```c
/// define glProgramLocalParameter4fvARB GLEW_GET_FUN(__glewProgramLocalParameter4fvARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glewProgramLocalParameter4fvARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameter4fvARB;
void glProgramLocalParameter4fvARB(int target, int index, Pointer<Float>? params) {
  final _glProgramLocalParameter4fvARB = glad__glProgramLocalParameter4fvARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? params)>();
  return _glProgramLocalParameter4fvARB(target, index, params);
}

/// ```c
/// define glProgramStringARB GLEW_GET_FUN(__glewProgramStringARB)
/// GLEW_FUN_EXPORT PFNGLPROGRAMSTRINGARBPROC __glewProgramStringARB
/// typedef void (GLAPIENTRY * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramStringARB;
void glProgramStringARB(int target, int format, int len, Pointer<Void>? string) {
  final _glProgramStringARB = glad__glProgramStringARB!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 len, Pointer<Void>? string)>>()
      .asFunction<void Function(int target, int format, int len, Pointer<Void>? string)>();
  return _glProgramStringARB(target, format, len, string);
}

/// ```c
/// define glVertexAttrib1dARB GLEW_GET_FUN(__glewVertexAttrib1dARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DARBPROC __glewVertexAttrib1dARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1dARB;
void glVertexAttrib1dARB(int index, double x) {
  final _glVertexAttrib1dARB = glad__glVertexAttrib1dARB!
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttrib1dARB(index, x);
}

/// ```c
/// define glVertexAttrib1dvARB GLEW_GET_FUN(__glewVertexAttrib1dvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVARBPROC __glewVertexAttrib1dvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1dvARB;
void glVertexAttrib1dvARB(int index, Pointer<Double>? v) {
  final _glVertexAttrib1dvARB = glad__glVertexAttrib1dvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib1dvARB(index, v);
}

/// ```c
/// define glVertexAttrib1fARB GLEW_GET_FUN(__glewVertexAttrib1fARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FARBPROC __glewVertexAttrib1fARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1fARB;
void glVertexAttrib1fARB(int index, double x) {
  final _glVertexAttrib1fARB = glad__glVertexAttrib1fARB!
      .cast<NativeFunction<Void Function(Uint32 index, Float x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttrib1fARB(index, x);
}

/// ```c
/// define glVertexAttrib1fvARB GLEW_GET_FUN(__glewVertexAttrib1fvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVARBPROC __glewVertexAttrib1fvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1fvARB;
void glVertexAttrib1fvARB(int index, Pointer<Float>? v) {
  final _glVertexAttrib1fvARB = glad__glVertexAttrib1fvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib1fvARB(index, v);
}

/// ```c
/// define glVertexAttrib1sARB GLEW_GET_FUN(__glewVertexAttrib1sARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SARBPROC __glewVertexAttrib1sARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1sARB;
void glVertexAttrib1sARB(int index, int x) {
  final _glVertexAttrib1sARB = glad__glVertexAttrib1sARB!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttrib1sARB(index, x);
}

/// ```c
/// define glVertexAttrib1svARB GLEW_GET_FUN(__glewVertexAttrib1svARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVARBPROC __glewVertexAttrib1svARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1svARB;
void glVertexAttrib1svARB(int index, Pointer<Int16>? v) {
  final _glVertexAttrib1svARB = glad__glVertexAttrib1svARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib1svARB(index, v);
}

/// ```c
/// define glVertexAttrib2dARB GLEW_GET_FUN(__glewVertexAttrib2dARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DARBPROC __glewVertexAttrib2dARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2dARB;
void glVertexAttrib2dARB(int index, double x, double y) {
  final _glVertexAttrib2dARB = glad__glVertexAttrib2dARB!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttrib2dARB(index, x, y);
}

/// ```c
/// define glVertexAttrib2dvARB GLEW_GET_FUN(__glewVertexAttrib2dvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVARBPROC __glewVertexAttrib2dvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2dvARB;
void glVertexAttrib2dvARB(int index, Pointer<Double>? v) {
  final _glVertexAttrib2dvARB = glad__glVertexAttrib2dvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib2dvARB(index, v);
}

/// ```c
/// define glVertexAttrib2fARB GLEW_GET_FUN(__glewVertexAttrib2fARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FARBPROC __glewVertexAttrib2fARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2fARB;
void glVertexAttrib2fARB(int index, double x, double y) {
  final _glVertexAttrib2fARB = glad__glVertexAttrib2fARB!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttrib2fARB(index, x, y);
}

/// ```c
/// define glVertexAttrib2fvARB GLEW_GET_FUN(__glewVertexAttrib2fvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVARBPROC __glewVertexAttrib2fvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2fvARB;
void glVertexAttrib2fvARB(int index, Pointer<Float>? v) {
  final _glVertexAttrib2fvARB = glad__glVertexAttrib2fvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib2fvARB(index, v);
}

/// ```c
/// define glVertexAttrib2sARB GLEW_GET_FUN(__glewVertexAttrib2sARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SARBPROC __glewVertexAttrib2sARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2sARB;
void glVertexAttrib2sARB(int index, int x, int y) {
  final _glVertexAttrib2sARB = glad__glVertexAttrib2sARB!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttrib2sARB(index, x, y);
}

/// ```c
/// define glVertexAttrib2svARB GLEW_GET_FUN(__glewVertexAttrib2svARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVARBPROC __glewVertexAttrib2svARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2svARB;
void glVertexAttrib2svARB(int index, Pointer<Int16>? v) {
  final _glVertexAttrib2svARB = glad__glVertexAttrib2svARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib2svARB(index, v);
}

/// ```c
/// define glVertexAttrib3dARB GLEW_GET_FUN(__glewVertexAttrib3dARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DARBPROC __glewVertexAttrib3dARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3dARB;
void glVertexAttrib3dARB(int index, double x, double y, double z) {
  final _glVertexAttrib3dARB = glad__glVertexAttrib3dARB!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttrib3dARB(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3dvARB GLEW_GET_FUN(__glewVertexAttrib3dvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVARBPROC __glewVertexAttrib3dvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3dvARB;
void glVertexAttrib3dvARB(int index, Pointer<Double>? v) {
  final _glVertexAttrib3dvARB = glad__glVertexAttrib3dvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib3dvARB(index, v);
}

/// ```c
/// define glVertexAttrib3fARB GLEW_GET_FUN(__glewVertexAttrib3fARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FARBPROC __glewVertexAttrib3fARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3fARB;
void glVertexAttrib3fARB(int index, double x, double y, double z) {
  final _glVertexAttrib3fARB = glad__glVertexAttrib3fARB!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttrib3fARB(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3fvARB GLEW_GET_FUN(__glewVertexAttrib3fvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVARBPROC __glewVertexAttrib3fvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3fvARB;
void glVertexAttrib3fvARB(int index, Pointer<Float>? v) {
  final _glVertexAttrib3fvARB = glad__glVertexAttrib3fvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib3fvARB(index, v);
}

/// ```c
/// define glVertexAttrib3sARB GLEW_GET_FUN(__glewVertexAttrib3sARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SARBPROC __glewVertexAttrib3sARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3sARB;
void glVertexAttrib3sARB(int index, int x, int y, int z) {
  final _glVertexAttrib3sARB = glad__glVertexAttrib3sARB!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttrib3sARB(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3svARB GLEW_GET_FUN(__glewVertexAttrib3svARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVARBPROC __glewVertexAttrib3svARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3svARB;
void glVertexAttrib3svARB(int index, Pointer<Int16>? v) {
  final _glVertexAttrib3svARB = glad__glVertexAttrib3svARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib3svARB(index, v);
}

/// ```c
/// define glVertexAttrib4NbvARB GLEW_GET_FUN(__glewVertexAttrib4NbvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NBVARBPROC __glewVertexAttrib4NbvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NbvARB;
void glVertexAttrib4NbvARB(int index, String v) {
  final _glVertexAttrib4NbvARB = glad__glVertexAttrib4NbvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8>? v)>>()
      .asFunction<void Function(int index, Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glVertexAttrib4NbvARB(index, _vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glVertexAttrib4NivARB GLEW_GET_FUN(__glewVertexAttrib4NivARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NIVARBPROC __glewVertexAttrib4NivARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NivARB;
void glVertexAttrib4NivARB(int index, Pointer<Int32>? v) {
  final _glVertexAttrib4NivARB = glad__glVertexAttrib4NivARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttrib4NivARB(index, v);
}

/// ```c
/// define glVertexAttrib4NsvARB GLEW_GET_FUN(__glewVertexAttrib4NsvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NSVARBPROC __glewVertexAttrib4NsvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NsvARB;
void glVertexAttrib4NsvARB(int index, Pointer<Int16>? v) {
  final _glVertexAttrib4NsvARB = glad__glVertexAttrib4NsvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib4NsvARB(index, v);
}

/// ```c
/// define glVertexAttrib4NubARB GLEW_GET_FUN(__glewVertexAttrib4NubARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBARBPROC __glewVertexAttrib4NubARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NubARB;
void glVertexAttrib4NubARB(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4NubARB = glad__glVertexAttrib4NubARB!
      .cast<NativeFunction<Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4NubARB(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4NubvARB GLEW_GET_FUN(__glewVertexAttrib4NubvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBVARBPROC __glewVertexAttrib4NubvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NubvARB;
void glVertexAttrib4NubvARB(int index, Pointer<Uint8>? v) {
  final _glVertexAttrib4NubvARB = glad__glVertexAttrib4NubvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v)>();
  return _glVertexAttrib4NubvARB(index, v);
}

/// ```c
/// define glVertexAttrib4NuivARB GLEW_GET_FUN(__glewVertexAttrib4NuivARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUIVARBPROC __glewVertexAttrib4NuivARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NuivARB;
void glVertexAttrib4NuivARB(int index, Pointer<Uint32>? v) {
  final _glVertexAttrib4NuivARB = glad__glVertexAttrib4NuivARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttrib4NuivARB(index, v);
}

/// ```c
/// define glVertexAttrib4NusvARB GLEW_GET_FUN(__glewVertexAttrib4NusvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUSVARBPROC __glewVertexAttrib4NusvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4NusvARB;
void glVertexAttrib4NusvARB(int index, Pointer<Uint16>? v) {
  final _glVertexAttrib4NusvARB = glad__glVertexAttrib4NusvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint16>? v)>();
  return _glVertexAttrib4NusvARB(index, v);
}

/// ```c
/// define glVertexAttrib4bvARB GLEW_GET_FUN(__glewVertexAttrib4bvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4BVARBPROC __glewVertexAttrib4bvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4bvARB;
void glVertexAttrib4bvARB(int index, String v) {
  final _glVertexAttrib4bvARB = glad__glVertexAttrib4bvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8>? v)>>()
      .asFunction<void Function(int index, Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glVertexAttrib4bvARB(index, _vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glVertexAttrib4dARB GLEW_GET_FUN(__glewVertexAttrib4dARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DARBPROC __glewVertexAttrib4dARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4dARB;
void glVertexAttrib4dARB(int index, double x, double y, double z, double w) {
  final _glVertexAttrib4dARB = glad__glVertexAttrib4dARB!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttrib4dARB(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4dvARB GLEW_GET_FUN(__glewVertexAttrib4dvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVARBPROC __glewVertexAttrib4dvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4dvARB;
void glVertexAttrib4dvARB(int index, Pointer<Double>? v) {
  final _glVertexAttrib4dvARB = glad__glVertexAttrib4dvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib4dvARB(index, v);
}

/// ```c
/// define glVertexAttrib4fARB GLEW_GET_FUN(__glewVertexAttrib4fARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FARBPROC __glewVertexAttrib4fARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4fARB;
void glVertexAttrib4fARB(int index, double x, double y, double z, double w) {
  final _glVertexAttrib4fARB = glad__glVertexAttrib4fARB!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttrib4fARB(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4fvARB GLEW_GET_FUN(__glewVertexAttrib4fvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVARBPROC __glewVertexAttrib4fvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4fvARB;
void glVertexAttrib4fvARB(int index, Pointer<Float>? v) {
  final _glVertexAttrib4fvARB = glad__glVertexAttrib4fvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib4fvARB(index, v);
}

/// ```c
/// define glVertexAttrib4ivARB GLEW_GET_FUN(__glewVertexAttrib4ivARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4IVARBPROC __glewVertexAttrib4ivARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4ivARB;
void glVertexAttrib4ivARB(int index, Pointer<Int32>? v) {
  final _glVertexAttrib4ivARB = glad__glVertexAttrib4ivARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttrib4ivARB(index, v);
}

/// ```c
/// define glVertexAttrib4sARB GLEW_GET_FUN(__glewVertexAttrib4sARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SARBPROC __glewVertexAttrib4sARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4sARB;
void glVertexAttrib4sARB(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4sARB = glad__glVertexAttrib4sARB!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4sARB(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4svARB GLEW_GET_FUN(__glewVertexAttrib4svARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVARBPROC __glewVertexAttrib4svARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4svARB;
void glVertexAttrib4svARB(int index, Pointer<Int16>? v) {
  final _glVertexAttrib4svARB = glad__glVertexAttrib4svARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib4svARB(index, v);
}

/// ```c
/// define glVertexAttrib4ubvARB GLEW_GET_FUN(__glewVertexAttrib4ubvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVARBPROC __glewVertexAttrib4ubvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4ubvARB;
void glVertexAttrib4ubvARB(int index, Pointer<Uint8>? v) {
  final _glVertexAttrib4ubvARB = glad__glVertexAttrib4ubvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v)>();
  return _glVertexAttrib4ubvARB(index, v);
}

/// ```c
/// define glVertexAttrib4uivARB GLEW_GET_FUN(__glewVertexAttrib4uivARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UIVARBPROC __glewVertexAttrib4uivARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4uivARB;
void glVertexAttrib4uivARB(int index, Pointer<Uint32>? v) {
  final _glVertexAttrib4uivARB = glad__glVertexAttrib4uivARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttrib4uivARB(index, v);
}

/// ```c
/// define glVertexAttrib4usvARB GLEW_GET_FUN(__glewVertexAttrib4usvARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4USVARBPROC __glewVertexAttrib4usvARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4usvARB;
void glVertexAttrib4usvARB(int index, Pointer<Uint16>? v) {
  final _glVertexAttrib4usvARB = glad__glVertexAttrib4usvARB!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint16>? v)>();
  return _glVertexAttrib4usvARB(index, v);
}

/// ```c
/// define glVertexAttribPointerARB GLEW_GET_FUN(__glewVertexAttribPointerARB)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERARBPROC __glewVertexAttribPointerARB
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribPointerARB;
void glVertexAttribPointerARB(int index, int size, int type, int normalized, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribPointerARB = glad__glVertexAttribPointerARB!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint8 normalized, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int normalized, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
}

/// -------------------------- GL_ARB_vertex_shader -------------------------
/// ```c
/// define glBindAttribLocationARB GLEW_GET_FUN(__glewBindAttribLocationARB)
/// GLEW_FUN_EXPORT PFNGLBINDATTRIBLOCATIONARBPROC __glewBindAttribLocationARB
/// typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindAttribLocationARB;
void glBindAttribLocationARB(int programObj, int index, String name) {
  final _glBindAttribLocationARB = glad__glBindAttribLocationARB!
      .cast<NativeFunction<Void Function(Uint32 programObj, Uint32 index, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int programObj, int index, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glBindAttribLocationARB(programObj, index, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetActiveAttribARB GLEW_GET_FUN(__glewGetActiveAttribARB)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEATTRIBARBPROC __glewGetActiveAttribARB
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveAttribARB;
void glGetActiveAttribARB(int programObj, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetActiveAttribARB = glad__glGetActiveAttribARB!
      .cast<NativeFunction<Void Function(Uint32 programObj, Uint32 index, Uint32 maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int programObj, int index, int maxLength, Pointer<Uint32>? length, Pointer<Int32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
}

/// ```c
/// define glGetAttribLocationARB GLEW_GET_FUN(__glewGetAttribLocationARB)
/// GLEW_FUN_EXPORT PFNGLGETATTRIBLOCATIONARBPROC __glewGetAttribLocationARB
/// typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetAttribLocationARB;
int glGetAttribLocationARB(int programObj, String name) {
  final _glGetAttribLocationARB = glad__glGetAttribLocationARB!
      .cast<NativeFunction<Int32 Function(Uint32 programObj, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int programObj, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetAttribLocationARB(programObj, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ------------------- GL_ARB_vertex_type_2_10_10_10_rev -------------------
/// ```c
/// define glColorP3ui GLEW_GET_FUN(__glewColorP3ui)
/// GLEW_FUN_EXPORT PFNGLCOLORP3UIPROC __glewColorP3ui
/// typedef void (GLAPIENTRY * PFNGLCOLORP3UIPROC) (GLenum type, GLuint color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorP3ui;
void glColorP3ui(int type, int color) {
  final _glColorP3ui = glad__glColorP3ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 color)>>()
      .asFunction<void Function(int type, int color)>();
  return _glColorP3ui(type, color);
}

/// ```c
/// define glColorP3uiv GLEW_GET_FUN(__glewColorP3uiv)
/// GLEW_FUN_EXPORT PFNGLCOLORP3UIVPROC __glewColorP3uiv
/// typedef void (GLAPIENTRY * PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint* color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorP3uiv;
void glColorP3uiv(int type, Pointer<Uint32>? color) {
  final _glColorP3uiv = glad__glColorP3uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? color)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? color)>();
  return _glColorP3uiv(type, color);
}

/// ```c
/// define glColorP4ui GLEW_GET_FUN(__glewColorP4ui)
/// GLEW_FUN_EXPORT PFNGLCOLORP4UIPROC __glewColorP4ui
/// typedef void (GLAPIENTRY * PFNGLCOLORP4UIPROC) (GLenum type, GLuint color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorP4ui;
void glColorP4ui(int type, int color) {
  final _glColorP4ui = glad__glColorP4ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 color)>>()
      .asFunction<void Function(int type, int color)>();
  return _glColorP4ui(type, color);
}

/// ```c
/// define glColorP4uiv GLEW_GET_FUN(__glewColorP4uiv)
/// GLEW_FUN_EXPORT PFNGLCOLORP4UIVPROC __glewColorP4uiv
/// typedef void (GLAPIENTRY * PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint* color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorP4uiv;
void glColorP4uiv(int type, Pointer<Uint32>? color) {
  final _glColorP4uiv = glad__glColorP4uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? color)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? color)>();
  return _glColorP4uiv(type, color);
}

/// ```c
/// define glMultiTexCoordP1ui GLEW_GET_FUN(__glewMultiTexCoordP1ui)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP1UIPROC __glewMultiTexCoordP1ui
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP1ui;
void glMultiTexCoordP1ui(int texture, int type, int coords) {
  final _glMultiTexCoordP1ui = glad__glMultiTexCoordP1ui!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int texture, int type, int coords)>();
  return _glMultiTexCoordP1ui(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP1uiv GLEW_GET_FUN(__glewMultiTexCoordP1uiv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP1UIVPROC __glewMultiTexCoordP1uiv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP1uiv;
void glMultiTexCoordP1uiv(int texture, int type, Pointer<Uint32>? coords) {
  final _glMultiTexCoordP1uiv = glad__glMultiTexCoordP1uiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int texture, int type, Pointer<Uint32>? coords)>();
  return _glMultiTexCoordP1uiv(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP2ui GLEW_GET_FUN(__glewMultiTexCoordP2ui)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP2UIPROC __glewMultiTexCoordP2ui
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP2ui;
void glMultiTexCoordP2ui(int texture, int type, int coords) {
  final _glMultiTexCoordP2ui = glad__glMultiTexCoordP2ui!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int texture, int type, int coords)>();
  return _glMultiTexCoordP2ui(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP2uiv GLEW_GET_FUN(__glewMultiTexCoordP2uiv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP2UIVPROC __glewMultiTexCoordP2uiv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP2uiv;
void glMultiTexCoordP2uiv(int texture, int type, Pointer<Uint32>? coords) {
  final _glMultiTexCoordP2uiv = glad__glMultiTexCoordP2uiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int texture, int type, Pointer<Uint32>? coords)>();
  return _glMultiTexCoordP2uiv(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP3ui GLEW_GET_FUN(__glewMultiTexCoordP3ui)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP3UIPROC __glewMultiTexCoordP3ui
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP3ui;
void glMultiTexCoordP3ui(int texture, int type, int coords) {
  final _glMultiTexCoordP3ui = glad__glMultiTexCoordP3ui!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int texture, int type, int coords)>();
  return _glMultiTexCoordP3ui(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP3uiv GLEW_GET_FUN(__glewMultiTexCoordP3uiv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP3UIVPROC __glewMultiTexCoordP3uiv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP3uiv;
void glMultiTexCoordP3uiv(int texture, int type, Pointer<Uint32>? coords) {
  final _glMultiTexCoordP3uiv = glad__glMultiTexCoordP3uiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int texture, int type, Pointer<Uint32>? coords)>();
  return _glMultiTexCoordP3uiv(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP4ui GLEW_GET_FUN(__glewMultiTexCoordP4ui)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP4UIPROC __glewMultiTexCoordP4ui
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP4ui;
void glMultiTexCoordP4ui(int texture, int type, int coords) {
  final _glMultiTexCoordP4ui = glad__glMultiTexCoordP4ui!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int texture, int type, int coords)>();
  return _glMultiTexCoordP4ui(texture, type, coords);
}

/// ```c
/// define glMultiTexCoordP4uiv GLEW_GET_FUN(__glewMultiTexCoordP4uiv)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDP4UIVPROC __glewMultiTexCoordP4uiv
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordP4uiv;
void glMultiTexCoordP4uiv(int texture, int type, Pointer<Uint32>? coords) {
  final _glMultiTexCoordP4uiv = glad__glMultiTexCoordP4uiv!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int texture, int type, Pointer<Uint32>? coords)>();
  return _glMultiTexCoordP4uiv(texture, type, coords);
}

/// ```c
/// define glNormalP3ui GLEW_GET_FUN(__glewNormalP3ui)
/// GLEW_FUN_EXPORT PFNGLNORMALP3UIPROC __glewNormalP3ui
/// typedef void (GLAPIENTRY * PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalP3ui;
void glNormalP3ui(int type, int coords) {
  final _glNormalP3ui = glad__glNormalP3ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return _glNormalP3ui(type, coords);
}

/// ```c
/// define glNormalP3uiv GLEW_GET_FUN(__glewNormalP3uiv)
/// GLEW_FUN_EXPORT PFNGLNORMALP3UIVPROC __glewNormalP3uiv
/// typedef void (GLAPIENTRY * PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalP3uiv;
void glNormalP3uiv(int type, Pointer<Uint32>? coords) {
  final _glNormalP3uiv = glad__glNormalP3uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? coords)>();
  return _glNormalP3uiv(type, coords);
}

/// ```c
/// define glSecondaryColorP3ui GLEW_GET_FUN(__glewSecondaryColorP3ui)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLORP3UIPROC __glewSecondaryColorP3ui
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColorP3ui;
void glSecondaryColorP3ui(int type, int color) {
  final _glSecondaryColorP3ui = glad__glSecondaryColorP3ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 color)>>()
      .asFunction<void Function(int type, int color)>();
  return _glSecondaryColorP3ui(type, color);
}

/// ```c
/// define glSecondaryColorP3uiv GLEW_GET_FUN(__glewSecondaryColorP3uiv)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLORP3UIVPROC __glewSecondaryColorP3uiv
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint* color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColorP3uiv;
void glSecondaryColorP3uiv(int type, Pointer<Uint32>? color) {
  final _glSecondaryColorP3uiv = glad__glSecondaryColorP3uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? color)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? color)>();
  return _glSecondaryColorP3uiv(type, color);
}

/// ```c
/// define glTexCoordP1ui GLEW_GET_FUN(__glewTexCoordP1ui)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP1UIPROC __glewTexCoordP1ui
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP1ui;
void glTexCoordP1ui(int type, int coords) {
  final _glTexCoordP1ui = glad__glTexCoordP1ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return _glTexCoordP1ui(type, coords);
}

/// ```c
/// define glTexCoordP1uiv GLEW_GET_FUN(__glewTexCoordP1uiv)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP1UIVPROC __glewTexCoordP1uiv
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP1uiv;
void glTexCoordP1uiv(int type, Pointer<Uint32>? coords) {
  final _glTexCoordP1uiv = glad__glTexCoordP1uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? coords)>();
  return _glTexCoordP1uiv(type, coords);
}

/// ```c
/// define glTexCoordP2ui GLEW_GET_FUN(__glewTexCoordP2ui)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP2UIPROC __glewTexCoordP2ui
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP2ui;
void glTexCoordP2ui(int type, int coords) {
  final _glTexCoordP2ui = glad__glTexCoordP2ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return _glTexCoordP2ui(type, coords);
}

/// ```c
/// define glTexCoordP2uiv GLEW_GET_FUN(__glewTexCoordP2uiv)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP2UIVPROC __glewTexCoordP2uiv
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP2uiv;
void glTexCoordP2uiv(int type, Pointer<Uint32>? coords) {
  final _glTexCoordP2uiv = glad__glTexCoordP2uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? coords)>();
  return _glTexCoordP2uiv(type, coords);
}

/// ```c
/// define glTexCoordP3ui GLEW_GET_FUN(__glewTexCoordP3ui)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP3UIPROC __glewTexCoordP3ui
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP3ui;
void glTexCoordP3ui(int type, int coords) {
  final _glTexCoordP3ui = glad__glTexCoordP3ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return _glTexCoordP3ui(type, coords);
}

/// ```c
/// define glTexCoordP3uiv GLEW_GET_FUN(__glewTexCoordP3uiv)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP3UIVPROC __glewTexCoordP3uiv
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP3uiv;
void glTexCoordP3uiv(int type, Pointer<Uint32>? coords) {
  final _glTexCoordP3uiv = glad__glTexCoordP3uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? coords)>();
  return _glTexCoordP3uiv(type, coords);
}

/// ```c
/// define glTexCoordP4ui GLEW_GET_FUN(__glewTexCoordP4ui)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP4UIPROC __glewTexCoordP4ui
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP4ui;
void glTexCoordP4ui(int type, int coords) {
  final _glTexCoordP4ui = glad__glTexCoordP4ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 coords)>>()
      .asFunction<void Function(int type, int coords)>();
  return _glTexCoordP4ui(type, coords);
}

/// ```c
/// define glTexCoordP4uiv GLEW_GET_FUN(__glewTexCoordP4uiv)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDP4UIVPROC __glewTexCoordP4uiv
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordP4uiv;
void glTexCoordP4uiv(int type, Pointer<Uint32>? coords) {
  final _glTexCoordP4uiv = glad__glTexCoordP4uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? coords)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? coords)>();
  return _glTexCoordP4uiv(type, coords);
}

/// ```c
/// define glVertexAttribP1ui GLEW_GET_FUN(__glewVertexAttribP1ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP1UIPROC __glewVertexAttribP1ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP1ui;
void glVertexAttribP1ui(int index, int type, int normalized, int value) {
  final _glVertexAttribP1ui = glad__glVertexAttribP1ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Uint32 value)>>()
      .asFunction<void Function(int index, int type, int normalized, int value)>();
  return _glVertexAttribP1ui(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP1uiv GLEW_GET_FUN(__glewVertexAttribP1uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP1UIVPROC __glewVertexAttribP1uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP1uiv;
void glVertexAttribP1uiv(int index, int type, int normalized, Pointer<Uint32>? value) {
  final _glVertexAttribP1uiv = glad__glVertexAttribP1uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int index, int type, int normalized, Pointer<Uint32>? value)>();
  return _glVertexAttribP1uiv(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP2ui GLEW_GET_FUN(__glewVertexAttribP2ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP2UIPROC __glewVertexAttribP2ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP2ui;
void glVertexAttribP2ui(int index, int type, int normalized, int value) {
  final _glVertexAttribP2ui = glad__glVertexAttribP2ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Uint32 value)>>()
      .asFunction<void Function(int index, int type, int normalized, int value)>();
  return _glVertexAttribP2ui(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP2uiv GLEW_GET_FUN(__glewVertexAttribP2uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP2UIVPROC __glewVertexAttribP2uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP2uiv;
void glVertexAttribP2uiv(int index, int type, int normalized, Pointer<Uint32>? value) {
  final _glVertexAttribP2uiv = glad__glVertexAttribP2uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int index, int type, int normalized, Pointer<Uint32>? value)>();
  return _glVertexAttribP2uiv(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP3ui GLEW_GET_FUN(__glewVertexAttribP3ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP3UIPROC __glewVertexAttribP3ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP3ui;
void glVertexAttribP3ui(int index, int type, int normalized, int value) {
  final _glVertexAttribP3ui = glad__glVertexAttribP3ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Uint32 value)>>()
      .asFunction<void Function(int index, int type, int normalized, int value)>();
  return _glVertexAttribP3ui(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP3uiv GLEW_GET_FUN(__glewVertexAttribP3uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP3UIVPROC __glewVertexAttribP3uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP3uiv;
void glVertexAttribP3uiv(int index, int type, int normalized, Pointer<Uint32>? value) {
  final _glVertexAttribP3uiv = glad__glVertexAttribP3uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int index, int type, int normalized, Pointer<Uint32>? value)>();
  return _glVertexAttribP3uiv(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP4ui GLEW_GET_FUN(__glewVertexAttribP4ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP4UIPROC __glewVertexAttribP4ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP4ui;
void glVertexAttribP4ui(int index, int type, int normalized, int value) {
  final _glVertexAttribP4ui = glad__glVertexAttribP4ui!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Uint32 value)>>()
      .asFunction<void Function(int index, int type, int normalized, int value)>();
  return _glVertexAttribP4ui(index, type, normalized, value);
}

/// ```c
/// define glVertexAttribP4uiv GLEW_GET_FUN(__glewVertexAttribP4uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBP4UIVPROC __glewVertexAttribP4uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribP4uiv;
void glVertexAttribP4uiv(int index, int type, int normalized, Pointer<Uint32>? value) {
  final _glVertexAttribP4uiv = glad__glVertexAttribP4uiv!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 type, Uint8 normalized, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int index, int type, int normalized, Pointer<Uint32>? value)>();
  return _glVertexAttribP4uiv(index, type, normalized, value);
}

/// ```c
/// define glVertexP2ui GLEW_GET_FUN(__glewVertexP2ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXP2UIPROC __glewVertexP2ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexP2ui;
void glVertexP2ui(int type, int value) {
  final _glVertexP2ui = glad__glVertexP2ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 value)>>()
      .asFunction<void Function(int type, int value)>();
  return _glVertexP2ui(type, value);
}

/// ```c
/// define glVertexP2uiv GLEW_GET_FUN(__glewVertexP2uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXP2UIVPROC __glewVertexP2uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexP2uiv;
void glVertexP2uiv(int type, Pointer<Uint32>? value) {
  final _glVertexP2uiv = glad__glVertexP2uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? value)>();
  return _glVertexP2uiv(type, value);
}

/// ```c
/// define glVertexP3ui GLEW_GET_FUN(__glewVertexP3ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXP3UIPROC __glewVertexP3ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexP3ui;
void glVertexP3ui(int type, int value) {
  final _glVertexP3ui = glad__glVertexP3ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 value)>>()
      .asFunction<void Function(int type, int value)>();
  return _glVertexP3ui(type, value);
}

/// ```c
/// define glVertexP3uiv GLEW_GET_FUN(__glewVertexP3uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXP3UIVPROC __glewVertexP3uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexP3uiv;
void glVertexP3uiv(int type, Pointer<Uint32>? value) {
  final _glVertexP3uiv = glad__glVertexP3uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? value)>();
  return _glVertexP3uiv(type, value);
}

/// ```c
/// define glVertexP4ui GLEW_GET_FUN(__glewVertexP4ui)
/// GLEW_FUN_EXPORT PFNGLVERTEXP4UIPROC __glewVertexP4ui
/// typedef void (GLAPIENTRY * PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexP4ui;
void glVertexP4ui(int type, int value) {
  final _glVertexP4ui = glad__glVertexP4ui!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 value)>>()
      .asFunction<void Function(int type, int value)>();
  return _glVertexP4ui(type, value);
}

/// ```c
/// define glVertexP4uiv GLEW_GET_FUN(__glewVertexP4uiv)
/// GLEW_FUN_EXPORT PFNGLVERTEXP4UIVPROC __glewVertexP4uiv
/// typedef void (GLAPIENTRY * PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexP4uiv;
void glVertexP4uiv(int type, Pointer<Uint32>? value) {
  final _glVertexP4uiv = glad__glVertexP4uiv!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int type, Pointer<Uint32>? value)>();
  return _glVertexP4uiv(type, value);
}

/// ------------------------- GL_ARB_viewport_array -------------------------
/// ```c
/// define glDepthRangeArrayv GLEW_GET_FUN(__glewDepthRangeArrayv)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEARRAYVPROC __glewDepthRangeArrayv
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLclampd * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangeArrayv;
void glDepthRangeArrayv(int first, int count, Pointer<Double>? v) {
  final _glDepthRangeArrayv = glad__glDepthRangeArrayv!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Double>? v)>>()
      .asFunction<void Function(int first, int count, Pointer<Double>? v)>();
  return _glDepthRangeArrayv(first, count, v);
}

/// ```c
/// define glDepthRangeIndexed GLEW_GET_FUN(__glewDepthRangeIndexed)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEINDEXEDPROC __glewDepthRangeIndexed
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLclampd n, GLclampd f)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangeIndexed;
void glDepthRangeIndexed(int index, double n, double f) {
  final _glDepthRangeIndexed = glad__glDepthRangeIndexed!
      .cast<NativeFunction<Void Function(Uint32 index, Double n, Double f)>>()
      .asFunction<void Function(int index, double n, double f)>();
  return _glDepthRangeIndexed(index, n, f);
}

/// ```c
/// define glGetDoublei_v GLEW_GET_FUN(__glewGetDoublei_v)
/// GLEW_FUN_EXPORT PFNGLGETDOUBLEI_VPROC __glewGetDoublei_v
/// typedef void (GLAPIENTRY * PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDoublei_v;
void glGetDoublei_v(int target, int index, Pointer<Double>? data) {
  final _glGetDoublei_v = glad__glGetDoublei_v!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? data)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? data)>();
  return _glGetDoublei_v(target, index, data);
}

/// ```c
/// define glGetFloati_v GLEW_GET_FUN(__glewGetFloati_v)
/// GLEW_FUN_EXPORT PFNGLGETFLOATI_VPROC __glewGetFloati_v
/// typedef void (GLAPIENTRY * PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFloati_v;
void glGetFloati_v(int target, int index, Pointer<Float>? data) {
  final _glGetFloati_v = glad__glGetFloati_v!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? data)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? data)>();
  return _glGetFloati_v(target, index, data);
}

/// ```c
/// define glScissorArrayv GLEW_GET_FUN(__glewScissorArrayv)
/// GLEW_FUN_EXPORT PFNGLSCISSORARRAYVPROC __glewScissorArrayv
/// typedef void (GLAPIENTRY * PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScissorArrayv;
void glScissorArrayv(int first, int count, Pointer<Int32>? v) {
  final _glScissorArrayv = glad__glScissorArrayv!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Int32>? v)>>()
      .asFunction<void Function(int first, int count, Pointer<Int32>? v)>();
  return _glScissorArrayv(first, count, v);
}

/// ```c
/// define glScissorIndexed GLEW_GET_FUN(__glewScissorIndexed)
/// GLEW_FUN_EXPORT PFNGLSCISSORINDEXEDPROC __glewScissorIndexed
/// typedef void (GLAPIENTRY * PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScissorIndexed;
void glScissorIndexed(int index, int left, int bottom, int width, int height) {
  final _glScissorIndexed = glad__glScissorIndexed!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 left, Int32 bottom, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int index, int left, int bottom, int width, int height)>();
  return _glScissorIndexed(index, left, bottom, width, height);
}

/// ```c
/// define glScissorIndexedv GLEW_GET_FUN(__glewScissorIndexedv)
/// GLEW_FUN_EXPORT PFNGLSCISSORINDEXEDVPROC __glewScissorIndexedv
/// typedef void (GLAPIENTRY * PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScissorIndexedv;
void glScissorIndexedv(int index, Pointer<Int32>? v) {
  final _glScissorIndexedv = glad__glScissorIndexedv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glScissorIndexedv(index, v);
}

/// ```c
/// define glViewportArrayv GLEW_GET_FUN(__glewViewportArrayv)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTARRAYVPROC __glewViewportArrayv
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportArrayv;
void glViewportArrayv(int first, int count, Pointer<Float>? v) {
  final _glViewportArrayv = glad__glViewportArrayv!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int first, int count, Pointer<Float>? v)>();
  return _glViewportArrayv(first, count, v);
}

/// ```c
/// define glViewportIndexedf GLEW_GET_FUN(__glewViewportIndexedf)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTINDEXEDFPROC __glewViewportIndexedf
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportIndexedf;
void glViewportIndexedf(int index, double x, double y, double w, double h) {
  final _glViewportIndexedf = glad__glViewportIndexedf!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float w, Float h)>>()
      .asFunction<void Function(int index, double x, double y, double w, double h)>();
  return _glViewportIndexedf(index, x, y, w, h);
}

/// ```c
/// define glViewportIndexedfv GLEW_GET_FUN(__glewViewportIndexedfv)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTINDEXEDFVPROC __glewViewportIndexedfv
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportIndexedfv;
void glViewportIndexedfv(int index, Pointer<Float>? v) {
  final _glViewportIndexedfv = glad__glViewportIndexedfv!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glViewportIndexedfv(index, v);
}

/// --------------------------- GL_ARB_window_pos ---------------------------
/// ```c
/// define glWindowPos2dARB GLEW_GET_FUN(__glewWindowPos2dARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2DARBPROC __glewWindowPos2dARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2dARB;
void glWindowPos2dARB(double x, double y) {
  final _glWindowPos2dARB = glad__glWindowPos2dARB!
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return _glWindowPos2dARB(x, y);
}

/// ```c
/// define glWindowPos2dvARB GLEW_GET_FUN(__glewWindowPos2dvARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVARBPROC __glewWindowPos2dvARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2dvARB;
void glWindowPos2dvARB(Pointer<Double>? p) {
  final _glWindowPos2dvARB = glad__glWindowPos2dvARB!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos2dvARB(p);
}

/// ```c
/// define glWindowPos2fARB GLEW_GET_FUN(__glewWindowPos2fARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2FARBPROC __glewWindowPos2fARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2fARB;
void glWindowPos2fARB(double x, double y) {
  final _glWindowPos2fARB = glad__glWindowPos2fARB!
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return _glWindowPos2fARB(x, y);
}

/// ```c
/// define glWindowPos2fvARB GLEW_GET_FUN(__glewWindowPos2fvARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVARBPROC __glewWindowPos2fvARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2fvARB;
void glWindowPos2fvARB(Pointer<Float>? p) {
  final _glWindowPos2fvARB = glad__glWindowPos2fvARB!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos2fvARB(p);
}

/// ```c
/// define glWindowPos2iARB GLEW_GET_FUN(__glewWindowPos2iARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2IARBPROC __glewWindowPos2iARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2iARB;
void glWindowPos2iARB(int x, int y) {
  final _glWindowPos2iARB = glad__glWindowPos2iARB!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glWindowPos2iARB(x, y);
}

/// ```c
/// define glWindowPos2ivARB GLEW_GET_FUN(__glewWindowPos2ivARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVARBPROC __glewWindowPos2ivARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVARBPROC) (const GLint* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2ivARB;
void glWindowPos2ivARB(Pointer<Int32>? p) {
  final _glWindowPos2ivARB = glad__glWindowPos2ivARB!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos2ivARB(p);
}

/// ```c
/// define glWindowPos2sARB GLEW_GET_FUN(__glewWindowPos2sARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2SARBPROC __glewWindowPos2sARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2sARB;
void glWindowPos2sARB(int x, int y) {
  final _glWindowPos2sARB = glad__glWindowPos2sARB!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glWindowPos2sARB(x, y);
}

/// ```c
/// define glWindowPos2svARB GLEW_GET_FUN(__glewWindowPos2svARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVARBPROC __glewWindowPos2svARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVARBPROC) (const GLshort* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2svARB;
void glWindowPos2svARB(Pointer<Int16>? p) {
  final _glWindowPos2svARB = glad__glWindowPos2svARB!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos2svARB(p);
}

/// ```c
/// define glWindowPos3dARB GLEW_GET_FUN(__glewWindowPos3dARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3DARBPROC __glewWindowPos3dARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3dARB;
void glWindowPos3dARB(double x, double y, double z) {
  final _glWindowPos3dARB = glad__glWindowPos3dARB!
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return _glWindowPos3dARB(x, y, z);
}

/// ```c
/// define glWindowPos3dvARB GLEW_GET_FUN(__glewWindowPos3dvARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVARBPROC __glewWindowPos3dvARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3dvARB;
void glWindowPos3dvARB(Pointer<Double>? p) {
  final _glWindowPos3dvARB = glad__glWindowPos3dvARB!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos3dvARB(p);
}

/// ```c
/// define glWindowPos3fARB GLEW_GET_FUN(__glewWindowPos3fARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3FARBPROC __glewWindowPos3fARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3fARB;
void glWindowPos3fARB(double x, double y, double z) {
  final _glWindowPos3fARB = glad__glWindowPos3fARB!
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return _glWindowPos3fARB(x, y, z);
}

/// ```c
/// define glWindowPos3fvARB GLEW_GET_FUN(__glewWindowPos3fvARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVARBPROC __glewWindowPos3fvARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3fvARB;
void glWindowPos3fvARB(Pointer<Float>? p) {
  final _glWindowPos3fvARB = glad__glWindowPos3fvARB!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos3fvARB(p);
}

/// ```c
/// define glWindowPos3iARB GLEW_GET_FUN(__glewWindowPos3iARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3IARBPROC __glewWindowPos3iARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3iARB;
void glWindowPos3iARB(int x, int y, int z) {
  final _glWindowPos3iARB = glad__glWindowPos3iARB!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glWindowPos3iARB(x, y, z);
}

/// ```c
/// define glWindowPos3ivARB GLEW_GET_FUN(__glewWindowPos3ivARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVARBPROC __glewWindowPos3ivARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVARBPROC) (const GLint* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3ivARB;
void glWindowPos3ivARB(Pointer<Int32>? p) {
  final _glWindowPos3ivARB = glad__glWindowPos3ivARB!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos3ivARB(p);
}

/// ```c
/// define glWindowPos3sARB GLEW_GET_FUN(__glewWindowPos3sARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3SARBPROC __glewWindowPos3sARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3sARB;
void glWindowPos3sARB(int x, int y, int z) {
  final _glWindowPos3sARB = glad__glWindowPos3sARB!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glWindowPos3sARB(x, y, z);
}

/// ```c
/// define glWindowPos3svARB GLEW_GET_FUN(__glewWindowPos3svARB)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVARBPROC __glewWindowPos3svARB
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVARBPROC) (const GLshort* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3svARB;
void glWindowPos3svARB(Pointer<Int16>? p) {
  final _glWindowPos3svARB = glad__glWindowPos3svARB!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos3svARB(p);
}

/// -------------------------- GL_ATI_draw_buffers --------------------------
/// ```c
/// define glDrawBuffersATI GLEW_GET_FUN(__glewDrawBuffersATI)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERSATIPROC __glewDrawBuffersATI
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBuffersATI;
void glDrawBuffersATI(int n, Pointer<Uint32>? bufs) {
  final _glDrawBuffersATI = glad__glDrawBuffersATI!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? bufs)>();
  return _glDrawBuffersATI(n, bufs);
}

/// -------------------------- GL_ATI_element_array -------------------------
/// ```c
/// define glDrawElementArrayATI GLEW_GET_FUN(__glewDrawElementArrayATI)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTARRAYATIPROC __glewDrawElementArrayATI
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementArrayATI;
void glDrawElementArrayATI(int mode, int count) {
  final _glDrawElementArrayATI = glad__glDrawElementArrayATI!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count)>>()
      .asFunction<void Function(int mode, int count)>();
  return _glDrawElementArrayATI(mode, count);
}

/// ```c
/// define glDrawRangeElementArrayATI GLEW_GET_FUN(__glewDrawRangeElementArrayATI)
/// GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTARRAYATIPROC __glewDrawRangeElementArrayATI
/// typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawRangeElementArrayATI;
void glDrawRangeElementArrayATI(int mode, int start, int end, int count) {
  final _glDrawRangeElementArrayATI = glad__glDrawRangeElementArrayATI!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count)>>()
      .asFunction<void Function(int mode, int start, int end, int count)>();
  return _glDrawRangeElementArrayATI(mode, start, end, count);
}

/// ```c
/// define glElementPointerATI GLEW_GET_FUN(__glewElementPointerATI)
/// GLEW_FUN_EXPORT PFNGLELEMENTPOINTERATIPROC __glewElementPointerATI
/// typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glElementPointerATI;
void glElementPointerATI(int type, Pointer<Void>? pointer) {
  final _glElementPointerATI = glad__glElementPointerATI!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, Pointer<Void>? pointer)>();
  return _glElementPointerATI(type, pointer);
}

/// ------------------------- GL_ATI_envmap_bumpmap -------------------------
/// ```c
/// define glGetTexBumpParameterfvATI GLEW_GET_FUN(__glewGetTexBumpParameterfvATI)
/// GLEW_FUN_EXPORT PFNGLGETTEXBUMPPARAMETERFVATIPROC __glewGetTexBumpParameterfvATI
/// typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexBumpParameterfvATI;
void glGetTexBumpParameterfvATI(int pname, Pointer<Float>? param) {
  final _glGetTexBumpParameterfvATI = glad__glGetTexBumpParameterfvATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? param)>>()
      .asFunction<void Function(int pname, Pointer<Float>? param)>();
  return _glGetTexBumpParameterfvATI(pname, param);
}

/// ```c
/// define glGetTexBumpParameterivATI GLEW_GET_FUN(__glewGetTexBumpParameterivATI)
/// GLEW_FUN_EXPORT PFNGLGETTEXBUMPPARAMETERIVATIPROC __glewGetTexBumpParameterivATI
/// typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexBumpParameterivATI;
void glGetTexBumpParameterivATI(int pname, Pointer<Int32>? param) {
  final _glGetTexBumpParameterivATI = glad__glGetTexBumpParameterivATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? param)>();
  return _glGetTexBumpParameterivATI(pname, param);
}

/// ```c
/// define glTexBumpParameterfvATI GLEW_GET_FUN(__glewTexBumpParameterfvATI)
/// GLEW_FUN_EXPORT PFNGLTEXBUMPPARAMETERFVATIPROC __glewTexBumpParameterfvATI
/// typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexBumpParameterfvATI;
void glTexBumpParameterfvATI(int pname, Pointer<Float>? param) {
  final _glTexBumpParameterfvATI = glad__glTexBumpParameterfvATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? param)>>()
      .asFunction<void Function(int pname, Pointer<Float>? param)>();
  return _glTexBumpParameterfvATI(pname, param);
}

/// ```c
/// define glTexBumpParameterivATI GLEW_GET_FUN(__glewTexBumpParameterivATI)
/// GLEW_FUN_EXPORT PFNGLTEXBUMPPARAMETERIVATIPROC __glewTexBumpParameterivATI
/// typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexBumpParameterivATI;
void glTexBumpParameterivATI(int pname, Pointer<Int32>? param) {
  final _glTexBumpParameterivATI = glad__glTexBumpParameterivATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? param)>();
  return _glTexBumpParameterivATI(pname, param);
}

/// ------------------------- GL_ATI_fragment_shader ------------------------
/// ```c
/// define glAlphaFragmentOp1ATI GLEW_GET_FUN(__glewAlphaFragmentOp1ATI)
/// GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP1ATIPROC __glewAlphaFragmentOp1ATI
/// typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAlphaFragmentOp1ATI;
void glAlphaFragmentOp1ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod) {
  final _glAlphaFragmentOp1ATI = glad__glAlphaFragmentOp1ATI!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 dst, Uint32 dstMod, Uint32 arg1, Uint32 arg1Rep, Uint32 arg1Mod)>>()
      .asFunction<void Function(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod)>();
  return _glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

/// ```c
/// define glAlphaFragmentOp2ATI GLEW_GET_FUN(__glewAlphaFragmentOp2ATI)
/// GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP2ATIPROC __glewAlphaFragmentOp2ATI
/// typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAlphaFragmentOp2ATI;
void glAlphaFragmentOp2ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) {
  final _glAlphaFragmentOp2ATI = glad__glAlphaFragmentOp2ATI!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 dst, Uint32 dstMod, Uint32 arg1, Uint32 arg1Rep, Uint32 arg1Mod, Uint32 arg2, Uint32 arg2Rep, Uint32 arg2Mod)>>()
      .asFunction<void Function(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)>();
  return _glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

/// ```c
/// define glAlphaFragmentOp3ATI GLEW_GET_FUN(__glewAlphaFragmentOp3ATI)
/// GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP3ATIPROC __glewAlphaFragmentOp3ATI
/// typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAlphaFragmentOp3ATI;
void glAlphaFragmentOp3ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) {
  final _glAlphaFragmentOp3ATI = glad__glAlphaFragmentOp3ATI!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 dst, Uint32 dstMod, Uint32 arg1, Uint32 arg1Rep, Uint32 arg1Mod, Uint32 arg2, Uint32 arg2Rep, Uint32 arg2Mod, Uint32 arg3, Uint32 arg3Rep, Uint32 arg3Mod)>>()
      .asFunction<void Function(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)>();
  return _glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

/// ```c
/// define glBeginFragmentShaderATI GLEW_GET_FUN(__glewBeginFragmentShaderATI)
/// GLEW_FUN_EXPORT PFNGLBEGINFRAGMENTSHADERATIPROC __glewBeginFragmentShaderATI
/// typedef void (GLAPIENTRY * PFNGLBEGINFRAGMENTSHADERATIPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginFragmentShaderATI;
void glBeginFragmentShaderATI() {
  final _glBeginFragmentShaderATI = glad__glBeginFragmentShaderATI!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glBeginFragmentShaderATI();
}

/// ```c
/// define glBindFragmentShaderATI GLEW_GET_FUN(__glewBindFragmentShaderATI)
/// GLEW_FUN_EXPORT PFNGLBINDFRAGMENTSHADERATIPROC __glewBindFragmentShaderATI
/// typedef void (GLAPIENTRY * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFragmentShaderATI;
void glBindFragmentShaderATI(int id) {
  final _glBindFragmentShaderATI = glad__glBindFragmentShaderATI!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glBindFragmentShaderATI(id);
}

/// ```c
/// define glColorFragmentOp1ATI GLEW_GET_FUN(__glewColorFragmentOp1ATI)
/// GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP1ATIPROC __glewColorFragmentOp1ATI
/// typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorFragmentOp1ATI;
void glColorFragmentOp1ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod) {
  final _glColorFragmentOp1ATI = glad__glColorFragmentOp1ATI!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 dst, Uint32 dstMask, Uint32 dstMod, Uint32 arg1, Uint32 arg1Rep, Uint32 arg1Mod)>>()
      .asFunction<void Function(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod)>();
  return _glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

/// ```c
/// define glColorFragmentOp2ATI GLEW_GET_FUN(__glewColorFragmentOp2ATI)
/// GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP2ATIPROC __glewColorFragmentOp2ATI
/// typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorFragmentOp2ATI;
void glColorFragmentOp2ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod) {
  final _glColorFragmentOp2ATI = glad__glColorFragmentOp2ATI!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 dst, Uint32 dstMask, Uint32 dstMod, Uint32 arg1, Uint32 arg1Rep, Uint32 arg1Mod, Uint32 arg2, Uint32 arg2Rep, Uint32 arg2Mod)>>()
      .asFunction<void Function(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)>();
  return _glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

/// ```c
/// define glColorFragmentOp3ATI GLEW_GET_FUN(__glewColorFragmentOp3ATI)
/// GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP3ATIPROC __glewColorFragmentOp3ATI
/// typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorFragmentOp3ATI;
void glColorFragmentOp3ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod) {
  final _glColorFragmentOp3ATI = glad__glColorFragmentOp3ATI!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 dst, Uint32 dstMask, Uint32 dstMod, Uint32 arg1, Uint32 arg1Rep, Uint32 arg1Mod, Uint32 arg2, Uint32 arg2Rep, Uint32 arg2Mod, Uint32 arg3, Uint32 arg3Rep, Uint32 arg3Mod)>>()
      .asFunction<void Function(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)>();
  return _glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

/// ```c
/// define glDeleteFragmentShaderATI GLEW_GET_FUN(__glewDeleteFragmentShaderATI)
/// GLEW_FUN_EXPORT PFNGLDELETEFRAGMENTSHADERATIPROC __glewDeleteFragmentShaderATI
/// typedef void (GLAPIENTRY * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteFragmentShaderATI;
void glDeleteFragmentShaderATI(int id) {
  final _glDeleteFragmentShaderATI = glad__glDeleteFragmentShaderATI!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glDeleteFragmentShaderATI(id);
}

/// ```c
/// define glEndFragmentShaderATI GLEW_GET_FUN(__glewEndFragmentShaderATI)
/// GLEW_FUN_EXPORT PFNGLENDFRAGMENTSHADERATIPROC __glewEndFragmentShaderATI
/// typedef void (GLAPIENTRY * PFNGLENDFRAGMENTSHADERATIPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndFragmentShaderATI;
void glEndFragmentShaderATI() {
  final _glEndFragmentShaderATI = glad__glEndFragmentShaderATI!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndFragmentShaderATI();
}

/// ```c
/// define glGenFragmentShadersATI GLEW_GET_FUN(__glewGenFragmentShadersATI)
/// GLEW_FUN_EXPORT PFNGLGENFRAGMENTSHADERSATIPROC __glewGenFragmentShadersATI
/// typedef GLuint (GLAPIENTRY * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenFragmentShadersATI;
int glGenFragmentShadersATI(int range) {
  final _glGenFragmentShadersATI = glad__glGenFragmentShadersATI!
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return _glGenFragmentShadersATI(range);
}

/// ```c
/// define glPassTexCoordATI GLEW_GET_FUN(__glewPassTexCoordATI)
/// GLEW_FUN_EXPORT PFNGLPASSTEXCOORDATIPROC __glewPassTexCoordATI
/// typedef void (GLAPIENTRY * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPassTexCoordATI;
void glPassTexCoordATI(int dst, int coord, int swizzle) {
  final _glPassTexCoordATI = glad__glPassTexCoordATI!
      .cast<NativeFunction<Void Function(Uint32 dst, Uint32 coord, Uint32 swizzle)>>()
      .asFunction<void Function(int dst, int coord, int swizzle)>();
  return _glPassTexCoordATI(dst, coord, swizzle);
}

/// ```c
/// define glSampleMapATI GLEW_GET_FUN(__glewSampleMapATI)
/// GLEW_FUN_EXPORT PFNGLSAMPLEMAPATIPROC __glewSampleMapATI
/// typedef void (GLAPIENTRY * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleMapATI;
void glSampleMapATI(int dst, int interp, int swizzle) {
  final _glSampleMapATI = glad__glSampleMapATI!
      .cast<NativeFunction<Void Function(Uint32 dst, Uint32 interp, Uint32 swizzle)>>()
      .asFunction<void Function(int dst, int interp, int swizzle)>();
  return _glSampleMapATI(dst, interp, swizzle);
}

/// ```c
/// define glSetFragmentShaderConstantATI GLEW_GET_FUN(__glewSetFragmentShaderConstantATI)
/// GLEW_FUN_EXPORT PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glewSetFragmentShaderConstantATI
/// typedef void (GLAPIENTRY * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSetFragmentShaderConstantATI;
void glSetFragmentShaderConstantATI(int dst, Pointer<Float>? value) {
  final _glSetFragmentShaderConstantATI = glad__glSetFragmentShaderConstantATI!
      .cast<NativeFunction<Void Function(Uint32 dst, Pointer<Float>? value)>>()
      .asFunction<void Function(int dst, Pointer<Float>? value)>();
  return _glSetFragmentShaderConstantATI(dst, value);
}

/// ------------------------ GL_ATI_map_object_buffer -----------------------
/// ```c
/// define glMapObjectBufferATI GLEW_GET_FUN(__glewMapObjectBufferATI)
/// GLEW_FUN_EXPORT PFNGLMAPOBJECTBUFFERATIPROC __glewMapObjectBufferATI
/// typedef void * (GLAPIENTRY * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapObjectBufferATI;
Pointer<Void>? glMapObjectBufferATI(int buffer) {
  final _glMapObjectBufferATI = glad__glMapObjectBufferATI!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 buffer)>>()
      .asFunction<Pointer<Void>? Function(int buffer)>();
  return _glMapObjectBufferATI(buffer);
}

/// ```c
/// define glUnmapObjectBufferATI GLEW_GET_FUN(__glewUnmapObjectBufferATI)
/// GLEW_FUN_EXPORT PFNGLUNMAPOBJECTBUFFERATIPROC __glewUnmapObjectBufferATI
/// typedef void (GLAPIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnmapObjectBufferATI;
void glUnmapObjectBufferATI(int buffer) {
  final _glUnmapObjectBufferATI = glad__glUnmapObjectBufferATI!
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return _glUnmapObjectBufferATI(buffer);
}

/// -------------------------- GL_ATI_pn_triangles --------------------------
/// ```c
/// define glPNTrianglesfATI GLEW_GET_FUN(__glewPNTrianglesfATI)
/// GLEW_FUN_EXPORT PFNGLPNTRIANGLESFATIPROC __glewPNTrianglesfATI
/// typedef void (GLAPIENTRY * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPNTrianglesfATI;
void glPNTrianglesfATI(int pname, double param) {
  final _glPNTrianglesfATI = glad__glPNTrianglesfATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glPNTrianglesfATI(pname, param);
}

/// ```c
/// define glPNTrianglesiATI GLEW_GET_FUN(__glewPNTrianglesiATI)
/// GLEW_FUN_EXPORT PFNGLPNTRIANGLESIATIPROC __glewPNTrianglesiATI
/// typedef void (GLAPIENTRY * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPNTrianglesiATI;
void glPNTrianglesiATI(int pname, int param) {
  final _glPNTrianglesiATI = glad__glPNTrianglesiATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glPNTrianglesiATI(pname, param);
}

/// ------------------------ GL_ATI_separate_stencil ------------------------
/// ```c
/// define glStencilFuncSeparateATI GLEW_GET_FUN(__glewStencilFuncSeparateATI)
/// GLEW_FUN_EXPORT PFNGLSTENCILFUNCSEPARATEATIPROC __glewStencilFuncSeparateATI
/// typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilFuncSeparateATI;
void glStencilFuncSeparateATI(int frontfunc, int backfunc, int ref, int mask) {
  final _glStencilFuncSeparateATI = glad__glStencilFuncSeparateATI!
      .cast<NativeFunction<Void Function(Uint32 frontfunc, Uint32 backfunc, Int32 ref, Uint32 mask)>>()
      .asFunction<void Function(int frontfunc, int backfunc, int ref, int mask)>();
  return _glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
}

/// ```c
/// define glStencilOpSeparateATI GLEW_GET_FUN(__glewStencilOpSeparateATI)
/// GLEW_FUN_EXPORT PFNGLSTENCILOPSEPARATEATIPROC __glewStencilOpSeparateATI
/// typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilOpSeparateATI;
void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass) {
  final _glStencilOpSeparateATI = glad__glStencilOpSeparateATI!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 sfail, Uint32 dpfail, Uint32 dppass)>>()
      .asFunction<void Function(int face, int sfail, int dpfail, int dppass)>();
  return _glStencilOpSeparateATI(face, sfail, dpfail, dppass);
}

/// ----------------------- GL_ATI_vertex_array_object ----------------------
/// ```c
/// define glArrayObjectATI GLEW_GET_FUN(__glewArrayObjectATI)
/// GLEW_FUN_EXPORT PFNGLARRAYOBJECTATIPROC __glewArrayObjectATI
/// typedef void (GLAPIENTRY * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glArrayObjectATI;
void glArrayObjectATI(int array, int size, int type, int stride, int buffer, int offset) {
  final _glArrayObjectATI = glad__glArrayObjectATI!
      .cast<NativeFunction<Void Function(Uint32 array, Int32 size, Uint32 type, Uint32 stride, Uint32 buffer, Uint32 offset)>>()
      .asFunction<void Function(int array, int size, int type, int stride, int buffer, int offset)>();
  return _glArrayObjectATI(array, size, type, stride, buffer, offset);
}

/// ```c
/// define glFreeObjectBufferATI GLEW_GET_FUN(__glewFreeObjectBufferATI)
/// GLEW_FUN_EXPORT PFNGLFREEOBJECTBUFFERATIPROC __glewFreeObjectBufferATI
/// typedef void (GLAPIENTRY * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFreeObjectBufferATI;
void glFreeObjectBufferATI(int buffer) {
  final _glFreeObjectBufferATI = glad__glFreeObjectBufferATI!
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return _glFreeObjectBufferATI(buffer);
}

/// ```c
/// define glGetArrayObjectfvATI GLEW_GET_FUN(__glewGetArrayObjectfvATI)
/// GLEW_FUN_EXPORT PFNGLGETARRAYOBJECTFVATIPROC __glewGetArrayObjectfvATI
/// typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetArrayObjectfvATI;
void glGetArrayObjectfvATI(int array, int pname, Pointer<Float>? params) {
  final _glGetArrayObjectfvATI = glad__glGetArrayObjectfvATI!
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int array, int pname, Pointer<Float>? params)>();
  return _glGetArrayObjectfvATI(array, pname, params);
}

/// ```c
/// define glGetArrayObjectivATI GLEW_GET_FUN(__glewGetArrayObjectivATI)
/// GLEW_FUN_EXPORT PFNGLGETARRAYOBJECTIVATIPROC __glewGetArrayObjectivATI
/// typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetArrayObjectivATI;
void glGetArrayObjectivATI(int array, int pname, Pointer<Int32>? params) {
  final _glGetArrayObjectivATI = glad__glGetArrayObjectivATI!
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int array, int pname, Pointer<Int32>? params)>();
  return _glGetArrayObjectivATI(array, pname, params);
}

/// ```c
/// define glGetObjectBufferfvATI GLEW_GET_FUN(__glewGetObjectBufferfvATI)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTBUFFERFVATIPROC __glewGetObjectBufferfvATI
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectBufferfvATI;
void glGetObjectBufferfvATI(int buffer, int pname, Pointer<Float>? params) {
  final _glGetObjectBufferfvATI = glad__glGetObjectBufferfvATI!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Float>? params)>();
  return _glGetObjectBufferfvATI(buffer, pname, params);
}

/// ```c
/// define glGetObjectBufferivATI GLEW_GET_FUN(__glewGetObjectBufferivATI)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTBUFFERIVATIPROC __glewGetObjectBufferivATI
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectBufferivATI;
void glGetObjectBufferivATI(int buffer, int pname, Pointer<Int32>? params) {
  final _glGetObjectBufferivATI = glad__glGetObjectBufferivATI!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Int32>? params)>();
  return _glGetObjectBufferivATI(buffer, pname, params);
}

/// ```c
/// define glGetVariantArrayObjectfvATI GLEW_GET_FUN(__glewGetVariantArrayObjectfvATI)
/// GLEW_FUN_EXPORT PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glewGetVariantArrayObjectfvATI
/// typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVariantArrayObjectfvATI;
void glGetVariantArrayObjectfvATI(int id, int pname, Pointer<Float>? params) {
  final _glGetVariantArrayObjectfvATI = glad__glGetVariantArrayObjectfvATI!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Float>? params)>();
  return _glGetVariantArrayObjectfvATI(id, pname, params);
}

/// ```c
/// define glGetVariantArrayObjectivATI GLEW_GET_FUN(__glewGetVariantArrayObjectivATI)
/// GLEW_FUN_EXPORT PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glewGetVariantArrayObjectivATI
/// typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVariantArrayObjectivATI;
void glGetVariantArrayObjectivATI(int id, int pname, Pointer<Int32>? params) {
  final _glGetVariantArrayObjectivATI = glad__glGetVariantArrayObjectivATI!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int32>? params)>();
  return _glGetVariantArrayObjectivATI(id, pname, params);
}

/// ```c
/// define glIsObjectBufferATI GLEW_GET_FUN(__glewIsObjectBufferATI)
/// GLEW_FUN_EXPORT PFNGLISOBJECTBUFFERATIPROC __glewIsObjectBufferATI
/// typedef GLboolean (GLAPIENTRY * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsObjectBufferATI;
int glIsObjectBufferATI(int buffer) {
  final _glIsObjectBufferATI = glad__glIsObjectBufferATI!
      .cast<NativeFunction<Uint8 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return _glIsObjectBufferATI(buffer);
}

/// ```c
/// define glNewObjectBufferATI GLEW_GET_FUN(__glewNewObjectBufferATI)
/// GLEW_FUN_EXPORT PFNGLNEWOBJECTBUFFERATIPROC __glewNewObjectBufferATI
/// typedef GLuint (GLAPIENTRY * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNewObjectBufferATI;
int glNewObjectBufferATI(int size, Pointer<Void>? pointer, int usage) {
  final _glNewObjectBufferATI = glad__glNewObjectBufferATI!
      .cast<NativeFunction<Uint32 Function(Uint32 size, Pointer<Void>? pointer, Uint32 usage)>>()
      .asFunction<int Function(int size, Pointer<Void>? pointer, int usage)>();
  return _glNewObjectBufferATI(size, pointer, usage);
}

/// ```c
/// define glUpdateObjectBufferATI GLEW_GET_FUN(__glewUpdateObjectBufferATI)
/// GLEW_FUN_EXPORT PFNGLUPDATEOBJECTBUFFERATIPROC __glewUpdateObjectBufferATI
/// typedef void (GLAPIENTRY * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUpdateObjectBufferATI;
void glUpdateObjectBufferATI(int buffer, int offset, int size, Pointer<Void>? pointer, int preserve) {
  final _glUpdateObjectBufferATI = glad__glUpdateObjectBufferATI!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 offset, Uint32 size, Pointer<Void>? pointer, Uint32 preserve)>>()
      .asFunction<void Function(int buffer, int offset, int size, Pointer<Void>? pointer, int preserve)>();
  return _glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
}

/// ```c
/// define glVariantArrayObjectATI GLEW_GET_FUN(__glewVariantArrayObjectATI)
/// GLEW_FUN_EXPORT PFNGLVARIANTARRAYOBJECTATIPROC __glewVariantArrayObjectATI
/// typedef void (GLAPIENTRY * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantArrayObjectATI;
void glVariantArrayObjectATI(int id, int type, int stride, int buffer, int offset) {
  final _glVariantArrayObjectATI = glad__glVariantArrayObjectATI!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 type, Uint32 stride, Uint32 buffer, Uint32 offset)>>()
      .asFunction<void Function(int id, int type, int stride, int buffer, int offset)>();
  return _glVariantArrayObjectATI(id, type, stride, buffer, offset);
}

/// ------------------- GL_ATI_vertex_attrib_array_object -------------------
/// ```c
/// define glGetVertexAttribArrayObjectfvATI GLEW_GET_FUN(__glewGetVertexAttribArrayObjectfvATI)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glewGetVertexAttribArrayObjectfvATI
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribArrayObjectfvATI;
void glGetVertexAttribArrayObjectfvATI(int index, int pname, Pointer<Float>? params) {
  final _glGetVertexAttribArrayObjectfvATI = glad__glGetVertexAttribArrayObjectfvATI!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Float>? params)>();
  return _glGetVertexAttribArrayObjectfvATI(index, pname, params);
}

/// ```c
/// define glGetVertexAttribArrayObjectivATI GLEW_GET_FUN(__glewGetVertexAttribArrayObjectivATI)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glewGetVertexAttribArrayObjectivATI
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribArrayObjectivATI;
void glGetVertexAttribArrayObjectivATI(int index, int pname, Pointer<Int32>? params) {
  final _glGetVertexAttribArrayObjectivATI = glad__glGetVertexAttribArrayObjectivATI!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int32>? params)>();
  return _glGetVertexAttribArrayObjectivATI(index, pname, params);
}

/// ```c
/// define glVertexAttribArrayObjectATI GLEW_GET_FUN(__glewVertexAttribArrayObjectATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glewVertexAttribArrayObjectATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribArrayObjectATI;
void glVertexAttribArrayObjectATI(int index, int size, int type, int normalized, int stride, int buffer, int offset) {
  final _glVertexAttribArrayObjectATI = glad__glVertexAttribArrayObjectATI!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint8 normalized, Uint32 stride, Uint32 buffer, Uint32 offset)>>()
      .asFunction<void Function(int index, int size, int type, int normalized, int stride, int buffer, int offset)>();
  return _glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
}

/// ------------------------- GL_ATI_vertex_streams -------------------------
/// ```c
/// define glClientActiveVertexStreamATI GLEW_GET_FUN(__glewClientActiveVertexStreamATI)
/// GLEW_FUN_EXPORT PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glewClientActiveVertexStreamATI
/// typedef void (GLAPIENTRY * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClientActiveVertexStreamATI;
void glClientActiveVertexStreamATI(int stream) {
  final _glClientActiveVertexStreamATI = glad__glClientActiveVertexStreamATI!
      .cast<NativeFunction<Void Function(Uint32 stream)>>()
      .asFunction<void Function(int stream)>();
  return _glClientActiveVertexStreamATI(stream);
}

/// ```c
/// define glNormalStream3bATI GLEW_GET_FUN(__glewNormalStream3bATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3BATIPROC __glewNormalStream3bATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte x, GLbyte y, GLbyte z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3bATI;
void glNormalStream3bATI(int stream, int x, int y, int z) {
  final _glNormalStream3bATI = glad__glNormalStream3bATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int8 x, Int8 y, Int8 z)>>()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return _glNormalStream3bATI(stream, x, y, z);
}

/// ```c
/// define glNormalStream3bvATI GLEW_GET_FUN(__glewNormalStream3bvATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3BVATIPROC __glewNormalStream3bvATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3bvATI;
void glNormalStream3bvATI(int stream, String coords) {
  final _glNormalStream3bvATI = glad__glNormalStream3bvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Utf8>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Utf8>? coords)>();
  final _coordsPointer = coords.toNativeUtf8();
  final _result = _glNormalStream3bvATI(stream, _coordsPointer);
  calloc.free(_coordsPointer);
  return _result;
}

/// ```c
/// define glNormalStream3dATI GLEW_GET_FUN(__glewNormalStream3dATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3DATIPROC __glewNormalStream3dATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3dATI;
void glNormalStream3dATI(int stream, double x, double y, double z) {
  final _glNormalStream3dATI = glad__glNormalStream3dATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Double x, Double y, Double z)>>()
      .asFunction<void Function(int stream, double x, double y, double z)>();
  return _glNormalStream3dATI(stream, x, y, z);
}

/// ```c
/// define glNormalStream3dvATI GLEW_GET_FUN(__glewNormalStream3dvATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3DVATIPROC __glewNormalStream3dvATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3dvATI;
void glNormalStream3dvATI(int stream, Pointer<Double>? coords) {
  final _glNormalStream3dvATI = glad__glNormalStream3dvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Double>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Double>? coords)>();
  return _glNormalStream3dvATI(stream, coords);
}

/// ```c
/// define glNormalStream3fATI GLEW_GET_FUN(__glewNormalStream3fATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3FATIPROC __glewNormalStream3fATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3fATI;
void glNormalStream3fATI(int stream, double x, double y, double z) {
  final _glNormalStream3fATI = glad__glNormalStream3fATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Float x, Float y, Float z)>>()
      .asFunction<void Function(int stream, double x, double y, double z)>();
  return _glNormalStream3fATI(stream, x, y, z);
}

/// ```c
/// define glNormalStream3fvATI GLEW_GET_FUN(__glewNormalStream3fvATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3FVATIPROC __glewNormalStream3fvATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3fvATI;
void glNormalStream3fvATI(int stream, Pointer<Float>? coords) {
  final _glNormalStream3fvATI = glad__glNormalStream3fvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Float>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Float>? coords)>();
  return _glNormalStream3fvATI(stream, coords);
}

/// ```c
/// define glNormalStream3iATI GLEW_GET_FUN(__glewNormalStream3iATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3IATIPROC __glewNormalStream3iATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3iATI;
void glNormalStream3iATI(int stream, int x, int y, int z) {
  final _glNormalStream3iATI = glad__glNormalStream3iATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return _glNormalStream3iATI(stream, x, y, z);
}

/// ```c
/// define glNormalStream3ivATI GLEW_GET_FUN(__glewNormalStream3ivATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3IVATIPROC __glewNormalStream3ivATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3ivATI;
void glNormalStream3ivATI(int stream, Pointer<Int32>? coords) {
  final _glNormalStream3ivATI = glad__glNormalStream3ivATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int32>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int32>? coords)>();
  return _glNormalStream3ivATI(stream, coords);
}

/// ```c
/// define glNormalStream3sATI GLEW_GET_FUN(__glewNormalStream3sATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3SATIPROC __glewNormalStream3sATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3sATI;
void glNormalStream3sATI(int stream, int x, int y, int z) {
  final _glNormalStream3sATI = glad__glNormalStream3sATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return _glNormalStream3sATI(stream, x, y, z);
}

/// ```c
/// define glNormalStream3svATI GLEW_GET_FUN(__glewNormalStream3svATI)
/// GLEW_FUN_EXPORT PFNGLNORMALSTREAM3SVATIPROC __glewNormalStream3svATI
/// typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalStream3svATI;
void glNormalStream3svATI(int stream, Pointer<Int16>? coords) {
  final _glNormalStream3svATI = glad__glNormalStream3svATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int16>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int16>? coords)>();
  return _glNormalStream3svATI(stream, coords);
}

/// ```c
/// define glVertexBlendEnvfATI GLEW_GET_FUN(__glewVertexBlendEnvfATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXBLENDENVFATIPROC __glewVertexBlendEnvfATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexBlendEnvfATI;
void glVertexBlendEnvfATI(int pname, double param) {
  final _glVertexBlendEnvfATI = glad__glVertexBlendEnvfATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glVertexBlendEnvfATI(pname, param);
}

/// ```c
/// define glVertexBlendEnviATI GLEW_GET_FUN(__glewVertexBlendEnviATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXBLENDENVIATIPROC __glewVertexBlendEnviATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexBlendEnviATI;
void glVertexBlendEnviATI(int pname, int param) {
  final _glVertexBlendEnviATI = glad__glVertexBlendEnviATI!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glVertexBlendEnviATI(pname, param);
}

/// ```c
/// define glVertexStream1dATI GLEW_GET_FUN(__glewVertexStream1dATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1DATIPROC __glewVertexStream1dATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1dATI;
void glVertexStream1dATI(int stream, double x) {
  final _glVertexStream1dATI = glad__glVertexStream1dATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Double x)>>()
      .asFunction<void Function(int stream, double x)>();
  return _glVertexStream1dATI(stream, x);
}

/// ```c
/// define glVertexStream1dvATI GLEW_GET_FUN(__glewVertexStream1dvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1DVATIPROC __glewVertexStream1dvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1dvATI;
void glVertexStream1dvATI(int stream, Pointer<Double>? coords) {
  final _glVertexStream1dvATI = glad__glVertexStream1dvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Double>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Double>? coords)>();
  return _glVertexStream1dvATI(stream, coords);
}

/// ```c
/// define glVertexStream1fATI GLEW_GET_FUN(__glewVertexStream1fATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1FATIPROC __glewVertexStream1fATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1fATI;
void glVertexStream1fATI(int stream, double x) {
  final _glVertexStream1fATI = glad__glVertexStream1fATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Float x)>>()
      .asFunction<void Function(int stream, double x)>();
  return _glVertexStream1fATI(stream, x);
}

/// ```c
/// define glVertexStream1fvATI GLEW_GET_FUN(__glewVertexStream1fvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1FVATIPROC __glewVertexStream1fvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1fvATI;
void glVertexStream1fvATI(int stream, Pointer<Float>? coords) {
  final _glVertexStream1fvATI = glad__glVertexStream1fvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Float>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Float>? coords)>();
  return _glVertexStream1fvATI(stream, coords);
}

/// ```c
/// define glVertexStream1iATI GLEW_GET_FUN(__glewVertexStream1iATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1IATIPROC __glewVertexStream1iATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1iATI;
void glVertexStream1iATI(int stream, int x) {
  final _glVertexStream1iATI = glad__glVertexStream1iATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x)>>()
      .asFunction<void Function(int stream, int x)>();
  return _glVertexStream1iATI(stream, x);
}

/// ```c
/// define glVertexStream1ivATI GLEW_GET_FUN(__glewVertexStream1ivATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1IVATIPROC __glewVertexStream1ivATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1ivATI;
void glVertexStream1ivATI(int stream, Pointer<Int32>? coords) {
  final _glVertexStream1ivATI = glad__glVertexStream1ivATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int32>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int32>? coords)>();
  return _glVertexStream1ivATI(stream, coords);
}

/// ```c
/// define glVertexStream1sATI GLEW_GET_FUN(__glewVertexStream1sATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1SATIPROC __glewVertexStream1sATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1sATI;
void glVertexStream1sATI(int stream, int x) {
  final _glVertexStream1sATI = glad__glVertexStream1sATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x)>>()
      .asFunction<void Function(int stream, int x)>();
  return _glVertexStream1sATI(stream, x);
}

/// ```c
/// define glVertexStream1svATI GLEW_GET_FUN(__glewVertexStream1svATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM1SVATIPROC __glewVertexStream1svATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream1svATI;
void glVertexStream1svATI(int stream, Pointer<Int16>? coords) {
  final _glVertexStream1svATI = glad__glVertexStream1svATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int16>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int16>? coords)>();
  return _glVertexStream1svATI(stream, coords);
}

/// ```c
/// define glVertexStream2dATI GLEW_GET_FUN(__glewVertexStream2dATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2DATIPROC __glewVertexStream2dATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2dATI;
void glVertexStream2dATI(int stream, double x, double y) {
  final _glVertexStream2dATI = glad__glVertexStream2dATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Double x, Double y)>>()
      .asFunction<void Function(int stream, double x, double y)>();
  return _glVertexStream2dATI(stream, x, y);
}

/// ```c
/// define glVertexStream2dvATI GLEW_GET_FUN(__glewVertexStream2dvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2DVATIPROC __glewVertexStream2dvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2dvATI;
void glVertexStream2dvATI(int stream, Pointer<Double>? coords) {
  final _glVertexStream2dvATI = glad__glVertexStream2dvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Double>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Double>? coords)>();
  return _glVertexStream2dvATI(stream, coords);
}

/// ```c
/// define glVertexStream2fATI GLEW_GET_FUN(__glewVertexStream2fATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2FATIPROC __glewVertexStream2fATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2fATI;
void glVertexStream2fATI(int stream, double x, double y) {
  final _glVertexStream2fATI = glad__glVertexStream2fATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Float x, Float y)>>()
      .asFunction<void Function(int stream, double x, double y)>();
  return _glVertexStream2fATI(stream, x, y);
}

/// ```c
/// define glVertexStream2fvATI GLEW_GET_FUN(__glewVertexStream2fvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2FVATIPROC __glewVertexStream2fvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2fvATI;
void glVertexStream2fvATI(int stream, Pointer<Float>? coords) {
  final _glVertexStream2fvATI = glad__glVertexStream2fvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Float>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Float>? coords)>();
  return _glVertexStream2fvATI(stream, coords);
}

/// ```c
/// define glVertexStream2iATI GLEW_GET_FUN(__glewVertexStream2iATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2IATIPROC __glewVertexStream2iATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2iATI;
void glVertexStream2iATI(int stream, int x, int y) {
  final _glVertexStream2iATI = glad__glVertexStream2iATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x, Int32 y)>>()
      .asFunction<void Function(int stream, int x, int y)>();
  return _glVertexStream2iATI(stream, x, y);
}

/// ```c
/// define glVertexStream2ivATI GLEW_GET_FUN(__glewVertexStream2ivATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2IVATIPROC __glewVertexStream2ivATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2ivATI;
void glVertexStream2ivATI(int stream, Pointer<Int32>? coords) {
  final _glVertexStream2ivATI = glad__glVertexStream2ivATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int32>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int32>? coords)>();
  return _glVertexStream2ivATI(stream, coords);
}

/// ```c
/// define glVertexStream2sATI GLEW_GET_FUN(__glewVertexStream2sATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2SATIPROC __glewVertexStream2sATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2sATI;
void glVertexStream2sATI(int stream, int x, int y) {
  final _glVertexStream2sATI = glad__glVertexStream2sATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x, Int16 y)>>()
      .asFunction<void Function(int stream, int x, int y)>();
  return _glVertexStream2sATI(stream, x, y);
}

/// ```c
/// define glVertexStream2svATI GLEW_GET_FUN(__glewVertexStream2svATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2SVATIPROC __glewVertexStream2svATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream2svATI;
void glVertexStream2svATI(int stream, Pointer<Int16>? coords) {
  final _glVertexStream2svATI = glad__glVertexStream2svATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int16>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int16>? coords)>();
  return _glVertexStream2svATI(stream, coords);
}

/// ```c
/// define glVertexStream3dATI GLEW_GET_FUN(__glewVertexStream3dATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3DATIPROC __glewVertexStream3dATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3dATI;
void glVertexStream3dATI(int stream, double x, double y, double z) {
  final _glVertexStream3dATI = glad__glVertexStream3dATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Double x, Double y, Double z)>>()
      .asFunction<void Function(int stream, double x, double y, double z)>();
  return _glVertexStream3dATI(stream, x, y, z);
}

/// ```c
/// define glVertexStream3dvATI GLEW_GET_FUN(__glewVertexStream3dvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3DVATIPROC __glewVertexStream3dvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3dvATI;
void glVertexStream3dvATI(int stream, Pointer<Double>? coords) {
  final _glVertexStream3dvATI = glad__glVertexStream3dvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Double>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Double>? coords)>();
  return _glVertexStream3dvATI(stream, coords);
}

/// ```c
/// define glVertexStream3fATI GLEW_GET_FUN(__glewVertexStream3fATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3FATIPROC __glewVertexStream3fATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3fATI;
void glVertexStream3fATI(int stream, double x, double y, double z) {
  final _glVertexStream3fATI = glad__glVertexStream3fATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Float x, Float y, Float z)>>()
      .asFunction<void Function(int stream, double x, double y, double z)>();
  return _glVertexStream3fATI(stream, x, y, z);
}

/// ```c
/// define glVertexStream3fvATI GLEW_GET_FUN(__glewVertexStream3fvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3FVATIPROC __glewVertexStream3fvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3fvATI;
void glVertexStream3fvATI(int stream, Pointer<Float>? coords) {
  final _glVertexStream3fvATI = glad__glVertexStream3fvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Float>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Float>? coords)>();
  return _glVertexStream3fvATI(stream, coords);
}

/// ```c
/// define glVertexStream3iATI GLEW_GET_FUN(__glewVertexStream3iATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3IATIPROC __glewVertexStream3iATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3iATI;
void glVertexStream3iATI(int stream, int x, int y, int z) {
  final _glVertexStream3iATI = glad__glVertexStream3iATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return _glVertexStream3iATI(stream, x, y, z);
}

/// ```c
/// define glVertexStream3ivATI GLEW_GET_FUN(__glewVertexStream3ivATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3IVATIPROC __glewVertexStream3ivATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3ivATI;
void glVertexStream3ivATI(int stream, Pointer<Int32>? coords) {
  final _glVertexStream3ivATI = glad__glVertexStream3ivATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int32>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int32>? coords)>();
  return _glVertexStream3ivATI(stream, coords);
}

/// ```c
/// define glVertexStream3sATI GLEW_GET_FUN(__glewVertexStream3sATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3SATIPROC __glewVertexStream3sATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3sATI;
void glVertexStream3sATI(int stream, int x, int y, int z) {
  final _glVertexStream3sATI = glad__glVertexStream3sATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int stream, int x, int y, int z)>();
  return _glVertexStream3sATI(stream, x, y, z);
}

/// ```c
/// define glVertexStream3svATI GLEW_GET_FUN(__glewVertexStream3svATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3SVATIPROC __glewVertexStream3svATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream3svATI;
void glVertexStream3svATI(int stream, Pointer<Int16>? coords) {
  final _glVertexStream3svATI = glad__glVertexStream3svATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int16>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int16>? coords)>();
  return _glVertexStream3svATI(stream, coords);
}

/// ```c
/// define glVertexStream4dATI GLEW_GET_FUN(__glewVertexStream4dATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4DATIPROC __glewVertexStream4dATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4dATI;
void glVertexStream4dATI(int stream, double x, double y, double z, double w) {
  final _glVertexStream4dATI = glad__glVertexStream4dATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int stream, double x, double y, double z, double w)>();
  return _glVertexStream4dATI(stream, x, y, z, w);
}

/// ```c
/// define glVertexStream4dvATI GLEW_GET_FUN(__glewVertexStream4dvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4DVATIPROC __glewVertexStream4dvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4dvATI;
void glVertexStream4dvATI(int stream, Pointer<Double>? coords) {
  final _glVertexStream4dvATI = glad__glVertexStream4dvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Double>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Double>? coords)>();
  return _glVertexStream4dvATI(stream, coords);
}

/// ```c
/// define glVertexStream4fATI GLEW_GET_FUN(__glewVertexStream4fATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4FATIPROC __glewVertexStream4fATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4fATI;
void glVertexStream4fATI(int stream, double x, double y, double z, double w) {
  final _glVertexStream4fATI = glad__glVertexStream4fATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int stream, double x, double y, double z, double w)>();
  return _glVertexStream4fATI(stream, x, y, z, w);
}

/// ```c
/// define glVertexStream4fvATI GLEW_GET_FUN(__glewVertexStream4fvATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4FVATIPROC __glewVertexStream4fvATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4fvATI;
void glVertexStream4fvATI(int stream, Pointer<Float>? coords) {
  final _glVertexStream4fvATI = glad__glVertexStream4fvATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Float>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Float>? coords)>();
  return _glVertexStream4fvATI(stream, coords);
}

/// ```c
/// define glVertexStream4iATI GLEW_GET_FUN(__glewVertexStream4iATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4IATIPROC __glewVertexStream4iATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4iATI;
void glVertexStream4iATI(int stream, int x, int y, int z, int w) {
  final _glVertexStream4iATI = glad__glVertexStream4iATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int stream, int x, int y, int z, int w)>();
  return _glVertexStream4iATI(stream, x, y, z, w);
}

/// ```c
/// define glVertexStream4ivATI GLEW_GET_FUN(__glewVertexStream4ivATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4IVATIPROC __glewVertexStream4ivATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4ivATI;
void glVertexStream4ivATI(int stream, Pointer<Int32>? coords) {
  final _glVertexStream4ivATI = glad__glVertexStream4ivATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int32>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int32>? coords)>();
  return _glVertexStream4ivATI(stream, coords);
}

/// ```c
/// define glVertexStream4sATI GLEW_GET_FUN(__glewVertexStream4sATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4SATIPROC __glewVertexStream4sATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4sATI;
void glVertexStream4sATI(int stream, int x, int y, int z, int w) {
  final _glVertexStream4sATI = glad__glVertexStream4sATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int stream, int x, int y, int z, int w)>();
  return _glVertexStream4sATI(stream, x, y, z, w);
}

/// ```c
/// define glVertexStream4svATI GLEW_GET_FUN(__glewVertexStream4svATI)
/// GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4SVATIPROC __glewVertexStream4svATI
/// typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexStream4svATI;
void glVertexStream4svATI(int stream, Pointer<Int16>? coords) {
  final _glVertexStream4svATI = glad__glVertexStream4svATI!
      .cast<NativeFunction<Void Function(Uint32 stream, Pointer<Int16>? coords)>>()
      .asFunction<void Function(int stream, Pointer<Int16>? coords)>();
  return _glVertexStream4svATI(stream, coords);
}

/// -------------------------- GL_EXT_base_instance -------------------------
/// ```c
/// define glDrawArraysInstancedBaseInstanceEXT GLEW_GET_FUN(__glewDrawArraysInstancedBaseInstanceEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC __glewDrawArraysInstancedBaseInstanceEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstancedBaseInstanceEXT;
void glDrawArraysInstancedBaseInstanceEXT(int mode, int first, int count, int instancecount, int baseinstance) {
  final _glDrawArraysInstancedBaseInstanceEXT = glad__glDrawArraysInstancedBaseInstanceEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 instancecount, Uint32 baseinstance)>>()
      .asFunction<void Function(int mode, int first, int count, int instancecount, int baseinstance)>();
  return _glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance);
}

/// ```c
/// define glDrawElementsInstancedBaseInstanceEXT GLEW_GET_FUN(__glewDrawElementsInstancedBaseInstanceEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC __glewDrawElementsInstancedBaseInstanceEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedBaseInstanceEXT;
void glDrawElementsInstancedBaseInstanceEXT(int mode, int count, int type, Pointer<Void>? indices, int instancecount, int baseinstance) {
  final _glDrawElementsInstancedBaseInstanceEXT = glad__glDrawElementsInstancedBaseInstanceEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 instancecount, Uint32 baseinstance)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int instancecount, int baseinstance)>();
  return _glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance);
}

/// ```c
/// define glDrawElementsInstancedBaseVertexBaseInstanceEXT GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexBaseInstanceEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC __glewDrawElementsInstancedBaseVertexBaseInstanceEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedBaseVertexBaseInstanceEXT;
void glDrawElementsInstancedBaseVertexBaseInstanceEXT(int mode, int count, int type, Pointer<Void>? indices, int instancecount, int basevertex, int baseinstance) {
  final _glDrawElementsInstancedBaseVertexBaseInstanceEXT = glad__glDrawElementsInstancedBaseVertexBaseInstanceEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 instancecount, Int32 basevertex, Uint32 baseinstance)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int instancecount, int basevertex, int baseinstance)>();
  return _glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance);
}

/// ------------------------ GL_EXT_bindable_uniform ------------------------
/// ```c
/// define glGetUniformBufferSizeEXT GLEW_GET_FUN(__glewGetUniformBufferSizeEXT)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glewGetUniformBufferSizeEXT
/// typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformBufferSizeEXT;
int glGetUniformBufferSizeEXT(int program, int location) {
  final _glGetUniformBufferSizeEXT = glad__glGetUniformBufferSizeEXT!
      .cast<NativeFunction<Int32 Function(Uint32 program, Int32 location)>>()
      .asFunction<int Function(int program, int location)>();
  return _glGetUniformBufferSizeEXT(program, location);
}

/// ```c
/// define glGetUniformOffsetEXT GLEW_GET_FUN(__glewGetUniformOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMOFFSETEXTPROC __glewGetUniformOffsetEXT
/// typedef GLintptr (GLAPIENTRY * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformOffsetEXT;
int glGetUniformOffsetEXT(int program, int location) {
  final _glGetUniformOffsetEXT = glad__glGetUniformOffsetEXT!
      .cast<NativeFunction<Uint64 Function(Uint32 program, Int32 location)>>()
      .asFunction<int Function(int program, int location)>();
  return _glGetUniformOffsetEXT(program, location);
}

/// ```c
/// define glUniformBufferEXT GLEW_GET_FUN(__glewUniformBufferEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORMBUFFEREXTPROC __glewUniformBufferEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformBufferEXT;
void glUniformBufferEXT(int program, int location, int buffer) {
  final _glUniformBufferEXT = glad__glUniformBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 buffer)>>()
      .asFunction<void Function(int program, int location, int buffer)>();
  return _glUniformBufferEXT(program, location, buffer);
}

/// --------------------------- GL_EXT_blend_color --------------------------
/// ```c
/// define glBlendColorEXT GLEW_GET_FUN(__glewBlendColorEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDCOLOREXTPROC __glewBlendColorEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendColorEXT;
void glBlendColorEXT(double red, double green, double blue, double alpha) {
  final _glBlendColorEXT = glad__glBlendColorEXT!
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue, Float alpha)>>()
      .asFunction<void Function(double red, double green, double blue, double alpha)>();
  return _glBlendColorEXT(red, green, blue, alpha);
}

/// --------------------- GL_EXT_blend_equation_separate --------------------
/// ```c
/// define glBlendEquationSeparateEXT GLEW_GET_FUN(__glewBlendEquationSeparateEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEEXTPROC __glewBlendEquationSeparateEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationSeparateEXT;
void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha) {
  final _glBlendEquationSeparateEXT = glad__glBlendEquationSeparateEXT!
      .cast<NativeFunction<Void Function(Uint32 modeRGB, Uint32 modeAlpha)>>()
      .asFunction<void Function(int modeRGB, int modeAlpha)>();
  return _glBlendEquationSeparateEXT(modeRGB, modeAlpha);
}

/// ----------------------- GL_EXT_blend_func_extended ----------------------
/// ```c
/// define glBindFragDataLocationIndexedEXT GLEW_GET_FUN(__glewBindFragDataLocationIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC __glewBindFragDataLocationIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFragDataLocationIndexedEXT;
void glBindFragDataLocationIndexedEXT(int program, int colorNumber, int index, String name) {
  final _glBindFragDataLocationIndexedEXT = glad__glBindFragDataLocationIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 colorNumber, Uint32 index, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int program, int colorNumber, int index, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glBindFragDataLocationIndexedEXT(program, colorNumber, index, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetFragDataIndexEXT GLEW_GET_FUN(__glewGetFragDataIndexEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAGDATAINDEXEXTPROC __glewGetFragDataIndexEXT
/// typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATAINDEXEXTPROC) (GLuint program, const GLchar * name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragDataIndexEXT;
int glGetFragDataIndexEXT(int program, String name) {
  final _glGetFragDataIndexEXT = glad__glGetFragDataIndexEXT!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetFragDataIndexEXT(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetProgramResourceLocationIndexEXT GLEW_GET_FUN(__glewGetProgramResourceLocationIndexEXT)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC __glewGetProgramResourceLocationIndexEXT
/// typedef GLint (GLAPIENTRY * PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC) (GLuint program, GLenum programInterface, const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourceLocationIndexEXT;
int glGetProgramResourceLocationIndexEXT(int program, int programInterface, String name) {
  final _glGetProgramResourceLocationIndexEXT = glad__glGetProgramResourceLocationIndexEXT!
      .cast<NativeFunction<Int32 Function(Uint32 program, Uint32 programInterface, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, int programInterface, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetProgramResourceLocationIndexEXT(program, programInterface, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ----------------------- GL_EXT_blend_func_separate ----------------------
/// ```c
/// define glBlendFuncSeparateEXT GLEW_GET_FUN(__glewBlendFuncSeparateEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEEXTPROC __glewBlendFuncSeparateEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncSeparateEXT;
void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
  final _glBlendFuncSeparateEXT = glad__glBlendFuncSeparateEXT!
      .cast<NativeFunction<Void Function(Uint32 sfactorRGB, Uint32 dfactorRGB, Uint32 sfactorAlpha, Uint32 dfactorAlpha)>>()
      .asFunction<void Function(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha)>();
  return _glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

/// -------------------------- GL_EXT_blend_minmax --------------------------
/// ```c
/// define glBlendEquationEXT GLEW_GET_FUN(__glewBlendEquationEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONEXTPROC __glewBlendEquationEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationEXT;
void glBlendEquationEXT(int mode) {
  final _glBlendEquationEXT = glad__glBlendEquationEXT!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glBlendEquationEXT(mode);
}

/// ------------------------- GL_EXT_buffer_storage -------------------------
/// ```c
/// define glBufferStorageEXT GLEW_GET_FUN(__glewBufferStorageEXT)
/// GLEW_FUN_EXPORT PFNGLBUFFERSTORAGEEXTPROC __glewBufferStorageEXT
/// typedef void (GLAPIENTRY * PFNGLBUFFERSTORAGEEXTPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferStorageEXT;
void glBufferStorageEXT(int target, int size, Pointer<Void>? data, int flags) {
  final _glBufferStorageEXT = glad__glBufferStorageEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 size, Pointer<Void>? data, Uint32 flags)>>()
      .asFunction<void Function(int target, int size, Pointer<Void>? data, int flags)>();
  return _glBufferStorageEXT(target, size, data, flags);
}

/// ```c
/// define glNamedBufferStorageEXT GLEW_GET_FUN(__glewNamedBufferStorageEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERSTORAGEEXTPROC __glewNamedBufferStorageEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferStorageEXT;
void glNamedBufferStorageEXT(int buffer, int size, Pointer<Void>? data, int flags) {
  final _glNamedBufferStorageEXT = glad__glNamedBufferStorageEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 size, Pointer<Void>? data, Uint32 flags)>>()
      .asFunction<void Function(int buffer, int size, Pointer<Void>? data, int flags)>();
  return _glNamedBufferStorageEXT(buffer, size, data, flags);
}

/// -------------------------- GL_EXT_clear_texture -------------------------
/// ```c
/// define glClearTexImageEXT GLEW_GET_FUN(__glewClearTexImageEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARTEXIMAGEEXTPROC __glewClearTexImageEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARTEXIMAGEEXTPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearTexImageEXT;
void glClearTexImageEXT(int texture, int level, int format, int type, Pointer<Void>? data) {
  final _glClearTexImageEXT = glad__glClearTexImageEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int format, int type, Pointer<Void>? data)>();
  return _glClearTexImageEXT(texture, level, format, type, data);
}

/// ```c
/// define glClearTexSubImageEXT GLEW_GET_FUN(__glewClearTexSubImageEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARTEXSUBIMAGEEXTPROC __glewClearTexSubImageEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARTEXSUBIMAGEEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearTexSubImageEXT;
void glClearTexSubImageEXT(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? data) {
  final _glClearTexSubImageEXT = glad__glClearTexSubImageEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? data)>();
  return _glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

/// ------------------------- GL_EXT_color_subtable -------------------------
/// ```c
/// define glColorSubTableEXT GLEW_GET_FUN(__glewColorSubTableEXT)
/// GLEW_FUN_EXPORT PFNGLCOLORSUBTABLEEXTPROC __glewColorSubTableEXT
/// typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorSubTableEXT;
void glColorSubTableEXT(int target, int start, int count, int format, int type, Pointer<Void>? data) {
  final _glColorSubTableEXT = glad__glColorSubTableEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 start, Uint32 count, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int start, int count, int format, int type, Pointer<Void>? data)>();
  return _glColorSubTableEXT(target, start, count, format, type, data);
}

/// ```c
/// define glCopyColorSubTableEXT GLEW_GET_FUN(__glewCopyColorSubTableEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYCOLORSUBTABLEEXTPROC __glewCopyColorSubTableEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyColorSubTableEXT;
void glCopyColorSubTableEXT(int target, int start, int x, int y, int width) {
  final _glCopyColorSubTableEXT = glad__glCopyColorSubTableEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 start, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int start, int x, int y, int width)>();
  return _glCopyColorSubTableEXT(target, start, x, y, width);
}

/// ---------------------- GL_EXT_compiled_vertex_array ---------------------
/// ```c
/// define glLockArraysEXT GLEW_GET_FUN(__glewLockArraysEXT)
/// GLEW_FUN_EXPORT PFNGLLOCKARRAYSEXTPROC __glewLockArraysEXT
/// typedef void (GLAPIENTRY * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLockArraysEXT;
void glLockArraysEXT(int first, int count) {
  final _glLockArraysEXT = glad__glLockArraysEXT!
      .cast<NativeFunction<Void Function(Int32 first, Uint32 count)>>()
      .asFunction<void Function(int first, int count)>();
  return _glLockArraysEXT(first, count);
}

/// ```c
/// define glUnlockArraysEXT GLEW_GET_FUN(__glewUnlockArraysEXT)
/// GLEW_FUN_EXPORT PFNGLUNLOCKARRAYSEXTPROC __glewUnlockArraysEXT
/// typedef void (GLAPIENTRY * PFNGLUNLOCKARRAYSEXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnlockArraysEXT;
void glUnlockArraysEXT() {
  final _glUnlockArraysEXT = glad__glUnlockArraysEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glUnlockArraysEXT();
}

/// --------------------------- GL_EXT_convolution --------------------------
/// ```c
/// define glConvolutionFilter1DEXT GLEW_GET_FUN(__glewConvolutionFilter1DEXT)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER1DEXTPROC __glewConvolutionFilter1DEXT
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionFilter1DEXT;
void glConvolutionFilter1DEXT(int target, int internalformat, int width, int format, int type, Pointer<Void>? image) {
  final _glConvolutionFilter1DEXT = glad__glConvolutionFilter1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int internalformat, int width, int format, int type, Pointer<Void>? image)>();
  return _glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
}

/// ```c
/// define glConvolutionFilter2DEXT GLEW_GET_FUN(__glewConvolutionFilter2DEXT)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER2DEXTPROC __glewConvolutionFilter2DEXT
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionFilter2DEXT;
void glConvolutionFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? image) {
  final _glConvolutionFilter2DEXT = glad__glConvolutionFilter2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? image)>();
  return _glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
}

/// ```c
/// define glConvolutionParameterfEXT GLEW_GET_FUN(__glewConvolutionParameterfEXT)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFEXTPROC __glewConvolutionParameterfEXT
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameterfEXT;
void glConvolutionParameterfEXT(int target, int pname, double param) {
  final _glConvolutionParameterfEXT = glad__glConvolutionParameterfEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int target, int pname, double param)>();
  return _glConvolutionParameterfEXT(target, pname, param);
}

/// ```c
/// define glConvolutionParameterfvEXT GLEW_GET_FUN(__glewConvolutionParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glewConvolutionParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameterfvEXT;
void glConvolutionParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glConvolutionParameterfvEXT = glad__glConvolutionParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glConvolutionParameterfvEXT(target, pname, params);
}

/// ```c
/// define glConvolutionParameteriEXT GLEW_GET_FUN(__glewConvolutionParameteriEXT)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIEXTPROC __glewConvolutionParameteriEXT
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameteriEXT;
void glConvolutionParameteriEXT(int target, int pname, int param) {
  final _glConvolutionParameteriEXT = glad__glConvolutionParameteriEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glConvolutionParameteriEXT(target, pname, param);
}

/// ```c
/// define glConvolutionParameterivEXT GLEW_GET_FUN(__glewConvolutionParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glewConvolutionParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConvolutionParameterivEXT;
void glConvolutionParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glConvolutionParameterivEXT = glad__glConvolutionParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glConvolutionParameterivEXT(target, pname, params);
}

/// ```c
/// define glCopyConvolutionFilter1DEXT GLEW_GET_FUN(__glewCopyConvolutionFilter1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glewCopyConvolutionFilter1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyConvolutionFilter1DEXT;
void glCopyConvolutionFilter1DEXT(int target, int internalformat, int x, int y, int width) {
  final _glCopyConvolutionFilter1DEXT = glad__glCopyConvolutionFilter1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int internalformat, int x, int y, int width)>();
  return _glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
}

/// ```c
/// define glCopyConvolutionFilter2DEXT GLEW_GET_FUN(__glewCopyConvolutionFilter2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glewCopyConvolutionFilter2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyConvolutionFilter2DEXT;
void glCopyConvolutionFilter2DEXT(int target, int internalformat, int x, int y, int width, int height) {
  final _glCopyConvolutionFilter2DEXT = glad__glCopyConvolutionFilter2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int internalformat, int x, int y, int width, int height)>();
  return _glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
}

/// ```c
/// define glGetConvolutionFilterEXT GLEW_GET_FUN(__glewGetConvolutionFilterEXT)
/// GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONFILTEREXTPROC __glewGetConvolutionFilterEXT
/// typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetConvolutionFilterEXT;
void glGetConvolutionFilterEXT(int target, int format, int type, Pointer<Void>? image) {
  final _glGetConvolutionFilterEXT = glad__glGetConvolutionFilterEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? image)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? image)>();
  return _glGetConvolutionFilterEXT(target, format, type, image);
}

/// ```c
/// define glGetConvolutionParameterfvEXT GLEW_GET_FUN(__glewGetConvolutionParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glewGetConvolutionParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetConvolutionParameterfvEXT;
void glGetConvolutionParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glGetConvolutionParameterfvEXT = glad__glGetConvolutionParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetConvolutionParameterfvEXT(target, pname, params);
}

/// ```c
/// define glGetConvolutionParameterivEXT GLEW_GET_FUN(__glewGetConvolutionParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glewGetConvolutionParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetConvolutionParameterivEXT;
void glGetConvolutionParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetConvolutionParameterivEXT = glad__glGetConvolutionParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetConvolutionParameterivEXT(target, pname, params);
}

/// ```c
/// define glGetSeparableFilterEXT GLEW_GET_FUN(__glewGetSeparableFilterEXT)
/// GLEW_FUN_EXPORT PFNGLGETSEPARABLEFILTEREXTPROC __glewGetSeparableFilterEXT
/// typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSeparableFilterEXT;
void glGetSeparableFilterEXT(int target, int format, int type, Pointer<Void>? row, Pointer<Void>? column, Pointer<Void>? span) {
  final _glGetSeparableFilterEXT = glad__glGetSeparableFilterEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? row, Pointer<Void>? column, Pointer<Void>? span)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? row, Pointer<Void>? column, Pointer<Void>? span)>();
  return _glGetSeparableFilterEXT(target, format, type, row, column, span);
}

/// ```c
/// define glSeparableFilter2DEXT GLEW_GET_FUN(__glewSeparableFilter2DEXT)
/// GLEW_FUN_EXPORT PFNGLSEPARABLEFILTER2DEXTPROC __glewSeparableFilter2DEXT
/// typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSeparableFilter2DEXT;
void glSeparableFilter2DEXT(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? row, Pointer<Void>? column) {
  final _glSeparableFilter2DEXT = glad__glSeparableFilter2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? row, Pointer<Void>? column)>>()
      .asFunction<void Function(int target, int internalformat, int width, int height, int format, int type, Pointer<Void>? row, Pointer<Void>? column)>();
  return _glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
}

/// ------------------------ GL_EXT_coordinate_frame ------------------------
/// ```c
/// define glBinormalPointerEXT GLEW_GET_FUN(__glewBinormalPointerEXT)
/// GLEW_FUN_EXPORT PFNGLBINORMALPOINTEREXTPROC __glewBinormalPointerEXT
/// typedef void (GLAPIENTRY * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBinormalPointerEXT;
void glBinormalPointerEXT(int type, int stride, Pointer<Void>? pointer) {
  final _glBinormalPointerEXT = glad__glBinormalPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, Pointer<Void>? pointer)>();
  return _glBinormalPointerEXT(type, stride, pointer);
}

/// ```c
/// define glTangentPointerEXT GLEW_GET_FUN(__glewTangentPointerEXT)
/// GLEW_FUN_EXPORT PFNGLTANGENTPOINTEREXTPROC __glewTangentPointerEXT
/// typedef void (GLAPIENTRY * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTangentPointerEXT;
void glTangentPointerEXT(int type, int stride, Pointer<Void>? pointer) {
  final _glTangentPointerEXT = glad__glTangentPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, Pointer<Void>? pointer)>();
  return _glTangentPointerEXT(type, stride, pointer);
}

/// --------------------------- GL_EXT_copy_image ---------------------------
/// ```c
/// define glCopyImageSubDataEXT GLEW_GET_FUN(__glewCopyImageSubDataEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYIMAGESUBDATAEXTPROC __glewCopyImageSubDataEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYIMAGESUBDATAEXTPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyImageSubDataEXT;
void glCopyImageSubDataEXT(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
  final _glCopyImageSubDataEXT = glad__glCopyImageSubDataEXT!
      .cast<NativeFunction<Void Function(Uint32 srcName, Uint32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Uint32 dstName, Uint32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Uint32 srcWidth, Uint32 srcHeight, Uint32 srcDepth)>>()
      .asFunction<void Function(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)>();
  return _glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

/// -------------------------- GL_EXT_copy_texture --------------------------
/// ```c
/// define glCopyTexImage1DEXT GLEW_GET_FUN(__glewCopyTexImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXIMAGE1DEXTPROC __glewCopyTexImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexImage1DEXT;
void glCopyTexImage1DEXT(int target, int level, int internalformat, int x, int y, int width, int border) {
  final _glCopyTexImage1DEXT = glad__glCopyTexImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Int32 border)>>()
      .asFunction<void Function(int target, int level, int internalformat, int x, int y, int width, int border)>();
  return _glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
}

/// ```c
/// define glCopyTexImage2DEXT GLEW_GET_FUN(__glewCopyTexImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXIMAGE2DEXTPROC __glewCopyTexImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexImage2DEXT;
void glCopyTexImage2DEXT(int target, int level, int internalformat, int x, int y, int width, int height, int border) {
  final _glCopyTexImage2DEXT = glad__glCopyTexImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Uint32 height, Int32 border)>>()
      .asFunction<void Function(int target, int level, int internalformat, int x, int y, int width, int height, int border)>();
  return _glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
}

/// ```c
/// define glCopyTexSubImage1DEXT GLEW_GET_FUN(__glewCopyTexSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glewCopyTexSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexSubImage1DEXT;
void glCopyTexSubImage1DEXT(int target, int level, int xoffset, int x, int y, int width) {
  final _glCopyTexSubImage1DEXT = glad__glCopyTexSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int level, int xoffset, int x, int y, int width)>();
  return _glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
}

/// ```c
/// define glCopyTexSubImage2DEXT GLEW_GET_FUN(__glewCopyTexSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glewCopyTexSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexSubImage2DEXT;
void glCopyTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
  final _glCopyTexSubImage2DEXT = glad__glCopyTexSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)>();
  return _glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
}

/// ```c
/// define glCopyTexSubImage3DEXT GLEW_GET_FUN(__glewCopyTexSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glewCopyTexSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexSubImage3DEXT;
void glCopyTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
  final _glCopyTexSubImage3DEXT = glad__glCopyTexSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)>();
  return _glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/// --------------------------- GL_EXT_cull_vertex --------------------------
/// ```c
/// define glCullParameterdvEXT GLEW_GET_FUN(__glewCullParameterdvEXT)
/// GLEW_FUN_EXPORT PFNGLCULLPARAMETERDVEXTPROC __glewCullParameterdvEXT
/// typedef void (GLAPIENTRY * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCullParameterdvEXT;
void glCullParameterdvEXT(int pname, Pointer<Double>? params) {
  final _glCullParameterdvEXT = glad__glCullParameterdvEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int pname, Pointer<Double>? params)>();
  return _glCullParameterdvEXT(pname, params);
}

/// ```c
/// define glCullParameterfvEXT GLEW_GET_FUN(__glewCullParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLCULLPARAMETERFVEXTPROC __glewCullParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCullParameterfvEXT;
void glCullParameterfvEXT(int pname, Pointer<Float>? params) {
  final _glCullParameterfvEXT = glad__glCullParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glCullParameterfvEXT(pname, params);
}

/// --------------------------- GL_EXT_debug_label --------------------------
/// ```c
/// define glGetObjectLabelEXT GLEW_GET_FUN(__glewGetObjectLabelEXT)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTLABELEXTPROC __glewGetObjectLabelEXT
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar *label)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectLabelEXT;
void glGetObjectLabelEXT(int type, int object, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? label) {
  final _glGetObjectLabelEXT = glad__glGetObjectLabelEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 object, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? label)>>()
      .asFunction<void Function(int type, int object, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? label)>();
  return _glGetObjectLabelEXT(type, object, bufSize, length, label);
}

/// ```c
/// define glLabelObjectEXT GLEW_GET_FUN(__glewLabelObjectEXT)
/// GLEW_FUN_EXPORT PFNGLLABELOBJECTEXTPROC __glewLabelObjectEXT
/// typedef void (GLAPIENTRY * PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar* label)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLabelObjectEXT;
void glLabelObjectEXT(int type, int object, int length, String label) {
  final _glLabelObjectEXT = glad__glLabelObjectEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 object, Uint32 length, Pointer<Utf8>? label)>>()
      .asFunction<void Function(int type, int object, int length, Pointer<Utf8>? label)>();
  final _labelPointer = label.toNativeUtf8();
  final _result = _glLabelObjectEXT(type, object, length, _labelPointer);
  calloc.free(_labelPointer);
  return _result;
}

/// -------------------------- GL_EXT_debug_marker --------------------------
/// ```c
/// define glInsertEventMarkerEXT GLEW_GET_FUN(__glewInsertEventMarkerEXT)
/// GLEW_FUN_EXPORT PFNGLINSERTEVENTMARKEREXTPROC __glewInsertEventMarkerEXT
/// typedef void (GLAPIENTRY * PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar* marker)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInsertEventMarkerEXT;
void glInsertEventMarkerEXT(int length, String marker) {
  final _glInsertEventMarkerEXT = glad__glInsertEventMarkerEXT!
      .cast<NativeFunction<Void Function(Uint32 length, Pointer<Utf8>? marker)>>()
      .asFunction<void Function(int length, Pointer<Utf8>? marker)>();
  final _markerPointer = marker.toNativeUtf8();
  final _result = _glInsertEventMarkerEXT(length, _markerPointer);
  calloc.free(_markerPointer);
  return _result;
}

/// ```c
/// define glPopGroupMarkerEXT GLEW_GET_FUN(__glewPopGroupMarkerEXT)
/// GLEW_FUN_EXPORT PFNGLPOPGROUPMARKEREXTPROC __glewPopGroupMarkerEXT
/// typedef void (GLAPIENTRY * PFNGLPOPGROUPMARKEREXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPopGroupMarkerEXT;
void glPopGroupMarkerEXT() {
  final _glPopGroupMarkerEXT = glad__glPopGroupMarkerEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glPopGroupMarkerEXT();
}

/// ```c
/// define glPushGroupMarkerEXT GLEW_GET_FUN(__glewPushGroupMarkerEXT)
/// GLEW_FUN_EXPORT PFNGLPUSHGROUPMARKEREXTPROC __glewPushGroupMarkerEXT
/// typedef void (GLAPIENTRY * PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar* marker)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPushGroupMarkerEXT;
void glPushGroupMarkerEXT(int length, String marker) {
  final _glPushGroupMarkerEXT = glad__glPushGroupMarkerEXT!
      .cast<NativeFunction<Void Function(Uint32 length, Pointer<Utf8>? marker)>>()
      .asFunction<void Function(int length, Pointer<Utf8>? marker)>();
  final _markerPointer = marker.toNativeUtf8();
  final _result = _glPushGroupMarkerEXT(length, _markerPointer);
  calloc.free(_markerPointer);
  return _result;
}

/// ------------------------ GL_EXT_depth_bounds_test -----------------------
/// ```c
/// define glDepthBoundsEXT GLEW_GET_FUN(__glewDepthBoundsEXT)
/// GLEW_FUN_EXPORT PFNGLDEPTHBOUNDSEXTPROC __glewDepthBoundsEXT
/// typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthBoundsEXT;
void glDepthBoundsEXT(double zmin, double zmax) {
  final _glDepthBoundsEXT = glad__glDepthBoundsEXT!
      .cast<NativeFunction<Void Function(Double zmin, Double zmax)>>()
      .asFunction<void Function(double zmin, double zmax)>();
  return _glDepthBoundsEXT(zmin, zmax);
}

/// ----------------------- GL_EXT_direct_state_access ----------------------
/// ```c
/// define glBindMultiTextureEXT GLEW_GET_FUN(__glewBindMultiTextureEXT)
/// GLEW_FUN_EXPORT PFNGLBINDMULTITEXTUREEXTPROC __glewBindMultiTextureEXT
/// typedef void (GLAPIENTRY * PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindMultiTextureEXT;
void glBindMultiTextureEXT(int texunit, int target, int texture) {
  final _glBindMultiTextureEXT = glad__glBindMultiTextureEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 texture)>>()
      .asFunction<void Function(int texunit, int target, int texture)>();
  return _glBindMultiTextureEXT(texunit, target, texture);
}

/// ```c
/// define glCheckNamedFramebufferStatusEXT GLEW_GET_FUN(__glewCheckNamedFramebufferStatusEXT)
/// GLEW_FUN_EXPORT PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC __glewCheckNamedFramebufferStatusEXT
/// typedef GLenum (GLAPIENTRY * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCheckNamedFramebufferStatusEXT;
int glCheckNamedFramebufferStatusEXT(int framebuffer, int target) {
  final _glCheckNamedFramebufferStatusEXT = glad__glCheckNamedFramebufferStatusEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 framebuffer, Uint32 target)>>()
      .asFunction<int Function(int framebuffer, int target)>();
  return _glCheckNamedFramebufferStatusEXT(framebuffer, target);
}

/// ```c
/// define glClientAttribDefaultEXT GLEW_GET_FUN(__glewClientAttribDefaultEXT)
/// GLEW_FUN_EXPORT PFNGLCLIENTATTRIBDEFAULTEXTPROC __glewClientAttribDefaultEXT
/// typedef void (GLAPIENTRY * PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClientAttribDefaultEXT;
void glClientAttribDefaultEXT(int mask) {
  final _glClientAttribDefaultEXT = glad__glClientAttribDefaultEXT!
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return _glClientAttribDefaultEXT(mask);
}

/// ```c
/// define glCompressedMultiTexImage1DEXT GLEW_GET_FUN(__glewCompressedMultiTexImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC __glewCompressedMultiTexImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedMultiTexImage1DEXT;
void glCompressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedMultiTexImage1DEXT = glad__glCompressedMultiTexImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, data);
}

/// ```c
/// define glCompressedMultiTexImage2DEXT GLEW_GET_FUN(__glewCompressedMultiTexImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC __glewCompressedMultiTexImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedMultiTexImage2DEXT;
void glCompressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedMultiTexImage2DEXT = glad__glCompressedMultiTexImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, data);
}

/// ```c
/// define glCompressedMultiTexImage3DEXT GLEW_GET_FUN(__glewCompressedMultiTexImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC __glewCompressedMultiTexImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedMultiTexImage3DEXT;
void glCompressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedMultiTexImage3DEXT = glad__glCompressedMultiTexImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, data);
}

/// ```c
/// define glCompressedMultiTexSubImage1DEXT GLEW_GET_FUN(__glewCompressedMultiTexSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC __glewCompressedMultiTexSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedMultiTexSubImage1DEXT;
void glCompressedMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedMultiTexSubImage1DEXT = glad__glCompressedMultiTexSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, data);
}

/// ```c
/// define glCompressedMultiTexSubImage2DEXT GLEW_GET_FUN(__glewCompressedMultiTexSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC __glewCompressedMultiTexSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedMultiTexSubImage2DEXT;
void glCompressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedMultiTexSubImage2DEXT = glad__glCompressedMultiTexSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

/// ```c
/// define glCompressedMultiTexSubImage3DEXT GLEW_GET_FUN(__glewCompressedMultiTexSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC __glewCompressedMultiTexSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedMultiTexSubImage3DEXT;
void glCompressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedMultiTexSubImage3DEXT = glad__glCompressedMultiTexSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

/// ```c
/// define glCompressedTextureImage1DEXT GLEW_GET_FUN(__glewCompressedTextureImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC __glewCompressedTextureImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureImage1DEXT;
void glCompressedTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureImage1DEXT = glad__glCompressedTextureImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int width, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, data);
}

/// ```c
/// define glCompressedTextureImage2DEXT GLEW_GET_FUN(__glewCompressedTextureImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC __glewCompressedTextureImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureImage2DEXT;
void glCompressedTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureImage2DEXT = glad__glCompressedTextureImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, data);
}

/// ```c
/// define glCompressedTextureImage3DEXT GLEW_GET_FUN(__glewCompressedTextureImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC __glewCompressedTextureImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureImage3DEXT;
void glCompressedTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureImage3DEXT = glad__glCompressedTextureImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, data);
}

/// ```c
/// define glCompressedTextureSubImage1DEXT GLEW_GET_FUN(__glewCompressedTextureSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC __glewCompressedTextureSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureSubImage1DEXT;
void glCompressedTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureSubImage1DEXT = glad__glCompressedTextureSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int width, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, data);
}

/// ```c
/// define glCompressedTextureSubImage2DEXT GLEW_GET_FUN(__glewCompressedTextureSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC __glewCompressedTextureSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureSubImage2DEXT;
void glCompressedTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureSubImage2DEXT = glad__glCompressedTextureSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

/// ```c
/// define glCompressedTextureSubImage3DEXT GLEW_GET_FUN(__glewCompressedTextureSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC __glewCompressedTextureSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTextureSubImage3DEXT;
void glCompressedTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTextureSubImage3DEXT = glad__glCompressedTextureSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

/// ```c
/// define glCopyMultiTexImage1DEXT GLEW_GET_FUN(__glewCopyMultiTexImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYMULTITEXIMAGE1DEXTPROC __glewCopyMultiTexImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyMultiTexImage1DEXT;
void glCopyMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int border) {
  final _glCopyMultiTexImage1DEXT = glad__glCopyMultiTexImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Int32 border)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int x, int y, int width, int border)>();
  return _glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
}

/// ```c
/// define glCopyMultiTexImage2DEXT GLEW_GET_FUN(__glewCopyMultiTexImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYMULTITEXIMAGE2DEXTPROC __glewCopyMultiTexImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyMultiTexImage2DEXT;
void glCopyMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border) {
  final _glCopyMultiTexImage2DEXT = glad__glCopyMultiTexImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Uint32 height, Int32 border)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border)>();
  return _glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
}

/// ```c
/// define glCopyMultiTexSubImage1DEXT GLEW_GET_FUN(__glewCopyMultiTexSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC __glewCopyMultiTexSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyMultiTexSubImage1DEXT;
void glCopyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width) {
  final _glCopyMultiTexSubImage1DEXT = glad__glCopyMultiTexSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int x, int y, int width)>();
  return _glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
}

/// ```c
/// define glCopyMultiTexSubImage2DEXT GLEW_GET_FUN(__glewCopyMultiTexSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC __glewCopyMultiTexSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyMultiTexSubImage2DEXT;
void glCopyMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
  final _glCopyMultiTexSubImage2DEXT = glad__glCopyMultiTexSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)>();
  return _glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

/// ```c
/// define glCopyMultiTexSubImage3DEXT GLEW_GET_FUN(__glewCopyMultiTexSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC __glewCopyMultiTexSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyMultiTexSubImage3DEXT;
void glCopyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
  final _glCopyMultiTexSubImage3DEXT = glad__glCopyMultiTexSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)>();
  return _glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/// ```c
/// define glCopyTextureImage1DEXT GLEW_GET_FUN(__glewCopyTextureImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTUREIMAGE1DEXTPROC __glewCopyTextureImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureImage1DEXT;
void glCopyTextureImage1DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int border) {
  final _glCopyTextureImage1DEXT = glad__glCopyTextureImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Int32 border)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int x, int y, int width, int border)>();
  return _glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
}

/// ```c
/// define glCopyTextureImage2DEXT GLEW_GET_FUN(__glewCopyTextureImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTUREIMAGE2DEXTPROC __glewCopyTextureImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureImage2DEXT;
void glCopyTextureImage2DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border) {
  final _glCopyTextureImage2DEXT = glad__glCopyTextureImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 internalformat, Int32 x, Int32 y, Uint32 width, Uint32 height, Int32 border)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border)>();
  return _glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
}

/// ```c
/// define glCopyTextureSubImage1DEXT GLEW_GET_FUN(__glewCopyTextureSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC __glewCopyTextureSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureSubImage1DEXT;
void glCopyTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int x, int y, int width) {
  final _glCopyTextureSubImage1DEXT = glad__glCopyTextureSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int x, int y, int width)>();
  return _glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
}

/// ```c
/// define glCopyTextureSubImage2DEXT GLEW_GET_FUN(__glewCopyTextureSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC __glewCopyTextureSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureSubImage2DEXT;
void glCopyTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
  final _glCopyTextureSubImage2DEXT = glad__glCopyTextureSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height)>();
  return _glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
}

/// ```c
/// define glCopyTextureSubImage3DEXT GLEW_GET_FUN(__glewCopyTextureSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC __glewCopyTextureSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTextureSubImage3DEXT;
void glCopyTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
  final _glCopyTextureSubImage3DEXT = glad__glCopyTextureSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)>();
  return _glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/// ```c
/// define glDisableClientStateIndexedEXT GLEW_GET_FUN(__glewDisableClientStateIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC __glewDisableClientStateIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableClientStateIndexedEXT;
void glDisableClientStateIndexedEXT(int array, int index) {
  final _glDisableClientStateIndexedEXT = glad__glDisableClientStateIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return _glDisableClientStateIndexedEXT(array, index);
}

/// ```c
/// define glDisableClientStateiEXT GLEW_GET_FUN(__glewDisableClientStateiEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLECLIENTSTATEIEXTPROC __glewDisableClientStateiEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableClientStateiEXT;
void glDisableClientStateiEXT(int array, int index) {
  final _glDisableClientStateiEXT = glad__glDisableClientStateiEXT!
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return _glDisableClientStateiEXT(array, index);
}

/// ```c
/// define glDisableVertexArrayAttribEXT GLEW_GET_FUN(__glewDisableVertexArrayAttribEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC __glewDisableVertexArrayAttribEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVertexArrayAttribEXT;
void glDisableVertexArrayAttribEXT(int vaobj, int index) {
  final _glDisableVertexArrayAttribEXT = glad__glDisableVertexArrayAttribEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return _glDisableVertexArrayAttribEXT(vaobj, index);
}

/// ```c
/// define glDisableVertexArrayEXT GLEW_GET_FUN(__glewDisableVertexArrayEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLEVERTEXARRAYEXTPROC __glewDisableVertexArrayEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVertexArrayEXT;
void glDisableVertexArrayEXT(int vaobj, int array) {
  final _glDisableVertexArrayEXT = glad__glDisableVertexArrayEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 array)>>()
      .asFunction<void Function(int vaobj, int array)>();
  return _glDisableVertexArrayEXT(vaobj, array);
}

/// ```c
/// define glEnableClientStateIndexedEXT GLEW_GET_FUN(__glewEnableClientStateIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLENABLECLIENTSTATEINDEXEDEXTPROC __glewEnableClientStateIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableClientStateIndexedEXT;
void glEnableClientStateIndexedEXT(int array, int index) {
  final _glEnableClientStateIndexedEXT = glad__glEnableClientStateIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return _glEnableClientStateIndexedEXT(array, index);
}

/// ```c
/// define glEnableClientStateiEXT GLEW_GET_FUN(__glewEnableClientStateiEXT)
/// GLEW_FUN_EXPORT PFNGLENABLECLIENTSTATEIEXTPROC __glewEnableClientStateiEXT
/// typedef void (GLAPIENTRY * PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableClientStateiEXT;
void glEnableClientStateiEXT(int array, int index) {
  final _glEnableClientStateiEXT = glad__glEnableClientStateiEXT!
      .cast<NativeFunction<Void Function(Uint32 array, Uint32 index)>>()
      .asFunction<void Function(int array, int index)>();
  return _glEnableClientStateiEXT(array, index);
}

/// ```c
/// define glEnableVertexArrayAttribEXT GLEW_GET_FUN(__glewEnableVertexArrayAttribEXT)
/// GLEW_FUN_EXPORT PFNGLENABLEVERTEXARRAYATTRIBEXTPROC __glewEnableVertexArrayAttribEXT
/// typedef void (GLAPIENTRY * PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVertexArrayAttribEXT;
void glEnableVertexArrayAttribEXT(int vaobj, int index) {
  final _glEnableVertexArrayAttribEXT = glad__glEnableVertexArrayAttribEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index)>>()
      .asFunction<void Function(int vaobj, int index)>();
  return _glEnableVertexArrayAttribEXT(vaobj, index);
}

/// ```c
/// define glEnableVertexArrayEXT GLEW_GET_FUN(__glewEnableVertexArrayEXT)
/// GLEW_FUN_EXPORT PFNGLENABLEVERTEXARRAYEXTPROC __glewEnableVertexArrayEXT
/// typedef void (GLAPIENTRY * PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVertexArrayEXT;
void glEnableVertexArrayEXT(int vaobj, int array) {
  final _glEnableVertexArrayEXT = glad__glEnableVertexArrayEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 array)>>()
      .asFunction<void Function(int vaobj, int array)>();
  return _glEnableVertexArrayEXT(vaobj, array);
}

/// ```c
/// define glFlushMappedNamedBufferRangeEXT GLEW_GET_FUN(__glewFlushMappedNamedBufferRangeEXT)
/// GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC __glewFlushMappedNamedBufferRangeEXT
/// typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushMappedNamedBufferRangeEXT;
void glFlushMappedNamedBufferRangeEXT(int buffer, int offset, int length) {
  final _glFlushMappedNamedBufferRangeEXT = glad__glFlushMappedNamedBufferRangeEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 length)>>()
      .asFunction<void Function(int buffer, int offset, int length)>();
  return _glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
}

/// ```c
/// define glFramebufferDrawBufferEXT GLEW_GET_FUN(__glewFramebufferDrawBufferEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC __glewFramebufferDrawBufferEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferDrawBufferEXT;
void glFramebufferDrawBufferEXT(int framebuffer, int mode) {
  final _glFramebufferDrawBufferEXT = glad__glFramebufferDrawBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 mode)>>()
      .asFunction<void Function(int framebuffer, int mode)>();
  return _glFramebufferDrawBufferEXT(framebuffer, mode);
}

/// ```c
/// define glFramebufferDrawBuffersEXT GLEW_GET_FUN(__glewFramebufferDrawBuffersEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC __glewFramebufferDrawBuffersEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferDrawBuffersEXT;
void glFramebufferDrawBuffersEXT(int framebuffer, int n, Pointer<Uint32>? bufs) {
  final _glFramebufferDrawBuffersEXT = glad__glFramebufferDrawBuffersEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int framebuffer, int n, Pointer<Uint32>? bufs)>();
  return _glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
}

/// ```c
/// define glFramebufferReadBufferEXT GLEW_GET_FUN(__glewFramebufferReadBufferEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERREADBUFFEREXTPROC __glewFramebufferReadBufferEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferReadBufferEXT;
void glFramebufferReadBufferEXT(int framebuffer, int mode) {
  final _glFramebufferReadBufferEXT = glad__glFramebufferReadBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 mode)>>()
      .asFunction<void Function(int framebuffer, int mode)>();
  return _glFramebufferReadBufferEXT(framebuffer, mode);
}

/// ```c
/// define glGenerateMultiTexMipmapEXT GLEW_GET_FUN(__glewGenerateMultiTexMipmapEXT)
/// GLEW_FUN_EXPORT PFNGLGENERATEMULTITEXMIPMAPEXTPROC __glewGenerateMultiTexMipmapEXT
/// typedef void (GLAPIENTRY * PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenerateMultiTexMipmapEXT;
void glGenerateMultiTexMipmapEXT(int texunit, int target) {
  final _glGenerateMultiTexMipmapEXT = glad__glGenerateMultiTexMipmapEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target)>>()
      .asFunction<void Function(int texunit, int target)>();
  return _glGenerateMultiTexMipmapEXT(texunit, target);
}

/// ```c
/// define glGenerateTextureMipmapEXT GLEW_GET_FUN(__glewGenerateTextureMipmapEXT)
/// GLEW_FUN_EXPORT PFNGLGENERATETEXTUREMIPMAPEXTPROC __glewGenerateTextureMipmapEXT
/// typedef void (GLAPIENTRY * PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenerateTextureMipmapEXT;
void glGenerateTextureMipmapEXT(int texture, int target) {
  final _glGenerateTextureMipmapEXT = glad__glGenerateTextureMipmapEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target)>>()
      .asFunction<void Function(int texture, int target)>();
  return _glGenerateTextureMipmapEXT(texture, target);
}

/// ```c
/// define glGetCompressedMultiTexImageEXT GLEW_GET_FUN(__glewGetCompressedMultiTexImageEXT)
/// GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC __glewGetCompressedMultiTexImageEXT
/// typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, void *img)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCompressedMultiTexImageEXT;
void glGetCompressedMultiTexImageEXT(int texunit, int target, int level, Pointer<Void>? img) {
  final _glGetCompressedMultiTexImageEXT = glad__glGetCompressedMultiTexImageEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Pointer<Void>? img)>>()
      .asFunction<void Function(int texunit, int target, int level, Pointer<Void>? img)>();
  return _glGetCompressedMultiTexImageEXT(texunit, target, level, img);
}

/// ```c
/// define glGetCompressedTextureImageEXT GLEW_GET_FUN(__glewGetCompressedTextureImageEXT)
/// GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC __glewGetCompressedTextureImageEXT
/// typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, void *img)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCompressedTextureImageEXT;
void glGetCompressedTextureImageEXT(int texture, int target, int level, Pointer<Void>? img) {
  final _glGetCompressedTextureImageEXT = glad__glGetCompressedTextureImageEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Pointer<Void>? img)>>()
      .asFunction<void Function(int texture, int target, int level, Pointer<Void>? img)>();
  return _glGetCompressedTextureImageEXT(texture, target, level, img);
}

/// ```c
/// define glGetDoubleIndexedvEXT GLEW_GET_FUN(__glewGetDoubleIndexedvEXT)
/// GLEW_FUN_EXPORT PFNGLGETDOUBLEINDEXEDVEXTPROC __glewGetDoubleIndexedvEXT
/// typedef void (GLAPIENTRY * PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDoubleIndexedvEXT;
void glGetDoubleIndexedvEXT(int target, int index, Pointer<Double>? params) {
  final _glGetDoubleIndexedvEXT = glad__glGetDoubleIndexedvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? params)>();
  return _glGetDoubleIndexedvEXT(target, index, params);
}

/// ```c
/// define glGetDoublei_vEXT GLEW_GET_FUN(__glewGetDoublei_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETDOUBLEI_VEXTPROC __glewGetDoublei_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDoublei_vEXT;
void glGetDoublei_vEXT(int pname, int index, Pointer<Double>? params) {
  final _glGetDoublei_vEXT = glad__glGetDoublei_vEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int pname, int index, Pointer<Double>? params)>();
  return _glGetDoublei_vEXT(pname, index, params);
}

/// ```c
/// define glGetFloatIndexedvEXT GLEW_GET_FUN(__glewGetFloatIndexedvEXT)
/// GLEW_FUN_EXPORT PFNGLGETFLOATINDEXEDVEXTPROC __glewGetFloatIndexedvEXT
/// typedef void (GLAPIENTRY * PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFloatIndexedvEXT;
void glGetFloatIndexedvEXT(int target, int index, Pointer<Float>? params) {
  final _glGetFloatIndexedvEXT = glad__glGetFloatIndexedvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? params)>();
  return _glGetFloatIndexedvEXT(target, index, params);
}

/// ```c
/// define glGetFloati_vEXT GLEW_GET_FUN(__glewGetFloati_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETFLOATI_VEXTPROC __glewGetFloati_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFloati_vEXT;
void glGetFloati_vEXT(int pname, int index, Pointer<Float>? params) {
  final _glGetFloati_vEXT = glad__glGetFloati_vEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, int index, Pointer<Float>? params)>();
  return _glGetFloati_vEXT(pname, index, params);
}

/// ```c
/// define glGetFramebufferParameterivEXT GLEW_GET_FUN(__glewGetFramebufferParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC __glewGetFramebufferParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFramebufferParameterivEXT;
void glGetFramebufferParameterivEXT(int framebuffer, int pname, Pointer<Int32>? param) {
  final _glGetFramebufferParameterivEXT = glad__glGetFramebufferParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int framebuffer, int pname, Pointer<Int32>? param)>();
  return _glGetFramebufferParameterivEXT(framebuffer, pname, param);
}

/// ```c
/// define glGetMultiTexEnvfvEXT GLEW_GET_FUN(__glewGetMultiTexEnvfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXENVFVEXTPROC __glewGetMultiTexEnvfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexEnvfvEXT;
void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, Pointer<Float>? params) {
  final _glGetMultiTexEnvfvEXT = glad__glGetMultiTexEnvfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Float>? params)>();
  return _glGetMultiTexEnvfvEXT(texunit, target, pname, params);
}

/// ```c
/// define glGetMultiTexEnvivEXT GLEW_GET_FUN(__glewGetMultiTexEnvivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXENVIVEXTPROC __glewGetMultiTexEnvivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexEnvivEXT;
void glGetMultiTexEnvivEXT(int texunit, int target, int pname, Pointer<Int32>? params) {
  final _glGetMultiTexEnvivEXT = glad__glGetMultiTexEnvivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Int32>? params)>();
  return _glGetMultiTexEnvivEXT(texunit, target, pname, params);
}

/// ```c
/// define glGetMultiTexGendvEXT GLEW_GET_FUN(__glewGetMultiTexGendvEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXGENDVEXTPROC __glewGetMultiTexGendvEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexGendvEXT;
void glGetMultiTexGendvEXT(int texunit, int coord, int pname, Pointer<Double>? params) {
  final _glGetMultiTexGendvEXT = glad__glGetMultiTexGendvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int texunit, int coord, int pname, Pointer<Double>? params)>();
  return _glGetMultiTexGendvEXT(texunit, coord, pname, params);
}

/// ```c
/// define glGetMultiTexGenfvEXT GLEW_GET_FUN(__glewGetMultiTexGenfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXGENFVEXTPROC __glewGetMultiTexGenfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexGenfvEXT;
void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, Pointer<Float>? params) {
  final _glGetMultiTexGenfvEXT = glad__glGetMultiTexGenfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texunit, int coord, int pname, Pointer<Float>? params)>();
  return _glGetMultiTexGenfvEXT(texunit, coord, pname, params);
}

/// ```c
/// define glGetMultiTexGenivEXT GLEW_GET_FUN(__glewGetMultiTexGenivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXGENIVEXTPROC __glewGetMultiTexGenivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexGenivEXT;
void glGetMultiTexGenivEXT(int texunit, int coord, int pname, Pointer<Int32>? params) {
  final _glGetMultiTexGenivEXT = glad__glGetMultiTexGenivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int coord, int pname, Pointer<Int32>? params)>();
  return _glGetMultiTexGenivEXT(texunit, coord, pname, params);
}

/// ```c
/// define glGetMultiTexImageEXT GLEW_GET_FUN(__glewGetMultiTexImageEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXIMAGEEXTPROC __glewGetMultiTexImageEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexImageEXT;
void glGetMultiTexImageEXT(int texunit, int target, int level, int format, int type, Pointer<Void>? pixels) {
  final _glGetMultiTexImageEXT = glad__glGetMultiTexImageEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int format, int type, Pointer<Void>? pixels)>();
  return _glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
}

/// ```c
/// define glGetMultiTexLevelParameterfvEXT GLEW_GET_FUN(__glewGetMultiTexLevelParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC __glewGetMultiTexLevelParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexLevelParameterfvEXT;
void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, Pointer<Float>? params) {
  final _glGetMultiTexLevelParameterfvEXT = glad__glGetMultiTexLevelParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texunit, int target, int level, int pname, Pointer<Float>? params)>();
  return _glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
}

/// ```c
/// define glGetMultiTexLevelParameterivEXT GLEW_GET_FUN(__glewGetMultiTexLevelParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC __glewGetMultiTexLevelParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexLevelParameterivEXT;
void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, Pointer<Int32>? params) {
  final _glGetMultiTexLevelParameterivEXT = glad__glGetMultiTexLevelParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int target, int level, int pname, Pointer<Int32>? params)>();
  return _glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
}

/// ```c
/// define glGetMultiTexParameterIivEXT GLEW_GET_FUN(__glewGetMultiTexParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXPARAMETERIIVEXTPROC __glewGetMultiTexParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexParameterIivEXT;
void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, Pointer<Int32>? params) {
  final _glGetMultiTexParameterIivEXT = glad__glGetMultiTexParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Int32>? params)>();
  return _glGetMultiTexParameterIivEXT(texunit, target, pname, params);
}

/// ```c
/// define glGetMultiTexParameterIuivEXT GLEW_GET_FUN(__glewGetMultiTexParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXPARAMETERIUIVEXTPROC __glewGetMultiTexParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexParameterIuivEXT;
void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, Pointer<Uint32>? params) {
  final _glGetMultiTexParameterIuivEXT = glad__glGetMultiTexParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Uint32>? params)>();
  return _glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
}

/// ```c
/// define glGetMultiTexParameterfvEXT GLEW_GET_FUN(__glewGetMultiTexParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXPARAMETERFVEXTPROC __glewGetMultiTexParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexParameterfvEXT;
void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, Pointer<Float>? params) {
  final _glGetMultiTexParameterfvEXT = glad__glGetMultiTexParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Float>? params)>();
  return _glGetMultiTexParameterfvEXT(texunit, target, pname, params);
}

/// ```c
/// define glGetMultiTexParameterivEXT GLEW_GET_FUN(__glewGetMultiTexParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMULTITEXPARAMETERIVEXTPROC __glewGetMultiTexParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultiTexParameterivEXT;
void glGetMultiTexParameterivEXT(int texunit, int target, int pname, Pointer<Int32>? params) {
  final _glGetMultiTexParameterivEXT = glad__glGetMultiTexParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Int32>? params)>();
  return _glGetMultiTexParameterivEXT(texunit, target, pname, params);
}

/// ```c
/// define glGetNamedBufferParameterivEXT GLEW_GET_FUN(__glewGetNamedBufferParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC __glewGetNamedBufferParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferParameterivEXT;
void glGetNamedBufferParameterivEXT(int buffer, int pname, Pointer<Int32>? params) {
  final _glGetNamedBufferParameterivEXT = glad__glGetNamedBufferParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Int32>? params)>();
  return _glGetNamedBufferParameterivEXT(buffer, pname, params);
}

/// ```c
/// define glGetNamedBufferPointervEXT GLEW_GET_FUN(__glewGetNamedBufferPointervEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERPOINTERVEXTPROC __glewGetNamedBufferPointervEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferPointervEXT;
void glGetNamedBufferPointervEXT(int buffer, int pname, Pointer<Pointer<Void>>? params) {
  final _glGetNamedBufferPointervEXT = glad__glGetNamedBufferPointervEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Pointer<Void>>? params)>();
  return _glGetNamedBufferPointervEXT(buffer, pname, params);
}

/// ```c
/// define glGetNamedBufferSubDataEXT GLEW_GET_FUN(__glewGetNamedBufferSubDataEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERSUBDATAEXTPROC __glewGetNamedBufferSubDataEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferSubDataEXT;
void glGetNamedBufferSubDataEXT(int buffer, int offset, int size, Pointer<Void>? data) {
  final _glGetNamedBufferSubDataEXT = glad__glGetNamedBufferSubDataEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int offset, int size, Pointer<Void>? data)>();
  return _glGetNamedBufferSubDataEXT(buffer, offset, size, data);
}

/// ```c
/// define glGetNamedFramebufferAttachmentParameterivEXT GLEW_GET_FUN(__glewGetNamedFramebufferAttachmentParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetNamedFramebufferAttachmentParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedFramebufferAttachmentParameterivEXT;
void glGetNamedFramebufferAttachmentParameterivEXT(int framebuffer, int attachment, int pname, Pointer<Int32>? params) {
  final _glGetNamedFramebufferAttachmentParameterivEXT = glad__glGetNamedFramebufferAttachmentParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int framebuffer, int attachment, int pname, Pointer<Int32>? params)>();
  return _glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
}

/// ```c
/// define glGetNamedProgramLocalParameterIivEXT GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC __glewGetNamedProgramLocalParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedProgramLocalParameterIivEXT;
void glGetNamedProgramLocalParameterIivEXT(int program, int target, int index, Pointer<Int32>? params) {
  final _glGetNamedProgramLocalParameterIivEXT = glad__glGetNamedProgramLocalParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Int32>? params)>();
  return _glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
}

/// ```c
/// define glGetNamedProgramLocalParameterIuivEXT GLEW_GET_FUN(__glewGetNamedProgramLocalParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC __glewGetNamedProgramLocalParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedProgramLocalParameterIuivEXT;
void glGetNamedProgramLocalParameterIuivEXT(int program, int target, int index, Pointer<Uint32>? params) {
  final _glGetNamedProgramLocalParameterIuivEXT = glad__glGetNamedProgramLocalParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Uint32>? params)>();
  return _glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
}

/// ```c
/// define glGetNamedProgramLocalParameterdvEXT GLEW_GET_FUN(__glewGetNamedProgramLocalParameterdvEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC __glewGetNamedProgramLocalParameterdvEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedProgramLocalParameterdvEXT;
void glGetNamedProgramLocalParameterdvEXT(int program, int target, int index, Pointer<Double>? params) {
  final _glGetNamedProgramLocalParameterdvEXT = glad__glGetNamedProgramLocalParameterdvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Double>? params)>();
  return _glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
}

/// ```c
/// define glGetNamedProgramLocalParameterfvEXT GLEW_GET_FUN(__glewGetNamedProgramLocalParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC __glewGetNamedProgramLocalParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedProgramLocalParameterfvEXT;
void glGetNamedProgramLocalParameterfvEXT(int program, int target, int index, Pointer<Float>? params) {
  final _glGetNamedProgramLocalParameterfvEXT = glad__glGetNamedProgramLocalParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Float>? params)>();
  return _glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
}

/// ```c
/// define glGetNamedProgramStringEXT GLEW_GET_FUN(__glewGetNamedProgramStringEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDPROGRAMSTRINGEXTPROC __glewGetNamedProgramStringEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedProgramStringEXT;
void glGetNamedProgramStringEXT(int program, int target, int pname, Pointer<Void>? string) {
  final _glGetNamedProgramStringEXT = glad__glGetNamedProgramStringEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 pname, Pointer<Void>? string)>>()
      .asFunction<void Function(int program, int target, int pname, Pointer<Void>? string)>();
  return _glGetNamedProgramStringEXT(program, target, pname, string);
}

/// ```c
/// define glGetNamedProgramivEXT GLEW_GET_FUN(__glewGetNamedProgramivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDPROGRAMIVEXTPROC __glewGetNamedProgramivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedProgramivEXT;
void glGetNamedProgramivEXT(int program, int target, int pname, Pointer<Int32>? params) {
  final _glGetNamedProgramivEXT = glad__glGetNamedProgramivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int target, int pname, Pointer<Int32>? params)>();
  return _glGetNamedProgramivEXT(program, target, pname, params);
}

/// ```c
/// define glGetNamedRenderbufferParameterivEXT GLEW_GET_FUN(__glewGetNamedRenderbufferParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC __glewGetNamedRenderbufferParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedRenderbufferParameterivEXT;
void glGetNamedRenderbufferParameterivEXT(int renderbuffer, int pname, Pointer<Int32>? params) {
  final _glGetNamedRenderbufferParameterivEXT = glad__glGetNamedRenderbufferParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int renderbuffer, int pname, Pointer<Int32>? params)>();
  return _glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
}

/// ```c
/// define glGetPointerIndexedvEXT GLEW_GET_FUN(__glewGetPointerIndexedvEXT)
/// GLEW_FUN_EXPORT PFNGLGETPOINTERINDEXEDVEXTPROC __glewGetPointerIndexedvEXT
/// typedef void (GLAPIENTRY * PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPointerIndexedvEXT;
void glGetPointerIndexedvEXT(int target, int index, Pointer<Pointer<Void>>? params) {
  final _glGetPointerIndexedvEXT = glad__glGetPointerIndexedvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Pointer<Void>>? params)>();
  return _glGetPointerIndexedvEXT(target, index, params);
}

/// ```c
/// define glGetPointeri_vEXT GLEW_GET_FUN(__glewGetPointeri_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETPOINTERI_VEXTPROC __glewGetPointeri_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPointeri_vEXT;
void glGetPointeri_vEXT(int pname, int index, Pointer<Pointer<Void>>? params) {
  final _glGetPointeri_vEXT = glad__glGetPointeri_vEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int pname, int index, Pointer<Pointer<Void>>? params)>();
  return _glGetPointeri_vEXT(pname, index, params);
}

/// ```c
/// define glGetTextureImageEXT GLEW_GET_FUN(__glewGetTextureImageEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREIMAGEEXTPROC __glewGetTextureImageEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureImageEXT;
void glGetTextureImageEXT(int texture, int target, int level, int format, int type, Pointer<Void>? pixels) {
  final _glGetTextureImageEXT = glad__glGetTextureImageEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int format, int type, Pointer<Void>? pixels)>();
  return _glGetTextureImageEXT(texture, target, level, format, type, pixels);
}

/// ```c
/// define glGetTextureLevelParameterfvEXT GLEW_GET_FUN(__glewGetTextureLevelParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC __glewGetTextureLevelParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureLevelParameterfvEXT;
void glGetTextureLevelParameterfvEXT(int texture, int target, int level, int pname, Pointer<Float>? params) {
  final _glGetTextureLevelParameterfvEXT = glad__glGetTextureLevelParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texture, int target, int level, int pname, Pointer<Float>? params)>();
  return _glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
}

/// ```c
/// define glGetTextureLevelParameterivEXT GLEW_GET_FUN(__glewGetTextureLevelParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC __glewGetTextureLevelParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureLevelParameterivEXT;
void glGetTextureLevelParameterivEXT(int texture, int target, int level, int pname, Pointer<Int32>? params) {
  final _glGetTextureLevelParameterivEXT = glad__glGetTextureLevelParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int target, int level, int pname, Pointer<Int32>? params)>();
  return _glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
}

/// ```c
/// define glGetTextureParameterIivEXT GLEW_GET_FUN(__glewGetTextureParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERIIVEXTPROC __glewGetTextureParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterIivEXT;
void glGetTextureParameterIivEXT(int texture, int target, int pname, Pointer<Int32>? params) {
  final _glGetTextureParameterIivEXT = glad__glGetTextureParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Int32>? params)>();
  return _glGetTextureParameterIivEXT(texture, target, pname, params);
}

/// ```c
/// define glGetTextureParameterIuivEXT GLEW_GET_FUN(__glewGetTextureParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERIUIVEXTPROC __glewGetTextureParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterIuivEXT;
void glGetTextureParameterIuivEXT(int texture, int target, int pname, Pointer<Uint32>? params) {
  final _glGetTextureParameterIuivEXT = glad__glGetTextureParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Uint32>? params)>();
  return _glGetTextureParameterIuivEXT(texture, target, pname, params);
}

/// ```c
/// define glGetTextureParameterfvEXT GLEW_GET_FUN(__glewGetTextureParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERFVEXTPROC __glewGetTextureParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterfvEXT;
void glGetTextureParameterfvEXT(int texture, int target, int pname, Pointer<Float>? params) {
  final _glGetTextureParameterfvEXT = glad__glGetTextureParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Float>? params)>();
  return _glGetTextureParameterfvEXT(texture, target, pname, params);
}

/// ```c
/// define glGetTextureParameterivEXT GLEW_GET_FUN(__glewGetTextureParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREPARAMETERIVEXTPROC __glewGetTextureParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureParameterivEXT;
void glGetTextureParameterivEXT(int texture, int target, int pname, Pointer<Int32>? params) {
  final _glGetTextureParameterivEXT = glad__glGetTextureParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Int32>? params)>();
  return _glGetTextureParameterivEXT(texture, target, pname, params);
}

/// ```c
/// define glGetVertexArrayIntegeri_vEXT GLEW_GET_FUN(__glewGetVertexArrayIntegeri_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC __glewGetVertexArrayIntegeri_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayIntegeri_vEXT;
void glGetVertexArrayIntegeri_vEXT(int vaobj, int index, int pname, Pointer<Int32>? param) {
  final _glGetVertexArrayIntegeri_vEXT = glad__glGetVertexArrayIntegeri_vEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int vaobj, int index, int pname, Pointer<Int32>? param)>();
  return _glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
}

/// ```c
/// define glGetVertexArrayIntegervEXT GLEW_GET_FUN(__glewGetVertexArrayIntegervEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYINTEGERVEXTPROC __glewGetVertexArrayIntegervEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayIntegervEXT;
void glGetVertexArrayIntegervEXT(int vaobj, int pname, Pointer<Int32>? param) {
  final _glGetVertexArrayIntegervEXT = glad__glGetVertexArrayIntegervEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int vaobj, int pname, Pointer<Int32>? param)>();
  return _glGetVertexArrayIntegervEXT(vaobj, pname, param);
}

/// ```c
/// define glGetVertexArrayPointeri_vEXT GLEW_GET_FUN(__glewGetVertexArrayPointeri_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC __glewGetVertexArrayPointeri_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void** param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayPointeri_vEXT;
void glGetVertexArrayPointeri_vEXT(int vaobj, int index, int pname, Pointer<Pointer<Void>>? param) {
  final _glGetVertexArrayPointeri_vEXT = glad__glGetVertexArrayPointeri_vEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index, Uint32 pname, Pointer<Pointer<Void>>? param)>>()
      .asFunction<void Function(int vaobj, int index, int pname, Pointer<Pointer<Void>>? param)>();
  return _glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
}

/// ```c
/// define glGetVertexArrayPointervEXT GLEW_GET_FUN(__glewGetVertexArrayPointervEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXARRAYPOINTERVEXTPROC __glewGetVertexArrayPointervEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void** param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexArrayPointervEXT;
void glGetVertexArrayPointervEXT(int vaobj, int pname, Pointer<Pointer<Void>>? param) {
  final _glGetVertexArrayPointervEXT = glad__glGetVertexArrayPointervEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 pname, Pointer<Pointer<Void>>? param)>>()
      .asFunction<void Function(int vaobj, int pname, Pointer<Pointer<Void>>? param)>();
  return _glGetVertexArrayPointervEXT(vaobj, pname, param);
}

/// ```c
/// define glMapNamedBufferEXT GLEW_GET_FUN(__glewMapNamedBufferEXT)
/// GLEW_FUN_EXPORT PFNGLMAPNAMEDBUFFEREXTPROC __glewMapNamedBufferEXT
/// typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapNamedBufferEXT;
Pointer<Void>? glMapNamedBufferEXT(int buffer, int access) {
  final _glMapNamedBufferEXT = glad__glMapNamedBufferEXT!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 buffer, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int buffer, int access)>();
  return _glMapNamedBufferEXT(buffer, access);
}

/// ```c
/// define glMapNamedBufferRangeEXT GLEW_GET_FUN(__glewMapNamedBufferRangeEXT)
/// GLEW_FUN_EXPORT PFNGLMAPNAMEDBUFFERRANGEEXTPROC __glewMapNamedBufferRangeEXT
/// typedef void * (GLAPIENTRY * PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapNamedBufferRangeEXT;
Pointer<Void>? glMapNamedBufferRangeEXT(int buffer, int offset, int length, int access) {
  final _glMapNamedBufferRangeEXT = glad__glMapNamedBufferRangeEXT!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 buffer, Uint64 offset, Uint64 length, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int buffer, int offset, int length, int access)>();
  return _glMapNamedBufferRangeEXT(buffer, offset, length, access);
}

/// ```c
/// define glMatrixFrustumEXT GLEW_GET_FUN(__glewMatrixFrustumEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXFRUSTUMEXTPROC __glewMatrixFrustumEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXFRUSTUMEXTPROC) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixFrustumEXT;
void glMatrixFrustumEXT(int matrixMode, double l, double r, double b, double t, double n, double f) {
  final _glMatrixFrustumEXT = glad__glMatrixFrustumEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Double l, Double r, Double b, Double t, Double n, Double f)>>()
      .asFunction<void Function(int matrixMode, double l, double r, double b, double t, double n, double f)>();
  return _glMatrixFrustumEXT(matrixMode, l, r, b, t, n, f);
}

/// ```c
/// define glMatrixLoadIdentityEXT GLEW_GET_FUN(__glewMatrixLoadIdentityEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOADIDENTITYEXTPROC __glewMatrixLoadIdentityEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum matrixMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoadIdentityEXT;
void glMatrixLoadIdentityEXT(int matrixMode) {
  final _glMatrixLoadIdentityEXT = glad__glMatrixLoadIdentityEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode)>>()
      .asFunction<void Function(int matrixMode)>();
  return _glMatrixLoadIdentityEXT(matrixMode);
}

/// ```c
/// define glMatrixLoadTransposedEXT GLEW_GET_FUN(__glewMatrixLoadTransposedEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOADTRANSPOSEDEXTPROC __glewMatrixLoadTransposedEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum matrixMode, const GLdouble* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoadTransposedEXT;
void glMatrixLoadTransposedEXT(int matrixMode, Pointer<Double>? m) {
  final _glMatrixLoadTransposedEXT = glad__glMatrixLoadTransposedEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Double>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Double>? m)>();
  return _glMatrixLoadTransposedEXT(matrixMode, m);
}

/// ```c
/// define glMatrixLoadTransposefEXT GLEW_GET_FUN(__glewMatrixLoadTransposefEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOADTRANSPOSEFEXTPROC __glewMatrixLoadTransposefEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoadTransposefEXT;
void glMatrixLoadTransposefEXT(int matrixMode, Pointer<Float>? m) {
  final _glMatrixLoadTransposefEXT = glad__glMatrixLoadTransposefEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixLoadTransposefEXT(matrixMode, m);
}

/// ```c
/// define glMatrixLoaddEXT GLEW_GET_FUN(__glewMatrixLoaddEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOADDEXTPROC __glewMatrixLoaddEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOADDEXTPROC) (GLenum matrixMode, const GLdouble* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoaddEXT;
void glMatrixLoaddEXT(int matrixMode, Pointer<Double>? m) {
  final _glMatrixLoaddEXT = glad__glMatrixLoaddEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Double>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Double>? m)>();
  return _glMatrixLoaddEXT(matrixMode, m);
}

/// ```c
/// define glMatrixLoadfEXT GLEW_GET_FUN(__glewMatrixLoadfEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOADFEXTPROC __glewMatrixLoadfEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOADFEXTPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoadfEXT;
void glMatrixLoadfEXT(int matrixMode, Pointer<Float>? m) {
  final _glMatrixLoadfEXT = glad__glMatrixLoadfEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixLoadfEXT(matrixMode, m);
}

/// ```c
/// define glMatrixMultTransposedEXT GLEW_GET_FUN(__glewMatrixMultTransposedEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULTTRANSPOSEDEXTPROC __glewMatrixMultTransposedEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum matrixMode, const GLdouble* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMultTransposedEXT;
void glMatrixMultTransposedEXT(int matrixMode, Pointer<Double>? m) {
  final _glMatrixMultTransposedEXT = glad__glMatrixMultTransposedEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Double>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Double>? m)>();
  return _glMatrixMultTransposedEXT(matrixMode, m);
}

/// ```c
/// define glMatrixMultTransposefEXT GLEW_GET_FUN(__glewMatrixMultTransposefEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULTTRANSPOSEFEXTPROC __glewMatrixMultTransposefEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMultTransposefEXT;
void glMatrixMultTransposefEXT(int matrixMode, Pointer<Float>? m) {
  final _glMatrixMultTransposefEXT = glad__glMatrixMultTransposefEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixMultTransposefEXT(matrixMode, m);
}

/// ```c
/// define glMatrixMultdEXT GLEW_GET_FUN(__glewMatrixMultdEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULTDEXTPROC __glewMatrixMultdEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULTDEXTPROC) (GLenum matrixMode, const GLdouble* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMultdEXT;
void glMatrixMultdEXT(int matrixMode, Pointer<Double>? m) {
  final _glMatrixMultdEXT = glad__glMatrixMultdEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Double>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Double>? m)>();
  return _glMatrixMultdEXT(matrixMode, m);
}

/// ```c
/// define glMatrixMultfEXT GLEW_GET_FUN(__glewMatrixMultfEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULTFEXTPROC __glewMatrixMultfEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULTFEXTPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMultfEXT;
void glMatrixMultfEXT(int matrixMode, Pointer<Float>? m) {
  final _glMatrixMultfEXT = glad__glMatrixMultfEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixMultfEXT(matrixMode, m);
}

/// ```c
/// define glMatrixOrthoEXT GLEW_GET_FUN(__glewMatrixOrthoEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXORTHOEXTPROC __glewMatrixOrthoEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXORTHOEXTPROC) (GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixOrthoEXT;
void glMatrixOrthoEXT(int matrixMode, double l, double r, double b, double t, double n, double f) {
  final _glMatrixOrthoEXT = glad__glMatrixOrthoEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Double l, Double r, Double b, Double t, Double n, Double f)>>()
      .asFunction<void Function(int matrixMode, double l, double r, double b, double t, double n, double f)>();
  return _glMatrixOrthoEXT(matrixMode, l, r, b, t, n, f);
}

/// ```c
/// define glMatrixPopEXT GLEW_GET_FUN(__glewMatrixPopEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXPOPEXTPROC __glewMatrixPopEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXPOPEXTPROC) (GLenum matrixMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixPopEXT;
void glMatrixPopEXT(int matrixMode) {
  final _glMatrixPopEXT = glad__glMatrixPopEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode)>>()
      .asFunction<void Function(int matrixMode)>();
  return _glMatrixPopEXT(matrixMode);
}

/// ```c
/// define glMatrixPushEXT GLEW_GET_FUN(__glewMatrixPushEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXPUSHEXTPROC __glewMatrixPushEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXPUSHEXTPROC) (GLenum matrixMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixPushEXT;
void glMatrixPushEXT(int matrixMode) {
  final _glMatrixPushEXT = glad__glMatrixPushEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode)>>()
      .asFunction<void Function(int matrixMode)>();
  return _glMatrixPushEXT(matrixMode);
}

/// ```c
/// define glMatrixRotatedEXT GLEW_GET_FUN(__glewMatrixRotatedEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXROTATEDEXTPROC __glewMatrixRotatedEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXROTATEDEXTPROC) (GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixRotatedEXT;
void glMatrixRotatedEXT(int matrixMode, double angle, double x, double y, double z) {
  final _glMatrixRotatedEXT = glad__glMatrixRotatedEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Double angle, Double x, Double y, Double z)>>()
      .asFunction<void Function(int matrixMode, double angle, double x, double y, double z)>();
  return _glMatrixRotatedEXT(matrixMode, angle, x, y, z);
}

/// ```c
/// define glMatrixRotatefEXT GLEW_GET_FUN(__glewMatrixRotatefEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXROTATEFEXTPROC __glewMatrixRotatefEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXROTATEFEXTPROC) (GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixRotatefEXT;
void glMatrixRotatefEXT(int matrixMode, double angle, double x, double y, double z) {
  final _glMatrixRotatefEXT = glad__glMatrixRotatefEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Float angle, Float x, Float y, Float z)>>()
      .asFunction<void Function(int matrixMode, double angle, double x, double y, double z)>();
  return _glMatrixRotatefEXT(matrixMode, angle, x, y, z);
}

/// ```c
/// define glMatrixScaledEXT GLEW_GET_FUN(__glewMatrixScaledEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXSCALEDEXTPROC __glewMatrixScaledEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXSCALEDEXTPROC) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixScaledEXT;
void glMatrixScaledEXT(int matrixMode, double x, double y, double z) {
  final _glMatrixScaledEXT = glad__glMatrixScaledEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Double x, Double y, Double z)>>()
      .asFunction<void Function(int matrixMode, double x, double y, double z)>();
  return _glMatrixScaledEXT(matrixMode, x, y, z);
}

/// ```c
/// define glMatrixScalefEXT GLEW_GET_FUN(__glewMatrixScalefEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXSCALEFEXTPROC __glewMatrixScalefEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXSCALEFEXTPROC) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixScalefEXT;
void glMatrixScalefEXT(int matrixMode, double x, double y, double z) {
  final _glMatrixScalefEXT = glad__glMatrixScalefEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Float x, Float y, Float z)>>()
      .asFunction<void Function(int matrixMode, double x, double y, double z)>();
  return _glMatrixScalefEXT(matrixMode, x, y, z);
}

/// ```c
/// define glMatrixTranslatedEXT GLEW_GET_FUN(__glewMatrixTranslatedEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXTRANSLATEDEXTPROC __glewMatrixTranslatedEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixTranslatedEXT;
void glMatrixTranslatedEXT(int matrixMode, double x, double y, double z) {
  final _glMatrixTranslatedEXT = glad__glMatrixTranslatedEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Double x, Double y, Double z)>>()
      .asFunction<void Function(int matrixMode, double x, double y, double z)>();
  return _glMatrixTranslatedEXT(matrixMode, x, y, z);
}

/// ```c
/// define glMatrixTranslatefEXT GLEW_GET_FUN(__glewMatrixTranslatefEXT)
/// GLEW_FUN_EXPORT PFNGLMATRIXTRANSLATEFEXTPROC __glewMatrixTranslatefEXT
/// typedef void (GLAPIENTRY * PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixTranslatefEXT;
void glMatrixTranslatefEXT(int matrixMode, double x, double y, double z) {
  final _glMatrixTranslatefEXT = glad__glMatrixTranslatefEXT!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Float x, Float y, Float z)>>()
      .asFunction<void Function(int matrixMode, double x, double y, double z)>();
  return _glMatrixTranslatefEXT(matrixMode, x, y, z);
}

/// ```c
/// define glMultiTexBufferEXT GLEW_GET_FUN(__glewMultiTexBufferEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXBUFFEREXTPROC __glewMultiTexBufferEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexBufferEXT;
void glMultiTexBufferEXT(int texunit, int target, int internalformat, int buffer) {
  final _glMultiTexBufferEXT = glad__glMultiTexBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 internalformat, Uint32 buffer)>>()
      .asFunction<void Function(int texunit, int target, int internalformat, int buffer)>();
  return _glMultiTexBufferEXT(texunit, target, internalformat, buffer);
}

/// ```c
/// define glMultiTexCoordPointerEXT GLEW_GET_FUN(__glewMultiTexCoordPointerEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORDPOINTEREXTPROC __glewMultiTexCoordPointerEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoordPointerEXT;
void glMultiTexCoordPointerEXT(int texunit, int size, int type, int stride, Pointer<Void>? pointer) {
  final _glMultiTexCoordPointerEXT = glad__glMultiTexCoordPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int texunit, int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}

/// ```c
/// define glMultiTexEnvfEXT GLEW_GET_FUN(__glewMultiTexEnvfEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXENVFEXTPROC __glewMultiTexEnvfEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexEnvfEXT;
void glMultiTexEnvfEXT(int texunit, int target, int pname, double param) {
  final _glMultiTexEnvfEXT = glad__glMultiTexEnvfEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int texunit, int target, int pname, double param)>();
  return _glMultiTexEnvfEXT(texunit, target, pname, param);
}

/// ```c
/// define glMultiTexEnvfvEXT GLEW_GET_FUN(__glewMultiTexEnvfvEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXENVFVEXTPROC __glewMultiTexEnvfvEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexEnvfvEXT;
void glMultiTexEnvfvEXT(int texunit, int target, int pname, Pointer<Float>? params) {
  final _glMultiTexEnvfvEXT = glad__glMultiTexEnvfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Float>? params)>();
  return _glMultiTexEnvfvEXT(texunit, target, pname, params);
}

/// ```c
/// define glMultiTexEnviEXT GLEW_GET_FUN(__glewMultiTexEnviEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXENVIEXTPROC __glewMultiTexEnviEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexEnviEXT;
void glMultiTexEnviEXT(int texunit, int target, int pname, int param) {
  final _glMultiTexEnviEXT = glad__glMultiTexEnviEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int texunit, int target, int pname, int param)>();
  return _glMultiTexEnviEXT(texunit, target, pname, param);
}

/// ```c
/// define glMultiTexEnvivEXT GLEW_GET_FUN(__glewMultiTexEnvivEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXENVIVEXTPROC __glewMultiTexEnvivEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexEnvivEXT;
void glMultiTexEnvivEXT(int texunit, int target, int pname, Pointer<Int32>? params) {
  final _glMultiTexEnvivEXT = glad__glMultiTexEnvivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Int32>? params)>();
  return _glMultiTexEnvivEXT(texunit, target, pname, params);
}

/// ```c
/// define glMultiTexGendEXT GLEW_GET_FUN(__glewMultiTexGendEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXGENDEXTPROC __glewMultiTexGendEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexGendEXT;
void glMultiTexGendEXT(int texunit, int coord, int pname, double param) {
  final _glMultiTexGendEXT = glad__glMultiTexGendEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Double param)>>()
      .asFunction<void Function(int texunit, int coord, int pname, double param)>();
  return _glMultiTexGendEXT(texunit, coord, pname, param);
}

/// ```c
/// define glMultiTexGendvEXT GLEW_GET_FUN(__glewMultiTexGendvEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXGENDVEXTPROC __glewMultiTexGendvEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexGendvEXT;
void glMultiTexGendvEXT(int texunit, int coord, int pname, Pointer<Double>? params) {
  final _glMultiTexGendvEXT = glad__glMultiTexGendvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int texunit, int coord, int pname, Pointer<Double>? params)>();
  return _glMultiTexGendvEXT(texunit, coord, pname, params);
}

/// ```c
/// define glMultiTexGenfEXT GLEW_GET_FUN(__glewMultiTexGenfEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXGENFEXTPROC __glewMultiTexGenfEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexGenfEXT;
void glMultiTexGenfEXT(int texunit, int coord, int pname, double param) {
  final _glMultiTexGenfEXT = glad__glMultiTexGenfEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Float param)>>()
      .asFunction<void Function(int texunit, int coord, int pname, double param)>();
  return _glMultiTexGenfEXT(texunit, coord, pname, param);
}

/// ```c
/// define glMultiTexGenfvEXT GLEW_GET_FUN(__glewMultiTexGenfvEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXGENFVEXTPROC __glewMultiTexGenfvEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexGenfvEXT;
void glMultiTexGenfvEXT(int texunit, int coord, int pname, Pointer<Float>? params) {
  final _glMultiTexGenfvEXT = glad__glMultiTexGenfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int texunit, int coord, int pname, Pointer<Float>? params)>();
  return _glMultiTexGenfvEXT(texunit, coord, pname, params);
}

/// ```c
/// define glMultiTexGeniEXT GLEW_GET_FUN(__glewMultiTexGeniEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXGENIEXTPROC __glewMultiTexGeniEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexGeniEXT;
void glMultiTexGeniEXT(int texunit, int coord, int pname, int param) {
  final _glMultiTexGeniEXT = glad__glMultiTexGeniEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int texunit, int coord, int pname, int param)>();
  return _glMultiTexGeniEXT(texunit, coord, pname, param);
}

/// ```c
/// define glMultiTexGenivEXT GLEW_GET_FUN(__glewMultiTexGenivEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXGENIVEXTPROC __glewMultiTexGenivEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexGenivEXT;
void glMultiTexGenivEXT(int texunit, int coord, int pname, Pointer<Int32>? params) {
  final _glMultiTexGenivEXT = glad__glMultiTexGenivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 coord, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int coord, int pname, Pointer<Int32>? params)>();
  return _glMultiTexGenivEXT(texunit, coord, pname, params);
}

/// ```c
/// define glMultiTexImage1DEXT GLEW_GET_FUN(__glewMultiTexImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXIMAGE1DEXTPROC __glewMultiTexImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexImage1DEXT;
void glMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, Pointer<Void>? pixels) {
  final _glMultiTexImage1DEXT = glad__glMultiTexImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 internalformat, Uint32 width, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
}

/// ```c
/// define glMultiTexImage2DEXT GLEW_GET_FUN(__glewMultiTexImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXIMAGE2DEXTPROC __glewMultiTexImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexImage2DEXT;
void glMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, Pointer<Void>? pixels) {
  final _glMultiTexImage2DEXT = glad__glMultiTexImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 internalformat, Uint32 width, Uint32 height, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

/// ```c
/// define glMultiTexImage3DEXT GLEW_GET_FUN(__glewMultiTexImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXIMAGE3DEXTPROC __glewMultiTexImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexImage3DEXT;
void glMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels) {
  final _glMultiTexImage3DEXT = glad__glMultiTexImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

/// ```c
/// define glMultiTexParameterIivEXT GLEW_GET_FUN(__glewMultiTexParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXPARAMETERIIVEXTPROC __glewMultiTexParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexParameterIivEXT;
void glMultiTexParameterIivEXT(int texunit, int target, int pname, Pointer<Int32>? params) {
  final _glMultiTexParameterIivEXT = glad__glMultiTexParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Int32>? params)>();
  return _glMultiTexParameterIivEXT(texunit, target, pname, params);
}

/// ```c
/// define glMultiTexParameterIuivEXT GLEW_GET_FUN(__glewMultiTexParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXPARAMETERIUIVEXTPROC __glewMultiTexParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexParameterIuivEXT;
void glMultiTexParameterIuivEXT(int texunit, int target, int pname, Pointer<Uint32>? params) {
  final _glMultiTexParameterIuivEXT = glad__glMultiTexParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Uint32>? params)>();
  return _glMultiTexParameterIuivEXT(texunit, target, pname, params);
}

/// ```c
/// define glMultiTexParameterfEXT GLEW_GET_FUN(__glewMultiTexParameterfEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXPARAMETERFEXTPROC __glewMultiTexParameterfEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexParameterfEXT;
void glMultiTexParameterfEXT(int texunit, int target, int pname, double param) {
  final _glMultiTexParameterfEXT = glad__glMultiTexParameterfEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int texunit, int target, int pname, double param)>();
  return _glMultiTexParameterfEXT(texunit, target, pname, param);
}

/// ```c
/// define glMultiTexParameterfvEXT GLEW_GET_FUN(__glewMultiTexParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXPARAMETERFVEXTPROC __glewMultiTexParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexParameterfvEXT;
void glMultiTexParameterfvEXT(int texunit, int target, int pname, Pointer<Float>? param) {
  final _glMultiTexParameterfvEXT = glad__glMultiTexParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Float>? param)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Float>? param)>();
  return _glMultiTexParameterfvEXT(texunit, target, pname, param);
}

/// ```c
/// define glMultiTexParameteriEXT GLEW_GET_FUN(__glewMultiTexParameteriEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXPARAMETERIEXTPROC __glewMultiTexParameteriEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexParameteriEXT;
void glMultiTexParameteriEXT(int texunit, int target, int pname, int param) {
  final _glMultiTexParameteriEXT = glad__glMultiTexParameteriEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int texunit, int target, int pname, int param)>();
  return _glMultiTexParameteriEXT(texunit, target, pname, param);
}

/// ```c
/// define glMultiTexParameterivEXT GLEW_GET_FUN(__glewMultiTexParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXPARAMETERIVEXTPROC __glewMultiTexParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexParameterivEXT;
void glMultiTexParameterivEXT(int texunit, int target, int pname, Pointer<Int32>? param) {
  final _glMultiTexParameterivEXT = glad__glMultiTexParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int texunit, int target, int pname, Pointer<Int32>? param)>();
  return _glMultiTexParameterivEXT(texunit, target, pname, param);
}

/// ```c
/// define glMultiTexRenderbufferEXT GLEW_GET_FUN(__glewMultiTexRenderbufferEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXRENDERBUFFEREXTPROC __glewMultiTexRenderbufferEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexRenderbufferEXT;
void glMultiTexRenderbufferEXT(int texunit, int target, int renderbuffer) {
  final _glMultiTexRenderbufferEXT = glad__glMultiTexRenderbufferEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int texunit, int target, int renderbuffer)>();
  return _glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
}

/// ```c
/// define glMultiTexSubImage1DEXT GLEW_GET_FUN(__glewMultiTexSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXSUBIMAGE1DEXTPROC __glewMultiTexSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexSubImage1DEXT;
void glMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels) {
  final _glMultiTexSubImage1DEXT = glad__glMultiTexSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels)>();
  return _glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
}

/// ```c
/// define glMultiTexSubImage2DEXT GLEW_GET_FUN(__glewMultiTexSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXSUBIMAGE2DEXTPROC __glewMultiTexSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexSubImage2DEXT;
void glMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels) {
  final _glMultiTexSubImage2DEXT = glad__glMultiTexSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels)>();
  return _glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

/// ```c
/// define glMultiTexSubImage3DEXT GLEW_GET_FUN(__glewMultiTexSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLMULTITEXSUBIMAGE3DEXTPROC __glewMultiTexSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexSubImage3DEXT;
void glMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels) {
  final _glMultiTexSubImage3DEXT = glad__glMultiTexSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texunit, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels)>();
  return _glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/// ```c
/// define glNamedBufferDataEXT GLEW_GET_FUN(__glewNamedBufferDataEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERDATAEXTPROC __glewNamedBufferDataEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferDataEXT;
void glNamedBufferDataEXT(int buffer, int size, Pointer<Void>? data, int usage) {
  final _glNamedBufferDataEXT = glad__glNamedBufferDataEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 size, Pointer<Void>? data, Uint32 usage)>>()
      .asFunction<void Function(int buffer, int size, Pointer<Void>? data, int usage)>();
  return _glNamedBufferDataEXT(buffer, size, data, usage);
}

/// ```c
/// define glNamedBufferSubDataEXT GLEW_GET_FUN(__glewNamedBufferSubDataEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERSUBDATAEXTPROC __glewNamedBufferSubDataEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferSubDataEXT;
void glNamedBufferSubDataEXT(int buffer, int offset, int size, Pointer<Void>? data) {
  final _glNamedBufferSubDataEXT = glad__glNamedBufferSubDataEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int buffer, int offset, int size, Pointer<Void>? data)>();
  return _glNamedBufferSubDataEXT(buffer, offset, size, data);
}

/// ```c
/// define glNamedCopyBufferSubDataEXT GLEW_GET_FUN(__glewNamedCopyBufferSubDataEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC __glewNamedCopyBufferSubDataEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedCopyBufferSubDataEXT;
void glNamedCopyBufferSubDataEXT(int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size) {
  final _glNamedCopyBufferSubDataEXT = glad__glNamedCopyBufferSubDataEXT!
      .cast<NativeFunction<Void Function(Uint32 readBuffer, Uint32 writeBuffer, Uint64 readOffset, Uint64 writeOffset, Uint64 size)>>()
      .asFunction<void Function(int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size)>();
  return _glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

/// ```c
/// define glNamedFramebufferRenderbufferEXT GLEW_GET_FUN(__glewNamedFramebufferRenderbufferEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC __glewNamedFramebufferRenderbufferEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferRenderbufferEXT;
void glNamedFramebufferRenderbufferEXT(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer) {
  final _glNamedFramebufferRenderbufferEXT = glad__glNamedFramebufferRenderbufferEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 renderbuffertarget, Uint32 renderbuffer)>>()
      .asFunction<void Function(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer)>();
  return _glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

/// ```c
/// define glNamedFramebufferTexture1DEXT GLEW_GET_FUN(__glewNamedFramebufferTexture1DEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC __glewNamedFramebufferTexture1DEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTexture1DEXT;
void glNamedFramebufferTexture1DEXT(int framebuffer, int attachment, int textarget, int texture, int level) {
  final _glNamedFramebufferTexture1DEXT = glad__glNamedFramebufferTexture1DEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int framebuffer, int attachment, int textarget, int texture, int level)>();
  return _glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
}

/// ```c
/// define glNamedFramebufferTexture2DEXT GLEW_GET_FUN(__glewNamedFramebufferTexture2DEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC __glewNamedFramebufferTexture2DEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTexture2DEXT;
void glNamedFramebufferTexture2DEXT(int framebuffer, int attachment, int textarget, int texture, int level) {
  final _glNamedFramebufferTexture2DEXT = glad__glNamedFramebufferTexture2DEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int framebuffer, int attachment, int textarget, int texture, int level)>();
  return _glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
}

/// ```c
/// define glNamedFramebufferTexture3DEXT GLEW_GET_FUN(__glewNamedFramebufferTexture3DEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC __glewNamedFramebufferTexture3DEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTexture3DEXT;
void glNamedFramebufferTexture3DEXT(int framebuffer, int attachment, int textarget, int texture, int level, int zoffset) {
  final _glNamedFramebufferTexture3DEXT = glad__glNamedFramebufferTexture3DEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level, Int32 zoffset)>>()
      .asFunction<void Function(int framebuffer, int attachment, int textarget, int texture, int level, int zoffset)>();
  return _glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
}

/// ```c
/// define glNamedFramebufferTextureEXT GLEW_GET_FUN(__glewNamedFramebufferTextureEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC __glewNamedFramebufferTextureEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTextureEXT;
void glNamedFramebufferTextureEXT(int framebuffer, int attachment, int texture, int level) {
  final _glNamedFramebufferTextureEXT = glad__glNamedFramebufferTextureEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int framebuffer, int attachment, int texture, int level)>();
  return _glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
}

/// ```c
/// define glNamedFramebufferTextureFaceEXT GLEW_GET_FUN(__glewNamedFramebufferTextureFaceEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC __glewNamedFramebufferTextureFaceEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTextureFaceEXT;
void glNamedFramebufferTextureFaceEXT(int framebuffer, int attachment, int texture, int level, int face) {
  final _glNamedFramebufferTextureFaceEXT = glad__glNamedFramebufferTextureFaceEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 texture, Int32 level, Uint32 face)>>()
      .asFunction<void Function(int framebuffer, int attachment, int texture, int level, int face)>();
  return _glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
}

/// ```c
/// define glNamedFramebufferTextureLayerEXT GLEW_GET_FUN(__glewNamedFramebufferTextureLayerEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC __glewNamedFramebufferTextureLayerEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferTextureLayerEXT;
void glNamedFramebufferTextureLayerEXT(int framebuffer, int attachment, int texture, int level, int layer) {
  final _glNamedFramebufferTextureLayerEXT = glad__glNamedFramebufferTextureLayerEXT!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 attachment, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int framebuffer, int attachment, int texture, int level, int layer)>();
  return _glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
}

/// ```c
/// define glNamedProgramLocalParameter4dEXT GLEW_GET_FUN(__glewNamedProgramLocalParameter4dEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC __glewNamedProgramLocalParameter4dEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameter4dEXT;
void glNamedProgramLocalParameter4dEXT(int program, int target, int index, double x, double y, double z, double w) {
  final _glNamedProgramLocalParameter4dEXT = glad__glNamedProgramLocalParameter4dEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int program, int target, int index, double x, double y, double z, double w)>();
  return _glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
}

/// ```c
/// define glNamedProgramLocalParameter4dvEXT GLEW_GET_FUN(__glewNamedProgramLocalParameter4dvEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC __glewNamedProgramLocalParameter4dvEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameter4dvEXT;
void glNamedProgramLocalParameter4dvEXT(int program, int target, int index, Pointer<Double>? params) {
  final _glNamedProgramLocalParameter4dvEXT = glad__glNamedProgramLocalParameter4dvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Double>? params)>();
  return _glNamedProgramLocalParameter4dvEXT(program, target, index, params);
}

/// ```c
/// define glNamedProgramLocalParameter4fEXT GLEW_GET_FUN(__glewNamedProgramLocalParameter4fEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC __glewNamedProgramLocalParameter4fEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameter4fEXT;
void glNamedProgramLocalParameter4fEXT(int program, int target, int index, double x, double y, double z, double w) {
  final _glNamedProgramLocalParameter4fEXT = glad__glNamedProgramLocalParameter4fEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int program, int target, int index, double x, double y, double z, double w)>();
  return _glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
}

/// ```c
/// define glNamedProgramLocalParameter4fvEXT GLEW_GET_FUN(__glewNamedProgramLocalParameter4fvEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC __glewNamedProgramLocalParameter4fvEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameter4fvEXT;
void glNamedProgramLocalParameter4fvEXT(int program, int target, int index, Pointer<Float>? params) {
  final _glNamedProgramLocalParameter4fvEXT = glad__glNamedProgramLocalParameter4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Float>? params)>();
  return _glNamedProgramLocalParameter4fvEXT(program, target, index, params);
}

/// ```c
/// define glNamedProgramLocalParameterI4iEXT GLEW_GET_FUN(__glewNamedProgramLocalParameterI4iEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC __glewNamedProgramLocalParameterI4iEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameterI4iEXT;
void glNamedProgramLocalParameterI4iEXT(int program, int target, int index, int x, int y, int z, int w) {
  final _glNamedProgramLocalParameterI4iEXT = glad__glNamedProgramLocalParameterI4iEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int program, int target, int index, int x, int y, int z, int w)>();
  return _glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
}

/// ```c
/// define glNamedProgramLocalParameterI4ivEXT GLEW_GET_FUN(__glewNamedProgramLocalParameterI4ivEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC __glewNamedProgramLocalParameterI4ivEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameterI4ivEXT;
void glNamedProgramLocalParameterI4ivEXT(int program, int target, int index, Pointer<Int32>? params) {
  final _glNamedProgramLocalParameterI4ivEXT = glad__glNamedProgramLocalParameterI4ivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Int32>? params)>();
  return _glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
}

/// ```c
/// define glNamedProgramLocalParameterI4uiEXT GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uiEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC __glewNamedProgramLocalParameterI4uiEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameterI4uiEXT;
void glNamedProgramLocalParameterI4uiEXT(int program, int target, int index, int x, int y, int z, int w) {
  final _glNamedProgramLocalParameterI4uiEXT = glad__glNamedProgramLocalParameterI4uiEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w)>>()
      .asFunction<void Function(int program, int target, int index, int x, int y, int z, int w)>();
  return _glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
}

/// ```c
/// define glNamedProgramLocalParameterI4uivEXT GLEW_GET_FUN(__glewNamedProgramLocalParameterI4uivEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC __glewNamedProgramLocalParameterI4uivEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameterI4uivEXT;
void glNamedProgramLocalParameterI4uivEXT(int program, int target, int index, Pointer<Uint32>? params) {
  final _glNamedProgramLocalParameterI4uivEXT = glad__glNamedProgramLocalParameterI4uivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int target, int index, Pointer<Uint32>? params)>();
  return _glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
}

/// ```c
/// define glNamedProgramLocalParameters4fvEXT GLEW_GET_FUN(__glewNamedProgramLocalParameters4fvEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC __glewNamedProgramLocalParameters4fvEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParameters4fvEXT;
void glNamedProgramLocalParameters4fvEXT(int program, int target, int index, int count, Pointer<Float>? params) {
  final _glNamedProgramLocalParameters4fvEXT = glad__glNamedProgramLocalParameters4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Uint32 count, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int target, int index, int count, Pointer<Float>? params)>();
  return _glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
}

/// ```c
/// define glNamedProgramLocalParametersI4ivEXT GLEW_GET_FUN(__glewNamedProgramLocalParametersI4ivEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC __glewNamedProgramLocalParametersI4ivEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParametersI4ivEXT;
void glNamedProgramLocalParametersI4ivEXT(int program, int target, int index, int count, Pointer<Int32>? params) {
  final _glNamedProgramLocalParametersI4ivEXT = glad__glNamedProgramLocalParametersI4ivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Uint32 count, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int target, int index, int count, Pointer<Int32>? params)>();
  return _glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
}

/// ```c
/// define glNamedProgramLocalParametersI4uivEXT GLEW_GET_FUN(__glewNamedProgramLocalParametersI4uivEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC __glewNamedProgramLocalParametersI4uivEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramLocalParametersI4uivEXT;
void glNamedProgramLocalParametersI4uivEXT(int program, int target, int index, int count, Pointer<Uint32>? params) {
  final _glNamedProgramLocalParametersI4uivEXT = glad__glNamedProgramLocalParametersI4uivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 index, Uint32 count, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int target, int index, int count, Pointer<Uint32>? params)>();
  return _glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
}

/// ```c
/// define glNamedProgramStringEXT GLEW_GET_FUN(__glewNamedProgramStringEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDPROGRAMSTRINGEXTPROC __glewNamedProgramStringEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedProgramStringEXT;
void glNamedProgramStringEXT(int program, int target, int format, int len, Pointer<Void>? string) {
  final _glNamedProgramStringEXT = glad__glNamedProgramStringEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 target, Uint32 format, Uint32 len, Pointer<Void>? string)>>()
      .asFunction<void Function(int program, int target, int format, int len, Pointer<Void>? string)>();
  return _glNamedProgramStringEXT(program, target, format, len, string);
}

/// ```c
/// define glNamedRenderbufferStorageEXT GLEW_GET_FUN(__glewNamedRenderbufferStorageEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC __glewNamedRenderbufferStorageEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedRenderbufferStorageEXT;
void glNamedRenderbufferStorageEXT(int renderbuffer, int internalformat, int width, int height) {
  final _glNamedRenderbufferStorageEXT = glad__glNamedRenderbufferStorageEXT!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int renderbuffer, int internalformat, int width, int height)>();
  return _glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
}

/// ```c
/// define glNamedRenderbufferStorageMultisampleCoverageEXT GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleCoverageEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC __glewNamedRenderbufferStorageMultisampleCoverageEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedRenderbufferStorageMultisampleCoverageEXT;
void glNamedRenderbufferStorageMultisampleCoverageEXT(int renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height) {
  final _glNamedRenderbufferStorageMultisampleCoverageEXT = glad__glNamedRenderbufferStorageMultisampleCoverageEXT!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 coverageSamples, Uint32 colorSamples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height)>();
  return _glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

/// ```c
/// define glNamedRenderbufferStorageMultisampleEXT GLEW_GET_FUN(__glewNamedRenderbufferStorageMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewNamedRenderbufferStorageMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedRenderbufferStorageMultisampleEXT;
void glNamedRenderbufferStorageMultisampleEXT(int renderbuffer, int samples, int internalformat, int width, int height) {
  final _glNamedRenderbufferStorageMultisampleEXT = glad__glNamedRenderbufferStorageMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 renderbuffer, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int renderbuffer, int samples, int internalformat, int width, int height)>();
  return _glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
}

/// ```c
/// define glProgramUniform1fEXT GLEW_GET_FUN(__glewProgramUniform1fEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1FEXTPROC __glewProgramUniform1fEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1fEXT;
void glProgramUniform1fEXT(int program, int location, double v0) {
  final _glProgramUniform1fEXT = glad__glProgramUniform1fEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float v0)>>()
      .asFunction<void Function(int program, int location, double v0)>();
  return _glProgramUniform1fEXT(program, location, v0);
}

/// ```c
/// define glProgramUniform1fvEXT GLEW_GET_FUN(__glewProgramUniform1fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1FVEXTPROC __glewProgramUniform1fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1fvEXT;
void glProgramUniform1fvEXT(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform1fvEXT = glad__glProgramUniform1fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform1fvEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform1iEXT GLEW_GET_FUN(__glewProgramUniform1iEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1IEXTPROC __glewProgramUniform1iEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1iEXT;
void glProgramUniform1iEXT(int program, int location, int v0) {
  final _glProgramUniform1iEXT = glad__glProgramUniform1iEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 v0)>>()
      .asFunction<void Function(int program, int location, int v0)>();
  return _glProgramUniform1iEXT(program, location, v0);
}

/// ```c
/// define glProgramUniform1ivEXT GLEW_GET_FUN(__glewProgramUniform1ivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1IVEXTPROC __glewProgramUniform1ivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1ivEXT;
void glProgramUniform1ivEXT(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform1ivEXT = glad__glProgramUniform1ivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform1ivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform1uiEXT GLEW_GET_FUN(__glewProgramUniform1uiEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UIEXTPROC __glewProgramUniform1uiEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1uiEXT;
void glProgramUniform1uiEXT(int program, int location, int v0) {
  final _glProgramUniform1uiEXT = glad__glProgramUniform1uiEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 v0)>>()
      .asFunction<void Function(int program, int location, int v0)>();
  return _glProgramUniform1uiEXT(program, location, v0);
}

/// ```c
/// define glProgramUniform1uivEXT GLEW_GET_FUN(__glewProgramUniform1uivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UIVEXTPROC __glewProgramUniform1uivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1uivEXT;
void glProgramUniform1uivEXT(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform1uivEXT = glad__glProgramUniform1uivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform1uivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform2fEXT GLEW_GET_FUN(__glewProgramUniform2fEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2FEXTPROC __glewProgramUniform2fEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2fEXT;
void glProgramUniform2fEXT(int program, int location, double v0, double v1) {
  final _glProgramUniform2fEXT = glad__glProgramUniform2fEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float v0, Float v1)>>()
      .asFunction<void Function(int program, int location, double v0, double v1)>();
  return _glProgramUniform2fEXT(program, location, v0, v1);
}

/// ```c
/// define glProgramUniform2fvEXT GLEW_GET_FUN(__glewProgramUniform2fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2FVEXTPROC __glewProgramUniform2fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2fvEXT;
void glProgramUniform2fvEXT(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform2fvEXT = glad__glProgramUniform2fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform2fvEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform2iEXT GLEW_GET_FUN(__glewProgramUniform2iEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2IEXTPROC __glewProgramUniform2iEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2iEXT;
void glProgramUniform2iEXT(int program, int location, int v0, int v1) {
  final _glProgramUniform2iEXT = glad__glProgramUniform2iEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1)>>()
      .asFunction<void Function(int program, int location, int v0, int v1)>();
  return _glProgramUniform2iEXT(program, location, v0, v1);
}

/// ```c
/// define glProgramUniform2ivEXT GLEW_GET_FUN(__glewProgramUniform2ivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2IVEXTPROC __glewProgramUniform2ivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2ivEXT;
void glProgramUniform2ivEXT(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform2ivEXT = glad__glProgramUniform2ivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform2ivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform2uiEXT GLEW_GET_FUN(__glewProgramUniform2uiEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UIEXTPROC __glewProgramUniform2uiEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2uiEXT;
void glProgramUniform2uiEXT(int program, int location, int v0, int v1) {
  final _glProgramUniform2uiEXT = glad__glProgramUniform2uiEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1)>>()
      .asFunction<void Function(int program, int location, int v0, int v1)>();
  return _glProgramUniform2uiEXT(program, location, v0, v1);
}

/// ```c
/// define glProgramUniform2uivEXT GLEW_GET_FUN(__glewProgramUniform2uivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UIVEXTPROC __glewProgramUniform2uivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2uivEXT;
void glProgramUniform2uivEXT(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform2uivEXT = glad__glProgramUniform2uivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform2uivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform3fEXT GLEW_GET_FUN(__glewProgramUniform3fEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3FEXTPROC __glewProgramUniform3fEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3fEXT;
void glProgramUniform3fEXT(int program, int location, double v0, double v1, double v2) {
  final _glProgramUniform3fEXT = glad__glProgramUniform3fEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float v0, Float v1, Float v2)>>()
      .asFunction<void Function(int program, int location, double v0, double v1, double v2)>();
  return _glProgramUniform3fEXT(program, location, v0, v1, v2);
}

/// ```c
/// define glProgramUniform3fvEXT GLEW_GET_FUN(__glewProgramUniform3fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3FVEXTPROC __glewProgramUniform3fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3fvEXT;
void glProgramUniform3fvEXT(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform3fvEXT = glad__glProgramUniform3fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform3fvEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform3iEXT GLEW_GET_FUN(__glewProgramUniform3iEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3IEXTPROC __glewProgramUniform3iEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3iEXT;
void glProgramUniform3iEXT(int program, int location, int v0, int v1, int v2) {
  final _glProgramUniform3iEXT = glad__glProgramUniform3iEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)>>()
      .asFunction<void Function(int program, int location, int v0, int v1, int v2)>();
  return _glProgramUniform3iEXT(program, location, v0, v1, v2);
}

/// ```c
/// define glProgramUniform3ivEXT GLEW_GET_FUN(__glewProgramUniform3ivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3IVEXTPROC __glewProgramUniform3ivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3ivEXT;
void glProgramUniform3ivEXT(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform3ivEXT = glad__glProgramUniform3ivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform3ivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform3uiEXT GLEW_GET_FUN(__glewProgramUniform3uiEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UIEXTPROC __glewProgramUniform3uiEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3uiEXT;
void glProgramUniform3uiEXT(int program, int location, int v0, int v1, int v2) {
  final _glProgramUniform3uiEXT = glad__glProgramUniform3uiEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1, Uint32 v2)>>()
      .asFunction<void Function(int program, int location, int v0, int v1, int v2)>();
  return _glProgramUniform3uiEXT(program, location, v0, v1, v2);
}

/// ```c
/// define glProgramUniform3uivEXT GLEW_GET_FUN(__glewProgramUniform3uivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UIVEXTPROC __glewProgramUniform3uivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3uivEXT;
void glProgramUniform3uivEXT(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform3uivEXT = glad__glProgramUniform3uivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform3uivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform4fEXT GLEW_GET_FUN(__glewProgramUniform4fEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4FEXTPROC __glewProgramUniform4fEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4fEXT;
void glProgramUniform4fEXT(int program, int location, double v0, double v1, double v2, double v3) {
  final _glProgramUniform4fEXT = glad__glProgramUniform4fEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Float v0, Float v1, Float v2, Float v3)>>()
      .asFunction<void Function(int program, int location, double v0, double v1, double v2, double v3)>();
  return _glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
}

/// ```c
/// define glProgramUniform4fvEXT GLEW_GET_FUN(__glewProgramUniform4fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4FVEXTPROC __glewProgramUniform4fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4fvEXT;
void glProgramUniform4fvEXT(int program, int location, int count, Pointer<Float>? value) {
  final _glProgramUniform4fvEXT = glad__glProgramUniform4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Float>? value)>();
  return _glProgramUniform4fvEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform4iEXT GLEW_GET_FUN(__glewProgramUniform4iEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4IEXTPROC __glewProgramUniform4iEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4iEXT;
void glProgramUniform4iEXT(int program, int location, int v0, int v1, int v2, int v3) {
  final _glProgramUniform4iEXT = glad__glProgramUniform4iEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)>>()
      .asFunction<void Function(int program, int location, int v0, int v1, int v2, int v3)>();
  return _glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
}

/// ```c
/// define glProgramUniform4ivEXT GLEW_GET_FUN(__glewProgramUniform4ivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4IVEXTPROC __glewProgramUniform4ivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4ivEXT;
void glProgramUniform4ivEXT(int program, int location, int count, Pointer<Int32>? value) {
  final _glProgramUniform4ivEXT = glad__glProgramUniform4ivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int32>? value)>();
  return _glProgramUniform4ivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniform4uiEXT GLEW_GET_FUN(__glewProgramUniform4uiEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UIEXTPROC __glewProgramUniform4uiEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4uiEXT;
void glProgramUniform4uiEXT(int program, int location, int v0, int v1, int v2, int v3) {
  final _glProgramUniform4uiEXT = glad__glProgramUniform4uiEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 v0, Uint32 v1, Uint32 v2, Uint32 v3)>>()
      .asFunction<void Function(int program, int location, int v0, int v1, int v2, int v3)>();
  return _glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
}

/// ```c
/// define glProgramUniform4uivEXT GLEW_GET_FUN(__glewProgramUniform4uivEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UIVEXTPROC __glewProgramUniform4uivEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4uivEXT;
void glProgramUniform4uivEXT(int program, int location, int count, Pointer<Uint32>? value) {
  final _glProgramUniform4uivEXT = glad__glProgramUniform4uivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint32>? value)>();
  return _glProgramUniform4uivEXT(program, location, count, value);
}

/// ```c
/// define glProgramUniformMatrix2fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix2fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC __glewProgramUniformMatrix2fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2fvEXT;
void glProgramUniformMatrix2fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix2fvEXT = glad__glProgramUniformMatrix2fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2x3fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix2x3fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC __glewProgramUniformMatrix2x3fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2x3fvEXT;
void glProgramUniformMatrix2x3fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix2x3fvEXT = glad__glProgramUniformMatrix2x3fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix2x4fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix2x4fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC __glewProgramUniformMatrix2x4fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix2x4fvEXT;
void glProgramUniformMatrix2x4fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix2x4fvEXT = glad__glProgramUniformMatrix2x4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix3fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC __glewProgramUniformMatrix3fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3fvEXT;
void glProgramUniformMatrix3fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix3fvEXT = glad__glProgramUniformMatrix3fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3x2fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix3x2fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC __glewProgramUniformMatrix3x2fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3x2fvEXT;
void glProgramUniformMatrix3x2fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix3x2fvEXT = glad__glProgramUniformMatrix3x2fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix3x4fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix3x4fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC __glewProgramUniformMatrix3x4fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix3x4fvEXT;
void glProgramUniformMatrix3x4fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix3x4fvEXT = glad__glProgramUniformMatrix3x4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix4fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC __glewProgramUniformMatrix4fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4fvEXT;
void glProgramUniformMatrix4fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix4fvEXT = glad__glProgramUniformMatrix4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4x2fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix4x2fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC __glewProgramUniformMatrix4x2fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4x2fvEXT;
void glProgramUniformMatrix4x2fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix4x2fvEXT = glad__glProgramUniformMatrix4x2fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glProgramUniformMatrix4x3fvEXT GLEW_GET_FUN(__glewProgramUniformMatrix4x3fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC __glewProgramUniformMatrix4x3fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformMatrix4x3fvEXT;
void glProgramUniformMatrix4x3fvEXT(int program, int location, int count, int transpose, Pointer<Float>? value) {
  final _glProgramUniformMatrix4x3fvEXT = glad__glProgramUniformMatrix4x3fvEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int program, int location, int count, int transpose, Pointer<Float>? value)>();
  return _glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
}

/// ```c
/// define glPushClientAttribDefaultEXT GLEW_GET_FUN(__glewPushClientAttribDefaultEXT)
/// GLEW_FUN_EXPORT PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC __glewPushClientAttribDefaultEXT
/// typedef void (GLAPIENTRY * PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPushClientAttribDefaultEXT;
void glPushClientAttribDefaultEXT(int mask) {
  final _glPushClientAttribDefaultEXT = glad__glPushClientAttribDefaultEXT!
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return _glPushClientAttribDefaultEXT(mask);
}

/// ```c
/// define glTextureBufferEXT GLEW_GET_FUN(__glewTextureBufferEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREBUFFEREXTPROC __glewTextureBufferEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureBufferEXT;
void glTextureBufferEXT(int texture, int target, int internalformat, int buffer) {
  final _glTextureBufferEXT = glad__glTextureBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 internalformat, Uint32 buffer)>>()
      .asFunction<void Function(int texture, int target, int internalformat, int buffer)>();
  return _glTextureBufferEXT(texture, target, internalformat, buffer);
}

/// ```c
/// define glTextureImage1DEXT GLEW_GET_FUN(__glewTextureImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE1DEXTPROC __glewTextureImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage1DEXT;
void glTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTextureImage1DEXT = glad__glTextureImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 internalformat, Uint32 width, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int width, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
}

/// ```c
/// define glTextureImage2DEXT GLEW_GET_FUN(__glewTextureImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE2DEXTPROC __glewTextureImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage2DEXT;
void glTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTextureImage2DEXT = glad__glTextureImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 internalformat, Uint32 width, Uint32 height, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
}

/// ```c
/// define glTextureImage3DEXT GLEW_GET_FUN(__glewTextureImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE3DEXTPROC __glewTextureImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage3DEXT;
void glTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTextureImage3DEXT = glad__glTextureImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

/// ```c
/// define glTextureParameterIivEXT GLEW_GET_FUN(__glewTextureParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIIVEXTPROC __glewTextureParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterIivEXT;
void glTextureParameterIivEXT(int texture, int target, int pname, Pointer<Int32>? params) {
  final _glTextureParameterIivEXT = glad__glTextureParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Int32>? params)>();
  return _glTextureParameterIivEXT(texture, target, pname, params);
}

/// ```c
/// define glTextureParameterIuivEXT GLEW_GET_FUN(__glewTextureParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIUIVEXTPROC __glewTextureParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterIuivEXT;
void glTextureParameterIuivEXT(int texture, int target, int pname, Pointer<Uint32>? params) {
  final _glTextureParameterIuivEXT = glad__glTextureParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Uint32>? params)>();
  return _glTextureParameterIuivEXT(texture, target, pname, params);
}

/// ```c
/// define glTextureParameterfEXT GLEW_GET_FUN(__glewTextureParameterfEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERFEXTPROC __glewTextureParameterfEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterfEXT;
void glTextureParameterfEXT(int texture, int target, int pname, double param) {
  final _glTextureParameterfEXT = glad__glTextureParameterfEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int texture, int target, int pname, double param)>();
  return _glTextureParameterfEXT(texture, target, pname, param);
}

/// ```c
/// define glTextureParameterfvEXT GLEW_GET_FUN(__glewTextureParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERFVEXTPROC __glewTextureParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterfvEXT;
void glTextureParameterfvEXT(int texture, int target, int pname, Pointer<Float>? param) {
  final _glTextureParameterfvEXT = glad__glTextureParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Float>? param)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Float>? param)>();
  return _glTextureParameterfvEXT(texture, target, pname, param);
}

/// ```c
/// define glTextureParameteriEXT GLEW_GET_FUN(__glewTextureParameteriEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIEXTPROC __glewTextureParameteriEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameteriEXT;
void glTextureParameteriEXT(int texture, int target, int pname, int param) {
  final _glTextureParameteriEXT = glad__glTextureParameteriEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int texture, int target, int pname, int param)>();
  return _glTextureParameteriEXT(texture, target, pname, param);
}

/// ```c
/// define glTextureParameterivEXT GLEW_GET_FUN(__glewTextureParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPARAMETERIVEXTPROC __glewTextureParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint* param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureParameterivEXT;
void glTextureParameterivEXT(int texture, int target, int pname, Pointer<Int32>? param) {
  final _glTextureParameterivEXT = glad__glTextureParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 pname, Pointer<Int32>? param)>>()
      .asFunction<void Function(int texture, int target, int pname, Pointer<Int32>? param)>();
  return _glTextureParameterivEXT(texture, target, pname, param);
}

/// ```c
/// define glTextureRenderbufferEXT GLEW_GET_FUN(__glewTextureRenderbufferEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURERENDERBUFFEREXTPROC __glewTextureRenderbufferEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureRenderbufferEXT;
void glTextureRenderbufferEXT(int texture, int target, int renderbuffer) {
  final _glTextureRenderbufferEXT = glad__glTextureRenderbufferEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int texture, int target, int renderbuffer)>();
  return _glTextureRenderbufferEXT(texture, target, renderbuffer);
}

/// ```c
/// define glTextureSubImage1DEXT GLEW_GET_FUN(__glewTextureSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESUBIMAGE1DEXTPROC __glewTextureSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureSubImage1DEXT;
void glTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels) {
  final _glTextureSubImage1DEXT = glad__glTextureSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
}

/// ```c
/// define glTextureSubImage2DEXT GLEW_GET_FUN(__glewTextureSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESUBIMAGE2DEXTPROC __glewTextureSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureSubImage2DEXT;
void glTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels) {
  final _glTextureSubImage2DEXT = glad__glTextureSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

/// ```c
/// define glTextureSubImage3DEXT GLEW_GET_FUN(__glewTextureSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESUBIMAGE3DEXTPROC __glewTextureSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureSubImage3DEXT;
void glTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels) {
  final _glTextureSubImage3DEXT = glad__glTextureSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels)>();
  return _glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/// ```c
/// define glUnmapNamedBufferEXT GLEW_GET_FUN(__glewUnmapNamedBufferEXT)
/// GLEW_FUN_EXPORT PFNGLUNMAPNAMEDBUFFEREXTPROC __glewUnmapNamedBufferEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnmapNamedBufferEXT;
int glUnmapNamedBufferEXT(int buffer) {
  final _glUnmapNamedBufferEXT = glad__glUnmapNamedBufferEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return _glUnmapNamedBufferEXT(buffer);
}

/// ```c
/// define glVertexArrayColorOffsetEXT GLEW_GET_FUN(__glewVertexArrayColorOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYCOLOROFFSETEXTPROC __glewVertexArrayColorOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayColorOffsetEXT;
void glVertexArrayColorOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) {
  final _glVertexArrayColorOffsetEXT = glad__glVertexArrayColorOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int size, int type, int stride, int offset)>();
  return _glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

/// ```c
/// define glVertexArrayEdgeFlagOffsetEXT GLEW_GET_FUN(__glewVertexArrayEdgeFlagOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC __glewVertexArrayEdgeFlagOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayEdgeFlagOffsetEXT;
void glVertexArrayEdgeFlagOffsetEXT(int vaobj, int buffer, int stride, int offset) {
  final _glVertexArrayEdgeFlagOffsetEXT = glad__glVertexArrayEdgeFlagOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int stride, int offset)>();
  return _glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
}

/// ```c
/// define glVertexArrayFogCoordOffsetEXT GLEW_GET_FUN(__glewVertexArrayFogCoordOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC __glewVertexArrayFogCoordOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayFogCoordOffsetEXT;
void glVertexArrayFogCoordOffsetEXT(int vaobj, int buffer, int type, int stride, int offset) {
  final _glVertexArrayFogCoordOffsetEXT = glad__glVertexArrayFogCoordOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int type, int stride, int offset)>();
  return _glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
}

/// ```c
/// define glVertexArrayIndexOffsetEXT GLEW_GET_FUN(__glewVertexArrayIndexOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYINDEXOFFSETEXTPROC __glewVertexArrayIndexOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayIndexOffsetEXT;
void glVertexArrayIndexOffsetEXT(int vaobj, int buffer, int type, int stride, int offset) {
  final _glVertexArrayIndexOffsetEXT = glad__glVertexArrayIndexOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int type, int stride, int offset)>();
  return _glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
}

/// ```c
/// define glVertexArrayMultiTexCoordOffsetEXT GLEW_GET_FUN(__glewVertexArrayMultiTexCoordOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC __glewVertexArrayMultiTexCoordOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayMultiTexCoordOffsetEXT;
void glVertexArrayMultiTexCoordOffsetEXT(int vaobj, int buffer, int texunit, int size, int type, int stride, int offset) {
  final _glVertexArrayMultiTexCoordOffsetEXT = glad__glVertexArrayMultiTexCoordOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 texunit, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int texunit, int size, int type, int stride, int offset)>();
  return _glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
}

/// ```c
/// define glVertexArrayNormalOffsetEXT GLEW_GET_FUN(__glewVertexArrayNormalOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYNORMALOFFSETEXTPROC __glewVertexArrayNormalOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayNormalOffsetEXT;
void glVertexArrayNormalOffsetEXT(int vaobj, int buffer, int type, int stride, int offset) {
  final _glVertexArrayNormalOffsetEXT = glad__glVertexArrayNormalOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int type, int stride, int offset)>();
  return _glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
}

/// ```c
/// define glVertexArraySecondaryColorOffsetEXT GLEW_GET_FUN(__glewVertexArraySecondaryColorOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC __glewVertexArraySecondaryColorOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArraySecondaryColorOffsetEXT;
void glVertexArraySecondaryColorOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) {
  final _glVertexArraySecondaryColorOffsetEXT = glad__glVertexArraySecondaryColorOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int size, int type, int stride, int offset)>();
  return _glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

/// ```c
/// define glVertexArrayTexCoordOffsetEXT GLEW_GET_FUN(__glewVertexArrayTexCoordOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC __glewVertexArrayTexCoordOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayTexCoordOffsetEXT;
void glVertexArrayTexCoordOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) {
  final _glVertexArrayTexCoordOffsetEXT = glad__glVertexArrayTexCoordOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int size, int type, int stride, int offset)>();
  return _glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

/// ```c
/// define glVertexArrayVertexAttribDivisorEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribDivisorEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC __glewVertexArrayVertexAttribDivisorEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribDivisorEXT;
void glVertexArrayVertexAttribDivisorEXT(int vaobj, int index, int divisor) {
  final _glVertexArrayVertexAttribDivisorEXT = glad__glVertexArrayVertexAttribDivisorEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int vaobj, int index, int divisor)>();
  return _glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
}

/// ```c
/// define glVertexArrayVertexAttribIOffsetEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribIOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC __glewVertexArrayVertexAttribIOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribIOffsetEXT;
void glVertexArrayVertexAttribIOffsetEXT(int vaobj, int buffer, int index, int size, int type, int stride, int offset) {
  final _glVertexArrayVertexAttribIOffsetEXT = glad__glVertexArrayVertexAttribIOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 index, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int index, int size, int type, int stride, int offset)>();
  return _glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

/// ```c
/// define glVertexArrayVertexAttribOffsetEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC __glewVertexArrayVertexAttribOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribOffsetEXT;
void glVertexArrayVertexAttribOffsetEXT(int vaobj, int buffer, int index, int size, int type, int normalized, int stride, int offset) {
  final _glVertexArrayVertexAttribOffsetEXT = glad__glVertexArrayVertexAttribOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 index, Int32 size, Uint32 type, Uint8 normalized, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int index, int size, int type, int normalized, int stride, int offset)>();
  return _glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
}

/// ```c
/// define glVertexArrayVertexOffsetEXT GLEW_GET_FUN(__glewVertexArrayVertexOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC __glewVertexArrayVertexOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexOffsetEXT;
void glVertexArrayVertexOffsetEXT(int vaobj, int buffer, int size, int type, int stride, int offset) {
  final _glVertexArrayVertexOffsetEXT = glad__glVertexArrayVertexOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int size, int type, int stride, int offset)>();
  return _glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

/// ----------------------- GL_EXT_discard_framebuffer ----------------------
/// ```c
/// define glDiscardFramebufferEXT GLEW_GET_FUN(__glewDiscardFramebufferEXT)
/// GLEW_FUN_EXPORT PFNGLDISCARDFRAMEBUFFEREXTPROC __glewDiscardFramebufferEXT
/// typedef void (GLAPIENTRY * PFNGLDISCARDFRAMEBUFFEREXTPROC) (GLenum target, GLsizei numAttachments, const GLenum* attachments)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDiscardFramebufferEXT;
void glDiscardFramebufferEXT(int target, int numAttachments, Pointer<Uint32>? attachments) {
  final _glDiscardFramebufferEXT = glad__glDiscardFramebufferEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 numAttachments, Pointer<Uint32>? attachments)>>()
      .asFunction<void Function(int target, int numAttachments, Pointer<Uint32>? attachments)>();
  return _glDiscardFramebufferEXT(target, numAttachments, attachments);
}

/// -------------------------- GL_EXT_draw_buffers --------------------------
/// ```c
/// define glDrawBuffersEXT GLEW_GET_FUN(__glewDrawBuffersEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERSEXTPROC __glewDrawBuffersEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSEXTPROC) (GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBuffersEXT;
void glDrawBuffersEXT(int n, Pointer<Uint32>? bufs) {
  final _glDrawBuffersEXT = glad__glDrawBuffersEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? bufs)>();
  return _glDrawBuffersEXT(n, bufs);
}

/// -------------------------- GL_EXT_draw_buffers2 -------------------------
/// ```c
/// define glColorMaskIndexedEXT GLEW_GET_FUN(__glewColorMaskIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLCOLORMASKINDEXEDEXTPROC __glewColorMaskIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorMaskIndexedEXT;
void glColorMaskIndexedEXT(int buf, int r, int g, int b, int a) {
  final _glColorMaskIndexedEXT = glad__glColorMaskIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint8 r, Uint8 g, Uint8 b, Uint8 a)>>()
      .asFunction<void Function(int buf, int r, int g, int b, int a)>();
  return _glColorMaskIndexedEXT(buf, r, g, b, a);
}

/// ```c
/// define glDisableIndexedEXT GLEW_GET_FUN(__glewDisableIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLEINDEXEDEXTPROC __glewDisableIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableIndexedEXT;
void glDisableIndexedEXT(int target, int index) {
  final _glDisableIndexedEXT = glad__glDisableIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glDisableIndexedEXT(target, index);
}

/// ```c
/// define glEnableIndexedEXT GLEW_GET_FUN(__glewEnableIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLENABLEINDEXEDEXTPROC __glewEnableIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableIndexedEXT;
void glEnableIndexedEXT(int target, int index) {
  final _glEnableIndexedEXT = glad__glEnableIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glEnableIndexedEXT(target, index);
}

/// ```c
/// define glGetBooleanIndexedvEXT GLEW_GET_FUN(__glewGetBooleanIndexedvEXT)
/// GLEW_FUN_EXPORT PFNGLGETBOOLEANINDEXEDVEXTPROC __glewGetBooleanIndexedvEXT
/// typedef void (GLAPIENTRY * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum value, GLuint index, GLboolean* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBooleanIndexedvEXT;
void glGetBooleanIndexedvEXT(int value, int index, Pointer<Uint8>? data) {
  final _glGetBooleanIndexedvEXT = glad__glGetBooleanIndexedvEXT!
      .cast<NativeFunction<Void Function(Uint32 value, Uint32 index, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int value, int index, Pointer<Uint8>? data)>();
  return _glGetBooleanIndexedvEXT(value, index, data);
}

/// ```c
/// define glGetIntegerIndexedvEXT GLEW_GET_FUN(__glewGetIntegerIndexedvEXT)
/// GLEW_FUN_EXPORT PFNGLGETINTEGERINDEXEDVEXTPROC __glewGetIntegerIndexedvEXT
/// typedef void (GLAPIENTRY * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum value, GLuint index, GLint* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetIntegerIndexedvEXT;
void glGetIntegerIndexedvEXT(int value, int index, Pointer<Int32>? data) {
  final _glGetIntegerIndexedvEXT = glad__glGetIntegerIndexedvEXT!
      .cast<NativeFunction<Void Function(Uint32 value, Uint32 index, Pointer<Int32>? data)>>()
      .asFunction<void Function(int value, int index, Pointer<Int32>? data)>();
  return _glGetIntegerIndexedvEXT(value, index, data);
}

/// ```c
/// define glIsEnabledIndexedEXT GLEW_GET_FUN(__glewIsEnabledIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLISENABLEDINDEXEDEXTPROC __glewIsEnabledIndexedEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsEnabledIndexedEXT;
int glIsEnabledIndexedEXT(int target, int index) {
  final _glIsEnabledIndexedEXT = glad__glIsEnabledIndexedEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 target, Uint32 index)>>()
      .asFunction<int Function(int target, int index)>();
  return _glIsEnabledIndexedEXT(target, index);
}

/// ---------------------- GL_EXT_draw_buffers_indexed ----------------------
/// ```c
/// define glBlendEquationSeparateiEXT GLEW_GET_FUN(__glewBlendEquationSeparateiEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEIEXTPROC __glewBlendEquationSeparateiEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEIEXTPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationSeparateiEXT;
void glBlendEquationSeparateiEXT(int buf, int modeRGB, int modeAlpha) {
  final _glBlendEquationSeparateiEXT = glad__glBlendEquationSeparateiEXT!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 modeRGB, Uint32 modeAlpha)>>()
      .asFunction<void Function(int buf, int modeRGB, int modeAlpha)>();
  return _glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);
}

/// ```c
/// define glBlendEquationiEXT GLEW_GET_FUN(__glewBlendEquationiEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDEQUATIONIEXTPROC __glewBlendEquationiEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONIEXTPROC) (GLuint buf, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendEquationiEXT;
void glBlendEquationiEXT(int buf, int mode) {
  final _glBlendEquationiEXT = glad__glBlendEquationiEXT!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 mode)>>()
      .asFunction<void Function(int buf, int mode)>();
  return _glBlendEquationiEXT(buf, mode);
}

/// ```c
/// define glBlendFuncSeparateiEXT GLEW_GET_FUN(__glewBlendFuncSeparateiEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEIEXTPROC __glewBlendFuncSeparateiEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEIEXTPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFuncSeparateiEXT;
void glBlendFuncSeparateiEXT(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
  final _glBlendFuncSeparateiEXT = glad__glBlendFuncSeparateiEXT!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 srcRGB, Uint32 dstRGB, Uint32 srcAlpha, Uint32 dstAlpha)>>()
      .asFunction<void Function(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)>();
  return _glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

/// ```c
/// define glBlendFunciEXT GLEW_GET_FUN(__glewBlendFunciEXT)
/// GLEW_FUN_EXPORT PFNGLBLENDFUNCIEXTPROC __glewBlendFunciEXT
/// typedef void (GLAPIENTRY * PFNGLBLENDFUNCIEXTPROC) (GLuint buf, GLenum src, GLenum dst)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendFunciEXT;
void glBlendFunciEXT(int buf, int src, int dst) {
  final _glBlendFunciEXT = glad__glBlendFunciEXT!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint32 src, Uint32 dst)>>()
      .asFunction<void Function(int buf, int src, int dst)>();
  return _glBlendFunciEXT(buf, src, dst);
}

/// ```c
/// define glColorMaskiEXT GLEW_GET_FUN(__glewColorMaskiEXT)
/// GLEW_FUN_EXPORT PFNGLCOLORMASKIEXTPROC __glewColorMaskiEXT
/// typedef void (GLAPIENTRY * PFNGLCOLORMASKIEXTPROC) (GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorMaskiEXT;
void glColorMaskiEXT(int buf, int r, int g, int b, int a) {
  final _glColorMaskiEXT = glad__glColorMaskiEXT!
      .cast<NativeFunction<Void Function(Uint32 buf, Uint8 r, Uint8 g, Uint8 b, Uint8 a)>>()
      .asFunction<void Function(int buf, int r, int g, int b, int a)>();
  return _glColorMaskiEXT(buf, r, g, b, a);
}

/// ```c
/// define glDisableiEXT GLEW_GET_FUN(__glewDisableiEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLEIEXTPROC __glewDisableiEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLEIEXTPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableiEXT;
void glDisableiEXT(int target, int index) {
  final _glDisableiEXT = glad__glDisableiEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glDisableiEXT(target, index);
}

/// ```c
/// define glEnableiEXT GLEW_GET_FUN(__glewEnableiEXT)
/// GLEW_FUN_EXPORT PFNGLENABLEIEXTPROC __glewEnableiEXT
/// typedef void (GLAPIENTRY * PFNGLENABLEIEXTPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableiEXT;
void glEnableiEXT(int target, int index) {
  final _glEnableiEXT = glad__glEnableiEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glEnableiEXT(target, index);
}

/// ```c
/// define glIsEnablediEXT GLEW_GET_FUN(__glewIsEnablediEXT)
/// GLEW_FUN_EXPORT PFNGLISENABLEDIEXTPROC __glewIsEnablediEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDIEXTPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsEnablediEXT;
int glIsEnablediEXT(int target, int index) {
  final _glIsEnablediEXT = glad__glIsEnablediEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 target, Uint32 index)>>()
      .asFunction<int Function(int target, int index)>();
  return _glIsEnablediEXT(target, index);
}

/// -------------------- GL_EXT_draw_elements_base_vertex -------------------
/// ```c
/// define glDrawElementsBaseVertexEXT GLEW_GET_FUN(__glewDrawElementsBaseVertexEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSBASEVERTEXEXTPROC __glewDrawElementsBaseVertexEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSBASEVERTEXEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsBaseVertexEXT;
void glDrawElementsBaseVertexEXT(int mode, int count, int type, Pointer<Void>? indices, int basevertex) {
  final _glDrawElementsBaseVertexEXT = glad__glDrawElementsBaseVertexEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Int32 basevertex)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int basevertex)>();
  return _glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
}

/// ```c
/// define glDrawElementsInstancedBaseVertexEXT GLEW_GET_FUN(__glewDrawElementsInstancedBaseVertexEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC __glewDrawElementsInstancedBaseVertexEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedBaseVertexEXT;
void glDrawElementsInstancedBaseVertexEXT(int mode, int count, int type, Pointer<Void>? indices, int instancecount, int basevertex) {
  final _glDrawElementsInstancedBaseVertexEXT = glad__glDrawElementsInstancedBaseVertexEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 instancecount, Int32 basevertex)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int instancecount, int basevertex)>();
  return _glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);
}

/// ```c
/// define glDrawRangeElementsBaseVertexEXT GLEW_GET_FUN(__glewDrawRangeElementsBaseVertexEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC __glewDrawRangeElementsBaseVertexEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawRangeElementsBaseVertexEXT;
void glDrawRangeElementsBaseVertexEXT(int mode, int start, int end, int count, int type, Pointer<Void>? indices, int basevertex) {
  final _glDrawRangeElementsBaseVertexEXT = glad__glDrawRangeElementsBaseVertexEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count, Uint32 type, Pointer<Void>? indices, Int32 basevertex)>>()
      .asFunction<void Function(int mode, int start, int end, int count, int type, Pointer<Void>? indices, int basevertex)>();
  return _glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
}

/// ```c
/// define glMultiDrawElementsBaseVertexEXT GLEW_GET_FUN(__glewMultiDrawElementsBaseVertexEXT)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC __glewMultiDrawElementsBaseVertexEXT
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC) (GLenum mode, const GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsBaseVertexEXT;
void glMultiDrawElementsBaseVertexEXT(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount, Pointer<Int32>? basevertex) {
  final _glMultiDrawElementsBaseVertexEXT = glad__glMultiDrawElementsBaseVertexEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Uint32>? count, Uint32 type, Pointer<Pointer<Void>>? indices, Uint32 primcount, Pointer<Int32>? basevertex)>>()
      .asFunction<void Function(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount, Pointer<Int32>? basevertex)>();
  return _glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex);
}

/// ------------------------- GL_EXT_draw_instanced -------------------------
/// ```c
/// define glDrawArraysInstancedEXT GLEW_GET_FUN(__glewDrawArraysInstancedEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDEXTPROC __glewDrawArraysInstancedEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstancedEXT;
void glDrawArraysInstancedEXT(int mode, int start, int count, int primcount) {
  final _glDrawArraysInstancedEXT = glad__glDrawArraysInstancedEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 start, Uint32 count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int start, int count, int primcount)>();
  return _glDrawArraysInstancedEXT(mode, start, count, primcount);
}

/// ```c
/// define glDrawElementsInstancedEXT GLEW_GET_FUN(__glewDrawElementsInstancedEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glewDrawElementsInstancedEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedEXT;
void glDrawElementsInstancedEXT(int mode, int count, int type, Pointer<Void>? indices, int primcount) {
  final _glDrawElementsInstancedEXT = glad__glDrawElementsInstancedEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount)>();
  return _glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
}

/// ----------------------- GL_EXT_draw_range_elements ----------------------
/// ```c
/// define glDrawRangeElementsEXT GLEW_GET_FUN(__glewDrawRangeElementsEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSEXTPROC __glewDrawRangeElementsEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawRangeElementsEXT;
void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, Pointer<Void>? indices) {
  final _glDrawRangeElementsEXT = glad__glDrawRangeElementsEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 start, Uint32 end, Uint32 count, Uint32 type, Pointer<Void>? indices)>>()
      .asFunction<void Function(int mode, int start, int end, int count, int type, Pointer<Void>? indices)>();
  return _glDrawRangeElementsEXT(mode, start, end, count, type, indices);
}

/// ```c
/// define glBufferStorageExternalEXT GLEW_GET_FUN(__glewBufferStorageExternalEXT)
/// GLEW_FUN_EXPORT PFNGLBUFFERSTORAGEEXTERNALEXTPROC __glewBufferStorageExternalEXT
/// typedef void (GLAPIENTRY * PFNGLBUFFERSTORAGEEXTERNALEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferStorageExternalEXT;
void glBufferStorageExternalEXT(int target, int offset, int size, Pointer<Void>? clientBuffer, int flags) {
  final _glBufferStorageExternalEXT = glad__glBufferStorageExternalEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 size, Pointer<Void>? clientBuffer, Uint32 flags)>>()
      .asFunction<void Function(int target, int offset, int size, Pointer<Void>? clientBuffer, int flags)>();
  return _glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
}

/// ```c
/// define glNamedBufferStorageExternalEXT GLEW_GET_FUN(__glewNamedBufferStorageExternalEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC __glewNamedBufferStorageExternalEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferStorageExternalEXT;
void glNamedBufferStorageExternalEXT(int buffer, int offset, int size, Pointer<Void>? clientBuffer, int flags) {
  final _glNamedBufferStorageExternalEXT = glad__glNamedBufferStorageExternalEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? clientBuffer, Uint32 flags)>>()
      .asFunction<void Function(int buffer, int offset, int size, Pointer<Void>? clientBuffer, int flags)>();
  return _glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
}

/// ---------------------------- GL_EXT_fog_coord ---------------------------
/// ```c
/// define glFogCoordPointerEXT GLEW_GET_FUN(__glewFogCoordPointerEXT)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTEREXTPROC __glewFogCoordPointerEXT
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordPointerEXT;
void glFogCoordPointerEXT(int type, int stride, Pointer<Void>? pointer) {
  final _glFogCoordPointerEXT = glad__glFogCoordPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, Pointer<Void>? pointer)>();
  return _glFogCoordPointerEXT(type, stride, pointer);
}

/// ```c
/// define glFogCoorddEXT GLEW_GET_FUN(__glewFogCoorddEXT)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDDEXTPROC __glewFogCoorddEXT
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDDEXTPROC) (GLdouble coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoorddEXT;
void glFogCoorddEXT(double coord) {
  final _glFogCoorddEXT = glad__glFogCoorddEXT!
      .cast<NativeFunction<Void Function(Double coord)>>()
      .asFunction<void Function(double coord)>();
  return _glFogCoorddEXT(coord);
}

/// ```c
/// define glFogCoorddvEXT GLEW_GET_FUN(__glewFogCoorddvEXT)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDDVEXTPROC __glewFogCoorddvEXT
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoorddvEXT;
void glFogCoorddvEXT(Pointer<Double>? coord) {
  final _glFogCoorddvEXT = glad__glFogCoorddvEXT!
      .cast<NativeFunction<Void Function(Pointer<Double>? coord)>>()
      .asFunction<void Function(Pointer<Double>? coord)>();
  return _glFogCoorddvEXT(coord);
}

/// ```c
/// define glFogCoordfEXT GLEW_GET_FUN(__glewFogCoordfEXT)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDFEXTPROC __glewFogCoordfEXT
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDFEXTPROC) (GLfloat coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordfEXT;
void glFogCoordfEXT(double coord) {
  final _glFogCoordfEXT = glad__glFogCoordfEXT!
      .cast<NativeFunction<Void Function(Float coord)>>()
      .asFunction<void Function(double coord)>();
  return _glFogCoordfEXT(coord);
}

/// ```c
/// define glFogCoordfvEXT GLEW_GET_FUN(__glewFogCoordfvEXT)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDFVEXTPROC __glewFogCoordfvEXT
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordfvEXT;
void glFogCoordfvEXT(Pointer<Float>? coord) {
  final _glFogCoordfvEXT = glad__glFogCoordfvEXT!
      .cast<NativeFunction<Void Function(Pointer<Float>? coord)>>()
      .asFunction<void Function(Pointer<Float>? coord)>();
  return _glFogCoordfvEXT(coord);
}

/// ------------------------ GL_EXT_fragment_lighting -----------------------
/// ```c
/// define glFragmentColorMaterialEXT GLEW_GET_FUN(__glewFragmentColorMaterialEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTCOLORMATERIALEXTPROC __glewFragmentColorMaterialEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALEXTPROC) (GLenum face, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentColorMaterialEXT;
void glFragmentColorMaterialEXT(int face, int mode) {
  final _glFragmentColorMaterialEXT = glad__glFragmentColorMaterialEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return _glFragmentColorMaterialEXT(face, mode);
}

/// ```c
/// define glFragmentLightModelfEXT GLEW_GET_FUN(__glewFragmentLightModelfEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFEXTPROC __glewFragmentLightModelfEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFEXTPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModelfEXT;
void glFragmentLightModelfEXT(int pname, double param) {
  final _glFragmentLightModelfEXT = glad__glFragmentLightModelfEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glFragmentLightModelfEXT(pname, param);
}

/// ```c
/// define glFragmentLightModelfvEXT GLEW_GET_FUN(__glewFragmentLightModelfvEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glewFragmentLightModelfvEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVEXTPROC) (GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModelfvEXT;
void glFragmentLightModelfvEXT(int pname, Pointer<Float>? params) {
  final _glFragmentLightModelfvEXT = glad__glFragmentLightModelfvEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glFragmentLightModelfvEXT(pname, params);
}

/// ```c
/// define glFragmentLightModeliEXT GLEW_GET_FUN(__glewFragmentLightModeliEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIEXTPROC __glewFragmentLightModeliEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIEXTPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModeliEXT;
void glFragmentLightModeliEXT(int pname, int param) {
  final _glFragmentLightModeliEXT = glad__glFragmentLightModeliEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glFragmentLightModeliEXT(pname, param);
}

/// ```c
/// define glFragmentLightModelivEXT GLEW_GET_FUN(__glewFragmentLightModelivEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glewFragmentLightModelivEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVEXTPROC) (GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModelivEXT;
void glFragmentLightModelivEXT(int pname, Pointer<Int32>? params) {
  final _glFragmentLightModelivEXT = glad__glFragmentLightModelivEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glFragmentLightModelivEXT(pname, params);
}

/// ```c
/// define glFragmentLightfEXT GLEW_GET_FUN(__glewFragmentLightfEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFEXTPROC __glewFragmentLightfEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFEXTPROC) (GLenum light, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightfEXT;
void glFragmentLightfEXT(int light, int pname, double param) {
  final _glFragmentLightfEXT = glad__glFragmentLightfEXT!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Float param)>>()
      .asFunction<void Function(int light, int pname, double param)>();
  return _glFragmentLightfEXT(light, pname, param);
}

/// ```c
/// define glFragmentLightfvEXT GLEW_GET_FUN(__glewFragmentLightfvEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFVEXTPROC __glewFragmentLightfvEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightfvEXT;
void glFragmentLightfvEXT(int light, int pname, Pointer<Float>? params) {
  final _glFragmentLightfvEXT = glad__glFragmentLightfvEXT!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Float>? params)>();
  return _glFragmentLightfvEXT(light, pname, params);
}

/// ```c
/// define glFragmentLightiEXT GLEW_GET_FUN(__glewFragmentLightiEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIEXTPROC __glewFragmentLightiEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIEXTPROC) (GLenum light, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightiEXT;
void glFragmentLightiEXT(int light, int pname, int param) {
  final _glFragmentLightiEXT = glad__glFragmentLightiEXT!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int light, int pname, int param)>();
  return _glFragmentLightiEXT(light, pname, param);
}

/// ```c
/// define glFragmentLightivEXT GLEW_GET_FUN(__glewFragmentLightivEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIVEXTPROC __glewFragmentLightivEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightivEXT;
void glFragmentLightivEXT(int light, int pname, Pointer<Int32>? params) {
  final _glFragmentLightivEXT = glad__glFragmentLightivEXT!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Int32>? params)>();
  return _glFragmentLightivEXT(light, pname, params);
}

/// ```c
/// define glFragmentMaterialfEXT GLEW_GET_FUN(__glewFragmentMaterialfEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFEXTPROC __glewFragmentMaterialfEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFEXTPROC) (GLenum face, GLenum pname, const GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialfEXT;
void glFragmentMaterialfEXT(int face, int pname, double param) {
  final _glFragmentMaterialfEXT = glad__glFragmentMaterialfEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Float param)>>()
      .asFunction<void Function(int face, int pname, double param)>();
  return _glFragmentMaterialfEXT(face, pname, param);
}

/// ```c
/// define glFragmentMaterialfvEXT GLEW_GET_FUN(__glewFragmentMaterialfvEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFVEXTPROC __glewFragmentMaterialfvEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialfvEXT;
void glFragmentMaterialfvEXT(int face, int pname, Pointer<Float>? params) {
  final _glFragmentMaterialfvEXT = glad__glFragmentMaterialfvEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Float>? params)>();
  return _glFragmentMaterialfvEXT(face, pname, params);
}

/// ```c
/// define glFragmentMaterialiEXT GLEW_GET_FUN(__glewFragmentMaterialiEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIEXTPROC __glewFragmentMaterialiEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIEXTPROC) (GLenum face, GLenum pname, const GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialiEXT;
void glFragmentMaterialiEXT(int face, int pname, int param) {
  final _glFragmentMaterialiEXT = glad__glFragmentMaterialiEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int face, int pname, int param)>();
  return _glFragmentMaterialiEXT(face, pname, param);
}

/// ```c
/// define glFragmentMaterialivEXT GLEW_GET_FUN(__glewFragmentMaterialivEXT)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIVEXTPROC __glewFragmentMaterialivEXT
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialivEXT;
void glFragmentMaterialivEXT(int face, int pname, Pointer<Int32>? params) {
  final _glFragmentMaterialivEXT = glad__glFragmentMaterialivEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? params)>();
  return _glFragmentMaterialivEXT(face, pname, params);
}

/// ```c
/// define glGetFragmentLightfvEXT GLEW_GET_FUN(__glewGetFragmentLightfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTFVEXTPROC __glewGetFragmentLightfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentLightfvEXT;
void glGetFragmentLightfvEXT(int light, int pname, Pointer<Float>? params) {
  final _glGetFragmentLightfvEXT = glad__glGetFragmentLightfvEXT!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Float>? params)>();
  return _glGetFragmentLightfvEXT(light, pname, params);
}

/// ```c
/// define glGetFragmentLightivEXT GLEW_GET_FUN(__glewGetFragmentLightivEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTIVEXTPROC __glewGetFragmentLightivEXT
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentLightivEXT;
void glGetFragmentLightivEXT(int light, int pname, Pointer<Int32>? params) {
  final _glGetFragmentLightivEXT = glad__glGetFragmentLightivEXT!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Int32>? params)>();
  return _glGetFragmentLightivEXT(light, pname, params);
}

/// ```c
/// define glGetFragmentMaterialfvEXT GLEW_GET_FUN(__glewGetFragmentMaterialfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALFVEXTPROC __glewGetFragmentMaterialfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentMaterialfvEXT;
void glGetFragmentMaterialfvEXT(int face, int pname, Pointer<Float>? params) {
  final _glGetFragmentMaterialfvEXT = glad__glGetFragmentMaterialfvEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Float>? params)>();
  return _glGetFragmentMaterialfvEXT(face, pname, params);
}

/// ```c
/// define glGetFragmentMaterialivEXT GLEW_GET_FUN(__glewGetFragmentMaterialivEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALIVEXTPROC __glewGetFragmentMaterialivEXT
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentMaterialivEXT;
void glGetFragmentMaterialivEXT(int face, int pname, Pointer<Int32>? params) {
  final _glGetFragmentMaterialivEXT = glad__glGetFragmentMaterialivEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? params)>();
  return _glGetFragmentMaterialivEXT(face, pname, params);
}

/// ```c
/// define glLightEnviEXT GLEW_GET_FUN(__glewLightEnviEXT)
/// GLEW_FUN_EXPORT PFNGLLIGHTENVIEXTPROC __glewLightEnviEXT
/// typedef void (GLAPIENTRY * PFNGLLIGHTENVIEXTPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLightEnviEXT;
void glLightEnviEXT(int pname, int param) {
  final _glLightEnviEXT = glad__glLightEnviEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glLightEnviEXT(pname, param);
}

/// ------------------------ GL_EXT_framebuffer_blit ------------------------
/// ```c
/// define glBlitFramebufferEXT GLEW_GET_FUN(__glewBlitFramebufferEXT)
/// GLEW_FUN_EXPORT PFNGLBLITFRAMEBUFFEREXTPROC __glewBlitFramebufferEXT
/// typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlitFramebufferEXT;
void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
  final _glBlitFramebufferEXT = glad__glBlitFramebufferEXT!
      .cast<NativeFunction<Void Function(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Uint32 mask, Uint32 filter)>>()
      .asFunction<void Function(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)>();
  return _glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/// --------------------- GL_EXT_framebuffer_multisample --------------------
/// ```c
/// define glRenderbufferStorageMultisampleEXT GLEW_GET_FUN(__glewRenderbufferStorageMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewRenderbufferStorageMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageMultisampleEXT;
void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height) {
  final _glRenderbufferStorageMultisampleEXT = glad__glRenderbufferStorageMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height)>();
  return _glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
}

/// ----------------------- GL_EXT_framebuffer_object -----------------------
/// ```c
/// define glBindFramebufferEXT GLEW_GET_FUN(__glewBindFramebufferEXT)
/// GLEW_FUN_EXPORT PFNGLBINDFRAMEBUFFEREXTPROC __glewBindFramebufferEXT
/// typedef void (GLAPIENTRY * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFramebufferEXT;
void glBindFramebufferEXT(int target, int framebuffer) {
  final _glBindFramebufferEXT = glad__glBindFramebufferEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 framebuffer)>>()
      .asFunction<void Function(int target, int framebuffer)>();
  return _glBindFramebufferEXT(target, framebuffer);
}

/// ```c
/// define glBindRenderbufferEXT GLEW_GET_FUN(__glewBindRenderbufferEXT)
/// GLEW_FUN_EXPORT PFNGLBINDRENDERBUFFEREXTPROC __glewBindRenderbufferEXT
/// typedef void (GLAPIENTRY * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindRenderbufferEXT;
void glBindRenderbufferEXT(int target, int renderbuffer) {
  final _glBindRenderbufferEXT = glad__glBindRenderbufferEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int renderbuffer)>();
  return _glBindRenderbufferEXT(target, renderbuffer);
}

/// ```c
/// define glCheckFramebufferStatusEXT GLEW_GET_FUN(__glewCheckFramebufferStatusEXT)
/// GLEW_FUN_EXPORT PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glewCheckFramebufferStatusEXT
/// typedef GLenum (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCheckFramebufferStatusEXT;
int glCheckFramebufferStatusEXT(int target) {
  final _glCheckFramebufferStatusEXT = glad__glCheckFramebufferStatusEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return _glCheckFramebufferStatusEXT(target);
}

/// ```c
/// define glDeleteFramebuffersEXT GLEW_GET_FUN(__glewDeleteFramebuffersEXT)
/// GLEW_FUN_EXPORT PFNGLDELETEFRAMEBUFFERSEXTPROC __glewDeleteFramebuffersEXT
/// typedef void (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint* framebuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteFramebuffersEXT;
void glDeleteFramebuffersEXT(int n, Pointer<Uint32>? framebuffers) {
  final _glDeleteFramebuffersEXT = glad__glDeleteFramebuffersEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? framebuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? framebuffers)>();
  return _glDeleteFramebuffersEXT(n, framebuffers);
}

/// ```c
/// define glDeleteRenderbuffersEXT GLEW_GET_FUN(__glewDeleteRenderbuffersEXT)
/// GLEW_FUN_EXPORT PFNGLDELETERENDERBUFFERSEXTPROC __glewDeleteRenderbuffersEXT
/// typedef void (GLAPIENTRY * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint* renderbuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteRenderbuffersEXT;
void glDeleteRenderbuffersEXT(int n, Pointer<Uint32>? renderbuffers) {
  final _glDeleteRenderbuffersEXT = glad__glDeleteRenderbuffersEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? renderbuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? renderbuffers)>();
  return _glDeleteRenderbuffersEXT(n, renderbuffers);
}

/// ```c
/// define glFramebufferRenderbufferEXT GLEW_GET_FUN(__glewFramebufferRenderbufferEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glewFramebufferRenderbufferEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferRenderbufferEXT;
void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, int renderbuffer) {
  final _glFramebufferRenderbufferEXT = glad__glFramebufferRenderbufferEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 renderbuffertarget, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int attachment, int renderbuffertarget, int renderbuffer)>();
  return _glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
}

/// ```c
/// define glFramebufferTexture1DEXT GLEW_GET_FUN(__glewFramebufferTexture1DEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glewFramebufferTexture1DEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture1DEXT;
void glFramebufferTexture1DEXT(int target, int attachment, int textarget, int texture, int level) {
  final _glFramebufferTexture1DEXT = glad__glFramebufferTexture1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level)>();
  return _glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
}

/// ```c
/// define glFramebufferTexture2DEXT GLEW_GET_FUN(__glewFramebufferTexture2DEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glewFramebufferTexture2DEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture2DEXT;
void glFramebufferTexture2DEXT(int target, int attachment, int textarget, int texture, int level) {
  final _glFramebufferTexture2DEXT = glad__glFramebufferTexture2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level)>();
  return _glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
}

/// ```c
/// define glFramebufferTexture3DEXT GLEW_GET_FUN(__glewFramebufferTexture3DEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glewFramebufferTexture3DEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture3DEXT;
void glFramebufferTexture3DEXT(int target, int attachment, int textarget, int texture, int level, int zoffset) {
  final _glFramebufferTexture3DEXT = glad__glFramebufferTexture3DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level, Int32 zoffset)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level, int zoffset)>();
  return _glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
}

/// ```c
/// define glGenFramebuffersEXT GLEW_GET_FUN(__glewGenFramebuffersEXT)
/// GLEW_FUN_EXPORT PFNGLGENFRAMEBUFFERSEXTPROC __glewGenFramebuffersEXT
/// typedef void (GLAPIENTRY * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint* framebuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenFramebuffersEXT;
void glGenFramebuffersEXT(int n, Pointer<Uint32>? framebuffers) {
  final _glGenFramebuffersEXT = glad__glGenFramebuffersEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? framebuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? framebuffers)>();
  return _glGenFramebuffersEXT(n, framebuffers);
}

/// ```c
/// define glGenRenderbuffersEXT GLEW_GET_FUN(__glewGenRenderbuffersEXT)
/// GLEW_FUN_EXPORT PFNGLGENRENDERBUFFERSEXTPROC __glewGenRenderbuffersEXT
/// typedef void (GLAPIENTRY * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint* renderbuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenRenderbuffersEXT;
void glGenRenderbuffersEXT(int n, Pointer<Uint32>? renderbuffers) {
  final _glGenRenderbuffersEXT = glad__glGenRenderbuffersEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? renderbuffers)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? renderbuffers)>();
  return _glGenRenderbuffersEXT(n, renderbuffers);
}

/// ```c
/// define glGenerateMipmapEXT GLEW_GET_FUN(__glewGenerateMipmapEXT)
/// GLEW_FUN_EXPORT PFNGLGENERATEMIPMAPEXTPROC __glewGenerateMipmapEXT
/// typedef void (GLAPIENTRY * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenerateMipmapEXT;
void glGenerateMipmapEXT(int target) {
  final _glGenerateMipmapEXT = glad__glGenerateMipmapEXT!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glGenerateMipmapEXT(target);
}

/// ```c
/// define glGetFramebufferAttachmentParameterivEXT GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetFramebufferAttachmentParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFramebufferAttachmentParameterivEXT;
void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, Pointer<Int32>? params) {
  final _glGetFramebufferAttachmentParameterivEXT = glad__glGetFramebufferAttachmentParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int attachment, int pname, Pointer<Int32>? params)>();
  return _glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
}

/// ```c
/// define glGetRenderbufferParameterivEXT GLEW_GET_FUN(__glewGetRenderbufferParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glewGetRenderbufferParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetRenderbufferParameterivEXT;
void glGetRenderbufferParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetRenderbufferParameterivEXT = glad__glGetRenderbufferParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetRenderbufferParameterivEXT(target, pname, params);
}

/// ```c
/// define glIsFramebufferEXT GLEW_GET_FUN(__glewIsFramebufferEXT)
/// GLEW_FUN_EXPORT PFNGLISFRAMEBUFFEREXTPROC __glewIsFramebufferEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsFramebufferEXT;
int glIsFramebufferEXT(int framebuffer) {
  final _glIsFramebufferEXT = glad__glIsFramebufferEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 framebuffer)>>()
      .asFunction<int Function(int framebuffer)>();
  return _glIsFramebufferEXT(framebuffer);
}

/// ```c
/// define glIsRenderbufferEXT GLEW_GET_FUN(__glewIsRenderbufferEXT)
/// GLEW_FUN_EXPORT PFNGLISRENDERBUFFEREXTPROC __glewIsRenderbufferEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsRenderbufferEXT;
int glIsRenderbufferEXT(int renderbuffer) {
  final _glIsRenderbufferEXT = glad__glIsRenderbufferEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 renderbuffer)>>()
      .asFunction<int Function(int renderbuffer)>();
  return _glIsRenderbufferEXT(renderbuffer);
}

/// ```c
/// define glRenderbufferStorageEXT GLEW_GET_FUN(__glewRenderbufferStorageEXT)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEEXTPROC __glewRenderbufferStorageEXT
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageEXT;
void glRenderbufferStorageEXT(int target, int internalformat, int width, int height) {
  final _glRenderbufferStorageEXT = glad__glRenderbufferStorageEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int internalformat, int width, int height)>();
  return _glRenderbufferStorageEXT(target, internalformat, width, height);
}

/// ------------------------ GL_EXT_geometry_shader4 ------------------------
/// ```c
/// define glFramebufferTextureEXT GLEW_GET_FUN(__glewFramebufferTextureEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREEXTPROC __glewFramebufferTextureEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureEXT;
void glFramebufferTextureEXT(int target, int attachment, int texture, int level) {
  final _glFramebufferTextureEXT = glad__glFramebufferTextureEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level)>();
  return _glFramebufferTextureEXT(target, attachment, texture, level);
}

/// ```c
/// define glFramebufferTextureFaceEXT GLEW_GET_FUN(__glewFramebufferTextureFaceEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glewFramebufferTextureFaceEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureFaceEXT;
void glFramebufferTextureFaceEXT(int target, int attachment, int texture, int level, int face) {
  final _glFramebufferTextureFaceEXT = glad__glFramebufferTextureFaceEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Uint32 face)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int face)>();
  return _glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
}

/// ```c
/// define glProgramParameteriEXT GLEW_GET_FUN(__glewProgramParameteriEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERIEXTPROC __glewProgramParameteriEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameteriEXT;
void glProgramParameteriEXT(int program, int pname, int value) {
  final _glProgramParameteriEXT = glad__glProgramParameteriEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int program, int pname, int value)>();
  return _glProgramParameteriEXT(program, pname, value);
}

/// --------------------- GL_EXT_gpu_program_parameters ---------------------
/// ```c
/// define glProgramEnvParameters4fvEXT GLEW_GET_FUN(__glewProgramEnvParameters4fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glewProgramEnvParameters4fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameters4fvEXT;
void glProgramEnvParameters4fvEXT(int target, int index, int count, Pointer<Float>? params) {
  final _glProgramEnvParameters4fvEXT = glad__glProgramEnvParameters4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, int count, Pointer<Float>? params)>();
  return _glProgramEnvParameters4fvEXT(target, index, count, params);
}

/// ```c
/// define glProgramLocalParameters4fvEXT GLEW_GET_FUN(__glewProgramLocalParameters4fvEXT)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glewProgramLocalParameters4fvEXT
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameters4fvEXT;
void glProgramLocalParameters4fvEXT(int target, int index, int count, Pointer<Float>? params) {
  final _glProgramLocalParameters4fvEXT = glad__glProgramLocalParameters4fvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, int count, Pointer<Float>? params)>();
  return _glProgramLocalParameters4fvEXT(target, index, count, params);
}

/// --------------------------- GL_EXT_gpu_shader4 --------------------------
/// ```c
/// define glBindFragDataLocationEXT GLEW_GET_FUN(__glewBindFragDataLocationEXT)
/// GLEW_FUN_EXPORT PFNGLBINDFRAGDATALOCATIONEXTPROC __glewBindFragDataLocationEXT
/// typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindFragDataLocationEXT;
void glBindFragDataLocationEXT(int program, int color, String name) {
  final _glBindFragDataLocationEXT = glad__glBindFragDataLocationEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 color, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int program, int color, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glBindFragDataLocationEXT(program, color, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetFragDataLocationEXT GLEW_GET_FUN(__glewGetFragDataLocationEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAGDATALOCATIONEXTPROC __glewGetFragDataLocationEXT
/// typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragDataLocationEXT;
int glGetFragDataLocationEXT(int program, String name) {
  final _glGetFragDataLocationEXT = glad__glGetFragDataLocationEXT!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetFragDataLocationEXT(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glGetUniformuivEXT GLEW_GET_FUN(__glewGetUniformuivEXT)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMUIVEXTPROC __glewGetUniformuivEXT
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformuivEXT;
void glGetUniformuivEXT(int program, int location, Pointer<Uint32>? params) {
  final _glGetUniformuivEXT = glad__glGetUniformuivEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Uint32>? params)>();
  return _glGetUniformuivEXT(program, location, params);
}

/// ```c
/// define glGetVertexAttribIivEXT GLEW_GET_FUN(__glewGetVertexAttribIivEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIIVEXTPROC __glewGetVertexAttribIivEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribIivEXT;
void glGetVertexAttribIivEXT(int index, int pname, Pointer<Int32>? params) {
  final _glGetVertexAttribIivEXT = glad__glGetVertexAttribIivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int32>? params)>();
  return _glGetVertexAttribIivEXT(index, pname, params);
}

/// ```c
/// define glGetVertexAttribIuivEXT GLEW_GET_FUN(__glewGetVertexAttribIuivEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIUIVEXTPROC __glewGetVertexAttribIuivEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribIuivEXT;
void glGetVertexAttribIuivEXT(int index, int pname, Pointer<Uint32>? params) {
  final _glGetVertexAttribIuivEXT = glad__glGetVertexAttribIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Uint32>? params)>();
  return _glGetVertexAttribIuivEXT(index, pname, params);
}

/// ```c
/// define glUniform1uiEXT GLEW_GET_FUN(__glewUniform1uiEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UIEXTPROC __glewUniform1uiEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1uiEXT;
void glUniform1uiEXT(int location, int v0) {
  final _glUniform1uiEXT = glad__glUniform1uiEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0)>>()
      .asFunction<void Function(int location, int v0)>();
  return _glUniform1uiEXT(location, v0);
}

/// ```c
/// define glUniform1uivEXT GLEW_GET_FUN(__glewUniform1uivEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UIVEXTPROC __glewUniform1uivEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1uivEXT;
void glUniform1uivEXT(int location, int count, Pointer<Uint32>? value) {
  final _glUniform1uivEXT = glad__glUniform1uivEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform1uivEXT(location, count, value);
}

/// ```c
/// define glUniform2uiEXT GLEW_GET_FUN(__glewUniform2uiEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UIEXTPROC __glewUniform2uiEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2uiEXT;
void glUniform2uiEXT(int location, int v0, int v1) {
  final _glUniform2uiEXT = glad__glUniform2uiEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1)>>()
      .asFunction<void Function(int location, int v0, int v1)>();
  return _glUniform2uiEXT(location, v0, v1);
}

/// ```c
/// define glUniform2uivEXT GLEW_GET_FUN(__glewUniform2uivEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UIVEXTPROC __glewUniform2uivEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2uivEXT;
void glUniform2uivEXT(int location, int count, Pointer<Uint32>? value) {
  final _glUniform2uivEXT = glad__glUniform2uivEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform2uivEXT(location, count, value);
}

/// ```c
/// define glUniform3uiEXT GLEW_GET_FUN(__glewUniform3uiEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UIEXTPROC __glewUniform3uiEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3uiEXT;
void glUniform3uiEXT(int location, int v0, int v1, int v2) {
  final _glUniform3uiEXT = glad__glUniform3uiEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2)>();
  return _glUniform3uiEXT(location, v0, v1, v2);
}

/// ```c
/// define glUniform3uivEXT GLEW_GET_FUN(__glewUniform3uivEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UIVEXTPROC __glewUniform3uivEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3uivEXT;
void glUniform3uivEXT(int location, int count, Pointer<Uint32>? value) {
  final _glUniform3uivEXT = glad__glUniform3uivEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform3uivEXT(location, count, value);
}

/// ```c
/// define glUniform4uiEXT GLEW_GET_FUN(__glewUniform4uiEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UIEXTPROC __glewUniform4uiEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4uiEXT;
void glUniform4uiEXT(int location, int v0, int v1, int v2, int v3) {
  final _glUniform4uiEXT = glad__glUniform4uiEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 v0, Uint32 v1, Uint32 v2, Uint32 v3)>>()
      .asFunction<void Function(int location, int v0, int v1, int v2, int v3)>();
  return _glUniform4uiEXT(location, v0, v1, v2, v3);
}

/// ```c
/// define glUniform4uivEXT GLEW_GET_FUN(__glewUniform4uivEXT)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UIVEXTPROC __glewUniform4uivEXT
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4uivEXT;
void glUniform4uivEXT(int location, int count, Pointer<Uint32>? value) {
  final _glUniform4uivEXT = glad__glUniform4uivEXT!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint32>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint32>? value)>();
  return _glUniform4uivEXT(location, count, value);
}

/// ```c
/// define glVertexAttribI1iEXT GLEW_GET_FUN(__glewVertexAttribI1iEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IEXTPROC __glewVertexAttribI1iEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1iEXT;
void glVertexAttribI1iEXT(int index, int x) {
  final _glVertexAttribI1iEXT = glad__glVertexAttribI1iEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttribI1iEXT(index, x);
}

/// ```c
/// define glVertexAttribI1ivEXT GLEW_GET_FUN(__glewVertexAttribI1ivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IVEXTPROC __glewVertexAttribI1ivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1ivEXT;
void glVertexAttribI1ivEXT(int index, Pointer<Int32>? v) {
  final _glVertexAttribI1ivEXT = glad__glVertexAttribI1ivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttribI1ivEXT(index, v);
}

/// ```c
/// define glVertexAttribI1uiEXT GLEW_GET_FUN(__glewVertexAttribI1uiEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIEXTPROC __glewVertexAttribI1uiEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1uiEXT;
void glVertexAttribI1uiEXT(int index, int x) {
  final _glVertexAttribI1uiEXT = glad__glVertexAttribI1uiEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttribI1uiEXT(index, x);
}

/// ```c
/// define glVertexAttribI1uivEXT GLEW_GET_FUN(__glewVertexAttribI1uivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIVEXTPROC __glewVertexAttribI1uivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI1uivEXT;
void glVertexAttribI1uivEXT(int index, Pointer<Uint32>? v) {
  final _glVertexAttribI1uivEXT = glad__glVertexAttribI1uivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttribI1uivEXT(index, v);
}

/// ```c
/// define glVertexAttribI2iEXT GLEW_GET_FUN(__glewVertexAttribI2iEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IEXTPROC __glewVertexAttribI2iEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2iEXT;
void glVertexAttribI2iEXT(int index, int x, int y) {
  final _glVertexAttribI2iEXT = glad__glVertexAttribI2iEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttribI2iEXT(index, x, y);
}

/// ```c
/// define glVertexAttribI2ivEXT GLEW_GET_FUN(__glewVertexAttribI2ivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IVEXTPROC __glewVertexAttribI2ivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2ivEXT;
void glVertexAttribI2ivEXT(int index, Pointer<Int32>? v) {
  final _glVertexAttribI2ivEXT = glad__glVertexAttribI2ivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttribI2ivEXT(index, v);
}

/// ```c
/// define glVertexAttribI2uiEXT GLEW_GET_FUN(__glewVertexAttribI2uiEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIEXTPROC __glewVertexAttribI2uiEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2uiEXT;
void glVertexAttribI2uiEXT(int index, int x, int y) {
  final _glVertexAttribI2uiEXT = glad__glVertexAttribI2uiEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x, Uint32 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttribI2uiEXT(index, x, y);
}

/// ```c
/// define glVertexAttribI2uivEXT GLEW_GET_FUN(__glewVertexAttribI2uivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIVEXTPROC __glewVertexAttribI2uivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI2uivEXT;
void glVertexAttribI2uivEXT(int index, Pointer<Uint32>? v) {
  final _glVertexAttribI2uivEXT = glad__glVertexAttribI2uivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttribI2uivEXT(index, v);
}

/// ```c
/// define glVertexAttribI3iEXT GLEW_GET_FUN(__glewVertexAttribI3iEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IEXTPROC __glewVertexAttribI3iEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3iEXT;
void glVertexAttribI3iEXT(int index, int x, int y, int z) {
  final _glVertexAttribI3iEXT = glad__glVertexAttribI3iEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttribI3iEXT(index, x, y, z);
}

/// ```c
/// define glVertexAttribI3ivEXT GLEW_GET_FUN(__glewVertexAttribI3ivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IVEXTPROC __glewVertexAttribI3ivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3ivEXT;
void glVertexAttribI3ivEXT(int index, Pointer<Int32>? v) {
  final _glVertexAttribI3ivEXT = glad__glVertexAttribI3ivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttribI3ivEXT(index, v);
}

/// ```c
/// define glVertexAttribI3uiEXT GLEW_GET_FUN(__glewVertexAttribI3uiEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIEXTPROC __glewVertexAttribI3uiEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3uiEXT;
void glVertexAttribI3uiEXT(int index, int x, int y, int z) {
  final _glVertexAttribI3uiEXT = glad__glVertexAttribI3uiEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttribI3uiEXT(index, x, y, z);
}

/// ```c
/// define glVertexAttribI3uivEXT GLEW_GET_FUN(__glewVertexAttribI3uivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIVEXTPROC __glewVertexAttribI3uivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI3uivEXT;
void glVertexAttribI3uivEXT(int index, Pointer<Uint32>? v) {
  final _glVertexAttribI3uivEXT = glad__glVertexAttribI3uivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttribI3uivEXT(index, v);
}

/// ```c
/// define glVertexAttribI4bvEXT GLEW_GET_FUN(__glewVertexAttribI4bvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4BVEXTPROC __glewVertexAttribI4bvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4bvEXT;
void glVertexAttribI4bvEXT(int index, String v) {
  final _glVertexAttribI4bvEXT = glad__glVertexAttribI4bvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Utf8>? v)>>()
      .asFunction<void Function(int index, Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glVertexAttribI4bvEXT(index, _vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glVertexAttribI4iEXT GLEW_GET_FUN(__glewVertexAttribI4iEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IEXTPROC __glewVertexAttribI4iEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4iEXT;
void glVertexAttribI4iEXT(int index, int x, int y, int z, int w) {
  final _glVertexAttribI4iEXT = glad__glVertexAttribI4iEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttribI4iEXT(index, x, y, z, w);
}

/// ```c
/// define glVertexAttribI4ivEXT GLEW_GET_FUN(__glewVertexAttribI4ivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IVEXTPROC __glewVertexAttribI4ivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4ivEXT;
void glVertexAttribI4ivEXT(int index, Pointer<Int32>? v) {
  final _glVertexAttribI4ivEXT = glad__glVertexAttribI4ivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glVertexAttribI4ivEXT(index, v);
}

/// ```c
/// define glVertexAttribI4svEXT GLEW_GET_FUN(__glewVertexAttribI4svEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4SVEXTPROC __glewVertexAttribI4svEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4svEXT;
void glVertexAttribI4svEXT(int index, Pointer<Int16>? v) {
  final _glVertexAttribI4svEXT = glad__glVertexAttribI4svEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttribI4svEXT(index, v);
}

/// ```c
/// define glVertexAttribI4ubvEXT GLEW_GET_FUN(__glewVertexAttribI4ubvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UBVEXTPROC __glewVertexAttribI4ubvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4ubvEXT;
void glVertexAttribI4ubvEXT(int index, Pointer<Uint8>? v) {
  final _glVertexAttribI4ubvEXT = glad__glVertexAttribI4ubvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v)>();
  return _glVertexAttribI4ubvEXT(index, v);
}

/// ```c
/// define glVertexAttribI4uiEXT GLEW_GET_FUN(__glewVertexAttribI4uiEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIEXTPROC __glewVertexAttribI4uiEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4uiEXT;
void glVertexAttribI4uiEXT(int index, int x, int y, int z, int w) {
  final _glVertexAttribI4uiEXT = glad__glVertexAttribI4uiEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttribI4uiEXT(index, x, y, z, w);
}

/// ```c
/// define glVertexAttribI4uivEXT GLEW_GET_FUN(__glewVertexAttribI4uivEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIVEXTPROC __glewVertexAttribI4uivEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4uivEXT;
void glVertexAttribI4uivEXT(int index, Pointer<Uint32>? v) {
  final _glVertexAttribI4uivEXT = glad__glVertexAttribI4uivEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint32>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint32>? v)>();
  return _glVertexAttribI4uivEXT(index, v);
}

/// ```c
/// define glVertexAttribI4usvEXT GLEW_GET_FUN(__glewVertexAttribI4usvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4USVEXTPROC __glewVertexAttribI4usvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribI4usvEXT;
void glVertexAttribI4usvEXT(int index, Pointer<Uint16>? v) {
  final _glVertexAttribI4usvEXT = glad__glVertexAttribI4usvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint16>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint16>? v)>();
  return _glVertexAttribI4usvEXT(index, v);
}

/// ```c
/// define glVertexAttribIPointerEXT GLEW_GET_FUN(__glewVertexAttribIPointerEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTEREXTPROC __glewVertexAttribIPointerEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribIPointerEXT;
void glVertexAttribIPointerEXT(int index, int size, int type, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribIPointerEXT = glad__glVertexAttribIPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribIPointerEXT(index, size, type, stride, pointer);
}

/// ---------------------------- GL_EXT_histogram ---------------------------
/// ```c
/// define glGetHistogramEXT GLEW_GET_FUN(__glewGetHistogramEXT)
/// GLEW_FUN_EXPORT PFNGLGETHISTOGRAMEXTPROC __glewGetHistogramEXT
/// typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHistogramEXT;
void glGetHistogramEXT(int target, int reset, int format, int type, Pointer<Void>? values) {
  final _glGetHistogramEXT = glad__glGetHistogramEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint8 reset, Uint32 format, Uint32 type, Pointer<Void>? values)>>()
      .asFunction<void Function(int target, int reset, int format, int type, Pointer<Void>? values)>();
  return _glGetHistogramEXT(target, reset, format, type, values);
}

/// ```c
/// define glGetHistogramParameterfvEXT GLEW_GET_FUN(__glewGetHistogramParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glewGetHistogramParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHistogramParameterfvEXT;
void glGetHistogramParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glGetHistogramParameterfvEXT = glad__glGetHistogramParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetHistogramParameterfvEXT(target, pname, params);
}

/// ```c
/// define glGetHistogramParameterivEXT GLEW_GET_FUN(__glewGetHistogramParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glewGetHistogramParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetHistogramParameterivEXT;
void glGetHistogramParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetHistogramParameterivEXT = glad__glGetHistogramParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetHistogramParameterivEXT(target, pname, params);
}

/// ```c
/// define glGetMinmaxEXT GLEW_GET_FUN(__glewGetMinmaxEXT)
/// GLEW_FUN_EXPORT PFNGLGETMINMAXEXTPROC __glewGetMinmaxEXT
/// typedef void (GLAPIENTRY * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMinmaxEXT;
void glGetMinmaxEXT(int target, int reset, int format, int type, Pointer<Void>? values) {
  final _glGetMinmaxEXT = glad__glGetMinmaxEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint8 reset, Uint32 format, Uint32 type, Pointer<Void>? values)>>()
      .asFunction<void Function(int target, int reset, int format, int type, Pointer<Void>? values)>();
  return _glGetMinmaxEXT(target, reset, format, type, values);
}

/// ```c
/// define glGetMinmaxParameterfvEXT GLEW_GET_FUN(__glewGetMinmaxParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERFVEXTPROC __glewGetMinmaxParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMinmaxParameterfvEXT;
void glGetMinmaxParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glGetMinmaxParameterfvEXT = glad__glGetMinmaxParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetMinmaxParameterfvEXT(target, pname, params);
}

/// ```c
/// define glGetMinmaxParameterivEXT GLEW_GET_FUN(__glewGetMinmaxParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERIVEXTPROC __glewGetMinmaxParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMinmaxParameterivEXT;
void glGetMinmaxParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetMinmaxParameterivEXT = glad__glGetMinmaxParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetMinmaxParameterivEXT(target, pname, params);
}

/// ```c
/// define glHistogramEXT GLEW_GET_FUN(__glewHistogramEXT)
/// GLEW_FUN_EXPORT PFNGLHISTOGRAMEXTPROC __glewHistogramEXT
/// typedef void (GLAPIENTRY * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glHistogramEXT;
void glHistogramEXT(int target, int width, int internalformat, int sink) {
  final _glHistogramEXT = glad__glHistogramEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 width, Uint32 internalformat, Uint8 sink)>>()
      .asFunction<void Function(int target, int width, int internalformat, int sink)>();
  return _glHistogramEXT(target, width, internalformat, sink);
}

/// ```c
/// define glMinmaxEXT GLEW_GET_FUN(__glewMinmaxEXT)
/// GLEW_FUN_EXPORT PFNGLMINMAXEXTPROC __glewMinmaxEXT
/// typedef void (GLAPIENTRY * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMinmaxEXT;
void glMinmaxEXT(int target, int internalformat, int sink) {
  final _glMinmaxEXT = glad__glMinmaxEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint8 sink)>>()
      .asFunction<void Function(int target, int internalformat, int sink)>();
  return _glMinmaxEXT(target, internalformat, sink);
}

/// ```c
/// define glResetHistogramEXT GLEW_GET_FUN(__glewResetHistogramEXT)
/// GLEW_FUN_EXPORT PFNGLRESETHISTOGRAMEXTPROC __glewResetHistogramEXT
/// typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResetHistogramEXT;
void glResetHistogramEXT(int target) {
  final _glResetHistogramEXT = glad__glResetHistogramEXT!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glResetHistogramEXT(target);
}

/// ```c
/// define glResetMinmaxEXT GLEW_GET_FUN(__glewResetMinmaxEXT)
/// GLEW_FUN_EXPORT PFNGLRESETMINMAXEXTPROC __glewResetMinmaxEXT
/// typedef void (GLAPIENTRY * PFNGLRESETMINMAXEXTPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResetMinmaxEXT;
void glResetMinmaxEXT(int target) {
  final _glResetMinmaxEXT = glad__glResetMinmaxEXT!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glResetMinmaxEXT(target);
}

/// --------------------------- GL_EXT_index_func ---------------------------
/// ```c
/// define glIndexFuncEXT GLEW_GET_FUN(__glewIndexFuncEXT)
/// GLEW_FUN_EXPORT PFNGLINDEXFUNCEXTPROC __glewIndexFuncEXT
/// typedef void (GLAPIENTRY * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLfloat ref)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIndexFuncEXT;
void glIndexFuncEXT(int func, double ref) {
  final _glIndexFuncEXT = glad__glIndexFuncEXT!
      .cast<NativeFunction<Void Function(Uint32 func, Float ref)>>()
      .asFunction<void Function(int func, double ref)>();
  return _glIndexFuncEXT(func, ref);
}

/// ------------------------- GL_EXT_index_material -------------------------
/// ```c
/// define glIndexMaterialEXT GLEW_GET_FUN(__glewIndexMaterialEXT)
/// GLEW_FUN_EXPORT PFNGLINDEXMATERIALEXTPROC __glewIndexMaterialEXT
/// typedef void (GLAPIENTRY * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIndexMaterialEXT;
void glIndexMaterialEXT(int face, int mode) {
  final _glIndexMaterialEXT = glad__glIndexMaterialEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return _glIndexMaterialEXT(face, mode);
}

/// ------------------------ GL_EXT_instanced_arrays ------------------------
/// ```c
/// define glVertexAttribDivisorEXT GLEW_GET_FUN(__glewVertexAttribDivisorEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBDIVISOREXTPROC __glewVertexAttribDivisorEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISOREXTPROC) (GLuint index, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribDivisorEXT;
void glVertexAttribDivisorEXT(int index, int divisor) {
  final _glVertexAttribDivisorEXT = glad__glVertexAttribDivisorEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return _glVertexAttribDivisorEXT(index, divisor);
}

/// -------------------------- GL_EXT_light_texture -------------------------
/// ```c
/// define glApplyTextureEXT GLEW_GET_FUN(__glewApplyTextureEXT)
/// GLEW_FUN_EXPORT PFNGLAPPLYTEXTUREEXTPROC __glewApplyTextureEXT
/// typedef void (GLAPIENTRY * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glApplyTextureEXT;
void glApplyTextureEXT(int mode) {
  final _glApplyTextureEXT = glad__glApplyTextureEXT!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glApplyTextureEXT(mode);
}

/// ```c
/// define glTextureLightEXT GLEW_GET_FUN(__glewTextureLightEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURELIGHTEXTPROC __glewTextureLightEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureLightEXT;
void glTextureLightEXT(int pname) {
  final _glTextureLightEXT = glad__glTextureLightEXT!
      .cast<NativeFunction<Void Function(Uint32 pname)>>()
      .asFunction<void Function(int pname)>();
  return _glTextureLightEXT(pname);
}

/// ```c
/// define glTextureMaterialEXT GLEW_GET_FUN(__glewTextureMaterialEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREMATERIALEXTPROC __glewTextureMaterialEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureMaterialEXT;
void glTextureMaterialEXT(int face, int mode) {
  final _glTextureMaterialEXT = glad__glTextureMaterialEXT!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return _glTextureMaterialEXT(face, mode);
}

/// ------------------------ GL_EXT_map_buffer_range ------------------------
/// ```c
/// define glFlushMappedBufferRangeEXT GLEW_GET_FUN(__glewFlushMappedBufferRangeEXT)
/// GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC __glewFlushMappedBufferRangeEXT
/// typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushMappedBufferRangeEXT;
void glFlushMappedBufferRangeEXT(int target, int offset, int length) {
  final _glFlushMappedBufferRangeEXT = glad__glFlushMappedBufferRangeEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 offset, Uint64 length)>>()
      .asFunction<void Function(int target, int offset, int length)>();
  return _glFlushMappedBufferRangeEXT(target, offset, length);
}

/// ```c
/// define glMapBufferRangeEXT GLEW_GET_FUN(__glewMapBufferRangeEXT)
/// GLEW_FUN_EXPORT PFNGLMAPBUFFERRANGEEXTPROC __glewMapBufferRangeEXT
/// typedef void * (GLAPIENTRY * PFNGLMAPBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapBufferRangeEXT;
Pointer<Void>? glMapBufferRangeEXT(int target, int offset, int length, int access) {
  final _glMapBufferRangeEXT = glad__glMapBufferRangeEXT!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 target, Uint64 offset, Uint64 length, Uint32 access)>>()
      .asFunction<Pointer<Void>? Function(int target, int offset, int length, int access)>();
  return _glMapBufferRangeEXT(target, offset, length, access);
}

/// -------------------------- GL_EXT_memory_object -------------------------
/// ```c
/// define glBufferStorageMemEXT GLEW_GET_FUN(__glewBufferStorageMemEXT)
/// GLEW_FUN_EXPORT PFNGLBUFFERSTORAGEMEMEXTPROC __glewBufferStorageMemEXT
/// typedef void (GLAPIENTRY * PFNGLBUFFERSTORAGEMEMEXTPROC) (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferStorageMemEXT;
void glBufferStorageMemEXT(int target, int size, int memory, int offset) {
  final _glBufferStorageMemEXT = glad__glBufferStorageMemEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint64 size, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int target, int size, int memory, int offset)>();
  return _glBufferStorageMemEXT(target, size, memory, offset);
}

/// ```c
/// define glCreateMemoryObjectsEXT GLEW_GET_FUN(__glewCreateMemoryObjectsEXT)
/// GLEW_FUN_EXPORT PFNGLCREATEMEMORYOBJECTSEXTPROC __glewCreateMemoryObjectsEXT
/// typedef void (GLAPIENTRY * PFNGLCREATEMEMORYOBJECTSEXTPROC) (GLsizei n, GLuint* memoryObjects)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateMemoryObjectsEXT;
void glCreateMemoryObjectsEXT(int n, Pointer<Uint32>? memoryObjects) {
  final _glCreateMemoryObjectsEXT = glad__glCreateMemoryObjectsEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? memoryObjects)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? memoryObjects)>();
  return _glCreateMemoryObjectsEXT(n, memoryObjects);
}

/// ```c
/// define glDeleteMemoryObjectsEXT GLEW_GET_FUN(__glewDeleteMemoryObjectsEXT)
/// GLEW_FUN_EXPORT PFNGLDELETEMEMORYOBJECTSEXTPROC __glewDeleteMemoryObjectsEXT
/// typedef void (GLAPIENTRY * PFNGLDELETEMEMORYOBJECTSEXTPROC) (GLsizei n, const GLuint* memoryObjects)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteMemoryObjectsEXT;
void glDeleteMemoryObjectsEXT(int n, Pointer<Uint32>? memoryObjects) {
  final _glDeleteMemoryObjectsEXT = glad__glDeleteMemoryObjectsEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? memoryObjects)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? memoryObjects)>();
  return _glDeleteMemoryObjectsEXT(n, memoryObjects);
}

/// ```c
/// define glGetMemoryObjectParameterivEXT GLEW_GET_FUN(__glewGetMemoryObjectParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC __glewGetMemoryObjectParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMemoryObjectParameterivEXT;
void glGetMemoryObjectParameterivEXT(int memoryObject, int pname, Pointer<Int32>? params) {
  final _glGetMemoryObjectParameterivEXT = glad__glGetMemoryObjectParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 memoryObject, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int memoryObject, int pname, Pointer<Int32>? params)>();
  return _glGetMemoryObjectParameterivEXT(memoryObject, pname, params);
}

/// ```c
/// define glGetUnsignedBytei_vEXT GLEW_GET_FUN(__glewGetUnsignedBytei_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETUNSIGNEDBYTEI_VEXTPROC __glewGetUnsignedBytei_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETUNSIGNEDBYTEI_VEXTPROC) (GLenum target, GLuint index, GLubyte* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUnsignedBytei_vEXT;
void glGetUnsignedBytei_vEXT(int target, int index, Pointer<Uint8>? data) {
  final _glGetUnsignedBytei_vEXT = glad__glGetUnsignedBytei_vEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int target, int index, Pointer<Uint8>? data)>();
  return _glGetUnsignedBytei_vEXT(target, index, data);
}

/// ```c
/// define glGetUnsignedBytevEXT GLEW_GET_FUN(__glewGetUnsignedBytevEXT)
/// GLEW_FUN_EXPORT PFNGLGETUNSIGNEDBYTEVEXTPROC __glewGetUnsignedBytevEXT
/// typedef void (GLAPIENTRY * PFNGLGETUNSIGNEDBYTEVEXTPROC) (GLenum pname, GLubyte* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUnsignedBytevEXT;
void glGetUnsignedBytevEXT(int pname, Pointer<Uint8>? data) {
  final _glGetUnsignedBytevEXT = glad__glGetUnsignedBytevEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int pname, Pointer<Uint8>? data)>();
  return _glGetUnsignedBytevEXT(pname, data);
}

/// ```c
/// define glIsMemoryObjectEXT GLEW_GET_FUN(__glewIsMemoryObjectEXT)
/// GLEW_FUN_EXPORT PFNGLISMEMORYOBJECTEXTPROC __glewIsMemoryObjectEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISMEMORYOBJECTEXTPROC) (GLuint memoryObject)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsMemoryObjectEXT;
int glIsMemoryObjectEXT(int memoryObject) {
  final _glIsMemoryObjectEXT = glad__glIsMemoryObjectEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 memoryObject)>>()
      .asFunction<int Function(int memoryObject)>();
  return _glIsMemoryObjectEXT(memoryObject);
}

/// ```c
/// define glMemoryObjectParameterivEXT GLEW_GET_FUN(__glewMemoryObjectParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLMEMORYOBJECTPARAMETERIVEXTPROC __glewMemoryObjectParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLMEMORYOBJECTPARAMETERIVEXTPROC) (GLuint memoryObject, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMemoryObjectParameterivEXT;
void glMemoryObjectParameterivEXT(int memoryObject, int pname, Pointer<Int32>? params) {
  final _glMemoryObjectParameterivEXT = glad__glMemoryObjectParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 memoryObject, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int memoryObject, int pname, Pointer<Int32>? params)>();
  return _glMemoryObjectParameterivEXT(memoryObject, pname, params);
}

/// ```c
/// define glNamedBufferStorageMemEXT GLEW_GET_FUN(__glewNamedBufferStorageMemEXT)
/// GLEW_FUN_EXPORT PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC __glewNamedBufferStorageMemEXT
/// typedef void (GLAPIENTRY * PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC) (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedBufferStorageMemEXT;
void glNamedBufferStorageMemEXT(int buffer, int size, int memory, int offset) {
  final _glNamedBufferStorageMemEXT = glad__glNamedBufferStorageMemEXT!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint64 size, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int buffer, int size, int memory, int offset)>();
  return _glNamedBufferStorageMemEXT(buffer, size, memory, offset);
}

/// ```c
/// define glTexStorageMem1DEXT GLEW_GET_FUN(__glewTexStorageMem1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGEMEM1DEXTPROC __glewTexStorageMem1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGEMEM1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorageMem1DEXT;
void glTexStorageMem1DEXT(int target, int levels, int internalFormat, int width, int memory, int offset) {
  final _glTexStorageMem1DEXT = glad__glTexStorageMem1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalFormat, Uint32 width, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int target, int levels, int internalFormat, int width, int memory, int offset)>();
  return _glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
}

/// ```c
/// define glTexStorageMem2DEXT GLEW_GET_FUN(__glewTexStorageMem2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGEMEM2DEXTPROC __glewTexStorageMem2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGEMEM2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorageMem2DEXT;
void glTexStorageMem2DEXT(int target, int levels, int internalFormat, int width, int height, int memory, int offset) {
  final _glTexStorageMem2DEXT = glad__glTexStorageMem2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int target, int levels, int internalFormat, int width, int height, int memory, int offset)>();
  return _glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
}

/// ```c
/// define glTexStorageMem2DMultisampleEXT GLEW_GET_FUN(__glewTexStorageMem2DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC __glewTexStorageMem2DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorageMem2DMultisampleEXT;
void glTexStorageMem2DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int fixedSampleLocations, int memory, int offset) {
  final _glTexStorageMem2DMultisampleEXT = glad__glTexStorageMem2DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalFormat, Uint32 width, Uint32 height, Uint8 fixedSampleLocations, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int target, int samples, int internalFormat, int width, int height, int fixedSampleLocations, int memory, int offset)>();
  return _glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

/// ```c
/// define glTexStorageMem3DEXT GLEW_GET_FUN(__glewTexStorageMem3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGEMEM3DEXTPROC __glewTexStorageMem3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGEMEM3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorageMem3DEXT;
void glTexStorageMem3DEXT(int target, int levels, int internalFormat, int width, int height, int depth, int memory, int offset) {
  final _glTexStorageMem3DEXT = glad__glTexStorageMem3DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int target, int levels, int internalFormat, int width, int height, int depth, int memory, int offset)>();
  return _glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
}

/// ```c
/// define glTexStorageMem3DMultisampleEXT GLEW_GET_FUN(__glewTexStorageMem3DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC __glewTexStorageMem3DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorageMem3DMultisampleEXT;
void glTexStorageMem3DMultisampleEXT(int target, int samples, int internalFormat, int width, int height, int depth, int fixedSampleLocations, int memory, int offset) {
  final _glTexStorageMem3DMultisampleEXT = glad__glTexStorageMem3DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedSampleLocations, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int target, int samples, int internalFormat, int width, int height, int depth, int fixedSampleLocations, int memory, int offset)>();
  return _glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}

/// ```c
/// define glTextureStorageMem1DEXT GLEW_GET_FUN(__glewTextureStorageMem1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGEMEM1DEXTPROC __glewTextureStorageMem1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGEMEM1DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorageMem1DEXT;
void glTextureStorageMem1DEXT(int texture, int levels, int internalFormat, int width, int memory, int offset) {
  final _glTextureStorageMem1DEXT = glad__glTextureStorageMem1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 levels, Uint32 internalFormat, Uint32 width, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int texture, int levels, int internalFormat, int width, int memory, int offset)>();
  return _glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
}

/// ```c
/// define glTextureStorageMem2DEXT GLEW_GET_FUN(__glewTextureStorageMem2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGEMEM2DEXTPROC __glewTextureStorageMem2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGEMEM2DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorageMem2DEXT;
void glTextureStorageMem2DEXT(int texture, int levels, int internalFormat, int width, int height, int memory, int offset) {
  final _glTextureStorageMem2DEXT = glad__glTextureStorageMem2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 levels, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int texture, int levels, int internalFormat, int width, int height, int memory, int offset)>();
  return _glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
}

/// ```c
/// define glTextureStorageMem2DMultisampleEXT GLEW_GET_FUN(__glewTextureStorageMem2DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC __glewTextureStorageMem2DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorageMem2DMultisampleEXT;
void glTextureStorageMem2DMultisampleEXT(int texture, int samples, int internalFormat, int width, int height, int fixedSampleLocations, int memory, int offset) {
  final _glTextureStorageMem2DMultisampleEXT = glad__glTextureStorageMem2DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 samples, Uint32 internalFormat, Uint32 width, Uint32 height, Uint8 fixedSampleLocations, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int texture, int samples, int internalFormat, int width, int height, int fixedSampleLocations, int memory, int offset)>();
  return _glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

/// ```c
/// define glTextureStorageMem3DEXT GLEW_GET_FUN(__glewTextureStorageMem3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGEMEM3DEXTPROC __glewTextureStorageMem3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGEMEM3DEXTPROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorageMem3DEXT;
void glTextureStorageMem3DEXT(int texture, int levels, int internalFormat, int width, int height, int depth, int memory, int offset) {
  final _glTextureStorageMem3DEXT = glad__glTextureStorageMem3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 levels, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int texture, int levels, int internalFormat, int width, int height, int depth, int memory, int offset)>();
  return _glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
}

/// ```c
/// define glTextureStorageMem3DMultisampleEXT GLEW_GET_FUN(__glewTextureStorageMem3DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC __glewTextureStorageMem3DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorageMem3DMultisampleEXT;
void glTextureStorageMem3DMultisampleEXT(int texture, int samples, int internalFormat, int width, int height, int depth, int fixedSampleLocations, int memory, int offset) {
  final _glTextureStorageMem3DMultisampleEXT = glad__glTextureStorageMem3DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 samples, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedSampleLocations, Uint32 memory, Uint64 offset)>>()
      .asFunction<void Function(int texture, int samples, int internalFormat, int width, int height, int depth, int fixedSampleLocations, int memory, int offset)>();
  return _glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}

/// ------------------------ GL_EXT_memory_object_fd ------------------------
/// ```c
/// define glImportMemoryFdEXT GLEW_GET_FUN(__glewImportMemoryFdEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTMEMORYFDEXTPROC __glewImportMemoryFdEXT
/// typedef void (GLAPIENTRY * PFNGLIMPORTMEMORYFDEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportMemoryFdEXT;
void glImportMemoryFdEXT(int memory, int size, int handleType, int fd) {
  final _glImportMemoryFdEXT = glad__glImportMemoryFdEXT!
      .cast<NativeFunction<Void Function(Uint32 memory, Uint64 size, Uint32 handleType, Int32 fd)>>()
      .asFunction<void Function(int memory, int size, int handleType, int fd)>();
  return _glImportMemoryFdEXT(memory, size, handleType, fd);
}

/// ----------------------- GL_EXT_memory_object_win32 ----------------------
/// ```c
/// define glImportMemoryWin32HandleEXT GLEW_GET_FUN(__glewImportMemoryWin32HandleEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC __glewImportMemoryWin32HandleEXT
/// typedef void (GLAPIENTRY * PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, void *handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportMemoryWin32HandleEXT;
void glImportMemoryWin32HandleEXT(int memory, int size, int handleType, Pointer<Void>? handle) {
  final _glImportMemoryWin32HandleEXT = glad__glImportMemoryWin32HandleEXT!
      .cast<NativeFunction<Void Function(Uint32 memory, Uint64 size, Uint32 handleType, Pointer<Void>? handle)>>()
      .asFunction<void Function(int memory, int size, int handleType, Pointer<Void>? handle)>();
  return _glImportMemoryWin32HandleEXT(memory, size, handleType, handle);
}

/// ```c
/// define glImportMemoryWin32NameEXT GLEW_GET_FUN(__glewImportMemoryWin32NameEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTMEMORYWIN32NAMEEXTPROC __glewImportMemoryWin32NameEXT
/// typedef void (GLAPIENTRY * PFNGLIMPORTMEMORYWIN32NAMEEXTPROC) (GLuint memory, GLuint64 size, GLenum handleType, const void *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportMemoryWin32NameEXT;
void glImportMemoryWin32NameEXT(int memory, int size, int handleType, Pointer<Void>? name) {
  final _glImportMemoryWin32NameEXT = glad__glImportMemoryWin32NameEXT!
      .cast<NativeFunction<Void Function(Uint32 memory, Uint64 size, Uint32 handleType, Pointer<Void>? name)>>()
      .asFunction<void Function(int memory, int size, int handleType, Pointer<Void>? name)>();
  return _glImportMemoryWin32NameEXT(memory, size, handleType, name);
}

/// ------------------------ GL_EXT_multi_draw_arrays -----------------------
/// ```c
/// define glMultiDrawArraysEXT GLEW_GET_FUN(__glewMultiDrawArraysEXT)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSEXTPROC __glewMultiDrawArraysEXT
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysEXT;
void glMultiDrawArraysEXT(int mode, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount) {
  final _glMultiDrawArraysEXT = glad__glMultiDrawArraysEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Int32>? first, Pointer<Uint32>? count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount)>();
  return _glMultiDrawArraysEXT(mode, first, count, primcount);
}

/// ```c
/// define glMultiDrawElementsEXT GLEW_GET_FUN(__glewMultiDrawElementsEXT)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSEXTPROC __glewMultiDrawElementsEXT
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, GLsizei* count, GLenum type, const void *const *indices, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsEXT;
void glMultiDrawElementsEXT(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount) {
  final _glMultiDrawElementsEXT = glad__glMultiDrawElementsEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Uint32>? count, Uint32 type, Pointer<Pointer<Void>>? indices, Uint32 primcount)>>()
      .asFunction<void Function(int mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount)>();
  return _glMultiDrawElementsEXT(mode, count, type, indices, primcount);
}

/// ----------------------- GL_EXT_multi_draw_indirect ----------------------
/// ```c
/// define glMultiDrawArraysIndirectEXT GLEW_GET_FUN(__glewMultiDrawArraysIndirectEXT)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC __glewMultiDrawArraysIndirectEXT
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirectEXT;
void glMultiDrawArraysIndirectEXT(int mode, Pointer<Void>? indirect, int drawcount, int stride) {
  final _glMultiDrawArraysIndirectEXT = glad__glMultiDrawArraysIndirectEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint32 drawcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int drawcount, int stride)>();
  return _glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride);
}

/// ```c
/// define glMultiDrawElementsIndirectEXT GLEW_GET_FUN(__glewMultiDrawElementsIndirectEXT)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC __glewMultiDrawElementsIndirectEXT
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirectEXT;
void glMultiDrawElementsIndirectEXT(int mode, int type, Pointer<Void>? indirect, int drawcount, int stride) {
  final _glMultiDrawElementsIndirectEXT = glad__glMultiDrawElementsIndirectEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint32 drawcount, Uint32 stride)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int drawcount, int stride)>();
  return _glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride);
}

/// --------------------------- GL_EXT_multisample --------------------------
/// ```c
/// define glSampleMaskEXT GLEW_GET_FUN(__glewSampleMaskEXT)
/// GLEW_FUN_EXPORT PFNGLSAMPLEMASKEXTPROC __glewSampleMaskEXT
/// typedef void (GLAPIENTRY * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleMaskEXT;
void glSampleMaskEXT(double value, int invert) {
  final _glSampleMaskEXT = glad__glSampleMaskEXT!
      .cast<NativeFunction<Void Function(Float value, Uint8 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return _glSampleMaskEXT(value, invert);
}

/// ```c
/// define glSamplePatternEXT GLEW_GET_FUN(__glewSamplePatternEXT)
/// GLEW_FUN_EXPORT PFNGLSAMPLEPATTERNEXTPROC __glewSamplePatternEXT
/// typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplePatternEXT;
void glSamplePatternEXT(int pattern) {
  final _glSamplePatternEXT = glad__glSamplePatternEXT!
      .cast<NativeFunction<Void Function(Uint32 pattern)>>()
      .asFunction<void Function(int pattern)>();
  return _glSamplePatternEXT(pattern);
}

/// ----------------- GL_EXT_multisampled_render_to_texture -----------------
/// ```c
/// define glFramebufferTexture2DMultisampleEXT GLEW_GET_FUN(__glewFramebufferTexture2DMultisampleEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC __glewFramebufferTexture2DMultisampleEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTexture2DMultisampleEXT;
void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, int texture, int level, int samples) {
  final _glFramebufferTexture2DMultisampleEXT = glad__glFramebufferTexture2DMultisampleEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 textarget, Uint32 texture, Int32 level, Uint32 samples)>>()
      .asFunction<void Function(int target, int attachment, int textarget, int texture, int level, int samples)>();
  return _glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
}

/// --------------------- GL_EXT_multiview_draw_buffers ---------------------
/// ```c
/// define glDrawBuffersIndexedEXT GLEW_GET_FUN(__glewDrawBuffersIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERSINDEXEDEXTPROC __glewDrawBuffersIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSINDEXEDEXTPROC) (GLint n, const GLenum* location, const GLint *indices)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBuffersIndexedEXT;
void glDrawBuffersIndexedEXT(int n, Pointer<Uint32>? location, Pointer<Int32>? indices) {
  final _glDrawBuffersIndexedEXT = glad__glDrawBuffersIndexedEXT!
      .cast<NativeFunction<Void Function(Int32 n, Pointer<Uint32>? location, Pointer<Int32>? indices)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? location, Pointer<Int32>? indices)>();
  return _glDrawBuffersIndexedEXT(n, location, indices);
}

/// ```c
/// define glGetIntegeri_vEXT GLEW_GET_FUN(__glewGetIntegeri_vEXT)
/// GLEW_FUN_EXPORT PFNGLGETINTEGERI_VEXTPROC __glewGetIntegeri_vEXT
/// typedef void (GLAPIENTRY * PFNGLGETINTEGERI_VEXTPROC) (GLenum target, GLuint index, GLint* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetIntegeri_vEXT;
void glGetIntegeri_vEXT(int target, int index, Pointer<Int32>? data) {
  final _glGetIntegeri_vEXT = glad__glGetIntegeri_vEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Int32>? data)>>()
      .asFunction<void Function(int target, int index, Pointer<Int32>? data)>();
  return _glGetIntegeri_vEXT(target, index, data);
}

/// ```c
/// define glReadBufferIndexedEXT GLEW_GET_FUN(__glewReadBufferIndexedEXT)
/// GLEW_FUN_EXPORT PFNGLREADBUFFERINDEXEDEXTPROC __glewReadBufferIndexedEXT
/// typedef void (GLAPIENTRY * PFNGLREADBUFFERINDEXEDEXTPROC) (GLenum src, GLint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReadBufferIndexedEXT;
void glReadBufferIndexedEXT(int src, int index) {
  final _glReadBufferIndexedEXT = glad__glReadBufferIndexedEXT!
      .cast<NativeFunction<Void Function(Uint32 src, Int32 index)>>()
      .asFunction<void Function(int src, int index)>();
  return _glReadBufferIndexedEXT(src, index);
}

/// ------------------------ GL_EXT_paletted_texture ------------------------
/// ```c
/// define glColorTableEXT GLEW_GET_FUN(__glewColorTableEXT)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLEEXTPROC __glewColorTableEXT
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTableEXT;
void glColorTableEXT(int target, int internalFormat, int width, int format, int type, Pointer<Void>? data) {
  final _glColorTableEXT = glad__glColorTableEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalFormat, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int internalFormat, int width, int format, int type, Pointer<Void>? data)>();
  return _glColorTableEXT(target, internalFormat, width, format, type, data);
}

/// ```c
/// define glGetColorTableEXT GLEW_GET_FUN(__glewGetColorTableEXT)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEEXTPROC __glewGetColorTableEXT
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableEXT;
void glGetColorTableEXT(int target, int format, int type, Pointer<Void>? data) {
  final _glGetColorTableEXT = glad__glGetColorTableEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? data)>();
  return _glGetColorTableEXT(target, format, type, data);
}

/// ```c
/// define glGetColorTableParameterfvEXT GLEW_GET_FUN(__glewGetColorTableParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glewGetColorTableParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableParameterfvEXT;
void glGetColorTableParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glGetColorTableParameterfvEXT = glad__glGetColorTableParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetColorTableParameterfvEXT(target, pname, params);
}

/// ```c
/// define glGetColorTableParameterivEXT GLEW_GET_FUN(__glewGetColorTableParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glewGetColorTableParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableParameterivEXT;
void glGetColorTableParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetColorTableParameterivEXT = glad__glGetColorTableParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetColorTableParameterivEXT(target, pname, params);
}

/// ------------------------- GL_EXT_pixel_transform ------------------------
/// ```c
/// define glGetPixelTransformParameterfvEXT GLEW_GET_FUN(__glewGetPixelTransformParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glewGetPixelTransformParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPixelTransformParameterfvEXT;
void glGetPixelTransformParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glGetPixelTransformParameterfvEXT = glad__glGetPixelTransformParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetPixelTransformParameterfvEXT(target, pname, params);
}

/// ```c
/// define glGetPixelTransformParameterivEXT GLEW_GET_FUN(__glewGetPixelTransformParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glewGetPixelTransformParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPixelTransformParameterivEXT;
void glGetPixelTransformParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetPixelTransformParameterivEXT = glad__glGetPixelTransformParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetPixelTransformParameterivEXT(target, pname, params);
}

/// ```c
/// define glPixelTransformParameterfEXT GLEW_GET_FUN(__glewPixelTransformParameterfEXT)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glewPixelTransformParameterfEXT
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, const GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameterfEXT;
void glPixelTransformParameterfEXT(int target, int pname, double param) {
  final _glPixelTransformParameterfEXT = glad__glPixelTransformParameterfEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int target, int pname, double param)>();
  return _glPixelTransformParameterfEXT(target, pname, param);
}

/// ```c
/// define glPixelTransformParameterfvEXT GLEW_GET_FUN(__glewPixelTransformParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glewPixelTransformParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameterfvEXT;
void glPixelTransformParameterfvEXT(int target, int pname, Pointer<Float>? params) {
  final _glPixelTransformParameterfvEXT = glad__glPixelTransformParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glPixelTransformParameterfvEXT(target, pname, params);
}

/// ```c
/// define glPixelTransformParameteriEXT GLEW_GET_FUN(__glewPixelTransformParameteriEXT)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glewPixelTransformParameteriEXT
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, const GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameteriEXT;
void glPixelTransformParameteriEXT(int target, int pname, int param) {
  final _glPixelTransformParameteriEXT = glad__glPixelTransformParameteriEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glPixelTransformParameteriEXT(target, pname, param);
}

/// ```c
/// define glPixelTransformParameterivEXT GLEW_GET_FUN(__glewPixelTransformParameterivEXT)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glewPixelTransformParameterivEXT
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameterivEXT;
void glPixelTransformParameterivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glPixelTransformParameterivEXT = glad__glPixelTransformParameterivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glPixelTransformParameterivEXT(target, pname, params);
}

/// ------------------------ GL_EXT_point_parameters ------------------------
/// ```c
/// define glPointParameterfEXT GLEW_GET_FUN(__glewPointParameterfEXT)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFEXTPROC __glewPointParameterfEXT
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterfEXT;
void glPointParameterfEXT(int pname, double param) {
  final _glPointParameterfEXT = glad__glPointParameterfEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glPointParameterfEXT(pname, param);
}

/// ```c
/// define glPointParameterfvEXT GLEW_GET_FUN(__glewPointParameterfvEXT)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVEXTPROC __glewPointParameterfvEXT
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterfvEXT;
void glPointParameterfvEXT(int pname, Pointer<Float>? params) {
  final _glPointParameterfvEXT = glad__glPointParameterfvEXT!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glPointParameterfvEXT(pname, params);
}

/// ------------------------- GL_EXT_polygon_offset -------------------------
/// ```c
/// define glPolygonOffsetEXT GLEW_GET_FUN(__glewPolygonOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLPOLYGONOFFSETEXTPROC __glewPolygonOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPolygonOffsetEXT;
void glPolygonOffsetEXT(double factor, double bias) {
  final _glPolygonOffsetEXT = glad__glPolygonOffsetEXT!
      .cast<NativeFunction<Void Function(Float factor, Float bias)>>()
      .asFunction<void Function(double factor, double bias)>();
  return _glPolygonOffsetEXT(factor, bias);
}

/// ---------------------- GL_EXT_polygon_offset_clamp ----------------------
/// ```c
/// define glPolygonOffsetClampEXT GLEW_GET_FUN(__glewPolygonOffsetClampEXT)
/// GLEW_FUN_EXPORT PFNGLPOLYGONOFFSETCLAMPEXTPROC __glewPolygonOffsetClampEXT
/// typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPolygonOffsetClampEXT;
void glPolygonOffsetClampEXT(double factor, double units, double clamp) {
  final _glPolygonOffsetClampEXT = glad__glPolygonOffsetClampEXT!
      .cast<NativeFunction<Void Function(Float factor, Float units, Float clamp)>>()
      .asFunction<void Function(double factor, double units, double clamp)>();
  return _glPolygonOffsetClampEXT(factor, units, clamp);
}

/// ------------------------ GL_EXT_provoking_vertex ------------------------
/// ```c
/// define glProvokingVertexEXT GLEW_GET_FUN(__glewProvokingVertexEXT)
/// GLEW_FUN_EXPORT PFNGLPROVOKINGVERTEXEXTPROC __glewProvokingVertexEXT
/// typedef void (GLAPIENTRY * PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProvokingVertexEXT;
void glProvokingVertexEXT(int mode) {
  final _glProvokingVertexEXT = glad__glProvokingVertexEXT!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glProvokingVertexEXT(mode);
}

/// ----------------------- GL_EXT_raster_multisample -----------------------
/// ```c
/// define glCoverageModulationNV GLEW_GET_FUN(__glewCoverageModulationNV)
/// GLEW_FUN_EXPORT PFNGLCOVERAGEMODULATIONNVPROC __glewCoverageModulationNV
/// typedef void (GLAPIENTRY * PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCoverageModulationNV;
void glCoverageModulationNV(int components) {
  final _glCoverageModulationNV = glad__glCoverageModulationNV!
      .cast<NativeFunction<Void Function(Uint32 components)>>()
      .asFunction<void Function(int components)>();
  return _glCoverageModulationNV(components);
}

/// ```c
/// define glCoverageModulationTableNV GLEW_GET_FUN(__glewCoverageModulationTableNV)
/// GLEW_FUN_EXPORT PFNGLCOVERAGEMODULATIONTABLENVPROC __glewCoverageModulationTableNV
/// typedef void (GLAPIENTRY * PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCoverageModulationTableNV;
void glCoverageModulationTableNV(int n, Pointer<Float>? v) {
  final _glCoverageModulationTableNV = glad__glCoverageModulationTableNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Float>? v)>>()
      .asFunction<void Function(int n, Pointer<Float>? v)>();
  return _glCoverageModulationTableNV(n, v);
}

/// ```c
/// define glGetCoverageModulationTableNV GLEW_GET_FUN(__glewGetCoverageModulationTableNV)
/// GLEW_FUN_EXPORT PFNGLGETCOVERAGEMODULATIONTABLENVPROC __glewGetCoverageModulationTableNV
/// typedef void (GLAPIENTRY * PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufsize, GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCoverageModulationTableNV;
void glGetCoverageModulationTableNV(int bufsize, Pointer<Float>? v) {
  final _glGetCoverageModulationTableNV = glad__glGetCoverageModulationTableNV!
      .cast<NativeFunction<Void Function(Uint32 bufsize, Pointer<Float>? v)>>()
      .asFunction<void Function(int bufsize, Pointer<Float>? v)>();
  return _glGetCoverageModulationTableNV(bufsize, v);
}

/// ```c
/// define glRasterSamplesEXT GLEW_GET_FUN(__glewRasterSamplesEXT)
/// GLEW_FUN_EXPORT PFNGLRASTERSAMPLESEXTPROC __glewRasterSamplesEXT
/// typedef void (GLAPIENTRY * PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRasterSamplesEXT;
void glRasterSamplesEXT(int samples, int fixedsamplelocations) {
  final _glRasterSamplesEXT = glad__glRasterSamplesEXT!
      .cast<NativeFunction<Void Function(Uint32 samples, Uint8 fixedsamplelocations)>>()
      .asFunction<void Function(int samples, int fixedsamplelocations)>();
  return _glRasterSamplesEXT(samples, fixedsamplelocations);
}

/// -------------------------- GL_EXT_scene_marker --------------------------
/// ```c
/// define glBeginSceneEXT GLEW_GET_FUN(__glewBeginSceneEXT)
/// GLEW_FUN_EXPORT PFNGLBEGINSCENEEXTPROC __glewBeginSceneEXT
/// typedef void (GLAPIENTRY * PFNGLBEGINSCENEEXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginSceneEXT;
void glBeginSceneEXT() {
  final _glBeginSceneEXT = glad__glBeginSceneEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glBeginSceneEXT();
}

/// ```c
/// define glEndSceneEXT GLEW_GET_FUN(__glewEndSceneEXT)
/// GLEW_FUN_EXPORT PFNGLENDSCENEEXTPROC __glewEndSceneEXT
/// typedef void (GLAPIENTRY * PFNGLENDSCENEEXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndSceneEXT;
void glEndSceneEXT() {
  final _glEndSceneEXT = glad__glEndSceneEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndSceneEXT();
}

/// ------------------------- GL_EXT_secondary_color ------------------------
/// ```c
/// define glSecondaryColor3bEXT GLEW_GET_FUN(__glewSecondaryColor3bEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BEXTPROC __glewSecondaryColor3bEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3bEXT;
void glSecondaryColor3bEXT(int red, int green, int blue) {
  final _glSecondaryColor3bEXT = glad__glSecondaryColor3bEXT!
      .cast<NativeFunction<Void Function(Int8 red, Int8 green, Int8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3bEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3bvEXT GLEW_GET_FUN(__glewSecondaryColor3bvEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BVEXTPROC __glewSecondaryColor3bvEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3bvEXT;
void glSecondaryColor3bvEXT(String v) {
  final _glSecondaryColor3bvEXT = glad__glSecondaryColor3bvEXT!
      .cast<NativeFunction<Void Function(Pointer<Utf8>? v)>>()
      .asFunction<void Function(Pointer<Utf8>? v)>();
  final _vPointer = v.toNativeUtf8();
  final _result = _glSecondaryColor3bvEXT(_vPointer);
  calloc.free(_vPointer);
  return _result;
}

/// ```c
/// define glSecondaryColor3dEXT GLEW_GET_FUN(__glewSecondaryColor3dEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DEXTPROC __glewSecondaryColor3dEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3dEXT;
void glSecondaryColor3dEXT(double red, double green, double blue) {
  final _glSecondaryColor3dEXT = glad__glSecondaryColor3dEXT!
      .cast<NativeFunction<Void Function(Double red, Double green, Double blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return _glSecondaryColor3dEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3dvEXT GLEW_GET_FUN(__glewSecondaryColor3dvEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DVEXTPROC __glewSecondaryColor3dvEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3dvEXT;
void glSecondaryColor3dvEXT(Pointer<Double>? v) {
  final _glSecondaryColor3dvEXT = glad__glSecondaryColor3dvEXT!
      .cast<NativeFunction<Void Function(Pointer<Double>? v)>>()
      .asFunction<void Function(Pointer<Double>? v)>();
  return _glSecondaryColor3dvEXT(v);
}

/// ```c
/// define glSecondaryColor3fEXT GLEW_GET_FUN(__glewSecondaryColor3fEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FEXTPROC __glewSecondaryColor3fEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3fEXT;
void glSecondaryColor3fEXT(double red, double green, double blue) {
  final _glSecondaryColor3fEXT = glad__glSecondaryColor3fEXT!
      .cast<NativeFunction<Void Function(Float red, Float green, Float blue)>>()
      .asFunction<void Function(double red, double green, double blue)>();
  return _glSecondaryColor3fEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3fvEXT GLEW_GET_FUN(__glewSecondaryColor3fvEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FVEXTPROC __glewSecondaryColor3fvEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3fvEXT;
void glSecondaryColor3fvEXT(Pointer<Float>? v) {
  final _glSecondaryColor3fvEXT = glad__glSecondaryColor3fvEXT!
      .cast<NativeFunction<Void Function(Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? v)>();
  return _glSecondaryColor3fvEXT(v);
}

/// ```c
/// define glSecondaryColor3iEXT GLEW_GET_FUN(__glewSecondaryColor3iEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IEXTPROC __glewSecondaryColor3iEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3iEXT;
void glSecondaryColor3iEXT(int red, int green, int blue) {
  final _glSecondaryColor3iEXT = glad__glSecondaryColor3iEXT!
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3iEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3ivEXT GLEW_GET_FUN(__glewSecondaryColor3ivEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IVEXTPROC __glewSecondaryColor3ivEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3ivEXT;
void glSecondaryColor3ivEXT(Pointer<Int32>? v) {
  final _glSecondaryColor3ivEXT = glad__glSecondaryColor3ivEXT!
      .cast<NativeFunction<Void Function(Pointer<Int32>? v)>>()
      .asFunction<void Function(Pointer<Int32>? v)>();
  return _glSecondaryColor3ivEXT(v);
}

/// ```c
/// define glSecondaryColor3sEXT GLEW_GET_FUN(__glewSecondaryColor3sEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SEXTPROC __glewSecondaryColor3sEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3sEXT;
void glSecondaryColor3sEXT(int red, int green, int blue) {
  final _glSecondaryColor3sEXT = glad__glSecondaryColor3sEXT!
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3sEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3svEXT GLEW_GET_FUN(__glewSecondaryColor3svEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SVEXTPROC __glewSecondaryColor3svEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3svEXT;
void glSecondaryColor3svEXT(Pointer<Int16>? v) {
  final _glSecondaryColor3svEXT = glad__glSecondaryColor3svEXT!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glSecondaryColor3svEXT(v);
}

/// ```c
/// define glSecondaryColor3ubEXT GLEW_GET_FUN(__glewSecondaryColor3ubEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBEXTPROC __glewSecondaryColor3ubEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3ubEXT;
void glSecondaryColor3ubEXT(int red, int green, int blue) {
  final _glSecondaryColor3ubEXT = glad__glSecondaryColor3ubEXT!
      .cast<NativeFunction<Void Function(Uint8 red, Uint8 green, Uint8 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3ubEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3ubvEXT GLEW_GET_FUN(__glewSecondaryColor3ubvEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBVEXTPROC __glewSecondaryColor3ubvEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3ubvEXT;
void glSecondaryColor3ubvEXT(Pointer<Uint8>? v) {
  final _glSecondaryColor3ubvEXT = glad__glSecondaryColor3ubvEXT!
      .cast<NativeFunction<Void Function(Pointer<Uint8>? v)>>()
      .asFunction<void Function(Pointer<Uint8>? v)>();
  return _glSecondaryColor3ubvEXT(v);
}

/// ```c
/// define glSecondaryColor3uiEXT GLEW_GET_FUN(__glewSecondaryColor3uiEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIEXTPROC __glewSecondaryColor3uiEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3uiEXT;
void glSecondaryColor3uiEXT(int red, int green, int blue) {
  final _glSecondaryColor3uiEXT = glad__glSecondaryColor3uiEXT!
      .cast<NativeFunction<Void Function(Uint32 red, Uint32 green, Uint32 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3uiEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3uivEXT GLEW_GET_FUN(__glewSecondaryColor3uivEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIVEXTPROC __glewSecondaryColor3uivEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3uivEXT;
void glSecondaryColor3uivEXT(Pointer<Uint32>? v) {
  final _glSecondaryColor3uivEXT = glad__glSecondaryColor3uivEXT!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? v)>();
  return _glSecondaryColor3uivEXT(v);
}

/// ```c
/// define glSecondaryColor3usEXT GLEW_GET_FUN(__glewSecondaryColor3usEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USEXTPROC __glewSecondaryColor3usEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3usEXT;
void glSecondaryColor3usEXT(int red, int green, int blue) {
  final _glSecondaryColor3usEXT = glad__glSecondaryColor3usEXT!
      .cast<NativeFunction<Void Function(Uint16 red, Uint16 green, Uint16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3usEXT(red, green, blue);
}

/// ```c
/// define glSecondaryColor3usvEXT GLEW_GET_FUN(__glewSecondaryColor3usvEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USVEXTPROC __glewSecondaryColor3usvEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3usvEXT;
void glSecondaryColor3usvEXT(Pointer<Uint16>? v) {
  final _glSecondaryColor3usvEXT = glad__glSecondaryColor3usvEXT!
      .cast<NativeFunction<Void Function(Pointer<Uint16>? v)>>()
      .asFunction<void Function(Pointer<Uint16>? v)>();
  return _glSecondaryColor3usvEXT(v);
}

/// ```c
/// define glSecondaryColorPointerEXT GLEW_GET_FUN(__glewSecondaryColorPointerEXT)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTEREXTPROC __glewSecondaryColorPointerEXT
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColorPointerEXT;
void glSecondaryColorPointerEXT(int size, int type, int stride, Pointer<Void>? pointer) {
  final _glSecondaryColorPointerEXT = glad__glSecondaryColorPointerEXT!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glSecondaryColorPointerEXT(size, type, stride, pointer);
}

/// ---------------------------- GL_EXT_semaphore ---------------------------
/// ```c
/// define glDeleteSemaphoresEXT GLEW_GET_FUN(__glewDeleteSemaphoresEXT)
/// GLEW_FUN_EXPORT PFNGLDELETESEMAPHORESEXTPROC __glewDeleteSemaphoresEXT
/// typedef void (GLAPIENTRY * PFNGLDELETESEMAPHORESEXTPROC) (GLsizei n, const GLuint* semaphores)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteSemaphoresEXT;
void glDeleteSemaphoresEXT(int n, Pointer<Uint32>? semaphores) {
  final _glDeleteSemaphoresEXT = glad__glDeleteSemaphoresEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? semaphores)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? semaphores)>();
  return _glDeleteSemaphoresEXT(n, semaphores);
}

/// ```c
/// define glGenSemaphoresEXT GLEW_GET_FUN(__glewGenSemaphoresEXT)
/// GLEW_FUN_EXPORT PFNGLGENSEMAPHORESEXTPROC __glewGenSemaphoresEXT
/// typedef void (GLAPIENTRY * PFNGLGENSEMAPHORESEXTPROC) (GLsizei n, GLuint* semaphores)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenSemaphoresEXT;
void glGenSemaphoresEXT(int n, Pointer<Uint32>? semaphores) {
  final _glGenSemaphoresEXT = glad__glGenSemaphoresEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? semaphores)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? semaphores)>();
  return _glGenSemaphoresEXT(n, semaphores);
}

/// ```c
/// define glGetSemaphoreParameterui64vEXT GLEW_GET_FUN(__glewGetSemaphoreParameterui64vEXT)
/// GLEW_FUN_EXPORT PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC __glewGetSemaphoreParameterui64vEXT
/// typedef void (GLAPIENTRY * PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSemaphoreParameterui64vEXT;
void glGetSemaphoreParameterui64vEXT(int semaphore, int pname, Pointer<Uint64>? params) {
  final _glGetSemaphoreParameterui64vEXT = glad__glGetSemaphoreParameterui64vEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int semaphore, int pname, Pointer<Uint64>? params)>();
  return _glGetSemaphoreParameterui64vEXT(semaphore, pname, params);
}

/// ```c
/// define glIsSemaphoreEXT GLEW_GET_FUN(__glewIsSemaphoreEXT)
/// GLEW_FUN_EXPORT PFNGLISSEMAPHOREEXTPROC __glewIsSemaphoreEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISSEMAPHOREEXTPROC) (GLuint semaphore)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsSemaphoreEXT;
int glIsSemaphoreEXT(int semaphore) {
  final _glIsSemaphoreEXT = glad__glIsSemaphoreEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 semaphore)>>()
      .asFunction<int Function(int semaphore)>();
  return _glIsSemaphoreEXT(semaphore);
}

/// ```c
/// define glSemaphoreParameterui64vEXT GLEW_GET_FUN(__glewSemaphoreParameterui64vEXT)
/// GLEW_FUN_EXPORT PFNGLSEMAPHOREPARAMETERUI64VEXTPROC __glewSemaphoreParameterui64vEXT
/// typedef void (GLAPIENTRY * PFNGLSEMAPHOREPARAMETERUI64VEXTPROC) (GLuint semaphore, GLenum pname, const GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSemaphoreParameterui64vEXT;
void glSemaphoreParameterui64vEXT(int semaphore, int pname, Pointer<Uint64>? params) {
  final _glSemaphoreParameterui64vEXT = glad__glSemaphoreParameterui64vEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int semaphore, int pname, Pointer<Uint64>? params)>();
  return _glSemaphoreParameterui64vEXT(semaphore, pname, params);
}

/// ```c
/// define glSignalSemaphoreEXT GLEW_GET_FUN(__glewSignalSemaphoreEXT)
/// GLEW_FUN_EXPORT PFNGLSIGNALSEMAPHOREEXTPROC __glewSignalSemaphoreEXT
/// typedef void (GLAPIENTRY * PFNGLSIGNALSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSignalSemaphoreEXT;
void glSignalSemaphoreEXT(int semaphore, int numBufferBarriers, Pointer<Uint32>? buffers, int numTextureBarriers, Pointer<Uint32>? textures, Pointer<Uint32>? dstLayouts) {
  final _glSignalSemaphoreEXT = glad__glSignalSemaphoreEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 numBufferBarriers, Pointer<Uint32>? buffers, Uint32 numTextureBarriers, Pointer<Uint32>? textures, Pointer<Uint32>? dstLayouts)>>()
      .asFunction<void Function(int semaphore, int numBufferBarriers, Pointer<Uint32>? buffers, int numTextureBarriers, Pointer<Uint32>? textures, Pointer<Uint32>? dstLayouts)>();
  return _glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}

/// ```c
/// define glWaitSemaphoreEXT GLEW_GET_FUN(__glewWaitSemaphoreEXT)
/// GLEW_FUN_EXPORT PFNGLWAITSEMAPHOREEXTPROC __glewWaitSemaphoreEXT
/// typedef void (GLAPIENTRY * PFNGLWAITSEMAPHOREEXTPROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWaitSemaphoreEXT;
void glWaitSemaphoreEXT(int semaphore, int numBufferBarriers, Pointer<Uint32>? buffers, int numTextureBarriers, Pointer<Uint32>? textures, Pointer<Uint32>? srcLayouts) {
  final _glWaitSemaphoreEXT = glad__glWaitSemaphoreEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 numBufferBarriers, Pointer<Uint32>? buffers, Uint32 numTextureBarriers, Pointer<Uint32>? textures, Pointer<Uint32>? srcLayouts)>>()
      .asFunction<void Function(int semaphore, int numBufferBarriers, Pointer<Uint32>? buffers, int numTextureBarriers, Pointer<Uint32>? textures, Pointer<Uint32>? srcLayouts)>();
  return _glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}

/// -------------------------- GL_EXT_semaphore_fd --------------------------
/// ```c
/// define glImportSemaphoreFdEXT GLEW_GET_FUN(__glewImportSemaphoreFdEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTSEMAPHOREFDEXTPROC __glewImportSemaphoreFdEXT
/// typedef void (GLAPIENTRY * PFNGLIMPORTSEMAPHOREFDEXTPROC) (GLuint semaphore, GLenum handleType, GLint fd)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportSemaphoreFdEXT;
void glImportSemaphoreFdEXT(int semaphore, int handleType, int fd) {
  final _glImportSemaphoreFdEXT = glad__glImportSemaphoreFdEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 handleType, Int32 fd)>>()
      .asFunction<void Function(int semaphore, int handleType, int fd)>();
  return _glImportSemaphoreFdEXT(semaphore, handleType, fd);
}

/// ------------------------- GL_EXT_semaphore_win32 ------------------------
/// ```c
/// define glImportSemaphoreWin32HandleEXT GLEW_GET_FUN(__glewImportSemaphoreWin32HandleEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC __glewImportSemaphoreWin32HandleEXT
/// typedef void (GLAPIENTRY * PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC) (GLuint semaphore, GLenum handleType, void *handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportSemaphoreWin32HandleEXT;
void glImportSemaphoreWin32HandleEXT(int semaphore, int handleType, Pointer<Void>? handle) {
  final _glImportSemaphoreWin32HandleEXT = glad__glImportSemaphoreWin32HandleEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 handleType, Pointer<Void>? handle)>>()
      .asFunction<void Function(int semaphore, int handleType, Pointer<Void>? handle)>();
  return _glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
}

/// ```c
/// define glImportSemaphoreWin32NameEXT GLEW_GET_FUN(__glewImportSemaphoreWin32NameEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC __glewImportSemaphoreWin32NameEXT
/// typedef void (GLAPIENTRY * PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC) (GLuint semaphore, GLenum handleType, const void *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportSemaphoreWin32NameEXT;
void glImportSemaphoreWin32NameEXT(int semaphore, int handleType, Pointer<Void>? name) {
  final _glImportSemaphoreWin32NameEXT = glad__glImportSemaphoreWin32NameEXT!
      .cast<NativeFunction<Void Function(Uint32 semaphore, Uint32 handleType, Pointer<Void>? name)>>()
      .asFunction<void Function(int semaphore, int handleType, Pointer<Void>? name)>();
  return _glImportSemaphoreWin32NameEXT(semaphore, handleType, name);
}

/// --------------------- GL_EXT_separate_shader_objects --------------------
/// ```c
/// define glActiveProgramEXT GLEW_GET_FUN(__glewActiveProgramEXT)
/// GLEW_FUN_EXPORT PFNGLACTIVEPROGRAMEXTPROC __glewActiveProgramEXT
/// typedef void (GLAPIENTRY * PFNGLACTIVEPROGRAMEXTPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glActiveProgramEXT;
void glActiveProgramEXT(int program) {
  final _glActiveProgramEXT = glad__glActiveProgramEXT!
      .cast<NativeFunction<Void Function(Uint32 program)>>()
      .asFunction<void Function(int program)>();
  return _glActiveProgramEXT(program);
}

/// ```c
/// define glCreateShaderProgramEXT GLEW_GET_FUN(__glewCreateShaderProgramEXT)
/// GLEW_FUN_EXPORT PFNGLCREATESHADERPROGRAMEXTPROC __glewCreateShaderProgramEXT
/// typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar* string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateShaderProgramEXT;
int glCreateShaderProgramEXT(int type, String string) {
  final _glCreateShaderProgramEXT = glad__glCreateShaderProgramEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 type, Pointer<Utf8>? string)>>()
      .asFunction<int Function(int type, Pointer<Utf8>? string)>();
  final _stringPointer = string.toNativeUtf8();
  final _result = _glCreateShaderProgramEXT(type, _stringPointer);
  calloc.free(_stringPointer);
  return _result;
}

/// ```c
/// define glUseShaderProgramEXT GLEW_GET_FUN(__glewUseShaderProgramEXT)
/// GLEW_FUN_EXPORT PFNGLUSESHADERPROGRAMEXTPROC __glewUseShaderProgramEXT
/// typedef void (GLAPIENTRY * PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUseShaderProgramEXT;
void glUseShaderProgramEXT(int type, int program) {
  final _glUseShaderProgramEXT = glad__glUseShaderProgramEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 program)>>()
      .asFunction<void Function(int type, int program)>();
  return _glUseShaderProgramEXT(type, program);
}

/// --------------------- GL_EXT_shader_image_load_store --------------------
/// ```c
/// define glBindImageTextureEXT GLEW_GET_FUN(__glewBindImageTextureEXT)
/// GLEW_FUN_EXPORT PFNGLBINDIMAGETEXTUREEXTPROC __glewBindImageTextureEXT
/// typedef void (GLAPIENTRY * PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindImageTextureEXT;
void glBindImageTextureEXT(int index, int texture, int level, int layered, int layer, int access, int format) {
  final _glBindImageTextureEXT = glad__glBindImageTextureEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 texture, Int32 level, Uint8 layered, Int32 layer, Uint32 access, Int32 format)>>()
      .asFunction<void Function(int index, int texture, int level, int layered, int layer, int access, int format)>();
  return _glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
}

/// ```c
/// define glMemoryBarrierEXT GLEW_GET_FUN(__glewMemoryBarrierEXT)
/// GLEW_FUN_EXPORT PFNGLMEMORYBARRIEREXTPROC __glewMemoryBarrierEXT
/// typedef void (GLAPIENTRY * PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMemoryBarrierEXT;
void glMemoryBarrierEXT(int barriers) {
  final _glMemoryBarrierEXT = glad__glMemoryBarrierEXT!
      .cast<NativeFunction<Void Function(Uint32 barriers)>>()
      .asFunction<void Function(int barriers)>();
  return _glMemoryBarrierEXT(barriers);
}

/// ------------------- GL_EXT_shader_pixel_local_storage2 ------------------
/// ```c
/// define glClearPixelLocalStorageuiEXT GLEW_GET_FUN(__glewClearPixelLocalStorageuiEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC __glewClearPixelLocalStorageuiEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC) (GLsizei offset, GLsizei n, const GLuint* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearPixelLocalStorageuiEXT;
void glClearPixelLocalStorageuiEXT(int offset, int n, Pointer<Uint32>? values) {
  final _glClearPixelLocalStorageuiEXT = glad__glClearPixelLocalStorageuiEXT!
      .cast<NativeFunction<Void Function(Uint32 offset, Uint32 n, Pointer<Uint32>? values)>>()
      .asFunction<void Function(int offset, int n, Pointer<Uint32>? values)>();
  return _glClearPixelLocalStorageuiEXT(offset, n, values);
}

/// ```c
/// define glFramebufferPixelLocalStorageSizeEXT GLEW_GET_FUN(__glewFramebufferPixelLocalStorageSizeEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC __glewFramebufferPixelLocalStorageSizeEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC) (GLuint target, GLsizei size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferPixelLocalStorageSizeEXT;
void glFramebufferPixelLocalStorageSizeEXT(int target, int size) {
  final _glFramebufferPixelLocalStorageSizeEXT = glad__glFramebufferPixelLocalStorageSizeEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 size)>>()
      .asFunction<void Function(int target, int size)>();
  return _glFramebufferPixelLocalStorageSizeEXT(target, size);
}

/// ```c
/// define glGetFramebufferPixelLocalStorageSizeEXT GLEW_GET_FUN(__glewGetFramebufferPixelLocalStorageSizeEXT)
/// GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC __glewGetFramebufferPixelLocalStorageSizeEXT
/// typedef GLsizei (GLAPIENTRY * PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC) (GLuint target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFramebufferPixelLocalStorageSizeEXT;
int glGetFramebufferPixelLocalStorageSizeEXT(int target) {
  final _glGetFramebufferPixelLocalStorageSizeEXT = glad__glGetFramebufferPixelLocalStorageSizeEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return _glGetFramebufferPixelLocalStorageSizeEXT(target);
}

/// ------------------------- GL_EXT_sparse_texture -------------------------
/// ```c
/// define glTexPageCommitmentEXT GLEW_GET_FUN(__glewTexPageCommitmentEXT)
/// GLEW_FUN_EXPORT PFNGLTEXPAGECOMMITMENTEXTPROC __glewTexPageCommitmentEXT
/// typedef void (GLAPIENTRY * PFNGLTEXPAGECOMMITMENTEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexPageCommitmentEXT;
void glTexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit) {
  final _glTexPageCommitmentEXT = glad__glTexPageCommitmentEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint8 commit)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit)>();
  return _glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

/// ```c
/// define glTexturePageCommitmentEXT GLEW_GET_FUN(__glewTexturePageCommitmentEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREPAGECOMMITMENTEXTPROC __glewTexturePageCommitmentEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexturePageCommitmentEXT;
void glTexturePageCommitmentEXT(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit) {
  final _glTexturePageCommitmentEXT = glad__glTexturePageCommitmentEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint8 commit)>>()
      .asFunction<void Function(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit)>();
  return _glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

/// ------------------------ GL_EXT_stencil_two_side ------------------------
/// ```c
/// define glActiveStencilFaceEXT GLEW_GET_FUN(__glewActiveStencilFaceEXT)
/// GLEW_FUN_EXPORT PFNGLACTIVESTENCILFACEEXTPROC __glewActiveStencilFaceEXT
/// typedef void (GLAPIENTRY * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glActiveStencilFaceEXT;
void glActiveStencilFaceEXT(int face) {
  final _glActiveStencilFaceEXT = glad__glActiveStencilFaceEXT!
      .cast<NativeFunction<Void Function(Uint32 face)>>()
      .asFunction<void Function(int face)>();
  return _glActiveStencilFaceEXT(face);
}

/// --------------------------- GL_EXT_subtexture ---------------------------
/// ```c
/// define glTexSubImage1DEXT GLEW_GET_FUN(__glewTexSubImage1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE1DEXTPROC __glewTexSubImage1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexSubImage1DEXT;
void glTexSubImage1DEXT(int target, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels) {
  final _glTexSubImage1DEXT = glad__glTexSubImage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int width, int format, int type, Pointer<Void>? pixels)>();
  return _glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
}

/// ```c
/// define glTexSubImage2DEXT GLEW_GET_FUN(__glewTexSubImage2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE2DEXTPROC __glewTexSubImage2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexSubImage2DEXT;
void glTexSubImage2DEXT(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels) {
  final _glTexSubImage2DEXT = glad__glTexSubImage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Pointer<Void>? pixels)>();
  return _glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

/// ```c
/// define glTexSubImage3DEXT GLEW_GET_FUN(__glewTexSubImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DEXTPROC __glewTexSubImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexSubImage3DEXT;
void glTexSubImage3DEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels) {
  final _glTexSubImage3DEXT = glad__glTexSubImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels)>();
  return _glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/// ---------------------------- GL_EXT_texture3D ---------------------------
/// ```c
/// define glTexImage3DEXT GLEW_GET_FUN(__glewTexImage3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE3DEXTPROC __glewTexImage3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage3DEXT;
void glTexImage3DEXT(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTexImage3DEXT = glad__glTexImage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

/// -------------------------- GL_EXT_texture_array -------------------------
/// ```c
/// define glFramebufferTextureLayerEXT GLEW_GET_FUN(__glewFramebufferTextureLayerEXT)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glewFramebufferTextureLayerEXT
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureLayerEXT;
void glFramebufferTextureLayerEXT(int target, int attachment, int texture, int level, int layer) {
  final _glFramebufferTextureLayerEXT = glad__glFramebufferTextureLayerEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int layer)>();
  return _glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
}

/// ---------------------- GL_EXT_texture_buffer_object ---------------------
/// ```c
/// define glTexBufferEXT GLEW_GET_FUN(__glewTexBufferEXT)
/// GLEW_FUN_EXPORT PFNGLTEXBUFFEREXTPROC __glewTexBufferEXT
/// typedef void (GLAPIENTRY * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexBufferEXT;
void glTexBufferEXT(int target, int internalformat, int buffer) {
  final _glTexBufferEXT = glad__glTexBufferEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 buffer)>>()
      .asFunction<void Function(int target, int internalformat, int buffer)>();
  return _glTexBufferEXT(target, internalformat, buffer);
}

/// ------------------------- GL_EXT_texture_integer ------------------------
/// ```c
/// define glClearColorIiEXT GLEW_GET_FUN(__glewClearColorIiEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARCOLORIIEXTPROC __glewClearColorIiEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearColorIiEXT;
void glClearColorIiEXT(int red, int green, int blue, int alpha) {
  final _glClearColorIiEXT = glad__glClearColorIiEXT!
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)>>()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return _glClearColorIiEXT(red, green, blue, alpha);
}

/// ```c
/// define glClearColorIuiEXT GLEW_GET_FUN(__glewClearColorIuiEXT)
/// GLEW_FUN_EXPORT PFNGLCLEARCOLORIUIEXTPROC __glewClearColorIuiEXT
/// typedef void (GLAPIENTRY * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearColorIuiEXT;
void glClearColorIuiEXT(int red, int green, int blue, int alpha) {
  final _glClearColorIuiEXT = glad__glClearColorIuiEXT!
      .cast<NativeFunction<Void Function(Uint32 red, Uint32 green, Uint32 blue, Uint32 alpha)>>()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return _glClearColorIuiEXT(red, green, blue, alpha);
}

/// ```c
/// define glGetTexParameterIivEXT GLEW_GET_FUN(__glewGetTexParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIIVEXTPROC __glewGetTexParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexParameterIivEXT;
void glGetTexParameterIivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glGetTexParameterIivEXT = glad__glGetTexParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetTexParameterIivEXT(target, pname, params);
}

/// ```c
/// define glGetTexParameterIuivEXT GLEW_GET_FUN(__glewGetTexParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIUIVEXTPROC __glewGetTexParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexParameterIuivEXT;
void glGetTexParameterIuivEXT(int target, int pname, Pointer<Uint32>? params) {
  final _glGetTexParameterIuivEXT = glad__glGetTexParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Uint32>? params)>();
  return _glGetTexParameterIuivEXT(target, pname, params);
}

/// ```c
/// define glTexParameterIivEXT GLEW_GET_FUN(__glewTexParameterIivEXT)
/// GLEW_FUN_EXPORT PFNGLTEXPARAMETERIIVEXTPROC __glewTexParameterIivEXT
/// typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexParameterIivEXT;
void glTexParameterIivEXT(int target, int pname, Pointer<Int32>? params) {
  final _glTexParameterIivEXT = glad__glTexParameterIivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glTexParameterIivEXT(target, pname, params);
}

/// ```c
/// define glTexParameterIuivEXT GLEW_GET_FUN(__glewTexParameterIuivEXT)
/// GLEW_FUN_EXPORT PFNGLTEXPARAMETERIUIVEXTPROC __glewTexParameterIuivEXT
/// typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexParameterIuivEXT;
void glTexParameterIuivEXT(int target, int pname, Pointer<Uint32>? params) {
  final _glTexParameterIuivEXT = glad__glTexParameterIuivEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Uint32>? params)>();
  return _glTexParameterIuivEXT(target, pname, params);
}

/// ------------------------- GL_EXT_texture_object -------------------------
/// ```c
/// define glAreTexturesResidentEXT GLEW_GET_FUN(__glewAreTexturesResidentEXT)
/// GLEW_FUN_EXPORT PFNGLARETEXTURESRESIDENTEXTPROC __glewAreTexturesResidentEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint* textures, GLboolean* residences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAreTexturesResidentEXT;
int glAreTexturesResidentEXT(int n, Pointer<Uint32>? textures, Pointer<Uint8>? residences) {
  final _glAreTexturesResidentEXT = glad__glAreTexturesResidentEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 n, Pointer<Uint32>? textures, Pointer<Uint8>? residences)>>()
      .asFunction<int Function(int n, Pointer<Uint32>? textures, Pointer<Uint8>? residences)>();
  return _glAreTexturesResidentEXT(n, textures, residences);
}

/// ```c
/// define glBindTextureEXT GLEW_GET_FUN(__glewBindTextureEXT)
/// GLEW_FUN_EXPORT PFNGLBINDTEXTUREEXTPROC __glewBindTextureEXT
/// typedef void (GLAPIENTRY * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTextureEXT;
void glBindTextureEXT(int target, int texture) {
  final _glBindTextureEXT = glad__glBindTextureEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 texture)>>()
      .asFunction<void Function(int target, int texture)>();
  return _glBindTextureEXT(target, texture);
}

/// ```c
/// define glDeleteTexturesEXT GLEW_GET_FUN(__glewDeleteTexturesEXT)
/// GLEW_FUN_EXPORT PFNGLDELETETEXTURESEXTPROC __glewDeleteTexturesEXT
/// typedef void (GLAPIENTRY * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint* textures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteTexturesEXT;
void glDeleteTexturesEXT(int n, Pointer<Uint32>? textures) {
  final _glDeleteTexturesEXT = glad__glDeleteTexturesEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? textures)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? textures)>();
  return _glDeleteTexturesEXT(n, textures);
}

/// ```c
/// define glGenTexturesEXT GLEW_GET_FUN(__glewGenTexturesEXT)
/// GLEW_FUN_EXPORT PFNGLGENTEXTURESEXTPROC __glewGenTexturesEXT
/// typedef void (GLAPIENTRY * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint* textures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenTexturesEXT;
void glGenTexturesEXT(int n, Pointer<Uint32>? textures) {
  final _glGenTexturesEXT = glad__glGenTexturesEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? textures)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? textures)>();
  return _glGenTexturesEXT(n, textures);
}

/// ```c
/// define glIsTextureEXT GLEW_GET_FUN(__glewIsTextureEXT)
/// GLEW_FUN_EXPORT PFNGLISTEXTUREEXTPROC __glewIsTextureEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREEXTPROC) (GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsTextureEXT;
int glIsTextureEXT(int texture) {
  final _glIsTextureEXT = glad__glIsTextureEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return _glIsTextureEXT(texture);
}

/// ```c
/// define glPrioritizeTexturesEXT GLEW_GET_FUN(__glewPrioritizeTexturesEXT)
/// GLEW_FUN_EXPORT PFNGLPRIORITIZETEXTURESEXTPROC __glewPrioritizeTexturesEXT
/// typedef void (GLAPIENTRY * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint* textures, const GLclampf* priorities)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPrioritizeTexturesEXT;
void glPrioritizeTexturesEXT(int n, Pointer<Uint32>? textures, Pointer<Float>? priorities) {
  final _glPrioritizeTexturesEXT = glad__glPrioritizeTexturesEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? textures, Pointer<Float>? priorities)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? textures, Pointer<Float>? priorities)>();
  return _glPrioritizeTexturesEXT(n, textures, priorities);
}

/// --------------------- GL_EXT_texture_perturb_normal ---------------------
/// ```c
/// define glTextureNormalEXT GLEW_GET_FUN(__glewTextureNormalEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURENORMALEXTPROC __glewTextureNormalEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURENORMALEXTPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureNormalEXT;
void glTextureNormalEXT(int mode) {
  final _glTextureNormalEXT = glad__glTextureNormalEXT!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glTextureNormalEXT(mode);
}

/// ------------------------- GL_EXT_texture_storage ------------------------
/// ```c
/// define glTexStorage1DEXT GLEW_GET_FUN(__glewTexStorage1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE1DEXTPROC __glewTexStorage1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage1DEXT;
void glTexStorage1DEXT(int target, int levels, int internalformat, int width) {
  final _glTexStorage1DEXT = glad__glTexStorage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width)>>()
      .asFunction<void Function(int target, int levels, int internalformat, int width)>();
  return _glTexStorage1DEXT(target, levels, internalformat, width);
}

/// ```c
/// define glTexStorage2DEXT GLEW_GET_FUN(__glewTexStorage2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE2DEXTPROC __glewTexStorage2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage2DEXT;
void glTexStorage2DEXT(int target, int levels, int internalformat, int width, int height) {
  final _glTexStorage2DEXT = glad__glTexStorage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int levels, int internalformat, int width, int height)>();
  return _glTexStorage2DEXT(target, levels, internalformat, width, height);
}

/// ```c
/// define glTexStorage3DEXT GLEW_GET_FUN(__glewTexStorage3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXSTORAGE3DEXTPROC __glewTexStorage3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexStorage3DEXT;
void glTexStorage3DEXT(int target, int levels, int internalformat, int width, int height, int depth) {
  final _glTexStorage3DEXT = glad__glTexStorage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int target, int levels, int internalformat, int width, int height, int depth)>();
  return _glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
}

/// ```c
/// define glTextureStorage1DEXT GLEW_GET_FUN(__glewTextureStorage1DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE1DEXTPROC __glewTextureStorage1DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage1DEXT;
void glTextureStorage1DEXT(int texture, int target, int levels, int internalformat, int width) {
  final _glTextureStorage1DEXT = glad__glTextureStorage1DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width)>>()
      .asFunction<void Function(int texture, int target, int levels, int internalformat, int width)>();
  return _glTextureStorage1DEXT(texture, target, levels, internalformat, width);
}

/// ```c
/// define glTextureStorage2DEXT GLEW_GET_FUN(__glewTextureStorage2DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE2DEXTPROC __glewTextureStorage2DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage2DEXT;
void glTextureStorage2DEXT(int texture, int target, int levels, int internalformat, int width, int height) {
  final _glTextureStorage2DEXT = glad__glTextureStorage2DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int texture, int target, int levels, int internalformat, int width, int height)>();
  return _glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
}

/// ```c
/// define glTextureStorage3DEXT GLEW_GET_FUN(__glewTextureStorage3DEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTURESTORAGE3DEXTPROC __glewTextureStorage3DEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureStorage3DEXT;
void glTextureStorage3DEXT(int texture, int target, int levels, int internalformat, int width, int height, int depth) {
  final _glTextureStorage3DEXT = glad__glTextureStorage3DEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 levels, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int texture, int target, int levels, int internalformat, int width, int height, int depth)>();
  return _glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
}

/// -------------------------- GL_EXT_texture_view --------------------------
/// ```c
/// define glTextureViewEXT GLEW_GET_FUN(__glewTextureViewEXT)
/// GLEW_FUN_EXPORT PFNGLTEXTUREVIEWEXTPROC __glewTextureViewEXT
/// typedef void (GLAPIENTRY * PFNGLTEXTUREVIEWEXTPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureViewEXT;
void glTextureViewEXT(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers) {
  final _glTextureViewEXT = glad__glTextureViewEXT!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 origtexture, Uint32 internalformat, Uint32 minlevel, Uint32 numlevels, Uint32 minlayer, Uint32 numlayers)>>()
      .asFunction<void Function(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers)>();
  return _glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

/// --------------------------- GL_EXT_timer_query --------------------------
/// ```c
/// define glGetQueryObjecti64vEXT GLEW_GET_FUN(__glewGetQueryObjecti64vEXT)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTI64VEXTPROC __glewGetQueryObjecti64vEXT
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjecti64vEXT;
void glGetQueryObjecti64vEXT(int id, int pname, Pointer<Int64>? params) {
  final _glGetQueryObjecti64vEXT = glad__glGetQueryObjecti64vEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int64>? params)>();
  return _glGetQueryObjecti64vEXT(id, pname, params);
}

/// ```c
/// define glGetQueryObjectui64vEXT GLEW_GET_FUN(__glewGetQueryObjectui64vEXT)
/// GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUI64VEXTPROC __glewGetQueryObjectui64vEXT
/// typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetQueryObjectui64vEXT;
void glGetQueryObjectui64vEXT(int id, int pname, Pointer<Uint64>? params) {
  final _glGetQueryObjectui64vEXT = glad__glGetQueryObjectui64vEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint64>? params)>();
  return _glGetQueryObjectui64vEXT(id, pname, params);
}

/// ----------------------- GL_EXT_transform_feedback -----------------------
/// ```c
/// define glBeginTransformFeedbackEXT GLEW_GET_FUN(__glewBeginTransformFeedbackEXT)
/// GLEW_FUN_EXPORT PFNGLBEGINTRANSFORMFEEDBACKEXTPROC __glewBeginTransformFeedbackEXT
/// typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginTransformFeedbackEXT;
void glBeginTransformFeedbackEXT(int primitiveMode) {
  final _glBeginTransformFeedbackEXT = glad__glBeginTransformFeedbackEXT!
      .cast<NativeFunction<Void Function(Uint32 primitiveMode)>>()
      .asFunction<void Function(int primitiveMode)>();
  return _glBeginTransformFeedbackEXT(primitiveMode);
}

/// ```c
/// define glBindBufferBaseEXT GLEW_GET_FUN(__glewBindBufferBaseEXT)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERBASEEXTPROC __glewBindBufferBaseEXT
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferBaseEXT;
void glBindBufferBaseEXT(int target, int index, int buffer) {
  final _glBindBufferBaseEXT = glad__glBindBufferBaseEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer)>>()
      .asFunction<void Function(int target, int index, int buffer)>();
  return _glBindBufferBaseEXT(target, index, buffer);
}

/// ```c
/// define glBindBufferOffsetEXT GLEW_GET_FUN(__glewBindBufferOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFEROFFSETEXTPROC __glewBindBufferOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferOffsetEXT;
void glBindBufferOffsetEXT(int target, int index, int buffer, int offset) {
  final _glBindBufferOffsetEXT = glad__glBindBufferOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer, Uint64 offset)>>()
      .asFunction<void Function(int target, int index, int buffer, int offset)>();
  return _glBindBufferOffsetEXT(target, index, buffer, offset);
}

/// ```c
/// define glBindBufferRangeEXT GLEW_GET_FUN(__glewBindBufferRangeEXT)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERRANGEEXTPROC __glewBindBufferRangeEXT
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferRangeEXT;
void glBindBufferRangeEXT(int target, int index, int buffer, int offset, int size) {
  final _glBindBufferRangeEXT = glad__glBindBufferRangeEXT!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int target, int index, int buffer, int offset, int size)>();
  return _glBindBufferRangeEXT(target, index, buffer, offset, size);
}

/// ```c
/// define glEndTransformFeedbackEXT GLEW_GET_FUN(__glewEndTransformFeedbackEXT)
/// GLEW_FUN_EXPORT PFNGLENDTRANSFORMFEEDBACKEXTPROC __glewEndTransformFeedbackEXT
/// typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndTransformFeedbackEXT;
void glEndTransformFeedbackEXT() {
  final _glEndTransformFeedbackEXT = glad__glEndTransformFeedbackEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndTransformFeedbackEXT();
}

/// ```c
/// define glGetTransformFeedbackVaryingEXT GLEW_GET_FUN(__glewGetTransformFeedbackVaryingEXT)
/// GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC __glewGetTransformFeedbackVaryingEXT
/// typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei *size, GLenum *type, GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTransformFeedbackVaryingEXT;
void glGetTransformFeedbackVaryingEXT(int program, int index, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetTransformFeedbackVaryingEXT = glad__glGetTransformFeedbackVaryingEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int index, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
}

/// ```c
/// define glTransformFeedbackVaryingsEXT GLEW_GET_FUN(__glewTransformFeedbackVaryingsEXT)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC __glewTransformFeedbackVaryingsEXT
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar * const* varyings, GLenum bufferMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformFeedbackVaryingsEXT;
void glTransformFeedbackVaryingsEXT(int program, int count, Pointer<Pointer<Utf8>>? varyings, int bufferMode) {
  final _glTransformFeedbackVaryingsEXT = glad__glTransformFeedbackVaryingsEXT!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 count, Pointer<Pointer<Utf8>>? varyings, Uint32 bufferMode)>>()
      .asFunction<void Function(int program, int count, Pointer<Pointer<Utf8>>? varyings, int bufferMode)>();
  return _glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
}

/// -------------------------- GL_EXT_vertex_array --------------------------
/// ```c
/// define glArrayElementEXT GLEW_GET_FUN(__glewArrayElementEXT)
/// GLEW_FUN_EXPORT PFNGLARRAYELEMENTEXTPROC __glewArrayElementEXT
/// typedef void (GLAPIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glArrayElementEXT;
void glArrayElementEXT(int i) {
  final _glArrayElementEXT = glad__glArrayElementEXT!
      .cast<NativeFunction<Void Function(Int32 i)>>()
      .asFunction<void Function(int i)>();
  return _glArrayElementEXT(i);
}

/// ```c
/// define glColorPointerEXT GLEW_GET_FUN(__glewColorPointerEXT)
/// GLEW_FUN_EXPORT PFNGLCOLORPOINTEREXTPROC __glewColorPointerEXT
/// typedef void (GLAPIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorPointerEXT;
void glColorPointerEXT(int size, int type, int stride, int count, Pointer<Void>? pointer) {
  final _glColorPointerEXT = glad__glColorPointerEXT!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Uint32 count, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, int count, Pointer<Void>? pointer)>();
  return _glColorPointerEXT(size, type, stride, count, pointer);
}

/// ```c
/// define glDrawArraysEXT GLEW_GET_FUN(__glewDrawArraysEXT)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSEXTPROC __glewDrawArraysEXT
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysEXT;
void glDrawArraysEXT(int mode, int first, int count) {
  final _glDrawArraysEXT = glad__glDrawArraysEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count)>>()
      .asFunction<void Function(int mode, int first, int count)>();
  return _glDrawArraysEXT(mode, first, count);
}

/// ```c
/// define glEdgeFlagPointerEXT GLEW_GET_FUN(__glewEdgeFlagPointerEXT)
/// GLEW_FUN_EXPORT PFNGLEDGEFLAGPOINTEREXTPROC __glewEdgeFlagPointerEXT
/// typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean* pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEdgeFlagPointerEXT;
void glEdgeFlagPointerEXT(int stride, int count, Pointer<Uint8>? pointer) {
  final _glEdgeFlagPointerEXT = glad__glEdgeFlagPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 stride, Uint32 count, Pointer<Uint8>? pointer)>>()
      .asFunction<void Function(int stride, int count, Pointer<Uint8>? pointer)>();
  return _glEdgeFlagPointerEXT(stride, count, pointer);
}

/// ```c
/// define glIndexPointerEXT GLEW_GET_FUN(__glewIndexPointerEXT)
/// GLEW_FUN_EXPORT PFNGLINDEXPOINTEREXTPROC __glewIndexPointerEXT
/// typedef void (GLAPIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIndexPointerEXT;
void glIndexPointerEXT(int type, int stride, int count, Pointer<Void>? pointer) {
  final _glIndexPointerEXT = glad__glIndexPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Uint32 count, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, int count, Pointer<Void>? pointer)>();
  return _glIndexPointerEXT(type, stride, count, pointer);
}

/// ```c
/// define glNormalPointerEXT GLEW_GET_FUN(__glewNormalPointerEXT)
/// GLEW_FUN_EXPORT PFNGLNORMALPOINTEREXTPROC __glewNormalPointerEXT
/// typedef void (GLAPIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalPointerEXT;
void glNormalPointerEXT(int type, int stride, int count, Pointer<Void>? pointer) {
  final _glNormalPointerEXT = glad__glNormalPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Uint32 count, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, int count, Pointer<Void>? pointer)>();
  return _glNormalPointerEXT(type, stride, count, pointer);
}

/// ```c
/// define glTexCoordPointerEXT GLEW_GET_FUN(__glewTexCoordPointerEXT)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTEREXTPROC __glewTexCoordPointerEXT
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordPointerEXT;
void glTexCoordPointerEXT(int size, int type, int stride, int count, Pointer<Void>? pointer) {
  final _glTexCoordPointerEXT = glad__glTexCoordPointerEXT!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Uint32 count, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, int count, Pointer<Void>? pointer)>();
  return _glTexCoordPointerEXT(size, type, stride, count, pointer);
}

/// ```c
/// define glVertexPointerEXT GLEW_GET_FUN(__glewVertexPointerEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXPOINTEREXTPROC __glewVertexPointerEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexPointerEXT;
void glVertexPointerEXT(int size, int type, int stride, int count, Pointer<Void>? pointer) {
  final _glVertexPointerEXT = glad__glVertexPointerEXT!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Uint32 count, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, int count, Pointer<Void>? pointer)>();
  return _glVertexPointerEXT(size, type, stride, count, pointer);
}

/// ----------------------- GL_EXT_vertex_array_setXXX ----------------------
/// ```c
/// define glBindArraySetEXT GLEW_GET_FUN(__glewBindArraySetEXT)
/// GLEW_FUN_EXPORT PFNGLBINDARRAYSETEXTPROC __glewBindArraySetEXT
/// typedef void (GLAPIENTRY * PFNGLBINDARRAYSETEXTPROC) (const void *arrayset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindArraySetEXT;
void glBindArraySetEXT(Pointer<Void>? arrayset) {
  final _glBindArraySetEXT = glad__glBindArraySetEXT!
      .cast<NativeFunction<Void Function(Pointer<Void>? arrayset)>>()
      .asFunction<void Function(Pointer<Void>? arrayset)>();
  return _glBindArraySetEXT(arrayset);
}

/// ```c
/// define glCreateArraySetExt GLEW_GET_FUN(__glewCreateArraySetExt)
/// GLEW_FUN_EXPORT PFNGLCREATEARRAYSETEXTPROC __glewCreateArraySetExt
/// typedef const void * (GLAPIENTRY * PFNGLCREATEARRAYSETEXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateArraySetExt;
Pointer<Void>? glCreateArraySetExt() {
  final _glCreateArraySetExt = glad__glCreateArraySetExt!
      .cast<NativeFunction<Pointer<Void>? Function()>>()
      .asFunction<Pointer<Void>? Function()>();
  return _glCreateArraySetExt();
}

/// ```c
/// define glDeleteArraySetsEXT GLEW_GET_FUN(__glewDeleteArraySetsEXT)
/// GLEW_FUN_EXPORT PFNGLDELETEARRAYSETSEXTPROC __glewDeleteArraySetsEXT
/// typedef void (GLAPIENTRY * PFNGLDELETEARRAYSETSEXTPROC) (GLsizei n, const void *arrayset[])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteArraySetsEXT;
void glDeleteArraySetsEXT(int n, Pointer<Void>? arrayset) {
  final _glDeleteArraySetsEXT = glad__glDeleteArraySetsEXT!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Void>? arrayset)>>()
      .asFunction<void Function(int n, Pointer<Void>? arrayset)>();
  return _glDeleteArraySetsEXT(n, arrayset);
}

/// ----------------------- GL_EXT_vertex_attrib_64bit ----------------------
/// ```c
/// define glGetVertexAttribLdvEXT GLEW_GET_FUN(__glewGetVertexAttribLdvEXT)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBLDVEXTPROC __glewGetVertexAttribLdvEXT
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribLdvEXT;
void glGetVertexAttribLdvEXT(int index, int pname, Pointer<Double>? params) {
  final _glGetVertexAttribLdvEXT = glad__glGetVertexAttribLdvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Double>? params)>();
  return _glGetVertexAttribLdvEXT(index, pname, params);
}

/// ```c
/// define glVertexArrayVertexAttribLOffsetEXT GLEW_GET_FUN(__glewVertexArrayVertexAttribLOffsetEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC __glewVertexArrayVertexAttribLOffsetEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayVertexAttribLOffsetEXT;
void glVertexArrayVertexAttribLOffsetEXT(int vaobj, int buffer, int index, int size, int type, int stride, int offset) {
  final _glVertexArrayVertexAttribLOffsetEXT = glad__glVertexArrayVertexAttribLOffsetEXT!
      .cast<NativeFunction<Void Function(Uint32 vaobj, Uint32 buffer, Uint32 index, Int32 size, Uint32 type, Uint32 stride, Uint64 offset)>>()
      .asFunction<void Function(int vaobj, int buffer, int index, int size, int type, int stride, int offset)>();
  return _glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

/// ```c
/// define glVertexAttribL1dEXT GLEW_GET_FUN(__glewVertexAttribL1dEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1DEXTPROC __glewVertexAttribL1dEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1dEXT;
void glVertexAttribL1dEXT(int index, double x) {
  final _glVertexAttribL1dEXT = glad__glVertexAttribL1dEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttribL1dEXT(index, x);
}

/// ```c
/// define glVertexAttribL1dvEXT GLEW_GET_FUN(__glewVertexAttribL1dvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1DVEXTPROC __glewVertexAttribL1dvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1dvEXT;
void glVertexAttribL1dvEXT(int index, Pointer<Double>? v) {
  final _glVertexAttribL1dvEXT = glad__glVertexAttribL1dvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL1dvEXT(index, v);
}

/// ```c
/// define glVertexAttribL2dEXT GLEW_GET_FUN(__glewVertexAttribL2dEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2DEXTPROC __glewVertexAttribL2dEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2dEXT;
void glVertexAttribL2dEXT(int index, double x, double y) {
  final _glVertexAttribL2dEXT = glad__glVertexAttribL2dEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttribL2dEXT(index, x, y);
}

/// ```c
/// define glVertexAttribL2dvEXT GLEW_GET_FUN(__glewVertexAttribL2dvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2DVEXTPROC __glewVertexAttribL2dvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2dvEXT;
void glVertexAttribL2dvEXT(int index, Pointer<Double>? v) {
  final _glVertexAttribL2dvEXT = glad__glVertexAttribL2dvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL2dvEXT(index, v);
}

/// ```c
/// define glVertexAttribL3dEXT GLEW_GET_FUN(__glewVertexAttribL3dEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3DEXTPROC __glewVertexAttribL3dEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3dEXT;
void glVertexAttribL3dEXT(int index, double x, double y, double z) {
  final _glVertexAttribL3dEXT = glad__glVertexAttribL3dEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttribL3dEXT(index, x, y, z);
}

/// ```c
/// define glVertexAttribL3dvEXT GLEW_GET_FUN(__glewVertexAttribL3dvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3DVEXTPROC __glewVertexAttribL3dvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3dvEXT;
void glVertexAttribL3dvEXT(int index, Pointer<Double>? v) {
  final _glVertexAttribL3dvEXT = glad__glVertexAttribL3dvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL3dvEXT(index, v);
}

/// ```c
/// define glVertexAttribL4dEXT GLEW_GET_FUN(__glewVertexAttribL4dEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4DEXTPROC __glewVertexAttribL4dEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4dEXT;
void glVertexAttribL4dEXT(int index, double x, double y, double z, double w) {
  final _glVertexAttribL4dEXT = glad__glVertexAttribL4dEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttribL4dEXT(index, x, y, z, w);
}

/// ```c
/// define glVertexAttribL4dvEXT GLEW_GET_FUN(__glewVertexAttribL4dvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4DVEXTPROC __glewVertexAttribL4dvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4dvEXT;
void glVertexAttribL4dvEXT(int index, Pointer<Double>? v) {
  final _glVertexAttribL4dvEXT = glad__glVertexAttribL4dvEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttribL4dvEXT(index, v);
}

/// ```c
/// define glVertexAttribLPointerEXT GLEW_GET_FUN(__glewVertexAttribLPointerEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBLPOINTEREXTPROC __glewVertexAttribLPointerEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribLPointerEXT;
void glVertexAttribLPointerEXT(int index, int size, int type, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribLPointerEXT = glad__glVertexAttribLPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribLPointerEXT(index, size, type, stride, pointer);
}

/// -------------------------- GL_EXT_vertex_shader -------------------------
/// ```c
/// define glBeginVertexShaderEXT GLEW_GET_FUN(__glewBeginVertexShaderEXT)
/// GLEW_FUN_EXPORT PFNGLBEGINVERTEXSHADEREXTPROC __glewBeginVertexShaderEXT
/// typedef void (GLAPIENTRY * PFNGLBEGINVERTEXSHADEREXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginVertexShaderEXT;
void glBeginVertexShaderEXT() {
  final _glBeginVertexShaderEXT = glad__glBeginVertexShaderEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glBeginVertexShaderEXT();
}

/// ```c
/// define glBindLightParameterEXT GLEW_GET_FUN(__glewBindLightParameterEXT)
/// GLEW_FUN_EXPORT PFNGLBINDLIGHTPARAMETEREXTPROC __glewBindLightParameterEXT
/// typedef GLuint (GLAPIENTRY * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindLightParameterEXT;
int glBindLightParameterEXT(int light, int value) {
  final _glBindLightParameterEXT = glad__glBindLightParameterEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 light, Uint32 value)>>()
      .asFunction<int Function(int light, int value)>();
  return _glBindLightParameterEXT(light, value);
}

/// ```c
/// define glBindMaterialParameterEXT GLEW_GET_FUN(__glewBindMaterialParameterEXT)
/// GLEW_FUN_EXPORT PFNGLBINDMATERIALPARAMETEREXTPROC __glewBindMaterialParameterEXT
/// typedef GLuint (GLAPIENTRY * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindMaterialParameterEXT;
int glBindMaterialParameterEXT(int face, int value) {
  final _glBindMaterialParameterEXT = glad__glBindMaterialParameterEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 face, Uint32 value)>>()
      .asFunction<int Function(int face, int value)>();
  return _glBindMaterialParameterEXT(face, value);
}

/// ```c
/// define glBindParameterEXT GLEW_GET_FUN(__glewBindParameterEXT)
/// GLEW_FUN_EXPORT PFNGLBINDPARAMETEREXTPROC __glewBindParameterEXT
/// typedef GLuint (GLAPIENTRY * PFNGLBINDPARAMETEREXTPROC) (GLenum value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindParameterEXT;
int glBindParameterEXT(int value) {
  final _glBindParameterEXT = glad__glBindParameterEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 value)>>()
      .asFunction<int Function(int value)>();
  return _glBindParameterEXT(value);
}

/// ```c
/// define glBindTexGenParameterEXT GLEW_GET_FUN(__glewBindTexGenParameterEXT)
/// GLEW_FUN_EXPORT PFNGLBINDTEXGENPARAMETEREXTPROC __glewBindTexGenParameterEXT
/// typedef GLuint (GLAPIENTRY * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTexGenParameterEXT;
int glBindTexGenParameterEXT(int unit, int coord, int value) {
  final _glBindTexGenParameterEXT = glad__glBindTexGenParameterEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 unit, Uint32 coord, Uint32 value)>>()
      .asFunction<int Function(int unit, int coord, int value)>();
  return _glBindTexGenParameterEXT(unit, coord, value);
}

/// ```c
/// define glBindTextureUnitParameterEXT GLEW_GET_FUN(__glewBindTextureUnitParameterEXT)
/// GLEW_FUN_EXPORT PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glewBindTextureUnitParameterEXT
/// typedef GLuint (GLAPIENTRY * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTextureUnitParameterEXT;
int glBindTextureUnitParameterEXT(int unit, int value) {
  final _glBindTextureUnitParameterEXT = glad__glBindTextureUnitParameterEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 unit, Uint32 value)>>()
      .asFunction<int Function(int unit, int value)>();
  return _glBindTextureUnitParameterEXT(unit, value);
}

/// ```c
/// define glBindVertexShaderEXT GLEW_GET_FUN(__glewBindVertexShaderEXT)
/// GLEW_FUN_EXPORT PFNGLBINDVERTEXSHADEREXTPROC __glewBindVertexShaderEXT
/// typedef void (GLAPIENTRY * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVertexShaderEXT;
void glBindVertexShaderEXT(int id) {
  final _glBindVertexShaderEXT = glad__glBindVertexShaderEXT!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glBindVertexShaderEXT(id);
}

/// ```c
/// define glDeleteVertexShaderEXT GLEW_GET_FUN(__glewDeleteVertexShaderEXT)
/// GLEW_FUN_EXPORT PFNGLDELETEVERTEXSHADEREXTPROC __glewDeleteVertexShaderEXT
/// typedef void (GLAPIENTRY * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteVertexShaderEXT;
void glDeleteVertexShaderEXT(int id) {
  final _glDeleteVertexShaderEXT = glad__glDeleteVertexShaderEXT!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glDeleteVertexShaderEXT(id);
}

/// ```c
/// define glDisableVariantClientStateEXT GLEW_GET_FUN(__glewDisableVariantClientStateEXT)
/// GLEW_FUN_EXPORT PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glewDisableVariantClientStateEXT
/// typedef void (GLAPIENTRY * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableVariantClientStateEXT;
void glDisableVariantClientStateEXT(int id) {
  final _glDisableVariantClientStateEXT = glad__glDisableVariantClientStateEXT!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glDisableVariantClientStateEXT(id);
}

/// ```c
/// define glEnableVariantClientStateEXT GLEW_GET_FUN(__glewEnableVariantClientStateEXT)
/// GLEW_FUN_EXPORT PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glewEnableVariantClientStateEXT
/// typedef void (GLAPIENTRY * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableVariantClientStateEXT;
void glEnableVariantClientStateEXT(int id) {
  final _glEnableVariantClientStateEXT = glad__glEnableVariantClientStateEXT!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glEnableVariantClientStateEXT(id);
}

/// ```c
/// define glEndVertexShaderEXT GLEW_GET_FUN(__glewEndVertexShaderEXT)
/// GLEW_FUN_EXPORT PFNGLENDVERTEXSHADEREXTPROC __glewEndVertexShaderEXT
/// typedef void (GLAPIENTRY * PFNGLENDVERTEXSHADEREXTPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndVertexShaderEXT;
void glEndVertexShaderEXT() {
  final _glEndVertexShaderEXT = glad__glEndVertexShaderEXT!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndVertexShaderEXT();
}

/// ```c
/// define glExtractComponentEXT GLEW_GET_FUN(__glewExtractComponentEXT)
/// GLEW_FUN_EXPORT PFNGLEXTRACTCOMPONENTEXTPROC __glewExtractComponentEXT
/// typedef void (GLAPIENTRY * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtractComponentEXT;
void glExtractComponentEXT(int res, int src, int num) {
  final _glExtractComponentEXT = glad__glExtractComponentEXT!
      .cast<NativeFunction<Void Function(Uint32 res, Uint32 src, Uint32 num)>>()
      .asFunction<void Function(int res, int src, int num)>();
  return _glExtractComponentEXT(res, src, num);
}

/// ```c
/// define glGenSymbolsEXT GLEW_GET_FUN(__glewGenSymbolsEXT)
/// GLEW_FUN_EXPORT PFNGLGENSYMBOLSEXTPROC __glewGenSymbolsEXT
/// typedef GLuint (GLAPIENTRY * PFNGLGENSYMBOLSEXTPROC) (GLenum dataType, GLenum storageType, GLenum range, GLuint components)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenSymbolsEXT;
int glGenSymbolsEXT(int dataType, int storageType, int range, int components) {
  final _glGenSymbolsEXT = glad__glGenSymbolsEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 dataType, Uint32 storageType, Uint32 range, Uint32 components)>>()
      .asFunction<int Function(int dataType, int storageType, int range, int components)>();
  return _glGenSymbolsEXT(dataType, storageType, range, components);
}

/// ```c
/// define glGenVertexShadersEXT GLEW_GET_FUN(__glewGenVertexShadersEXT)
/// GLEW_FUN_EXPORT PFNGLGENVERTEXSHADERSEXTPROC __glewGenVertexShadersEXT
/// typedef GLuint (GLAPIENTRY * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenVertexShadersEXT;
int glGenVertexShadersEXT(int range) {
  final _glGenVertexShadersEXT = glad__glGenVertexShadersEXT!
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return _glGenVertexShadersEXT(range);
}

/// ```c
/// define glGetInvariantBooleanvEXT GLEW_GET_FUN(__glewGetInvariantBooleanvEXT)
/// GLEW_FUN_EXPORT PFNGLGETINVARIANTBOOLEANVEXTPROC __glewGetInvariantBooleanvEXT
/// typedef void (GLAPIENTRY * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInvariantBooleanvEXT;
void glGetInvariantBooleanvEXT(int id, int value, Pointer<Uint8>? data) {
  final _glGetInvariantBooleanvEXT = glad__glGetInvariantBooleanvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Uint8>? data)>();
  return _glGetInvariantBooleanvEXT(id, value, data);
}

/// ```c
/// define glGetInvariantFloatvEXT GLEW_GET_FUN(__glewGetInvariantFloatvEXT)
/// GLEW_FUN_EXPORT PFNGLGETINVARIANTFLOATVEXTPROC __glewGetInvariantFloatvEXT
/// typedef void (GLAPIENTRY * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInvariantFloatvEXT;
void glGetInvariantFloatvEXT(int id, int value, Pointer<Float>? data) {
  final _glGetInvariantFloatvEXT = glad__glGetInvariantFloatvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Float>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Float>? data)>();
  return _glGetInvariantFloatvEXT(id, value, data);
}

/// ```c
/// define glGetInvariantIntegervEXT GLEW_GET_FUN(__glewGetInvariantIntegervEXT)
/// GLEW_FUN_EXPORT PFNGLGETINVARIANTINTEGERVEXTPROC __glewGetInvariantIntegervEXT
/// typedef void (GLAPIENTRY * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInvariantIntegervEXT;
void glGetInvariantIntegervEXT(int id, int value, Pointer<Int32>? data) {
  final _glGetInvariantIntegervEXT = glad__glGetInvariantIntegervEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Int32>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Int32>? data)>();
  return _glGetInvariantIntegervEXT(id, value, data);
}

/// ```c
/// define glGetLocalConstantBooleanvEXT GLEW_GET_FUN(__glewGetLocalConstantBooleanvEXT)
/// GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glewGetLocalConstantBooleanvEXT
/// typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetLocalConstantBooleanvEXT;
void glGetLocalConstantBooleanvEXT(int id, int value, Pointer<Uint8>? data) {
  final _glGetLocalConstantBooleanvEXT = glad__glGetLocalConstantBooleanvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Uint8>? data)>();
  return _glGetLocalConstantBooleanvEXT(id, value, data);
}

/// ```c
/// define glGetLocalConstantFloatvEXT GLEW_GET_FUN(__glewGetLocalConstantFloatvEXT)
/// GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glewGetLocalConstantFloatvEXT
/// typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetLocalConstantFloatvEXT;
void glGetLocalConstantFloatvEXT(int id, int value, Pointer<Float>? data) {
  final _glGetLocalConstantFloatvEXT = glad__glGetLocalConstantFloatvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Float>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Float>? data)>();
  return _glGetLocalConstantFloatvEXT(id, value, data);
}

/// ```c
/// define glGetLocalConstantIntegervEXT GLEW_GET_FUN(__glewGetLocalConstantIntegervEXT)
/// GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glewGetLocalConstantIntegervEXT
/// typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetLocalConstantIntegervEXT;
void glGetLocalConstantIntegervEXT(int id, int value, Pointer<Int32>? data) {
  final _glGetLocalConstantIntegervEXT = glad__glGetLocalConstantIntegervEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Int32>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Int32>? data)>();
  return _glGetLocalConstantIntegervEXT(id, value, data);
}

/// ```c
/// define glGetVariantBooleanvEXT GLEW_GET_FUN(__glewGetVariantBooleanvEXT)
/// GLEW_FUN_EXPORT PFNGLGETVARIANTBOOLEANVEXTPROC __glewGetVariantBooleanvEXT
/// typedef void (GLAPIENTRY * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVariantBooleanvEXT;
void glGetVariantBooleanvEXT(int id, int value, Pointer<Uint8>? data) {
  final _glGetVariantBooleanvEXT = glad__glGetVariantBooleanvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Uint8>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Uint8>? data)>();
  return _glGetVariantBooleanvEXT(id, value, data);
}

/// ```c
/// define glGetVariantFloatvEXT GLEW_GET_FUN(__glewGetVariantFloatvEXT)
/// GLEW_FUN_EXPORT PFNGLGETVARIANTFLOATVEXTPROC __glewGetVariantFloatvEXT
/// typedef void (GLAPIENTRY * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVariantFloatvEXT;
void glGetVariantFloatvEXT(int id, int value, Pointer<Float>? data) {
  final _glGetVariantFloatvEXT = glad__glGetVariantFloatvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Float>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Float>? data)>();
  return _glGetVariantFloatvEXT(id, value, data);
}

/// ```c
/// define glGetVariantIntegervEXT GLEW_GET_FUN(__glewGetVariantIntegervEXT)
/// GLEW_FUN_EXPORT PFNGLGETVARIANTINTEGERVEXTPROC __glewGetVariantIntegervEXT
/// typedef void (GLAPIENTRY * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVariantIntegervEXT;
void glGetVariantIntegervEXT(int id, int value, Pointer<Int32>? data) {
  final _glGetVariantIntegervEXT = glad__glGetVariantIntegervEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Int32>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Int32>? data)>();
  return _glGetVariantIntegervEXT(id, value, data);
}

/// ```c
/// define glGetVariantPointervEXT GLEW_GET_FUN(__glewGetVariantPointervEXT)
/// GLEW_FUN_EXPORT PFNGLGETVARIANTPOINTERVEXTPROC __glewGetVariantPointervEXT
/// typedef void (GLAPIENTRY * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVariantPointervEXT;
void glGetVariantPointervEXT(int id, int value, Pointer<Pointer<Void>>? data) {
  final _glGetVariantPointervEXT = glad__glGetVariantPointervEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 value, Pointer<Pointer<Void>>? data)>>()
      .asFunction<void Function(int id, int value, Pointer<Pointer<Void>>? data)>();
  return _glGetVariantPointervEXT(id, value, data);
}

/// ```c
/// define glInsertComponentEXT GLEW_GET_FUN(__glewInsertComponentEXT)
/// GLEW_FUN_EXPORT PFNGLINSERTCOMPONENTEXTPROC __glewInsertComponentEXT
/// typedef void (GLAPIENTRY * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInsertComponentEXT;
void glInsertComponentEXT(int res, int src, int num) {
  final _glInsertComponentEXT = glad__glInsertComponentEXT!
      .cast<NativeFunction<Void Function(Uint32 res, Uint32 src, Uint32 num)>>()
      .asFunction<void Function(int res, int src, int num)>();
  return _glInsertComponentEXT(res, src, num);
}

/// ```c
/// define glIsVariantEnabledEXT GLEW_GET_FUN(__glewIsVariantEnabledEXT)
/// GLEW_FUN_EXPORT PFNGLISVARIANTENABLEDEXTPROC __glewIsVariantEnabledEXT
/// typedef GLboolean (GLAPIENTRY * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsVariantEnabledEXT;
int glIsVariantEnabledEXT(int id, int cap) {
  final _glIsVariantEnabledEXT = glad__glIsVariantEnabledEXT!
      .cast<NativeFunction<Uint8 Function(Uint32 id, Uint32 cap)>>()
      .asFunction<int Function(int id, int cap)>();
  return _glIsVariantEnabledEXT(id, cap);
}

/// ```c
/// define glSetInvariantEXT GLEW_GET_FUN(__glewSetInvariantEXT)
/// GLEW_FUN_EXPORT PFNGLSETINVARIANTEXTPROC __glewSetInvariantEXT
/// typedef void (GLAPIENTRY * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, void *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSetInvariantEXT;
void glSetInvariantEXT(int id, int type, Pointer<Void>? addr) {
  final _glSetInvariantEXT = glad__glSetInvariantEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 type, Pointer<Void>? addr)>>()
      .asFunction<void Function(int id, int type, Pointer<Void>? addr)>();
  return _glSetInvariantEXT(id, type, addr);
}

/// ```c
/// define glSetLocalConstantEXT GLEW_GET_FUN(__glewSetLocalConstantEXT)
/// GLEW_FUN_EXPORT PFNGLSETLOCALCONSTANTEXTPROC __glewSetLocalConstantEXT
/// typedef void (GLAPIENTRY * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, void *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSetLocalConstantEXT;
void glSetLocalConstantEXT(int id, int type, Pointer<Void>? addr) {
  final _glSetLocalConstantEXT = glad__glSetLocalConstantEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 type, Pointer<Void>? addr)>>()
      .asFunction<void Function(int id, int type, Pointer<Void>? addr)>();
  return _glSetLocalConstantEXT(id, type, addr);
}

/// ```c
/// define glShaderOp1EXT GLEW_GET_FUN(__glewShaderOp1EXT)
/// GLEW_FUN_EXPORT PFNGLSHADEROP1EXTPROC __glewShaderOp1EXT
/// typedef void (GLAPIENTRY * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderOp1EXT;
void glShaderOp1EXT(int op, int res, int arg1) {
  final _glShaderOp1EXT = glad__glShaderOp1EXT!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 res, Uint32 arg1)>>()
      .asFunction<void Function(int op, int res, int arg1)>();
  return _glShaderOp1EXT(op, res, arg1);
}

/// ```c
/// define glShaderOp2EXT GLEW_GET_FUN(__glewShaderOp2EXT)
/// GLEW_FUN_EXPORT PFNGLSHADEROP2EXTPROC __glewShaderOp2EXT
/// typedef void (GLAPIENTRY * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderOp2EXT;
void glShaderOp2EXT(int op, int res, int arg1, int arg2) {
  final _glShaderOp2EXT = glad__glShaderOp2EXT!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 res, Uint32 arg1, Uint32 arg2)>>()
      .asFunction<void Function(int op, int res, int arg1, int arg2)>();
  return _glShaderOp2EXT(op, res, arg1, arg2);
}

/// ```c
/// define glShaderOp3EXT GLEW_GET_FUN(__glewShaderOp3EXT)
/// GLEW_FUN_EXPORT PFNGLSHADEROP3EXTPROC __glewShaderOp3EXT
/// typedef void (GLAPIENTRY * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glShaderOp3EXT;
void glShaderOp3EXT(int op, int res, int arg1, int arg2, int arg3) {
  final _glShaderOp3EXT = glad__glShaderOp3EXT!
      .cast<NativeFunction<Void Function(Uint32 op, Uint32 res, Uint32 arg1, Uint32 arg2, Uint32 arg3)>>()
      .asFunction<void Function(int op, int res, int arg1, int arg2, int arg3)>();
  return _glShaderOp3EXT(op, res, arg1, arg2, arg3);
}

/// ```c
/// define glSwizzleEXT GLEW_GET_FUN(__glewSwizzleEXT)
/// GLEW_FUN_EXPORT PFNGLSWIZZLEEXTPROC __glewSwizzleEXT
/// typedef void (GLAPIENTRY * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSwizzleEXT;
void glSwizzleEXT(int res, int in_, int outX, int outY, int outZ, int outW) {
  final _glSwizzleEXT = glad__glSwizzleEXT!
      .cast<NativeFunction<Void Function(Uint32 res, Uint32 in_, Uint32 outX, Uint32 outY, Uint32 outZ, Uint32 outW)>>()
      .asFunction<void Function(int res, int in_, int outX, int outY, int outZ, int outW)>();
  return _glSwizzleEXT(res, in_, outX, outY, outZ, outW);
}

/// ```c
/// define glVariantPointerEXT GLEW_GET_FUN(__glewVariantPointerEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTPOINTEREXTPROC __glewVariantPointerEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, void *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantPointerEXT;
void glVariantPointerEXT(int id, int type, int stride, Pointer<Void>? addr) {
  final _glVariantPointerEXT = glad__glVariantPointerEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 type, Uint32 stride, Pointer<Void>? addr)>>()
      .asFunction<void Function(int id, int type, int stride, Pointer<Void>? addr)>();
  return _glVariantPointerEXT(id, type, stride, addr);
}

/// ```c
/// define glVariantbvEXT GLEW_GET_FUN(__glewVariantbvEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTBVEXTPROC __glewVariantbvEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTBVEXTPROC) (GLuint id, GLbyte *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantbvEXT;
void glVariantbvEXT(int id, Pointer<Int8>? addr) {
  final _glVariantbvEXT = glad__glVariantbvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Int8>? addr)>>()
      .asFunction<void Function(int id, Pointer<Int8>? addr)>();
  return _glVariantbvEXT(id, addr);
}

/// ```c
/// define glVariantdvEXT GLEW_GET_FUN(__glewVariantdvEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTDVEXTPROC __glewVariantdvEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTDVEXTPROC) (GLuint id, GLdouble *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantdvEXT;
void glVariantdvEXT(int id, Pointer<Double>? addr) {
  final _glVariantdvEXT = glad__glVariantdvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Double>? addr)>>()
      .asFunction<void Function(int id, Pointer<Double>? addr)>();
  return _glVariantdvEXT(id, addr);
}

/// ```c
/// define glVariantfvEXT GLEW_GET_FUN(__glewVariantfvEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTFVEXTPROC __glewVariantfvEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTFVEXTPROC) (GLuint id, GLfloat *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantfvEXT;
void glVariantfvEXT(int id, Pointer<Float>? addr) {
  final _glVariantfvEXT = glad__glVariantfvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Float>? addr)>>()
      .asFunction<void Function(int id, Pointer<Float>? addr)>();
  return _glVariantfvEXT(id, addr);
}

/// ```c
/// define glVariantivEXT GLEW_GET_FUN(__glewVariantivEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTIVEXTPROC __glewVariantivEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTIVEXTPROC) (GLuint id, GLint *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantivEXT;
void glVariantivEXT(int id, Pointer<Int32>? addr) {
  final _glVariantivEXT = glad__glVariantivEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Int32>? addr)>>()
      .asFunction<void Function(int id, Pointer<Int32>? addr)>();
  return _glVariantivEXT(id, addr);
}

/// ```c
/// define glVariantsvEXT GLEW_GET_FUN(__glewVariantsvEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTSVEXTPROC __glewVariantsvEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTSVEXTPROC) (GLuint id, GLshort *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantsvEXT;
void glVariantsvEXT(int id, Pointer<Int16>? addr) {
  final _glVariantsvEXT = glad__glVariantsvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Int16>? addr)>>()
      .asFunction<void Function(int id, Pointer<Int16>? addr)>();
  return _glVariantsvEXT(id, addr);
}

/// ```c
/// define glVariantubvEXT GLEW_GET_FUN(__glewVariantubvEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTUBVEXTPROC __glewVariantubvEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTUBVEXTPROC) (GLuint id, GLubyte *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantubvEXT;
void glVariantubvEXT(int id, Pointer<Uint8>? addr) {
  final _glVariantubvEXT = glad__glVariantubvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Uint8>? addr)>>()
      .asFunction<void Function(int id, Pointer<Uint8>? addr)>();
  return _glVariantubvEXT(id, addr);
}

/// ```c
/// define glVariantuivEXT GLEW_GET_FUN(__glewVariantuivEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTUIVEXTPROC __glewVariantuivEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTUIVEXTPROC) (GLuint id, GLuint *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantuivEXT;
void glVariantuivEXT(int id, Pointer<Uint32>? addr) {
  final _glVariantuivEXT = glad__glVariantuivEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Uint32>? addr)>>()
      .asFunction<void Function(int id, Pointer<Uint32>? addr)>();
  return _glVariantuivEXT(id, addr);
}

/// ```c
/// define glVariantusvEXT GLEW_GET_FUN(__glewVariantusvEXT)
/// GLEW_FUN_EXPORT PFNGLVARIANTUSVEXTPROC __glewVariantusvEXT
/// typedef void (GLAPIENTRY * PFNGLVARIANTUSVEXTPROC) (GLuint id, GLushort *addr)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVariantusvEXT;
void glVariantusvEXT(int id, Pointer<Uint16>? addr) {
  final _glVariantusvEXT = glad__glVariantusvEXT!
      .cast<NativeFunction<Void Function(Uint32 id, Pointer<Uint16>? addr)>>()
      .asFunction<void Function(int id, Pointer<Uint16>? addr)>();
  return _glVariantusvEXT(id, addr);
}

/// ```c
/// define glWriteMaskEXT GLEW_GET_FUN(__glewWriteMaskEXT)
/// GLEW_FUN_EXPORT PFNGLWRITEMASKEXTPROC __glewWriteMaskEXT
/// typedef void (GLAPIENTRY * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWriteMaskEXT;
void glWriteMaskEXT(int res, int in_, int outX, int outY, int outZ, int outW) {
  final _glWriteMaskEXT = glad__glWriteMaskEXT!
      .cast<NativeFunction<Void Function(Uint32 res, Uint32 in_, Uint32 outX, Uint32 outY, Uint32 outZ, Uint32 outW)>>()
      .asFunction<void Function(int res, int in_, int outX, int outY, int outZ, int outW)>();
  return _glWriteMaskEXT(res, in_, outX, outY, outZ, outW);
}

/// ------------------------ GL_EXT_vertex_weighting ------------------------
/// ```c
/// define glVertexWeightPointerEXT GLEW_GET_FUN(__glewVertexWeightPointerEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTPOINTEREXTPROC __glewVertexWeightPointerEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexWeightPointerEXT;
void glVertexWeightPointerEXT(int size, int type, int stride, Pointer<Void>? pointer) {
  final _glVertexWeightPointerEXT = glad__glVertexWeightPointerEXT!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glVertexWeightPointerEXT(size, type, stride, pointer);
}

/// ```c
/// define glVertexWeightfEXT GLEW_GET_FUN(__glewVertexWeightfEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTFEXTPROC __glewVertexWeightfEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexWeightfEXT;
void glVertexWeightfEXT(double weight) {
  final _glVertexWeightfEXT = glad__glVertexWeightfEXT!
      .cast<NativeFunction<Void Function(Float weight)>>()
      .asFunction<void Function(double weight)>();
  return _glVertexWeightfEXT(weight);
}

/// ```c
/// define glVertexWeightfvEXT GLEW_GET_FUN(__glewVertexWeightfvEXT)
/// GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTFVEXTPROC __glewVertexWeightfvEXT
/// typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFVEXTPROC) (GLfloat* weight)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexWeightfvEXT;
void glVertexWeightfvEXT(Pointer<Float>? weight) {
  final _glVertexWeightfvEXT = glad__glVertexWeightfvEXT!
      .cast<NativeFunction<Void Function(Pointer<Float>? weight)>>()
      .asFunction<void Function(Pointer<Float>? weight)>();
  return _glVertexWeightfvEXT(weight);
}

/// ------------------------ GL_EXT_win32_keyed_mutex -----------------------
/// ```c
/// define glAcquireKeyedMutexWin32EXT GLEW_GET_FUN(__glewAcquireKeyedMutexWin32EXT)
/// GLEW_FUN_EXPORT PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC __glewAcquireKeyedMutexWin32EXT
/// typedef GLboolean (GLAPIENTRY * PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key, GLuint timeout)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAcquireKeyedMutexWin32EXT;
int glAcquireKeyedMutexWin32EXT(int memory, int key, int timeout) {
  final _glAcquireKeyedMutexWin32EXT = glad__glAcquireKeyedMutexWin32EXT!
      .cast<NativeFunction<Uint8 Function(Uint32 memory, Uint64 key, Uint32 timeout)>>()
      .asFunction<int Function(int memory, int key, int timeout)>();
  return _glAcquireKeyedMutexWin32EXT(memory, key, timeout);
}

/// ```c
/// define glReleaseKeyedMutexWin32EXT GLEW_GET_FUN(__glewReleaseKeyedMutexWin32EXT)
/// GLEW_FUN_EXPORT PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC __glewReleaseKeyedMutexWin32EXT
/// typedef GLboolean (GLAPIENTRY * PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC) (GLuint memory, GLuint64 key)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReleaseKeyedMutexWin32EXT;
int glReleaseKeyedMutexWin32EXT(int memory, int key) {
  final _glReleaseKeyedMutexWin32EXT = glad__glReleaseKeyedMutexWin32EXT!
      .cast<NativeFunction<Uint8 Function(Uint32 memory, Uint64 key)>>()
      .asFunction<int Function(int memory, int key)>();
  return _glReleaseKeyedMutexWin32EXT(memory, key);
}

/// ------------------------ GL_EXT_window_rectangles -----------------------
/// ```c
/// define glWindowRectanglesEXT GLEW_GET_FUN(__glewWindowRectanglesEXT)
/// GLEW_FUN_EXPORT PFNGLWINDOWRECTANGLESEXTPROC __glewWindowRectanglesEXT
/// typedef void (GLAPIENTRY * PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint box[])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowRectanglesEXT;
void glWindowRectanglesEXT(int mode, int count, int box) {
  final _glWindowRectanglesEXT = glad__glWindowRectanglesEXT!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Int32 box)>>()
      .asFunction<void Function(int mode, int count, int box)>();
  return _glWindowRectanglesEXT(mode, count, box);
}

/// ------------------------- GL_EXT_x11_sync_object ------------------------
/// ```c
/// define glImportSyncEXT GLEW_GET_FUN(__glewImportSyncEXT)
/// GLEW_FUN_EXPORT PFNGLIMPORTSYNCEXTPROC __glewImportSyncEXT
/// typedef GLsync (GLAPIENTRY * PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImportSyncEXT;
int glImportSyncEXT(int external_sync_type, int external_sync, int flags) {
  final _glImportSyncEXT = glad__glImportSyncEXT!
      .cast<NativeFunction<Uint64 Function(Uint32 external_sync_type, Uint64 external_sync, Uint32 flags)>>()
      .asFunction<int Function(int external_sync_type, int external_sync, int flags)>();
  return _glImportSyncEXT(external_sync_type, external_sync, flags);
}

/// ---------------------- GL_GREMEDY_frame_terminator ----------------------
/// ```c
/// define glFrameTerminatorGREMEDY GLEW_GET_FUN(__glewFrameTerminatorGREMEDY)
/// GLEW_FUN_EXPORT PFNGLFRAMETERMINATORGREMEDYPROC __glewFrameTerminatorGREMEDY
/// typedef void (GLAPIENTRY * PFNGLFRAMETERMINATORGREMEDYPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFrameTerminatorGREMEDY;
void glFrameTerminatorGREMEDY() {
  final _glFrameTerminatorGREMEDY = glad__glFrameTerminatorGREMEDY!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glFrameTerminatorGREMEDY();
}

/// ------------------------ GL_GREMEDY_string_marker -----------------------
/// ```c
/// define glStringMarkerGREMEDY GLEW_GET_FUN(__glewStringMarkerGREMEDY)
/// GLEW_FUN_EXPORT PFNGLSTRINGMARKERGREMEDYPROC __glewStringMarkerGREMEDY
/// typedef void (GLAPIENTRY * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStringMarkerGREMEDY;
void glStringMarkerGREMEDY(int len, Pointer<Void>? string) {
  final _glStringMarkerGREMEDY = glad__glStringMarkerGREMEDY!
      .cast<NativeFunction<Void Function(Uint32 len, Pointer<Void>? string)>>()
      .asFunction<void Function(int len, Pointer<Void>? string)>();
  return _glStringMarkerGREMEDY(len, string);
}

/// ------------------------- GL_HP_image_transform -------------------------
/// ```c
/// define glGetImageTransformParameterfvHP GLEW_GET_FUN(__glewGetImageTransformParameterfvHP)
/// GLEW_FUN_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glewGetImageTransformParameterfvHP
/// typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetImageTransformParameterfvHP;
void glGetImageTransformParameterfvHP(int target, int pname, Pointer<Float>? params) {
  final _glGetImageTransformParameterfvHP = glad__glGetImageTransformParameterfvHP!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetImageTransformParameterfvHP(target, pname, params);
}

/// ```c
/// define glGetImageTransformParameterivHP GLEW_GET_FUN(__glewGetImageTransformParameterivHP)
/// GLEW_FUN_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glewGetImageTransformParameterivHP
/// typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetImageTransformParameterivHP;
void glGetImageTransformParameterivHP(int target, int pname, Pointer<Int32>? params) {
  final _glGetImageTransformParameterivHP = glad__glGetImageTransformParameterivHP!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetImageTransformParameterivHP(target, pname, params);
}

/// ```c
/// define glImageTransformParameterfHP GLEW_GET_FUN(__glewImageTransformParameterfHP)
/// GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glewImageTransformParameterfHP
/// typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, const GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImageTransformParameterfHP;
void glImageTransformParameterfHP(int target, int pname, double param) {
  final _glImageTransformParameterfHP = glad__glImageTransformParameterfHP!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int target, int pname, double param)>();
  return _glImageTransformParameterfHP(target, pname, param);
}

/// ```c
/// define glImageTransformParameterfvHP GLEW_GET_FUN(__glewImageTransformParameterfvHP)
/// GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glewImageTransformParameterfvHP
/// typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImageTransformParameterfvHP;
void glImageTransformParameterfvHP(int target, int pname, Pointer<Float>? params) {
  final _glImageTransformParameterfvHP = glad__glImageTransformParameterfvHP!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glImageTransformParameterfvHP(target, pname, params);
}

/// ```c
/// define glImageTransformParameteriHP GLEW_GET_FUN(__glewImageTransformParameteriHP)
/// GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glewImageTransformParameteriHP
/// typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, const GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImageTransformParameteriHP;
void glImageTransformParameteriHP(int target, int pname, int param) {
  final _glImageTransformParameteriHP = glad__glImageTransformParameteriHP!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glImageTransformParameteriHP(target, pname, param);
}

/// ```c
/// define glImageTransformParameterivHP GLEW_GET_FUN(__glewImageTransformParameterivHP)
/// GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glewImageTransformParameterivHP
/// typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glImageTransformParameterivHP;
void glImageTransformParameterivHP(int target, int pname, Pointer<Int32>? params) {
  final _glImageTransformParameterivHP = glad__glImageTransformParameterivHP!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glImageTransformParameterivHP(target, pname, params);
}

/// ---------------------- GL_IBM_multimode_draw_arrays ---------------------
/// ```c
/// define glMultiModeDrawArraysIBM GLEW_GET_FUN(__glewMultiModeDrawArraysIBM)
/// GLEW_FUN_EXPORT PFNGLMULTIMODEDRAWARRAYSIBMPROC __glewMultiModeDrawArraysIBM
/// typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiModeDrawArraysIBM;
void glMultiModeDrawArraysIBM(Pointer<Uint32>? mode, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount, int modestride) {
  final _glMultiModeDrawArraysIBM = glad__glMultiModeDrawArraysIBM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? mode, Pointer<Int32>? first, Pointer<Uint32>? count, Uint32 primcount, Int32 modestride)>>()
      .asFunction<void Function(Pointer<Uint32>? mode, Pointer<Int32>? first, Pointer<Uint32>? count, int primcount, int modestride)>();
  return _glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
}

/// ```c
/// define glMultiModeDrawElementsIBM GLEW_GET_FUN(__glewMultiModeDrawElementsIBM)
/// GLEW_FUN_EXPORT PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glewMultiModeDrawElementsIBM
/// typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum* mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiModeDrawElementsIBM;
void glMultiModeDrawElementsIBM(Pointer<Uint32>? mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount, int modestride) {
  final _glMultiModeDrawElementsIBM = glad__glMultiModeDrawElementsIBM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? mode, Pointer<Uint32>? count, Uint32 type, Pointer<Pointer<Void>>? indices, Uint32 primcount, Int32 modestride)>>()
      .asFunction<void Function(Pointer<Uint32>? mode, Pointer<Uint32>? count, int type, Pointer<Pointer<Void>>? indices, int primcount, int modestride)>();
  return _glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
}

/// ----------------------- GL_IBM_vertex_array_lists -----------------------
/// ```c
/// define glColorPointerListIBM GLEW_GET_FUN(__glewColorPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLCOLORPOINTERLISTIBMPROC __glewColorPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorPointerListIBM;
void glColorPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glColorPointerListIBM = glad__glColorPointerListIBM!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

/// ```c
/// define glEdgeFlagPointerListIBM GLEW_GET_FUN(__glewEdgeFlagPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLEDGEFLAGPOINTERLISTIBMPROC __glewEdgeFlagPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean ** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEdgeFlagPointerListIBM;
void glEdgeFlagPointerListIBM(int stride, Pointer<Pointer<Uint8>>? pointer, int ptrstride) {
  final _glEdgeFlagPointerListIBM = glad__glEdgeFlagPointerListIBM!
      .cast<NativeFunction<Void Function(Int32 stride, Pointer<Pointer<Uint8>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int stride, Pointer<Pointer<Uint8>>? pointer, int ptrstride)>();
  return _glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
}

/// ```c
/// define glFogCoordPointerListIBM GLEW_GET_FUN(__glewFogCoordPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTERLISTIBMPROC __glewFogCoordPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordPointerListIBM;
void glFogCoordPointerListIBM(int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glFogCoordPointerListIBM = glad__glFogCoordPointerListIBM!
      .cast<NativeFunction<Void Function(Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
}

/// ```c
/// define glIndexPointerListIBM GLEW_GET_FUN(__glewIndexPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLINDEXPOINTERLISTIBMPROC __glewIndexPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIndexPointerListIBM;
void glIndexPointerListIBM(int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glIndexPointerListIBM = glad__glIndexPointerListIBM!
      .cast<NativeFunction<Void Function(Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glIndexPointerListIBM(type, stride, pointer, ptrstride);
}

/// ```c
/// define glNormalPointerListIBM GLEW_GET_FUN(__glewNormalPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLNORMALPOINTERLISTIBMPROC __glewNormalPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalPointerListIBM;
void glNormalPointerListIBM(int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glNormalPointerListIBM = glad__glNormalPointerListIBM!
      .cast<NativeFunction<Void Function(Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glNormalPointerListIBM(type, stride, pointer, ptrstride);
}

/// ```c
/// define glSecondaryColorPointerListIBM GLEW_GET_FUN(__glewSecondaryColorPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glewSecondaryColorPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColorPointerListIBM;
void glSecondaryColorPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glSecondaryColorPointerListIBM = glad__glSecondaryColorPointerListIBM!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

/// ```c
/// define glTexCoordPointerListIBM GLEW_GET_FUN(__glewTexCoordPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTERLISTIBMPROC __glewTexCoordPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordPointerListIBM;
void glTexCoordPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glTexCoordPointerListIBM = glad__glTexCoordPointerListIBM!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
}

/// ```c
/// define glVertexPointerListIBM GLEW_GET_FUN(__glewVertexPointerListIBM)
/// GLEW_FUN_EXPORT PFNGLVERTEXPOINTERLISTIBMPROC __glewVertexPointerListIBM
/// typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexPointerListIBM;
void glVertexPointerListIBM(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride) {
  final _glVertexPointerListIBM = glad__glVertexPointerListIBM!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Int32 stride, Pointer<Pointer<Void>>? pointer, Int32 ptrstride)>>()
      .asFunction<void Function(int size, int type, int stride, Pointer<Pointer<Void>>? pointer, int ptrstride)>();
  return _glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
}

/// -------------------------- GL_INTEL_map_texture -------------------------
/// ```c
/// define glMapTexture2DINTEL GLEW_GET_FUN(__glewMapTexture2DINTEL)
/// GLEW_FUN_EXPORT PFNGLMAPTEXTURE2DINTELPROC __glewMapTexture2DINTEL
/// typedef void * (GLAPIENTRY * PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum *layout)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapTexture2DINTEL;
Pointer<Void>? glMapTexture2DINTEL(int texture, int level, int access, Pointer<Int32>? stride, Pointer<Uint32>? layout) {
  final _glMapTexture2DINTEL = glad__glMapTexture2DINTEL!
      .cast<NativeFunction<Pointer<Void>? Function(Uint32 texture, Int32 level, Uint32 access, Pointer<Int32>? stride, Pointer<Uint32>? layout)>>()
      .asFunction<Pointer<Void>? Function(int texture, int level, int access, Pointer<Int32>? stride, Pointer<Uint32>? layout)>();
  return _glMapTexture2DINTEL(texture, level, access, stride, layout);
}

/// ```c
/// define glSyncTextureINTEL GLEW_GET_FUN(__glewSyncTextureINTEL)
/// GLEW_FUN_EXPORT PFNGLSYNCTEXTUREINTELPROC __glewSyncTextureINTEL
/// typedef void (GLAPIENTRY * PFNGLSYNCTEXTUREINTELPROC) (GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSyncTextureINTEL;
void glSyncTextureINTEL(int texture) {
  final _glSyncTextureINTEL = glad__glSyncTextureINTEL!
      .cast<NativeFunction<Void Function(Uint32 texture)>>()
      .asFunction<void Function(int texture)>();
  return _glSyncTextureINTEL(texture);
}

/// ```c
/// define glUnmapTexture2DINTEL GLEW_GET_FUN(__glewUnmapTexture2DINTEL)
/// GLEW_FUN_EXPORT PFNGLUNMAPTEXTURE2DINTELPROC __glewUnmapTexture2DINTEL
/// typedef void (GLAPIENTRY * PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUnmapTexture2DINTEL;
void glUnmapTexture2DINTEL(int texture, int level) {
  final _glUnmapTexture2DINTEL = glad__glUnmapTexture2DINTEL!
      .cast<NativeFunction<Void Function(Uint32 texture, Int32 level)>>()
      .asFunction<void Function(int texture, int level)>();
  return _glUnmapTexture2DINTEL(texture, level);
}

/// ------------------------ GL_INTEL_parallel_arrays -----------------------
/// ```c
/// define glColorPointervINTEL GLEW_GET_FUN(__glewColorPointervINTEL)
/// GLEW_FUN_EXPORT PFNGLCOLORPOINTERVINTELPROC __glewColorPointervINTEL
/// typedef void (GLAPIENTRY * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorPointervINTEL;
void glColorPointervINTEL(int size, int type, Pointer<Pointer<Void>>? pointer) {
  final _glColorPointervINTEL = glad__glColorPointervINTEL!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int size, int type, Pointer<Pointer<Void>>? pointer)>();
  return _glColorPointervINTEL(size, type, pointer);
}

/// ```c
/// define glNormalPointervINTEL GLEW_GET_FUN(__glewNormalPointervINTEL)
/// GLEW_FUN_EXPORT PFNGLNORMALPOINTERVINTELPROC __glewNormalPointervINTEL
/// typedef void (GLAPIENTRY * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalPointervINTEL;
void glNormalPointervINTEL(int type, Pointer<Pointer<Void>>? pointer) {
  final _glNormalPointervINTEL = glad__glNormalPointervINTEL!
      .cast<NativeFunction<Void Function(Uint32 type, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int type, Pointer<Pointer<Void>>? pointer)>();
  return _glNormalPointervINTEL(type, pointer);
}

/// ```c
/// define glTexCoordPointervINTEL GLEW_GET_FUN(__glewTexCoordPointervINTEL)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTERVINTELPROC __glewTexCoordPointervINTEL
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordPointervINTEL;
void glTexCoordPointervINTEL(int size, int type, Pointer<Pointer<Void>>? pointer) {
  final _glTexCoordPointervINTEL = glad__glTexCoordPointervINTEL!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int size, int type, Pointer<Pointer<Void>>? pointer)>();
  return _glTexCoordPointervINTEL(size, type, pointer);
}

/// ```c
/// define glVertexPointervINTEL GLEW_GET_FUN(__glewVertexPointervINTEL)
/// GLEW_FUN_EXPORT PFNGLVERTEXPOINTERVINTELPROC __glewVertexPointervINTEL
/// typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexPointervINTEL;
void glVertexPointervINTEL(int size, int type, Pointer<Pointer<Void>>? pointer) {
  final _glVertexPointervINTEL = glad__glVertexPointervINTEL!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int size, int type, Pointer<Pointer<Void>>? pointer)>();
  return _glVertexPointervINTEL(size, type, pointer);
}

/// ----------------------- GL_INTEL_performance_query ----------------------
/// ```c
/// define glBeginPerfQueryINTEL GLEW_GET_FUN(__glewBeginPerfQueryINTEL)
/// GLEW_FUN_EXPORT PFNGLBEGINPERFQUERYINTELPROC __glewBeginPerfQueryINTEL
/// typedef void (GLAPIENTRY * PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginPerfQueryINTEL;
void glBeginPerfQueryINTEL(int queryHandle) {
  final _glBeginPerfQueryINTEL = glad__glBeginPerfQueryINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryHandle)>>()
      .asFunction<void Function(int queryHandle)>();
  return _glBeginPerfQueryINTEL(queryHandle);
}

/// ```c
/// define glCreatePerfQueryINTEL GLEW_GET_FUN(__glewCreatePerfQueryINTEL)
/// GLEW_FUN_EXPORT PFNGLCREATEPERFQUERYINTELPROC __glewCreatePerfQueryINTEL
/// typedef void (GLAPIENTRY * PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint* queryHandle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreatePerfQueryINTEL;
void glCreatePerfQueryINTEL(int queryId, Pointer<Uint32>? queryHandle) {
  final _glCreatePerfQueryINTEL = glad__glCreatePerfQueryINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryId, Pointer<Uint32>? queryHandle)>>()
      .asFunction<void Function(int queryId, Pointer<Uint32>? queryHandle)>();
  return _glCreatePerfQueryINTEL(queryId, queryHandle);
}

/// ```c
/// define glDeletePerfQueryINTEL GLEW_GET_FUN(__glewDeletePerfQueryINTEL)
/// GLEW_FUN_EXPORT PFNGLDELETEPERFQUERYINTELPROC __glewDeletePerfQueryINTEL
/// typedef void (GLAPIENTRY * PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeletePerfQueryINTEL;
void glDeletePerfQueryINTEL(int queryHandle) {
  final _glDeletePerfQueryINTEL = glad__glDeletePerfQueryINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryHandle)>>()
      .asFunction<void Function(int queryHandle)>();
  return _glDeletePerfQueryINTEL(queryHandle);
}

/// ```c
/// define glEndPerfQueryINTEL GLEW_GET_FUN(__glewEndPerfQueryINTEL)
/// GLEW_FUN_EXPORT PFNGLENDPERFQUERYINTELPROC __glewEndPerfQueryINTEL
/// typedef void (GLAPIENTRY * PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndPerfQueryINTEL;
void glEndPerfQueryINTEL(int queryHandle) {
  final _glEndPerfQueryINTEL = glad__glEndPerfQueryINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryHandle)>>()
      .asFunction<void Function(int queryHandle)>();
  return _glEndPerfQueryINTEL(queryHandle);
}

/// ```c
/// define glGetFirstPerfQueryIdINTEL GLEW_GET_FUN(__glewGetFirstPerfQueryIdINTEL)
/// GLEW_FUN_EXPORT PFNGLGETFIRSTPERFQUERYIDINTELPROC __glewGetFirstPerfQueryIdINTEL
/// typedef void (GLAPIENTRY * PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint* queryId)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFirstPerfQueryIdINTEL;
void glGetFirstPerfQueryIdINTEL(Pointer<Uint32>? queryId) {
  final _glGetFirstPerfQueryIdINTEL = glad__glGetFirstPerfQueryIdINTEL!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? queryId)>>()
      .asFunction<void Function(Pointer<Uint32>? queryId)>();
  return _glGetFirstPerfQueryIdINTEL(queryId);
}

/// ```c
/// define glGetNextPerfQueryIdINTEL GLEW_GET_FUN(__glewGetNextPerfQueryIdINTEL)
/// GLEW_FUN_EXPORT PFNGLGETNEXTPERFQUERYIDINTELPROC __glewGetNextPerfQueryIdINTEL
/// typedef void (GLAPIENTRY * PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint* nextQueryId)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNextPerfQueryIdINTEL;
void glGetNextPerfQueryIdINTEL(int queryId, Pointer<Uint32>? nextQueryId) {
  final _glGetNextPerfQueryIdINTEL = glad__glGetNextPerfQueryIdINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryId, Pointer<Uint32>? nextQueryId)>>()
      .asFunction<void Function(int queryId, Pointer<Uint32>? nextQueryId)>();
  return _glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
}

/// ```c
/// define glGetPerfCounterInfoINTEL GLEW_GET_FUN(__glewGetPerfCounterInfoINTEL)
/// GLEW_FUN_EXPORT PFNGLGETPERFCOUNTERINFOINTELPROC __glewGetPerfCounterInfoINTEL
/// typedef void (GLAPIENTRY * PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfCounterInfoINTEL;
void glGetPerfCounterInfoINTEL(int queryId, int counterId, int counterNameLength, Pointer<Int8>? counterName, int counterDescLength, Pointer<Int8>? counterDesc, Pointer<Uint32>? counterOffset, Pointer<Uint32>? counterDataSize, Pointer<Uint32>? counterTypeEnum, Pointer<Uint32>? counterDataTypeEnum, Pointer<Uint64>? rawCounterMaxValue) {
  final _glGetPerfCounterInfoINTEL = glad__glGetPerfCounterInfoINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryId, Uint32 counterId, Uint32 counterNameLength, Pointer<Int8>? counterName, Uint32 counterDescLength, Pointer<Int8>? counterDesc, Pointer<Uint32>? counterOffset, Pointer<Uint32>? counterDataSize, Pointer<Uint32>? counterTypeEnum, Pointer<Uint32>? counterDataTypeEnum, Pointer<Uint64>? rawCounterMaxValue)>>()
      .asFunction<void Function(int queryId, int counterId, int counterNameLength, Pointer<Int8>? counterName, int counterDescLength, Pointer<Int8>? counterDesc, Pointer<Uint32>? counterOffset, Pointer<Uint32>? counterDataSize, Pointer<Uint32>? counterTypeEnum, Pointer<Uint32>? counterDataTypeEnum, Pointer<Uint64>? rawCounterMaxValue)>();
  return _glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}

/// ```c
/// define glGetPerfQueryDataINTEL GLEW_GET_FUN(__glewGetPerfQueryDataINTEL)
/// GLEW_FUN_EXPORT PFNGLGETPERFQUERYDATAINTELPROC __glewGetPerfQueryDataINTEL
/// typedef void (GLAPIENTRY * PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfQueryDataINTEL;
void glGetPerfQueryDataINTEL(int queryHandle, int flags, int dataSize, Pointer<Void>? data, Pointer<Uint32>? bytesWritten) {
  final _glGetPerfQueryDataINTEL = glad__glGetPerfQueryDataINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryHandle, Uint32 flags, Uint32 dataSize, Pointer<Void>? data, Pointer<Uint32>? bytesWritten)>>()
      .asFunction<void Function(int queryHandle, int flags, int dataSize, Pointer<Void>? data, Pointer<Uint32>? bytesWritten)>();
  return _glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
}

/// ```c
/// define glGetPerfQueryIdByNameINTEL GLEW_GET_FUN(__glewGetPerfQueryIdByNameINTEL)
/// GLEW_FUN_EXPORT PFNGLGETPERFQUERYIDBYNAMEINTELPROC __glewGetPerfQueryIdByNameINTEL
/// typedef void (GLAPIENTRY * PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar* queryName, GLuint *queryId)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfQueryIdByNameINTEL;
void glGetPerfQueryIdByNameINTEL(Pointer<Int8>? queryName, Pointer<Uint32>? queryId) {
  final _glGetPerfQueryIdByNameINTEL = glad__glGetPerfQueryIdByNameINTEL!
      .cast<NativeFunction<Void Function(Pointer<Int8>? queryName, Pointer<Uint32>? queryId)>>()
      .asFunction<void Function(Pointer<Int8>? queryName, Pointer<Uint32>? queryId)>();
  return _glGetPerfQueryIdByNameINTEL(queryName, queryId);
}

/// ```c
/// define glGetPerfQueryInfoINTEL GLEW_GET_FUN(__glewGetPerfQueryInfoINTEL)
/// GLEW_FUN_EXPORT PFNGLGETPERFQUERYINFOINTELPROC __glewGetPerfQueryInfoINTEL
/// typedef void (GLAPIENTRY * PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPerfQueryInfoINTEL;
void glGetPerfQueryInfoINTEL(int queryId, int queryNameLength, Pointer<Int8>? queryName, Pointer<Uint32>? dataSize, Pointer<Uint32>? noCounters, Pointer<Uint32>? noInstances, Pointer<Uint32>? capsMask) {
  final _glGetPerfQueryInfoINTEL = glad__glGetPerfQueryInfoINTEL!
      .cast<NativeFunction<Void Function(Uint32 queryId, Uint32 queryNameLength, Pointer<Int8>? queryName, Pointer<Uint32>? dataSize, Pointer<Uint32>? noCounters, Pointer<Uint32>? noInstances, Pointer<Uint32>? capsMask)>>()
      .asFunction<void Function(int queryId, int queryNameLength, Pointer<Int8>? queryName, Pointer<Uint32>? dataSize, Pointer<Uint32>? noCounters, Pointer<Uint32>? noInstances, Pointer<Uint32>? capsMask)>();
  return _glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}

/// ------------------------ GL_INTEL_texture_scissor -----------------------
/// ```c
/// define glTexScissorFuncINTEL GLEW_GET_FUN(__glewTexScissorFuncINTEL)
/// GLEW_FUN_EXPORT PFNGLTEXSCISSORFUNCINTELPROC __glewTexScissorFuncINTEL
/// typedef void (GLAPIENTRY * PFNGLTEXSCISSORFUNCINTELPROC) (GLenum target, GLenum lfunc, GLenum hfunc)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexScissorFuncINTEL;
void glTexScissorFuncINTEL(int target, int lfunc, int hfunc) {
  final _glTexScissorFuncINTEL = glad__glTexScissorFuncINTEL!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 lfunc, Uint32 hfunc)>>()
      .asFunction<void Function(int target, int lfunc, int hfunc)>();
  return _glTexScissorFuncINTEL(target, lfunc, hfunc);
}

/// ```c
/// define glTexScissorINTEL GLEW_GET_FUN(__glewTexScissorINTEL)
/// GLEW_FUN_EXPORT PFNGLTEXSCISSORINTELPROC __glewTexScissorINTEL
/// typedef void (GLAPIENTRY * PFNGLTEXSCISSORINTELPROC) (GLenum target, GLclampf tlow, GLclampf thigh)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexScissorINTEL;
void glTexScissorINTEL(int target, double tlow, double thigh) {
  final _glTexScissorINTEL = glad__glTexScissorINTEL!
      .cast<NativeFunction<Void Function(Uint32 target, Float tlow, Float thigh)>>()
      .asFunction<void Function(int target, double tlow, double thigh)>();
  return _glTexScissorINTEL(target, tlow, thigh);
}

/// --------------------- GL_KHR_blend_equation_advanced --------------------
/// ```c
/// define glBlendBarrierKHR GLEW_GET_FUN(__glewBlendBarrierKHR)
/// GLEW_FUN_EXPORT PFNGLBLENDBARRIERKHRPROC __glewBlendBarrierKHR
/// typedef void (GLAPIENTRY * PFNGLBLENDBARRIERKHRPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendBarrierKHR;
void glBlendBarrierKHR() {
  final _glBlendBarrierKHR = glad__glBlendBarrierKHR!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glBlendBarrierKHR();
}

/// ------------------------------ GL_KHR_debug -----------------------------
/// ```c
/// typedef void (GLAPIENTRY *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__GLDEBUGPROC;
void GLDEBUGPROC(int source, int type, int id, int severity, int length, String message, Pointer<Void>? userParam) {
  final _GLDEBUGPROC = glad__GLDEBUGPROC!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 type, Uint32 id, Uint32 severity, Uint32 length, Pointer<Utf8>? message, Pointer<Void>? userParam)>>()
      .asFunction<void Function(int source, int type, int id, int severity, int length, Pointer<Utf8>? message, Pointer<Void>? userParam)>();
  final _messagePointer = message.toNativeUtf8();
  final _result = _GLDEBUGPROC(source, type, id, severity, length, _messagePointer, userParam);
  calloc.free(_messagePointer);
  return _result;
}

/// ```c
/// define glDebugMessageCallback GLEW_GET_FUN(__glewDebugMessageCallback)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGECALLBACKPROC __glewDebugMessageCallback
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageCallback;
void glDebugMessageCallback(Pointer<Void>? callback, Pointer<Void>? userParam) {
  final _glDebugMessageCallback = glad__glDebugMessageCallback!
      .cast<NativeFunction<Void Function(Pointer<Void>? callback, Pointer<Void>? userParam)>>()
      .asFunction<void Function(Pointer<Void>? callback, Pointer<Void>? userParam)>();
  return _glDebugMessageCallback(callback, userParam);
}

/// ```c
/// define glDebugMessageControl GLEW_GET_FUN(__glewDebugMessageControl)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGECONTROLPROC __glewDebugMessageControl
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageControl;
void glDebugMessageControl(int source, int type, int severity, int count, Pointer<Uint32>? ids, int enabled) {
  final _glDebugMessageControl = glad__glDebugMessageControl!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 type, Uint32 severity, Uint32 count, Pointer<Uint32>? ids, Uint8 enabled)>>()
      .asFunction<void Function(int source, int type, int severity, int count, Pointer<Uint32>? ids, int enabled)>();
  return _glDebugMessageControl(source, type, severity, count, ids, enabled);
}

/// ```c
/// define glDebugMessageInsert GLEW_GET_FUN(__glewDebugMessageInsert)
/// GLEW_FUN_EXPORT PFNGLDEBUGMESSAGEINSERTPROC __glewDebugMessageInsert
/// typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDebugMessageInsert;
void glDebugMessageInsert(int source, int type, int id, int severity, int length, String buf) {
  final _glDebugMessageInsert = glad__glDebugMessageInsert!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 type, Uint32 id, Uint32 severity, Uint32 length, Pointer<Utf8>? buf)>>()
      .asFunction<void Function(int source, int type, int id, int severity, int length, Pointer<Utf8>? buf)>();
  final _bufPointer = buf.toNativeUtf8();
  final _result = _glDebugMessageInsert(source, type, id, severity, length, _bufPointer);
  calloc.free(_bufPointer);
  return _result;
}

/// ```c
/// define glGetDebugMessageLog GLEW_GET_FUN(__glewGetDebugMessageLog)
/// GLEW_FUN_EXPORT PFNGLGETDEBUGMESSAGELOGPROC __glewGetDebugMessageLog
/// typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDebugMessageLog;
int glGetDebugMessageLog(int count, int bufSize, Pointer<Uint32>? sources, Pointer<Uint32>? types, Pointer<Uint32>? ids, Pointer<Uint32>? severities, Pointer<Uint32>? lengths, Pointer<Int8>? messageLog) {
  final _glGetDebugMessageLog = glad__glGetDebugMessageLog!
      .cast<NativeFunction<Uint32 Function(Uint32 count, Uint32 bufSize, Pointer<Uint32>? sources, Pointer<Uint32>? types, Pointer<Uint32>? ids, Pointer<Uint32>? severities, Pointer<Uint32>? lengths, Pointer<Int8>? messageLog)>>()
      .asFunction<int Function(int count, int bufSize, Pointer<Uint32>? sources, Pointer<Uint32>? types, Pointer<Uint32>? ids, Pointer<Uint32>? severities, Pointer<Uint32>? lengths, Pointer<Int8>? messageLog)>();
  return _glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

/// ```c
/// define glGetObjectLabel GLEW_GET_FUN(__glewGetObjectLabel)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTLABELPROC __glewGetObjectLabel
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectLabel;
void glGetObjectLabel(int identifier, int name, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? label) {
  final _glGetObjectLabel = glad__glGetObjectLabel!
      .cast<NativeFunction<Void Function(Uint32 identifier, Uint32 name, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? label)>>()
      .asFunction<void Function(int identifier, int name, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? label)>();
  return _glGetObjectLabel(identifier, name, bufSize, length, label);
}

/// ```c
/// define glGetObjectPtrLabel GLEW_GET_FUN(__glewGetObjectPtrLabel)
/// GLEW_FUN_EXPORT PFNGLGETOBJECTPTRLABELPROC __glewGetObjectPtrLabel
/// typedef void (GLAPIENTRY * PFNGLGETOBJECTPTRLABELPROC) (void* ptr, GLsizei bufSize, GLsizei* length, GLchar *label)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetObjectPtrLabel;
void glGetObjectPtrLabel(Pointer<Void>? ptr, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? label) {
  final _glGetObjectPtrLabel = glad__glGetObjectPtrLabel!
      .cast<NativeFunction<Void Function(Pointer<Void>? ptr, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? label)>>()
      .asFunction<void Function(Pointer<Void>? ptr, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? label)>();
  return _glGetObjectPtrLabel(ptr, bufSize, length, label);
}

/// ```c
/// define glObjectLabel GLEW_GET_FUN(__glewObjectLabel)
/// GLEW_FUN_EXPORT PFNGLOBJECTLABELPROC __glewObjectLabel
/// typedef void (GLAPIENTRY * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar* label)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glObjectLabel;
void glObjectLabel(int identifier, int name, int length, String label) {
  final _glObjectLabel = glad__glObjectLabel!
      .cast<NativeFunction<Void Function(Uint32 identifier, Uint32 name, Uint32 length, Pointer<Utf8>? label)>>()
      .asFunction<void Function(int identifier, int name, int length, Pointer<Utf8>? label)>();
  final _labelPointer = label.toNativeUtf8();
  final _result = _glObjectLabel(identifier, name, length, _labelPointer);
  calloc.free(_labelPointer);
  return _result;
}

/// ```c
/// define glObjectPtrLabel GLEW_GET_FUN(__glewObjectPtrLabel)
/// GLEW_FUN_EXPORT PFNGLOBJECTPTRLABELPROC __glewObjectPtrLabel
/// typedef void (GLAPIENTRY * PFNGLOBJECTPTRLABELPROC) (void* ptr, GLsizei length, const GLchar* label)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glObjectPtrLabel;
void glObjectPtrLabel(Pointer<Void>? ptr, int length, String label) {
  final _glObjectPtrLabel = glad__glObjectPtrLabel!
      .cast<NativeFunction<Void Function(Pointer<Void>? ptr, Uint32 length, Pointer<Utf8>? label)>>()
      .asFunction<void Function(Pointer<Void>? ptr, int length, Pointer<Utf8>? label)>();
  final _labelPointer = label.toNativeUtf8();
  final _result = _glObjectPtrLabel(ptr, length, _labelPointer);
  calloc.free(_labelPointer);
  return _result;
}

/// ```c
/// define glPopDebugGroup GLEW_GET_FUN(__glewPopDebugGroup)
/// GLEW_FUN_EXPORT PFNGLPOPDEBUGGROUPPROC __glewPopDebugGroup
/// typedef void (GLAPIENTRY * PFNGLPOPDEBUGGROUPPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPopDebugGroup;
void glPopDebugGroup() {
  final _glPopDebugGroup = glad__glPopDebugGroup!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glPopDebugGroup();
}

/// ```c
/// define glPushDebugGroup GLEW_GET_FUN(__glewPushDebugGroup)
/// GLEW_FUN_EXPORT PFNGLPUSHDEBUGGROUPPROC __glewPushDebugGroup
/// typedef void (GLAPIENTRY * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar * message)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPushDebugGroup;
void glPushDebugGroup(int source, int id, int length, String message) {
  final _glPushDebugGroup = glad__glPushDebugGroup!
      .cast<NativeFunction<Void Function(Uint32 source, Uint32 id, Uint32 length, Pointer<Utf8>? message)>>()
      .asFunction<void Function(int source, int id, int length, Pointer<Utf8>? message)>();
  final _messagePointer = message.toNativeUtf8();
  final _result = _glPushDebugGroup(source, id, length, _messagePointer);
  calloc.free(_messagePointer);
  return _result;
}

/// --------------------- GL_KHR_parallel_shader_compile --------------------
/// ```c
/// define glMaxShaderCompilerThreadsKHR GLEW_GET_FUN(__glewMaxShaderCompilerThreadsKHR)
/// GLEW_FUN_EXPORT PFNGLMAXSHADERCOMPILERTHREADSKHRPROC __glewMaxShaderCompilerThreadsKHR
/// typedef void (GLAPIENTRY * PFNGLMAXSHADERCOMPILERTHREADSKHRPROC) (GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMaxShaderCompilerThreadsKHR;
void glMaxShaderCompilerThreadsKHR(int count) {
  final _glMaxShaderCompilerThreadsKHR = glad__glMaxShaderCompilerThreadsKHR!
      .cast<NativeFunction<Void Function(Uint32 count)>>()
      .asFunction<void Function(int count)>();
  return _glMaxShaderCompilerThreadsKHR(count);
}

/// --------------------------- GL_KHR_robustness ---------------------------
/// ```c
/// define glGetnUniformfv GLEW_GET_FUN(__glewGetnUniformfv)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMFVPROC __glewGetnUniformfv
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformfv;
void glGetnUniformfv(int program, int location, int bufSize, Pointer<Float>? params) {
  final _glGetnUniformfv = glad__glGetnUniformfv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Float>? params)>();
  return _glGetnUniformfv(program, location, bufSize, params);
}

/// ```c
/// define glGetnUniformiv GLEW_GET_FUN(__glewGetnUniformiv)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMIVPROC __glewGetnUniformiv
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformiv;
void glGetnUniformiv(int program, int location, int bufSize, Pointer<Int32>? params) {
  final _glGetnUniformiv = glad__glGetnUniformiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Int32>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Int32>? params)>();
  return _glGetnUniformiv(program, location, bufSize, params);
}

/// ```c
/// define glGetnUniformuiv GLEW_GET_FUN(__glewGetnUniformuiv)
/// GLEW_FUN_EXPORT PFNGLGETNUNIFORMUIVPROC __glewGetnUniformuiv
/// typedef void (GLAPIENTRY * PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetnUniformuiv;
void glGetnUniformuiv(int program, int location, int bufSize, Pointer<Uint32>? params) {
  final _glGetnUniformuiv = glad__glGetnUniformuiv!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 bufSize, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int program, int location, int bufSize, Pointer<Uint32>? params)>();
  return _glGetnUniformuiv(program, location, bufSize, params);
}

/// ```c
/// define glReadnPixels GLEW_GET_FUN(__glewReadnPixels)
/// GLEW_FUN_EXPORT PFNGLREADNPIXELSPROC __glewReadnPixels
/// typedef void (GLAPIENTRY * PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReadnPixels;
void glReadnPixels(int x, int y, int width, int height, int format, int type, int bufSize, Pointer<Void>? data) {
  final _glReadnPixels = glad__glReadnPixels!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Uint32 bufSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int x, int y, int width, int height, int format, int type, int bufSize, Pointer<Void>? data)>();
  return _glReadnPixels(x, y, width, height, format, type, bufSize, data);
}

/// -------------------------- GL_KTX_buffer_region -------------------------
/// ```c
/// define glBufferRegionEnabled GLEW_GET_FUN(__glewBufferRegionEnabled)
/// GLEW_FUN_EXPORT PFNGLBUFFERREGIONENABLEDPROC __glewBufferRegionEnabled
/// typedef GLuint (GLAPIENTRY * PFNGLBUFFERREGIONENABLEDPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferRegionEnabled;
int glBufferRegionEnabled() {
  final _glBufferRegionEnabled = glad__glBufferRegionEnabled!
      .cast<NativeFunction<Uint32 Function()>>()
      .asFunction<int Function()>();
  return _glBufferRegionEnabled();
}

/// ```c
/// define glDeleteBufferRegion GLEW_GET_FUN(__glewDeleteBufferRegion)
/// GLEW_FUN_EXPORT PFNGLDELETEBUFFERREGIONPROC __glewDeleteBufferRegion
/// typedef void (GLAPIENTRY * PFNGLDELETEBUFFERREGIONPROC) (GLenum region)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteBufferRegion;
void glDeleteBufferRegion(int region) {
  final _glDeleteBufferRegion = glad__glDeleteBufferRegion!
      .cast<NativeFunction<Void Function(Uint32 region)>>()
      .asFunction<void Function(int region)>();
  return _glDeleteBufferRegion(region);
}

/// ```c
/// define glDrawBufferRegion GLEW_GET_FUN(__glewDrawBufferRegion)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERREGIONPROC __glewDrawBufferRegion
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERREGIONPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBufferRegion;
void glDrawBufferRegion(int region, int x, int y, int width, int height, int xDest, int yDest) {
  final _glDrawBufferRegion = glad__glDrawBufferRegion!
      .cast<NativeFunction<Void Function(Uint32 region, Int32 x, Int32 y, Uint32 width, Uint32 height, Int32 xDest, Int32 yDest)>>()
      .asFunction<void Function(int region, int x, int y, int width, int height, int xDest, int yDest)>();
  return _glDrawBufferRegion(region, x, y, width, height, xDest, yDest);
}

/// ```c
/// define glNewBufferRegion GLEW_GET_FUN(__glewNewBufferRegion)
/// GLEW_FUN_EXPORT PFNGLNEWBUFFERREGIONPROC __glewNewBufferRegion
/// typedef GLuint (GLAPIENTRY * PFNGLNEWBUFFERREGIONPROC) (GLenum region)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNewBufferRegion;
int glNewBufferRegion(int region) {
  final _glNewBufferRegion = glad__glNewBufferRegion!
      .cast<NativeFunction<Uint32 Function(Uint32 region)>>()
      .asFunction<int Function(int region)>();
  return _glNewBufferRegion(region);
}

/// ```c
/// define glReadBufferRegion GLEW_GET_FUN(__glewReadBufferRegion)
/// GLEW_FUN_EXPORT PFNGLREADBUFFERREGIONPROC __glewReadBufferRegion
/// typedef void (GLAPIENTRY * PFNGLREADBUFFERREGIONPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReadBufferRegion;
void glReadBufferRegion(int region, int x, int y, int width, int height) {
  final _glReadBufferRegion = glad__glReadBufferRegion!
      .cast<NativeFunction<Void Function(Uint32 region, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int region, int x, int y, int width, int height)>();
  return _glReadBufferRegion(region, x, y, width, height);
}

/// ------------------------- GL_MESA_resize_buffers ------------------------
/// ```c
/// define glResizeBuffersMESA GLEW_GET_FUN(__glewResizeBuffersMESA)
/// GLEW_FUN_EXPORT PFNGLRESIZEBUFFERSMESAPROC __glewResizeBuffersMESA
/// typedef void (GLAPIENTRY * PFNGLRESIZEBUFFERSMESAPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResizeBuffersMESA;
void glResizeBuffersMESA() {
  final _glResizeBuffersMESA = glad__glResizeBuffersMESA!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glResizeBuffersMESA();
}

/// --------------------------- GL_MESA_window_pos --------------------------
/// ```c
/// define glWindowPos2dMESA GLEW_GET_FUN(__glewWindowPos2dMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2DMESAPROC __glewWindowPos2dMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2dMESA;
void glWindowPos2dMESA(double x, double y) {
  final _glWindowPos2dMESA = glad__glWindowPos2dMESA!
      .cast<NativeFunction<Void Function(Double x, Double y)>>()
      .asFunction<void Function(double x, double y)>();
  return _glWindowPos2dMESA(x, y);
}

/// ```c
/// define glWindowPos2dvMESA GLEW_GET_FUN(__glewWindowPos2dvMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVMESAPROC __glewWindowPos2dvMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2dvMESA;
void glWindowPos2dvMESA(Pointer<Double>? p) {
  final _glWindowPos2dvMESA = glad__glWindowPos2dvMESA!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos2dvMESA(p);
}

/// ```c
/// define glWindowPos2fMESA GLEW_GET_FUN(__glewWindowPos2fMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2FMESAPROC __glewWindowPos2fMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2fMESA;
void glWindowPos2fMESA(double x, double y) {
  final _glWindowPos2fMESA = glad__glWindowPos2fMESA!
      .cast<NativeFunction<Void Function(Float x, Float y)>>()
      .asFunction<void Function(double x, double y)>();
  return _glWindowPos2fMESA(x, y);
}

/// ```c
/// define glWindowPos2fvMESA GLEW_GET_FUN(__glewWindowPos2fvMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVMESAPROC __glewWindowPos2fvMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2fvMESA;
void glWindowPos2fvMESA(Pointer<Float>? p) {
  final _glWindowPos2fvMESA = glad__glWindowPos2fvMESA!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos2fvMESA(p);
}

/// ```c
/// define glWindowPos2iMESA GLEW_GET_FUN(__glewWindowPos2iMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2IMESAPROC __glewWindowPos2iMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2iMESA;
void glWindowPos2iMESA(int x, int y) {
  final _glWindowPos2iMESA = glad__glWindowPos2iMESA!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glWindowPos2iMESA(x, y);
}

/// ```c
/// define glWindowPos2ivMESA GLEW_GET_FUN(__glewWindowPos2ivMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVMESAPROC __glewWindowPos2ivMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVMESAPROC) (const GLint* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2ivMESA;
void glWindowPos2ivMESA(Pointer<Int32>? p) {
  final _glWindowPos2ivMESA = glad__glWindowPos2ivMESA!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos2ivMESA(p);
}

/// ```c
/// define glWindowPos2sMESA GLEW_GET_FUN(__glewWindowPos2sMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2SMESAPROC __glewWindowPos2sMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2sMESA;
void glWindowPos2sMESA(int x, int y) {
  final _glWindowPos2sMESA = glad__glWindowPos2sMESA!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glWindowPos2sMESA(x, y);
}

/// ```c
/// define glWindowPos2svMESA GLEW_GET_FUN(__glewWindowPos2svMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVMESAPROC __glewWindowPos2svMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos2svMESA;
void glWindowPos2svMESA(Pointer<Int16>? p) {
  final _glWindowPos2svMESA = glad__glWindowPos2svMESA!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos2svMESA(p);
}

/// ```c
/// define glWindowPos3dMESA GLEW_GET_FUN(__glewWindowPos3dMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3DMESAPROC __glewWindowPos3dMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3dMESA;
void glWindowPos3dMESA(double x, double y, double z) {
  final _glWindowPos3dMESA = glad__glWindowPos3dMESA!
      .cast<NativeFunction<Void Function(Double x, Double y, Double z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return _glWindowPos3dMESA(x, y, z);
}

/// ```c
/// define glWindowPos3dvMESA GLEW_GET_FUN(__glewWindowPos3dvMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVMESAPROC __glewWindowPos3dvMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3dvMESA;
void glWindowPos3dvMESA(Pointer<Double>? p) {
  final _glWindowPos3dvMESA = glad__glWindowPos3dvMESA!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos3dvMESA(p);
}

/// ```c
/// define glWindowPos3fMESA GLEW_GET_FUN(__glewWindowPos3fMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3FMESAPROC __glewWindowPos3fMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3fMESA;
void glWindowPos3fMESA(double x, double y, double z) {
  final _glWindowPos3fMESA = glad__glWindowPos3fMESA!
      .cast<NativeFunction<Void Function(Float x, Float y, Float z)>>()
      .asFunction<void Function(double x, double y, double z)>();
  return _glWindowPos3fMESA(x, y, z);
}

/// ```c
/// define glWindowPos3fvMESA GLEW_GET_FUN(__glewWindowPos3fvMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVMESAPROC __glewWindowPos3fvMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3fvMESA;
void glWindowPos3fvMESA(Pointer<Float>? p) {
  final _glWindowPos3fvMESA = glad__glWindowPos3fvMESA!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos3fvMESA(p);
}

/// ```c
/// define glWindowPos3iMESA GLEW_GET_FUN(__glewWindowPos3iMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3IMESAPROC __glewWindowPos3iMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3iMESA;
void glWindowPos3iMESA(int x, int y, int z) {
  final _glWindowPos3iMESA = glad__glWindowPos3iMESA!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glWindowPos3iMESA(x, y, z);
}

/// ```c
/// define glWindowPos3ivMESA GLEW_GET_FUN(__glewWindowPos3ivMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVMESAPROC __glewWindowPos3ivMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVMESAPROC) (const GLint* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3ivMESA;
void glWindowPos3ivMESA(Pointer<Int32>? p) {
  final _glWindowPos3ivMESA = glad__glWindowPos3ivMESA!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos3ivMESA(p);
}

/// ```c
/// define glWindowPos3sMESA GLEW_GET_FUN(__glewWindowPos3sMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3SMESAPROC __glewWindowPos3sMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3sMESA;
void glWindowPos3sMESA(int x, int y, int z) {
  final _glWindowPos3sMESA = glad__glWindowPos3sMESA!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glWindowPos3sMESA(x, y, z);
}

/// ```c
/// define glWindowPos3svMESA GLEW_GET_FUN(__glewWindowPos3svMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVMESAPROC __glewWindowPos3svMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos3svMESA;
void glWindowPos3svMESA(Pointer<Int16>? p) {
  final _glWindowPos3svMESA = glad__glWindowPos3svMESA!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos3svMESA(p);
}

/// ```c
/// define glWindowPos4dMESA GLEW_GET_FUN(__glewWindowPos4dMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4DMESAPROC __glewWindowPos4dMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4dMESA;
void glWindowPos4dMESA(double x, double y, double z, double arg3) {
  final _glWindowPos4dMESA = glad__glWindowPos4dMESA!
      .cast<NativeFunction<Void Function(Double x, Double y, Double z, Double arg3)>>()
      .asFunction<void Function(double x, double y, double z, double arg3)>();
  return _glWindowPos4dMESA(x, y, z, arg3);
}

/// ```c
/// define glWindowPos4dvMESA GLEW_GET_FUN(__glewWindowPos4dvMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4DVMESAPROC __glewWindowPos4dvMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4dvMESA;
void glWindowPos4dvMESA(Pointer<Double>? p) {
  final _glWindowPos4dvMESA = glad__glWindowPos4dvMESA!
      .cast<NativeFunction<Void Function(Pointer<Double>? p)>>()
      .asFunction<void Function(Pointer<Double>? p)>();
  return _glWindowPos4dvMESA(p);
}

/// ```c
/// define glWindowPos4fMESA GLEW_GET_FUN(__glewWindowPos4fMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4FMESAPROC __glewWindowPos4fMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4fMESA;
void glWindowPos4fMESA(double x, double y, double z, double w) {
  final _glWindowPos4fMESA = glad__glWindowPos4fMESA!
      .cast<NativeFunction<Void Function(Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(double x, double y, double z, double w)>();
  return _glWindowPos4fMESA(x, y, z, w);
}

/// ```c
/// define glWindowPos4fvMESA GLEW_GET_FUN(__glewWindowPos4fvMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4FVMESAPROC __glewWindowPos4fvMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4fvMESA;
void glWindowPos4fvMESA(Pointer<Float>? p) {
  final _glWindowPos4fvMESA = glad__glWindowPos4fvMESA!
      .cast<NativeFunction<Void Function(Pointer<Float>? p)>>()
      .asFunction<void Function(Pointer<Float>? p)>();
  return _glWindowPos4fvMESA(p);
}

/// ```c
/// define glWindowPos4iMESA GLEW_GET_FUN(__glewWindowPos4iMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4IMESAPROC __glewWindowPos4iMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4iMESA;
void glWindowPos4iMESA(int x, int y, int z, int w) {
  final _glWindowPos4iMESA = glad__glWindowPos4iMESA!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return _glWindowPos4iMESA(x, y, z, w);
}

/// ```c
/// define glWindowPos4ivMESA GLEW_GET_FUN(__glewWindowPos4ivMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4IVMESAPROC __glewWindowPos4ivMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IVMESAPROC) (const GLint* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4ivMESA;
void glWindowPos4ivMESA(Pointer<Int32>? p) {
  final _glWindowPos4ivMESA = glad__glWindowPos4ivMESA!
      .cast<NativeFunction<Void Function(Pointer<Int32>? p)>>()
      .asFunction<void Function(Pointer<Int32>? p)>();
  return _glWindowPos4ivMESA(p);
}

/// ```c
/// define glWindowPos4sMESA GLEW_GET_FUN(__glewWindowPos4sMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4SMESAPROC __glewWindowPos4sMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4sMESA;
void glWindowPos4sMESA(int x, int y, int z, int w) {
  final _glWindowPos4sMESA = glad__glWindowPos4sMESA!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return _glWindowPos4sMESA(x, y, z, w);
}

/// ```c
/// define glWindowPos4svMESA GLEW_GET_FUN(__glewWindowPos4svMESA)
/// GLEW_FUN_EXPORT PFNGLWINDOWPOS4SVMESAPROC __glewWindowPos4svMESA
/// typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort* p)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWindowPos4svMESA;
void glWindowPos4svMESA(Pointer<Int16>? p) {
  final _glWindowPos4svMESA = glad__glWindowPos4svMESA!
      .cast<NativeFunction<Void Function(Pointer<Int16>? p)>>()
      .asFunction<void Function(Pointer<Int16>? p)>();
  return _glWindowPos4svMESA(p);
}

/// ----------------------- GL_NVX_conditional_render -----------------------
/// ```c
/// define glBeginConditionalRenderNVX GLEW_GET_FUN(__glewBeginConditionalRenderNVX)
/// GLEW_FUN_EXPORT PFNGLBEGINCONDITIONALRENDERNVXPROC __glewBeginConditionalRenderNVX
/// typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginConditionalRenderNVX;
void glBeginConditionalRenderNVX(int id) {
  final _glBeginConditionalRenderNVX = glad__glBeginConditionalRenderNVX!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glBeginConditionalRenderNVX(id);
}

/// ```c
/// define glEndConditionalRenderNVX GLEW_GET_FUN(__glewEndConditionalRenderNVX)
/// GLEW_FUN_EXPORT PFNGLENDCONDITIONALRENDERNVXPROC __glewEndConditionalRenderNVX
/// typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERNVXPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndConditionalRenderNVX;
void glEndConditionalRenderNVX() {
  final _glEndConditionalRenderNVX = glad__glEndConditionalRenderNVX!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndConditionalRenderNVX();
}

/// ---------------------- GL_NVX_linked_gpu_multicast ----------------------
/// ```c
/// define glLGPUCopyImageSubDataNVX GLEW_GET_FUN(__glewLGPUCopyImageSubDataNVX)
/// GLEW_FUN_EXPORT PFNGLLGPUCOPYIMAGESUBDATANVXPROC __glewLGPUCopyImageSubDataNVX
/// typedef void (GLAPIENTRY * PFNGLLGPUCOPYIMAGESUBDATANVXPROC) (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLGPUCopyImageSubDataNVX;
void glLGPUCopyImageSubDataNVX(int sourceGpu, int destinationGpuMask, int srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) {
  final _glLGPUCopyImageSubDataNVX = glad__glLGPUCopyImageSubDataNVX!
      .cast<NativeFunction<Void Function(Uint32 sourceGpu, Uint32 destinationGpuMask, Uint32 srcName, Uint32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srxY, Int32 srcZ, Uint32 dstName, Uint32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int sourceGpu, int destinationGpuMask, int srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)>();
  return _glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

/// ```c
/// define glLGPUInterlockNVX GLEW_GET_FUN(__glewLGPUInterlockNVX)
/// GLEW_FUN_EXPORT PFNGLLGPUINTERLOCKNVXPROC __glewLGPUInterlockNVX
/// typedef void (GLAPIENTRY * PFNGLLGPUINTERLOCKNVXPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLGPUInterlockNVX;
void glLGPUInterlockNVX() {
  final _glLGPUInterlockNVX = glad__glLGPUInterlockNVX!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glLGPUInterlockNVX();
}

/// ```c
/// define glLGPUNamedBufferSubDataNVX GLEW_GET_FUN(__glewLGPUNamedBufferSubDataNVX)
/// GLEW_FUN_EXPORT PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC __glewLGPUNamedBufferSubDataNVX
/// typedef void (GLAPIENTRY * PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLGPUNamedBufferSubDataNVX;
void glLGPUNamedBufferSubDataNVX(int gpuMask, int buffer, int offset, int size, Pointer<Void>? data) {
  final _glLGPUNamedBufferSubDataNVX = glad__glLGPUNamedBufferSubDataNVX!
      .cast<NativeFunction<Void Function(Uint32 gpuMask, Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int gpuMask, int buffer, int offset, int size, Pointer<Void>? data)>();
  return _glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
}

/// ------------------------ GL_NV_3dvision_settings ------------------------
/// ```c
/// define glStereoParameterfNV GLEW_GET_FUN(__glewStereoParameterfNV)
/// GLEW_FUN_EXPORT PFNGLSTEREOPARAMETERFNVPROC __glewStereoParameterfNV
/// typedef void (GLAPIENTRY * PFNGLSTEREOPARAMETERFNVPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStereoParameterfNV;
void glStereoParameterfNV(int pname, double param) {
  final _glStereoParameterfNV = glad__glStereoParameterfNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glStereoParameterfNV(pname, param);
}

/// ```c
/// define glStereoParameteriNV GLEW_GET_FUN(__glewStereoParameteriNV)
/// GLEW_FUN_EXPORT PFNGLSTEREOPARAMETERINVPROC __glewStereoParameteriNV
/// typedef void (GLAPIENTRY * PFNGLSTEREOPARAMETERINVPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStereoParameteriNV;
void glStereoParameteriNV(int pname, int param) {
  final _glStereoParameteriNV = glad__glStereoParameteriNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glStereoParameteriNV(pname, param);
}

/// ------------------- GL_NV_bindless_multi_draw_indirect ------------------
/// ```c
/// define glMultiDrawArraysIndirectBindlessNV GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessNV)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC __glewMultiDrawArraysIndirectBindlessNV
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirectBindlessNV;
void glMultiDrawArraysIndirectBindlessNV(int mode, Pointer<Void>? indirect, int drawCount, int stride, int vertexBufferCount) {
  final _glMultiDrawArraysIndirectBindlessNV = glad__glMultiDrawArraysIndirectBindlessNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint32 drawCount, Uint32 stride, Int32 vertexBufferCount)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int drawCount, int stride, int vertexBufferCount)>();
  return _glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
}

/// ```c
/// define glMultiDrawElementsIndirectBindlessNV GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessNV)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC __glewMultiDrawElementsIndirectBindlessNV
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirectBindlessNV;
void glMultiDrawElementsIndirectBindlessNV(int mode, int type, Pointer<Void>? indirect, int drawCount, int stride, int vertexBufferCount) {
  final _glMultiDrawElementsIndirectBindlessNV = glad__glMultiDrawElementsIndirectBindlessNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint32 drawCount, Uint32 stride, Int32 vertexBufferCount)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int drawCount, int stride, int vertexBufferCount)>();
  return _glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
}

/// ---------------- GL_NV_bindless_multi_draw_indirect_count ---------------
/// ```c
/// define glMultiDrawArraysIndirectBindlessCountNV GLEW_GET_FUN(__glewMultiDrawArraysIndirectBindlessCountNV)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC __glewMultiDrawArraysIndirectBindlessCountNV
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawArraysIndirectBindlessCountNV;
void glMultiDrawArraysIndirectBindlessCountNV(int mode, Pointer<Void>? indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) {
  final _glMultiDrawArraysIndirectBindlessCountNV = glad__glMultiDrawArraysIndirectBindlessCountNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Pointer<Void>? indirect, Uint64 drawCount, Uint32 maxDrawCount, Uint32 stride, Int32 vertexBufferCount)>>()
      .asFunction<void Function(int mode, Pointer<Void>? indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)>();
  return _glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}

/// ```c
/// define glMultiDrawElementsIndirectBindlessCountNV GLEW_GET_FUN(__glewMultiDrawElementsIndirectBindlessCountNV)
/// GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC __glewMultiDrawElementsIndirectBindlessCountNV
/// typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLintptr drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiDrawElementsIndirectBindlessCountNV;
void glMultiDrawElementsIndirectBindlessCountNV(int mode, int type, Pointer<Void>? indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) {
  final _glMultiDrawElementsIndirectBindlessCountNV = glad__glMultiDrawElementsIndirectBindlessCountNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 type, Pointer<Void>? indirect, Uint64 drawCount, Uint32 maxDrawCount, Uint32 stride, Int32 vertexBufferCount)>>()
      .asFunction<void Function(int mode, int type, Pointer<Void>? indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)>();
  return _glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}

/// ------------------------- GL_NV_bindless_texture ------------------------
/// ```c
/// define glGetImageHandleNV GLEW_GET_FUN(__glewGetImageHandleNV)
/// GLEW_FUN_EXPORT PFNGLGETIMAGEHANDLENVPROC __glewGetImageHandleNV
/// typedef GLuint64 (GLAPIENTRY * PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetImageHandleNV;
int glGetImageHandleNV(int texture, int level, int layered, int layer, int format) {
  final _glGetImageHandleNV = glad__glGetImageHandleNV!
      .cast<NativeFunction<Uint64 Function(Uint32 texture, Int32 level, Uint8 layered, Int32 layer, Uint32 format)>>()
      .asFunction<int Function(int texture, int level, int layered, int layer, int format)>();
  return _glGetImageHandleNV(texture, level, layered, layer, format);
}

/// ```c
/// define glGetTextureHandleNV GLEW_GET_FUN(__glewGetTextureHandleNV)
/// GLEW_FUN_EXPORT PFNGLGETTEXTUREHANDLENVPROC __glewGetTextureHandleNV
/// typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureHandleNV;
int glGetTextureHandleNV(int texture) {
  final _glGetTextureHandleNV = glad__glGetTextureHandleNV!
      .cast<NativeFunction<Uint64 Function(Uint32 texture)>>()
      .asFunction<int Function(int texture)>();
  return _glGetTextureHandleNV(texture);
}

/// ```c
/// define glGetTextureSamplerHandleNV GLEW_GET_FUN(__glewGetTextureSamplerHandleNV)
/// GLEW_FUN_EXPORT PFNGLGETTEXTURESAMPLERHANDLENVPROC __glewGetTextureSamplerHandleNV
/// typedef GLuint64 (GLAPIENTRY * PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTextureSamplerHandleNV;
int glGetTextureSamplerHandleNV(int texture, int sampler) {
  final _glGetTextureSamplerHandleNV = glad__glGetTextureSamplerHandleNV!
      .cast<NativeFunction<Uint64 Function(Uint32 texture, Uint32 sampler)>>()
      .asFunction<int Function(int texture, int sampler)>();
  return _glGetTextureSamplerHandleNV(texture, sampler);
}

/// ```c
/// define glIsImageHandleResidentNV GLEW_GET_FUN(__glewIsImageHandleResidentNV)
/// GLEW_FUN_EXPORT PFNGLISIMAGEHANDLERESIDENTNVPROC __glewIsImageHandleResidentNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsImageHandleResidentNV;
int glIsImageHandleResidentNV(int handle) {
  final _glIsImageHandleResidentNV = glad__glIsImageHandleResidentNV!
      .cast<NativeFunction<Uint8 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return _glIsImageHandleResidentNV(handle);
}

/// ```c
/// define glIsTextureHandleResidentNV GLEW_GET_FUN(__glewIsTextureHandleResidentNV)
/// GLEW_FUN_EXPORT PFNGLISTEXTUREHANDLERESIDENTNVPROC __glewIsTextureHandleResidentNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsTextureHandleResidentNV;
int glIsTextureHandleResidentNV(int handle) {
  final _glIsTextureHandleResidentNV = glad__glIsTextureHandleResidentNV!
      .cast<NativeFunction<Uint8 Function(Uint64 handle)>>()
      .asFunction<int Function(int handle)>();
  return _glIsTextureHandleResidentNV(handle);
}

/// ```c
/// define glMakeImageHandleNonResidentNV GLEW_GET_FUN(__glewMakeImageHandleNonResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC __glewMakeImageHandleNonResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeImageHandleNonResidentNV;
void glMakeImageHandleNonResidentNV(int handle) {
  final _glMakeImageHandleNonResidentNV = glad__glMakeImageHandleNonResidentNV!
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return _glMakeImageHandleNonResidentNV(handle);
}

/// ```c
/// define glMakeImageHandleResidentNV GLEW_GET_FUN(__glewMakeImageHandleResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKEIMAGEHANDLERESIDENTNVPROC __glewMakeImageHandleResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeImageHandleResidentNV;
void glMakeImageHandleResidentNV(int handle, int access) {
  final _glMakeImageHandleResidentNV = glad__glMakeImageHandleResidentNV!
      .cast<NativeFunction<Void Function(Uint64 handle, Uint32 access)>>()
      .asFunction<void Function(int handle, int access)>();
  return _glMakeImageHandleResidentNV(handle, access);
}

/// ```c
/// define glMakeTextureHandleNonResidentNV GLEW_GET_FUN(__glewMakeTextureHandleNonResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC __glewMakeTextureHandleNonResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeTextureHandleNonResidentNV;
void glMakeTextureHandleNonResidentNV(int handle) {
  final _glMakeTextureHandleNonResidentNV = glad__glMakeTextureHandleNonResidentNV!
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return _glMakeTextureHandleNonResidentNV(handle);
}

/// ```c
/// define glMakeTextureHandleResidentNV GLEW_GET_FUN(__glewMakeTextureHandleResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKETEXTUREHANDLERESIDENTNVPROC __glewMakeTextureHandleResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeTextureHandleResidentNV;
void glMakeTextureHandleResidentNV(int handle) {
  final _glMakeTextureHandleResidentNV = glad__glMakeTextureHandleResidentNV!
      .cast<NativeFunction<Void Function(Uint64 handle)>>()
      .asFunction<void Function(int handle)>();
  return _glMakeTextureHandleResidentNV(handle);
}

/// ```c
/// define glProgramUniformHandleui64NV GLEW_GET_FUN(__glewProgramUniformHandleui64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC __glewProgramUniformHandleui64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformHandleui64NV;
void glProgramUniformHandleui64NV(int program, int location, int value) {
  final _glProgramUniformHandleui64NV = glad__glProgramUniformHandleui64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 value)>>()
      .asFunction<void Function(int program, int location, int value)>();
  return _glProgramUniformHandleui64NV(program, location, value);
}

/// ```c
/// define glProgramUniformHandleui64vNV GLEW_GET_FUN(__glewProgramUniformHandleui64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC __glewProgramUniformHandleui64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformHandleui64vNV;
void glProgramUniformHandleui64vNV(int program, int location, int count, Pointer<Uint64>? values) {
  final _glProgramUniformHandleui64vNV = glad__glProgramUniformHandleui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? values)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? values)>();
  return _glProgramUniformHandleui64vNV(program, location, count, values);
}

/// ```c
/// define glUniformHandleui64NV GLEW_GET_FUN(__glewUniformHandleui64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMHANDLEUI64NVPROC __glewUniformHandleui64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformHandleui64NV;
void glUniformHandleui64NV(int location, int value) {
  final _glUniformHandleui64NV = glad__glUniformHandleui64NV!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 value)>>()
      .asFunction<void Function(int location, int value)>();
  return _glUniformHandleui64NV(location, value);
}

/// ```c
/// define glUniformHandleui64vNV GLEW_GET_FUN(__glewUniformHandleui64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMHANDLEUI64VNVPROC __glewUniformHandleui64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformHandleui64vNV;
void glUniformHandleui64vNV(int location, int count, Pointer<Uint64>? value) {
  final _glUniformHandleui64vNV = glad__glUniformHandleui64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniformHandleui64vNV(location, count, value);
}

/// --------------------- GL_NV_blend_equation_advanced ---------------------
/// ```c
/// define glBlendBarrierNV GLEW_GET_FUN(__glewBlendBarrierNV)
/// GLEW_FUN_EXPORT PFNGLBLENDBARRIERNVPROC __glewBlendBarrierNV
/// typedef void (GLAPIENTRY * PFNGLBLENDBARRIERNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendBarrierNV;
void glBlendBarrierNV() {
  final _glBlendBarrierNV = glad__glBlendBarrierNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glBlendBarrierNV();
}

/// ```c
/// define glBlendParameteriNV GLEW_GET_FUN(__glewBlendParameteriNV)
/// GLEW_FUN_EXPORT PFNGLBLENDPARAMETERINVPROC __glewBlendParameteriNV
/// typedef void (GLAPIENTRY * PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlendParameteriNV;
void glBlendParameteriNV(int pname, int value) {
  final _glBlendParameteriNV = glad__glBlendParameteriNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int pname, int value)>();
  return _glBlendParameteriNV(pname, value);
}

/// ----------------------- GL_NV_clip_space_w_scaling ----------------------
/// ```c
/// define glViewportPositionWScaleNV GLEW_GET_FUN(__glewViewportPositionWScaleNV)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTPOSITIONWSCALENVPROC __glewViewportPositionWScaleNV
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportPositionWScaleNV;
void glViewportPositionWScaleNV(int index, double xcoeff, double ycoeff) {
  final _glViewportPositionWScaleNV = glad__glViewportPositionWScaleNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float xcoeff, Float ycoeff)>>()
      .asFunction<void Function(int index, double xcoeff, double ycoeff)>();
  return _glViewportPositionWScaleNV(index, xcoeff, ycoeff);
}

/// --------------------------- GL_NV_command_list --------------------------
/// ```c
/// define glCallCommandListNV GLEW_GET_FUN(__glewCallCommandListNV)
/// GLEW_FUN_EXPORT PFNGLCALLCOMMANDLISTNVPROC __glewCallCommandListNV
/// typedef void (GLAPIENTRY * PFNGLCALLCOMMANDLISTNVPROC) (GLuint list)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCallCommandListNV;
void glCallCommandListNV(int list) {
  final _glCallCommandListNV = glad__glCallCommandListNV!
      .cast<NativeFunction<Void Function(Uint32 list)>>()
      .asFunction<void Function(int list)>();
  return _glCallCommandListNV(list);
}

/// ```c
/// define glCommandListSegmentsNV GLEW_GET_FUN(__glewCommandListSegmentsNV)
/// GLEW_FUN_EXPORT PFNGLCOMMANDLISTSEGMENTSNVPROC __glewCommandListSegmentsNV
/// typedef void (GLAPIENTRY * PFNGLCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCommandListSegmentsNV;
void glCommandListSegmentsNV(int list, int segments) {
  final _glCommandListSegmentsNV = glad__glCommandListSegmentsNV!
      .cast<NativeFunction<Void Function(Uint32 list, Uint32 segments)>>()
      .asFunction<void Function(int list, int segments)>();
  return _glCommandListSegmentsNV(list, segments);
}

/// ```c
/// define glCompileCommandListNV GLEW_GET_FUN(__glewCompileCommandListNV)
/// GLEW_FUN_EXPORT PFNGLCOMPILECOMMANDLISTNVPROC __glewCompileCommandListNV
/// typedef void (GLAPIENTRY * PFNGLCOMPILECOMMANDLISTNVPROC) (GLuint list)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompileCommandListNV;
void glCompileCommandListNV(int list) {
  final _glCompileCommandListNV = glad__glCompileCommandListNV!
      .cast<NativeFunction<Void Function(Uint32 list)>>()
      .asFunction<void Function(int list)>();
  return _glCompileCommandListNV(list);
}

/// ```c
/// define glCreateCommandListsNV GLEW_GET_FUN(__glewCreateCommandListsNV)
/// GLEW_FUN_EXPORT PFNGLCREATECOMMANDLISTSNVPROC __glewCreateCommandListsNV
/// typedef void (GLAPIENTRY * PFNGLCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint* lists)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateCommandListsNV;
void glCreateCommandListsNV(int n, Pointer<Uint32>? lists) {
  final _glCreateCommandListsNV = glad__glCreateCommandListsNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? lists)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? lists)>();
  return _glCreateCommandListsNV(n, lists);
}

/// ```c
/// define glCreateStatesNV GLEW_GET_FUN(__glewCreateStatesNV)
/// GLEW_FUN_EXPORT PFNGLCREATESTATESNVPROC __glewCreateStatesNV
/// typedef void (GLAPIENTRY * PFNGLCREATESTATESNVPROC) (GLsizei n, GLuint* states)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCreateStatesNV;
void glCreateStatesNV(int n, Pointer<Uint32>? states) {
  final _glCreateStatesNV = glad__glCreateStatesNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? states)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? states)>();
  return _glCreateStatesNV(n, states);
}

/// ```c
/// define glDeleteCommandListsNV GLEW_GET_FUN(__glewDeleteCommandListsNV)
/// GLEW_FUN_EXPORT PFNGLDELETECOMMANDLISTSNVPROC __glewDeleteCommandListsNV
/// typedef void (GLAPIENTRY * PFNGLDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint* lists)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteCommandListsNV;
void glDeleteCommandListsNV(int n, Pointer<Uint32>? lists) {
  final _glDeleteCommandListsNV = glad__glDeleteCommandListsNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? lists)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? lists)>();
  return _glDeleteCommandListsNV(n, lists);
}

/// ```c
/// define glDeleteStatesNV GLEW_GET_FUN(__glewDeleteStatesNV)
/// GLEW_FUN_EXPORT PFNGLDELETESTATESNVPROC __glewDeleteStatesNV
/// typedef void (GLAPIENTRY * PFNGLDELETESTATESNVPROC) (GLsizei n, const GLuint* states)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteStatesNV;
void glDeleteStatesNV(int n, Pointer<Uint32>? states) {
  final _glDeleteStatesNV = glad__glDeleteStatesNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? states)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? states)>();
  return _glDeleteStatesNV(n, states);
}

/// ```c
/// define glDrawCommandsAddressNV GLEW_GET_FUN(__glewDrawCommandsAddressNV)
/// GLEW_FUN_EXPORT PFNGLDRAWCOMMANDSADDRESSNVPROC __glewDrawCommandsAddressNV
/// typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawCommandsAddressNV;
void glDrawCommandsAddressNV(int primitiveMode, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, int count) {
  final _glDrawCommandsAddressNV = glad__glDrawCommandsAddressNV!
      .cast<NativeFunction<Void Function(Uint32 primitiveMode, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Uint32 count)>>()
      .asFunction<void Function(int primitiveMode, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, int count)>();
  return _glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
}

/// ```c
/// define glDrawCommandsNV GLEW_GET_FUN(__glewDrawCommandsNV)
/// GLEW_FUN_EXPORT PFNGLDRAWCOMMANDSNVPROC __glewDrawCommandsNV
/// typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawCommandsNV;
void glDrawCommandsNV(int primitiveMode, int buffer, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, int count) {
  final _glDrawCommandsNV = glad__glDrawCommandsNV!
      .cast<NativeFunction<Void Function(Uint32 primitiveMode, Uint32 buffer, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Uint32 count)>>()
      .asFunction<void Function(int primitiveMode, int buffer, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, int count)>();
  return _glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
}

/// ```c
/// define glDrawCommandsStatesAddressNV GLEW_GET_FUN(__glewDrawCommandsStatesAddressNV)
/// GLEW_FUN_EXPORT PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC __glewDrawCommandsStatesAddressNV
/// typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawCommandsStatesAddressNV;
void glDrawCommandsStatesAddressNV(Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, int count) {
  final _glDrawCommandsStatesAddressNV = glad__glDrawCommandsStatesAddressNV!
      .cast<NativeFunction<Void Function(Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, Uint32 count)>>()
      .asFunction<void Function(Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, int count)>();
  return _glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
}

/// ```c
/// define glDrawCommandsStatesNV GLEW_GET_FUN(__glewDrawCommandsStatesNV)
/// GLEW_FUN_EXPORT PFNGLDRAWCOMMANDSSTATESNVPROC __glewDrawCommandsStatesNV
/// typedef void (GLAPIENTRY * PFNGLDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawCommandsStatesNV;
void glDrawCommandsStatesNV(int buffer, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, int count) {
  final _glDrawCommandsStatesNV = glad__glDrawCommandsStatesNV!
      .cast<NativeFunction<Void Function(Uint32 buffer, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, Uint32 count)>>()
      .asFunction<void Function(int buffer, Pointer<Uint64>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, int count)>();
  return _glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
}

/// ```c
/// define glGetCommandHeaderNV GLEW_GET_FUN(__glewGetCommandHeaderNV)
/// GLEW_FUN_EXPORT PFNGLGETCOMMANDHEADERNVPROC __glewGetCommandHeaderNV
/// typedef GLuint (GLAPIENTRY * PFNGLGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCommandHeaderNV;
int glGetCommandHeaderNV(int tokenID, int size) {
  final _glGetCommandHeaderNV = glad__glGetCommandHeaderNV!
      .cast<NativeFunction<Uint32 Function(Uint32 tokenID, Uint32 size)>>()
      .asFunction<int Function(int tokenID, int size)>();
  return _glGetCommandHeaderNV(tokenID, size);
}

/// ```c
/// define glGetStageIndexNV GLEW_GET_FUN(__glewGetStageIndexNV)
/// GLEW_FUN_EXPORT PFNGLGETSTAGEINDEXNVPROC __glewGetStageIndexNV
/// typedef GLushort (GLAPIENTRY * PFNGLGETSTAGEINDEXNVPROC) (GLenum shadertype)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetStageIndexNV;
int glGetStageIndexNV(int shadertype) {
  final _glGetStageIndexNV = glad__glGetStageIndexNV!
      .cast<NativeFunction<Uint16 Function(Uint32 shadertype)>>()
      .asFunction<int Function(int shadertype)>();
  return _glGetStageIndexNV(shadertype);
}

/// ```c
/// define glIsCommandListNV GLEW_GET_FUN(__glewIsCommandListNV)
/// GLEW_FUN_EXPORT PFNGLISCOMMANDLISTNVPROC __glewIsCommandListNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISCOMMANDLISTNVPROC) (GLuint list)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsCommandListNV;
int glIsCommandListNV(int list) {
  final _glIsCommandListNV = glad__glIsCommandListNV!
      .cast<NativeFunction<Uint8 Function(Uint32 list)>>()
      .asFunction<int Function(int list)>();
  return _glIsCommandListNV(list);
}

/// ```c
/// define glIsStateNV GLEW_GET_FUN(__glewIsStateNV)
/// GLEW_FUN_EXPORT PFNGLISSTATENVPROC __glewIsStateNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISSTATENVPROC) (GLuint state)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsStateNV;
int glIsStateNV(int state) {
  final _glIsStateNV = glad__glIsStateNV!
      .cast<NativeFunction<Uint8 Function(Uint32 state)>>()
      .asFunction<int Function(int state)>();
  return _glIsStateNV(state);
}

/// ```c
/// define glListDrawCommandsStatesClientNV GLEW_GET_FUN(__glewListDrawCommandsStatesClientNV)
/// GLEW_FUN_EXPORT PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC __glewListDrawCommandsStatesClientNV
/// typedef void (GLAPIENTRY * PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glListDrawCommandsStatesClientNV;
void glListDrawCommandsStatesClientNV(int list, int segment, Pointer<Pointer<Void>>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, int count) {
  final _glListDrawCommandsStatesClientNV = glad__glListDrawCommandsStatesClientNV!
      .cast<NativeFunction<Void Function(Uint32 list, Uint32 segment, Pointer<Pointer<Void>>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, Uint32 count)>>()
      .asFunction<void Function(int list, int segment, Pointer<Pointer<Void>>? indirects, Pointer<Uint32>? sizes, Pointer<Uint32>? states, Pointer<Uint32>? fbos, int count)>();
  return _glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
}

/// ```c
/// define glStateCaptureNV GLEW_GET_FUN(__glewStateCaptureNV)
/// GLEW_FUN_EXPORT PFNGLSTATECAPTURENVPROC __glewStateCaptureNV
/// typedef void (GLAPIENTRY * PFNGLSTATECAPTURENVPROC) (GLuint state, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStateCaptureNV;
void glStateCaptureNV(int state, int mode) {
  final _glStateCaptureNV = glad__glStateCaptureNV!
      .cast<NativeFunction<Void Function(Uint32 state, Uint32 mode)>>()
      .asFunction<void Function(int state, int mode)>();
  return _glStateCaptureNV(state, mode);
}

/// ------------------------ GL_NV_conditional_render -----------------------
/// ```c
/// define glBeginConditionalRenderNV GLEW_GET_FUN(__glewBeginConditionalRenderNV)
/// GLEW_FUN_EXPORT PFNGLBEGINCONDITIONALRENDERNVPROC __glewBeginConditionalRenderNV
/// typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginConditionalRenderNV;
void glBeginConditionalRenderNV(int id, int mode) {
  final _glBeginConditionalRenderNV = glad__glBeginConditionalRenderNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 mode)>>()
      .asFunction<void Function(int id, int mode)>();
  return _glBeginConditionalRenderNV(id, mode);
}

/// ```c
/// define glEndConditionalRenderNV GLEW_GET_FUN(__glewEndConditionalRenderNV)
/// GLEW_FUN_EXPORT PFNGLENDCONDITIONALRENDERNVPROC __glewEndConditionalRenderNV
/// typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndConditionalRenderNV;
void glEndConditionalRenderNV() {
  final _glEndConditionalRenderNV = glad__glEndConditionalRenderNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndConditionalRenderNV();
}

/// ----------------------- GL_NV_conservative_raster -----------------------
/// ```c
/// define glSubpixelPrecisionBiasNV GLEW_GET_FUN(__glewSubpixelPrecisionBiasNV)
/// GLEW_FUN_EXPORT PFNGLSUBPIXELPRECISIONBIASNVPROC __glewSubpixelPrecisionBiasNV
/// typedef void (GLAPIENTRY * PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSubpixelPrecisionBiasNV;
void glSubpixelPrecisionBiasNV(int xbits, int ybits) {
  final _glSubpixelPrecisionBiasNV = glad__glSubpixelPrecisionBiasNV!
      .cast<NativeFunction<Void Function(Uint32 xbits, Uint32 ybits)>>()
      .asFunction<void Function(int xbits, int ybits)>();
  return _glSubpixelPrecisionBiasNV(xbits, ybits);
}

/// -------------------- GL_NV_conservative_raster_dilate -------------------
/// ```c
/// define glConservativeRasterParameterfNV GLEW_GET_FUN(__glewConservativeRasterParameterfNV)
/// GLEW_FUN_EXPORT PFNGLCONSERVATIVERASTERPARAMETERFNVPROC __glewConservativeRasterParameterfNV
/// typedef void (GLAPIENTRY * PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConservativeRasterParameterfNV;
void glConservativeRasterParameterfNV(int pname, double value) {
  final _glConservativeRasterParameterfNV = glad__glConservativeRasterParameterfNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Float value)>>()
      .asFunction<void Function(int pname, double value)>();
  return _glConservativeRasterParameterfNV(pname, value);
}

/// -------------- GL_NV_conservative_raster_pre_snap_triangles -------------
/// ```c
/// define glConservativeRasterParameteriNV GLEW_GET_FUN(__glewConservativeRasterParameteriNV)
/// GLEW_FUN_EXPORT PFNGLCONSERVATIVERASTERPARAMETERINVPROC __glewConservativeRasterParameteriNV
/// typedef void (GLAPIENTRY * PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glConservativeRasterParameteriNV;
void glConservativeRasterParameteriNV(int pname, int param) {
  final _glConservativeRasterParameteriNV = glad__glConservativeRasterParameteriNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glConservativeRasterParameteriNV(pname, param);
}

/// --------------------------- GL_NV_copy_buffer ---------------------------
/// ```c
/// define glCopyBufferSubDataNV GLEW_GET_FUN(__glewCopyBufferSubDataNV)
/// GLEW_FUN_EXPORT PFNGLCOPYBUFFERSUBDATANVPROC __glewCopyBufferSubDataNV
/// typedef void (GLAPIENTRY * PFNGLCOPYBUFFERSUBDATANVPROC) (GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyBufferSubDataNV;
void glCopyBufferSubDataNV(int readtarget, int writetarget, int readoffset, int writeoffset, int size) {
  final _glCopyBufferSubDataNV = glad__glCopyBufferSubDataNV!
      .cast<NativeFunction<Void Function(Uint32 readtarget, Uint32 writetarget, Uint64 readoffset, Uint64 writeoffset, Uint64 size)>>()
      .asFunction<void Function(int readtarget, int writetarget, int readoffset, int writeoffset, int size)>();
  return _glCopyBufferSubDataNV(readtarget, writetarget, readoffset, writeoffset, size);
}

/// ---------------------------- GL_NV_copy_image ---------------------------
/// ```c
/// define glCopyImageSubDataNV GLEW_GET_FUN(__glewCopyImageSubDataNV)
/// GLEW_FUN_EXPORT PFNGLCOPYIMAGESUBDATANVPROC __glewCopyImageSubDataNV
/// typedef void (GLAPIENTRY * PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyImageSubDataNV;
void glCopyImageSubDataNV(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) {
  final _glCopyImageSubDataNV = glad__glCopyImageSubDataNV!
      .cast<NativeFunction<Void Function(Uint32 srcName, Uint32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Uint32 dstName, Uint32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Uint32 width, Uint32 height, Uint32 depth)>>()
      .asFunction<void Function(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)>();
  return _glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

/// ------------------------ GL_NV_depth_buffer_float -----------------------
/// ```c
/// define glClearDepthdNV GLEW_GET_FUN(__glewClearDepthdNV)
/// GLEW_FUN_EXPORT PFNGLCLEARDEPTHDNVPROC __glewClearDepthdNV
/// typedef void (GLAPIENTRY * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearDepthdNV;
void glClearDepthdNV(double depth) {
  final _glClearDepthdNV = glad__glClearDepthdNV!
      .cast<NativeFunction<Void Function(Double depth)>>()
      .asFunction<void Function(double depth)>();
  return _glClearDepthdNV(depth);
}

/// ```c
/// define glDepthBoundsdNV GLEW_GET_FUN(__glewDepthBoundsdNV)
/// GLEW_FUN_EXPORT PFNGLDEPTHBOUNDSDNVPROC __glewDepthBoundsdNV
/// typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthBoundsdNV;
void glDepthBoundsdNV(double zmin, double zmax) {
  final _glDepthBoundsdNV = glad__glDepthBoundsdNV!
      .cast<NativeFunction<Void Function(Double zmin, Double zmax)>>()
      .asFunction<void Function(double zmin, double zmax)>();
  return _glDepthBoundsdNV(zmin, zmax);
}

/// ```c
/// define glDepthRangedNV GLEW_GET_FUN(__glewDepthRangedNV)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEDNVPROC __glewDepthRangedNV
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangedNV;
void glDepthRangedNV(double zNear, double zFar) {
  final _glDepthRangedNV = glad__glDepthRangedNV!
      .cast<NativeFunction<Void Function(Double zNear, Double zFar)>>()
      .asFunction<void Function(double zNear, double zFar)>();
  return _glDepthRangedNV(zNear, zFar);
}

/// --------------------------- GL_NV_draw_buffers --------------------------
/// ```c
/// define glDrawBuffersNV GLEW_GET_FUN(__glewDrawBuffersNV)
/// GLEW_FUN_EXPORT PFNGLDRAWBUFFERSNVPROC __glewDrawBuffersNV
/// typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSNVPROC) (GLsizei n, const GLenum* bufs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawBuffersNV;
void glDrawBuffersNV(int n, Pointer<Uint32>? bufs) {
  final _glDrawBuffersNV = glad__glDrawBuffersNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? bufs)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? bufs)>();
  return _glDrawBuffersNV(n, bufs);
}

/// -------------------------- GL_NV_draw_instanced -------------------------
/// ```c
/// define glDrawArraysInstancedNV GLEW_GET_FUN(__glewDrawArraysInstancedNV)
/// GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDNVPROC __glewDrawArraysInstancedNV
/// typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDNVPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawArraysInstancedNV;
void glDrawArraysInstancedNV(int mode, int first, int count, int primcount) {
  final _glDrawArraysInstancedNV = glad__glDrawArraysInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Int32 first, Uint32 count, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int first, int count, int primcount)>();
  return _glDrawArraysInstancedNV(mode, first, count, primcount);
}

/// ```c
/// define glDrawElementsInstancedNV GLEW_GET_FUN(__glewDrawElementsInstancedNV)
/// GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDNVPROC __glewDrawElementsInstancedNV
/// typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDNVPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawElementsInstancedNV;
void glDrawElementsInstancedNV(int mode, int count, int type, Pointer<Void>? indices, int primcount) {
  final _glDrawElementsInstancedNV = glad__glDrawElementsInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 count, Uint32 type, Pointer<Void>? indices, Uint32 primcount)>>()
      .asFunction<void Function(int mode, int count, int type, Pointer<Void>? indices, int primcount)>();
  return _glDrawElementsInstancedNV(mode, count, type, indices, primcount);
}

/// --------------------------- GL_NV_draw_texture --------------------------
/// ```c
/// define glDrawTextureNV GLEW_GET_FUN(__glewDrawTextureNV)
/// GLEW_FUN_EXPORT PFNGLDRAWTEXTURENVPROC __glewDrawTextureNV
/// typedef void (GLAPIENTRY * PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawTextureNV;
void glDrawTextureNV(int texture, int sampler, double x0, double y0, double x1, double y1, double z, double s0, double t0, double s1, double t1) {
  final _glDrawTextureNV = glad__glDrawTextureNV!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 sampler, Float x0, Float y0, Float x1, Float y1, Float z, Float s0, Float t0, Float s1, Float t1)>>()
      .asFunction<void Function(int texture, int sampler, double x0, double y0, double x1, double y1, double z, double s0, double t0, double s1, double t1)>();
  return _glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

/// ```c
/// define glDrawVkImageNV GLEW_GET_FUN(__glewDrawVkImageNV)
/// GLEW_FUN_EXPORT PFNGLDRAWVKIMAGENVPROC __glewDrawVkImageNV
/// typedef void (GLAPIENTRY * PFNGLDRAWVKIMAGENVPROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawVkImageNV;
void glDrawVkImageNV(int vkImage, int sampler, double x0, double y0, double x1, double y1, double z, double s0, double t0, double s1, double t1) {
  final _glDrawVkImageNV = glad__glDrawVkImageNV!
      .cast<NativeFunction<Void Function(Uint64 vkImage, Uint32 sampler, Float x0, Float y0, Float x1, Float y1, Float z, Float s0, Float t0, Float s1, Float t1)>>()
      .asFunction<void Function(int vkImage, int sampler, double x0, double y0, double x1, double y1, double z, double s0, double t0, double s1, double t1)>();
  return _glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

/// ```c
/// define glGetVkProcAddrNV GLEW_GET_FUN(__glewGetVkProcAddrNV)
/// GLEW_FUN_EXPORT PFNGLGETVKPROCADDRNVPROC __glewGetVkProcAddrNV
/// typedef GLVULKANPROCNV (GLAPIENTRY * PFNGLGETVKPROCADDRNVPROC) (const GLchar* name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVkProcAddrNV;
Pointer<Void>? glGetVkProcAddrNV(String name) {
  final _glGetVkProcAddrNV = glad__glGetVkProcAddrNV!
      .cast<NativeFunction<Pointer<Void>? Function(Pointer<Utf8>? name)>>()
      .asFunction<Pointer<Void>? Function(Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetVkProcAddrNV(_namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glSignalVkFenceNV GLEW_GET_FUN(__glewSignalVkFenceNV)
/// GLEW_FUN_EXPORT PFNGLSIGNALVKFENCENVPROC __glewSignalVkFenceNV
/// typedef void (GLAPIENTRY * PFNGLSIGNALVKFENCENVPROC) (GLuint64 vkFence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSignalVkFenceNV;
void glSignalVkFenceNV(int vkFence) {
  final _glSignalVkFenceNV = glad__glSignalVkFenceNV!
      .cast<NativeFunction<Void Function(Uint64 vkFence)>>()
      .asFunction<void Function(int vkFence)>();
  return _glSignalVkFenceNV(vkFence);
}

/// ```c
/// define glSignalVkSemaphoreNV GLEW_GET_FUN(__glewSignalVkSemaphoreNV)
/// GLEW_FUN_EXPORT PFNGLSIGNALVKSEMAPHORENVPROC __glewSignalVkSemaphoreNV
/// typedef void (GLAPIENTRY * PFNGLSIGNALVKSEMAPHORENVPROC) (GLuint64 vkSemaphore)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSignalVkSemaphoreNV;
void glSignalVkSemaphoreNV(int vkSemaphore) {
  final _glSignalVkSemaphoreNV = glad__glSignalVkSemaphoreNV!
      .cast<NativeFunction<Void Function(Uint64 vkSemaphore)>>()
      .asFunction<void Function(int vkSemaphore)>();
  return _glSignalVkSemaphoreNV(vkSemaphore);
}

/// ```c
/// define glWaitVkSemaphoreNV GLEW_GET_FUN(__glewWaitVkSemaphoreNV)
/// GLEW_FUN_EXPORT PFNGLWAITVKSEMAPHORENVPROC __glewWaitVkSemaphoreNV
/// typedef void (GLAPIENTRY * PFNGLWAITVKSEMAPHORENVPROC) (GLuint64 vkSemaphore)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWaitVkSemaphoreNV;
void glWaitVkSemaphoreNV(int vkSemaphore) {
  final _glWaitVkSemaphoreNV = glad__glWaitVkSemaphoreNV!
      .cast<NativeFunction<Void Function(Uint64 vkSemaphore)>>()
      .asFunction<void Function(int vkSemaphore)>();
  return _glWaitVkSemaphoreNV(vkSemaphore);
}

/// ---------------------------- GL_NV_evaluators ---------------------------
/// ```c
/// define glEvalMapsNV GLEW_GET_FUN(__glewEvalMapsNV)
/// GLEW_FUN_EXPORT PFNGLEVALMAPSNVPROC __glewEvalMapsNV
/// typedef void (GLAPIENTRY * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEvalMapsNV;
void glEvalMapsNV(int target, int mode) {
  final _glEvalMapsNV = glad__glEvalMapsNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 mode)>>()
      .asFunction<void Function(int target, int mode)>();
  return _glEvalMapsNV(target, mode);
}

/// ```c
/// define glGetMapAttribParameterfvNV GLEW_GET_FUN(__glewGetMapAttribParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glewGetMapAttribParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMapAttribParameterfvNV;
void glGetMapAttribParameterfvNV(int target, int index, int pname, Pointer<Float>? params) {
  final _glGetMapAttribParameterfvNV = glad__glGetMapAttribParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, int pname, Pointer<Float>? params)>();
  return _glGetMapAttribParameterfvNV(target, index, pname, params);
}

/// ```c
/// define glGetMapAttribParameterivNV GLEW_GET_FUN(__glewGetMapAttribParameterivNV)
/// GLEW_FUN_EXPORT PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glewGetMapAttribParameterivNV
/// typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMapAttribParameterivNV;
void glGetMapAttribParameterivNV(int target, int index, int pname, Pointer<Int32>? params) {
  final _glGetMapAttribParameterivNV = glad__glGetMapAttribParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int index, int pname, Pointer<Int32>? params)>();
  return _glGetMapAttribParameterivNV(target, index, pname, params);
}

/// ```c
/// define glGetMapControlPointsNV GLEW_GET_FUN(__glewGetMapControlPointsNV)
/// GLEW_FUN_EXPORT PFNGLGETMAPCONTROLPOINTSNVPROC __glewGetMapControlPointsNV
/// typedef void (GLAPIENTRY * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMapControlPointsNV;
void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int packed, Pointer<Void>? points) {
  final _glGetMapControlPointsNV = glad__glGetMapControlPointsNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 type, Uint32 ustride, Uint32 vstride, Uint8 packed, Pointer<Void>? points)>>()
      .asFunction<void Function(int target, int index, int type, int ustride, int vstride, int packed, Pointer<Void>? points)>();
  return _glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
}

/// ```c
/// define glGetMapParameterfvNV GLEW_GET_FUN(__glewGetMapParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETMAPPARAMETERFVNVPROC __glewGetMapParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMapParameterfvNV;
void glGetMapParameterfvNV(int target, int pname, Pointer<Float>? params) {
  final _glGetMapParameterfvNV = glad__glGetMapParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetMapParameterfvNV(target, pname, params);
}

/// ```c
/// define glGetMapParameterivNV GLEW_GET_FUN(__glewGetMapParameterivNV)
/// GLEW_FUN_EXPORT PFNGLGETMAPPARAMETERIVNVPROC __glewGetMapParameterivNV
/// typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMapParameterivNV;
void glGetMapParameterivNV(int target, int pname, Pointer<Int32>? params) {
  final _glGetMapParameterivNV = glad__glGetMapParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetMapParameterivNV(target, pname, params);
}

/// ```c
/// define glMapControlPointsNV GLEW_GET_FUN(__glewMapControlPointsNV)
/// GLEW_FUN_EXPORT PFNGLMAPCONTROLPOINTSNVPROC __glewMapControlPointsNV
/// typedef void (GLAPIENTRY * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapControlPointsNV;
void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, Pointer<Void>? points) {
  final _glMapControlPointsNV = glad__glMapControlPointsNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 type, Uint32 ustride, Uint32 vstride, Int32 uorder, Int32 vorder, Uint8 packed, Pointer<Void>? points)>>()
      .asFunction<void Function(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, int packed, Pointer<Void>? points)>();
  return _glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

/// ```c
/// define glMapParameterfvNV GLEW_GET_FUN(__glewMapParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLMAPPARAMETERFVNVPROC __glewMapParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapParameterfvNV;
void glMapParameterfvNV(int target, int pname, Pointer<Float>? params) {
  final _glMapParameterfvNV = glad__glMapParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glMapParameterfvNV(target, pname, params);
}

/// ```c
/// define glMapParameterivNV GLEW_GET_FUN(__glewMapParameterivNV)
/// GLEW_FUN_EXPORT PFNGLMAPPARAMETERIVNVPROC __glewMapParameterivNV
/// typedef void (GLAPIENTRY * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMapParameterivNV;
void glMapParameterivNV(int target, int pname, Pointer<Int32>? params) {
  final _glMapParameterivNV = glad__glMapParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glMapParameterivNV(target, pname, params);
}

/// ----------------------- GL_NV_explicit_multisample ----------------------
/// ```c
/// define glGetMultisamplefvNV GLEW_GET_FUN(__glewGetMultisamplefvNV)
/// GLEW_FUN_EXPORT PFNGLGETMULTISAMPLEFVNVPROC __glewGetMultisamplefvNV
/// typedef void (GLAPIENTRY * PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat* val)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMultisamplefvNV;
void glGetMultisamplefvNV(int pname, int index, Pointer<Float>? val) {
  final _glGetMultisamplefvNV = glad__glGetMultisamplefvNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Pointer<Float>? val)>>()
      .asFunction<void Function(int pname, int index, Pointer<Float>? val)>();
  return _glGetMultisamplefvNV(pname, index, val);
}

/// ```c
/// define glSampleMaskIndexedNV GLEW_GET_FUN(__glewSampleMaskIndexedNV)
/// GLEW_FUN_EXPORT PFNGLSAMPLEMASKINDEXEDNVPROC __glewSampleMaskIndexedNV
/// typedef void (GLAPIENTRY * PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleMaskIndexedNV;
void glSampleMaskIndexedNV(int index, int mask) {
  final _glSampleMaskIndexedNV = glad__glSampleMaskIndexedNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 mask)>>()
      .asFunction<void Function(int index, int mask)>();
  return _glSampleMaskIndexedNV(index, mask);
}

/// ```c
/// define glTexRenderbufferNV GLEW_GET_FUN(__glewTexRenderbufferNV)
/// GLEW_FUN_EXPORT PFNGLTEXRENDERBUFFERNVPROC __glewTexRenderbufferNV
/// typedef void (GLAPIENTRY * PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexRenderbufferNV;
void glTexRenderbufferNV(int target, int renderbuffer) {
  final _glTexRenderbufferNV = glad__glTexRenderbufferNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 renderbuffer)>>()
      .asFunction<void Function(int target, int renderbuffer)>();
  return _glTexRenderbufferNV(target, renderbuffer);
}

/// ------------------------------ GL_NV_fence ------------------------------
/// ```c
/// define glDeleteFencesNV GLEW_GET_FUN(__glewDeleteFencesNV)
/// GLEW_FUN_EXPORT PFNGLDELETEFENCESNVPROC __glewDeleteFencesNV
/// typedef void (GLAPIENTRY * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint* fences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteFencesNV;
void glDeleteFencesNV(int n, Pointer<Uint32>? fences) {
  final _glDeleteFencesNV = glad__glDeleteFencesNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? fences)>();
  return _glDeleteFencesNV(n, fences);
}

/// ```c
/// define glFinishFenceNV GLEW_GET_FUN(__glewFinishFenceNV)
/// GLEW_FUN_EXPORT PFNGLFINISHFENCENVPROC __glewFinishFenceNV
/// typedef void (GLAPIENTRY * PFNGLFINISHFENCENVPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFinishFenceNV;
void glFinishFenceNV(int fence) {
  final _glFinishFenceNV = glad__glFinishFenceNV!
      .cast<NativeFunction<Void Function(Uint32 fence)>>()
      .asFunction<void Function(int fence)>();
  return _glFinishFenceNV(fence);
}

/// ```c
/// define glGenFencesNV GLEW_GET_FUN(__glewGenFencesNV)
/// GLEW_FUN_EXPORT PFNGLGENFENCESNVPROC __glewGenFencesNV
/// typedef void (GLAPIENTRY * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint* fences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenFencesNV;
void glGenFencesNV(int n, Pointer<Uint32>? fences) {
  final _glGenFencesNV = glad__glGenFencesNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? fences)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? fences)>();
  return _glGenFencesNV(n, fences);
}

/// ```c
/// define glGetFenceivNV GLEW_GET_FUN(__glewGetFenceivNV)
/// GLEW_FUN_EXPORT PFNGLGETFENCEIVNVPROC __glewGetFenceivNV
/// typedef void (GLAPIENTRY * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFenceivNV;
void glGetFenceivNV(int fence, int pname, Pointer<Int32>? params) {
  final _glGetFenceivNV = glad__glGetFenceivNV!
      .cast<NativeFunction<Void Function(Uint32 fence, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int fence, int pname, Pointer<Int32>? params)>();
  return _glGetFenceivNV(fence, pname, params);
}

/// ```c
/// define glIsFenceNV GLEW_GET_FUN(__glewIsFenceNV)
/// GLEW_FUN_EXPORT PFNGLISFENCENVPROC __glewIsFenceNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISFENCENVPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsFenceNV;
int glIsFenceNV(int fence) {
  final _glIsFenceNV = glad__glIsFenceNV!
      .cast<NativeFunction<Uint8 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return _glIsFenceNV(fence);
}

/// ```c
/// define glSetFenceNV GLEW_GET_FUN(__glewSetFenceNV)
/// GLEW_FUN_EXPORT PFNGLSETFENCENVPROC __glewSetFenceNV
/// typedef void (GLAPIENTRY * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSetFenceNV;
void glSetFenceNV(int fence, int condition) {
  final _glSetFenceNV = glad__glSetFenceNV!
      .cast<NativeFunction<Void Function(Uint32 fence, Uint32 condition)>>()
      .asFunction<void Function(int fence, int condition)>();
  return _glSetFenceNV(fence, condition);
}

/// ```c
/// define glTestFenceNV GLEW_GET_FUN(__glewTestFenceNV)
/// GLEW_FUN_EXPORT PFNGLTESTFENCENVPROC __glewTestFenceNV
/// typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCENVPROC) (GLuint fence)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTestFenceNV;
int glTestFenceNV(int fence) {
  final _glTestFenceNV = glad__glTestFenceNV!
      .cast<NativeFunction<Uint8 Function(Uint32 fence)>>()
      .asFunction<int Function(int fence)>();
  return _glTestFenceNV(fence);
}

/// -------------------- GL_NV_fragment_coverage_to_color -------------------
/// ```c
/// define glFragmentCoverageColorNV GLEW_GET_FUN(__glewFragmentCoverageColorNV)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTCOVERAGECOLORNVPROC __glewFragmentCoverageColorNV
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentCoverageColorNV;
void glFragmentCoverageColorNV(int color) {
  final _glFragmentCoverageColorNV = glad__glFragmentCoverageColorNV!
      .cast<NativeFunction<Void Function(Uint32 color)>>()
      .asFunction<void Function(int color)>();
  return _glFragmentCoverageColorNV(color);
}

/// ------------------------- GL_NV_fragment_program ------------------------
/// ```c
/// define glGetProgramNamedParameterdvNV GLEW_GET_FUN(__glewGetProgramNamedParameterdvNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glewGetProgramNamedParameterdvNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramNamedParameterdvNV;
void glGetProgramNamedParameterdvNV(int id, int len, Pointer<Uint8>? name, Pointer<Double>? params) {
  final _glGetProgramNamedParameterdvNV = glad__glGetProgramNamedParameterdvNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 len, Pointer<Uint8>? name, Pointer<Double>? params)>>()
      .asFunction<void Function(int id, int len, Pointer<Uint8>? name, Pointer<Double>? params)>();
  return _glGetProgramNamedParameterdvNV(id, len, name, params);
}

/// ```c
/// define glGetProgramNamedParameterfvNV GLEW_GET_FUN(__glewGetProgramNamedParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glewGetProgramNamedParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramNamedParameterfvNV;
void glGetProgramNamedParameterfvNV(int id, int len, Pointer<Uint8>? name, Pointer<Float>? params) {
  final _glGetProgramNamedParameterfvNV = glad__glGetProgramNamedParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 len, Pointer<Uint8>? name, Pointer<Float>? params)>>()
      .asFunction<void Function(int id, int len, Pointer<Uint8>? name, Pointer<Float>? params)>();
  return _glGetProgramNamedParameterfvNV(id, len, name, params);
}

/// ```c
/// define glProgramNamedParameter4dNV GLEW_GET_FUN(__glewProgramNamedParameter4dNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glewProgramNamedParameter4dNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramNamedParameter4dNV;
void glProgramNamedParameter4dNV(int id, int len, Pointer<Uint8>? name, double x, double y, double z, double w) {
  final _glProgramNamedParameter4dNV = glad__glProgramNamedParameter4dNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 len, Pointer<Uint8>? name, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int id, int len, Pointer<Uint8>? name, double x, double y, double z, double w)>();
  return _glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
}

/// ```c
/// define glProgramNamedParameter4dvNV GLEW_GET_FUN(__glewProgramNamedParameter4dvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glewProgramNamedParameter4dvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramNamedParameter4dvNV;
void glProgramNamedParameter4dvNV(int id, int len, Pointer<Uint8>? name, double v) {
  final _glProgramNamedParameter4dvNV = glad__glProgramNamedParameter4dvNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 len, Pointer<Uint8>? name, Double v)>>()
      .asFunction<void Function(int id, int len, Pointer<Uint8>? name, double v)>();
  return _glProgramNamedParameter4dvNV(id, len, name, v);
}

/// ```c
/// define glProgramNamedParameter4fNV GLEW_GET_FUN(__glewProgramNamedParameter4fNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glewProgramNamedParameter4fNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramNamedParameter4fNV;
void glProgramNamedParameter4fNV(int id, int len, Pointer<Uint8>? name, double x, double y, double z, double w) {
  final _glProgramNamedParameter4fNV = glad__glProgramNamedParameter4fNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 len, Pointer<Uint8>? name, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int id, int len, Pointer<Uint8>? name, double x, double y, double z, double w)>();
  return _glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
}

/// ```c
/// define glProgramNamedParameter4fvNV GLEW_GET_FUN(__glewProgramNamedParameter4fvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glewProgramNamedParameter4fvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramNamedParameter4fvNV;
void glProgramNamedParameter4fvNV(int id, int len, Pointer<Uint8>? name, double v) {
  final _glProgramNamedParameter4fvNV = glad__glProgramNamedParameter4fvNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 len, Pointer<Uint8>? name, Float v)>>()
      .asFunction<void Function(int id, int len, Pointer<Uint8>? name, double v)>();
  return _glProgramNamedParameter4fvNV(id, len, name, v);
}

/// ------------------------- GL_NV_framebuffer_blit ------------------------
/// ```c
/// define glBlitFramebufferNV GLEW_GET_FUN(__glewBlitFramebufferNV)
/// GLEW_FUN_EXPORT PFNGLBLITFRAMEBUFFERNVPROC __glewBlitFramebufferNV
/// typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFERNVPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBlitFramebufferNV;
void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
  final _glBlitFramebufferNV = glad__glBlitFramebufferNV!
      .cast<NativeFunction<Void Function(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Uint32 mask, Uint32 filter)>>()
      .asFunction<void Function(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)>();
  return _glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/// --------------------- GL_NV_framebuffer_multisample ---------------------
/// ```c
/// define glRenderbufferStorageMultisampleNV GLEW_GET_FUN(__glewRenderbufferStorageMultisampleNV)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC __glewRenderbufferStorageMultisampleNV
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageMultisampleNV;
void glRenderbufferStorageMultisampleNV(int target, int samples, int internalformat, int width, int height) {
  final _glRenderbufferStorageMultisampleNV = glad__glRenderbufferStorageMultisampleNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 samples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int samples, int internalformat, int width, int height)>();
  return _glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);
}

/// ----------------- GL_NV_framebuffer_multisample_coverage ----------------
/// ```c
/// define glRenderbufferStorageMultisampleCoverageNV GLEW_GET_FUN(__glewRenderbufferStorageMultisampleCoverageNV)
/// GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glewRenderbufferStorageMultisampleCoverageNV
/// typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderbufferStorageMultisampleCoverageNV;
void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height) {
  final _glRenderbufferStorageMultisampleCoverageNV = glad__glRenderbufferStorageMultisampleCoverageNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 coverageSamples, Uint32 colorSamples, Uint32 internalformat, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height)>();
  return _glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
}

/// ------------------------ GL_NV_geometry_program4 ------------------------
/// ```c
/// define glProgramVertexLimitNV GLEW_GET_FUN(__glewProgramVertexLimitNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMVERTEXLIMITNVPROC __glewProgramVertexLimitNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramVertexLimitNV;
void glProgramVertexLimitNV(int target, int limit) {
  final _glProgramVertexLimitNV = glad__glProgramVertexLimitNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 limit)>>()
      .asFunction<void Function(int target, int limit)>();
  return _glProgramVertexLimitNV(target, limit);
}

/// -------------------------- GL_NV_gpu_multicast --------------------------
/// ```c
/// define glMulticastBarrierNV GLEW_GET_FUN(__glewMulticastBarrierNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTBARRIERNVPROC __glewMulticastBarrierNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTBARRIERNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastBarrierNV;
void glMulticastBarrierNV() {
  final _glMulticastBarrierNV = glad__glMulticastBarrierNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glMulticastBarrierNV();
}

/// ```c
/// define glMulticastBlitFramebufferNV GLEW_GET_FUN(__glewMulticastBlitFramebufferNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTBLITFRAMEBUFFERNVPROC __glewMulticastBlitFramebufferNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastBlitFramebufferNV;
void glMulticastBlitFramebufferNV(int srcGpu, int dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
  final _glMulticastBlitFramebufferNV = glad__glMulticastBlitFramebufferNV!
      .cast<NativeFunction<Void Function(Uint32 srcGpu, Uint32 dstGpu, Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Uint32 mask, Uint32 filter)>>()
      .asFunction<void Function(int srcGpu, int dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter)>();
  return _glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/// ```c
/// define glMulticastBufferSubDataNV GLEW_GET_FUN(__glewMulticastBufferSubDataNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTBUFFERSUBDATANVPROC __glewMulticastBufferSubDataNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTBUFFERSUBDATANVPROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastBufferSubDataNV;
void glMulticastBufferSubDataNV(int gpuMask, int buffer, int offset, int size, Pointer<Void>? data) {
  final _glMulticastBufferSubDataNV = glad__glMulticastBufferSubDataNV!
      .cast<NativeFunction<Void Function(Uint32 gpuMask, Uint32 buffer, Uint64 offset, Uint64 size, Pointer<Void>? data)>>()
      .asFunction<void Function(int gpuMask, int buffer, int offset, int size, Pointer<Void>? data)>();
  return _glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
}

/// ```c
/// define glMulticastCopyBufferSubDataNV GLEW_GET_FUN(__glewMulticastCopyBufferSubDataNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC __glewMulticastCopyBufferSubDataNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC) (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastCopyBufferSubDataNV;
void glMulticastCopyBufferSubDataNV(int readGpu, int writeGpuMask, int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size) {
  final _glMulticastCopyBufferSubDataNV = glad__glMulticastCopyBufferSubDataNV!
      .cast<NativeFunction<Void Function(Uint32 readGpu, Uint32 writeGpuMask, Uint32 readBuffer, Uint32 writeBuffer, Uint64 readOffset, Uint64 writeOffset, Uint64 size)>>()
      .asFunction<void Function(int readGpu, int writeGpuMask, int readBuffer, int writeBuffer, int readOffset, int writeOffset, int size)>();
  return _glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
}

/// ```c
/// define glMulticastCopyImageSubDataNV GLEW_GET_FUN(__glewMulticastCopyImageSubDataNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTCOPYIMAGESUBDATANVPROC __glewMulticastCopyImageSubDataNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTCOPYIMAGESUBDATANVPROC) (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastCopyImageSubDataNV;
void glMulticastCopyImageSubDataNV(int srcGpu, int dstGpuMask, int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
  final _glMulticastCopyImageSubDataNV = glad__glMulticastCopyImageSubDataNV!
      .cast<NativeFunction<Void Function(Uint32 srcGpu, Uint32 dstGpuMask, Uint32 srcName, Uint32 srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Uint32 dstName, Uint32 dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Uint32 srcWidth, Uint32 srcHeight, Uint32 srcDepth)>>()
      .asFunction<void Function(int srcGpu, int dstGpuMask, int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)>();
  return _glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

/// ```c
/// define glMulticastFramebufferSampleLocationsfvNV GLEW_GET_FUN(__glewMulticastFramebufferSampleLocationsfvNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glewMulticastFramebufferSampleLocationsfvNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastFramebufferSampleLocationsfvNV;
void glMulticastFramebufferSampleLocationsfvNV(int gpu, int framebuffer, int start, int count, Pointer<Float>? v) {
  final _glMulticastFramebufferSampleLocationsfvNV = glad__glMulticastFramebufferSampleLocationsfvNV!
      .cast<NativeFunction<Void Function(Uint32 gpu, Uint32 framebuffer, Uint32 start, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int gpu, int framebuffer, int start, int count, Pointer<Float>? v)>();
  return _glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);
}

/// ```c
/// define glMulticastGetQueryObjecti64vNV GLEW_GET_FUN(__glewMulticastGetQueryObjecti64vNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC __glewMulticastGetQueryObjecti64vNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastGetQueryObjecti64vNV;
void glMulticastGetQueryObjecti64vNV(int gpu, int id, int pname, Pointer<Int64>? params) {
  final _glMulticastGetQueryObjecti64vNV = glad__glMulticastGetQueryObjecti64vNV!
      .cast<NativeFunction<Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int gpu, int id, int pname, Pointer<Int64>? params)>();
  return _glMulticastGetQueryObjecti64vNV(gpu, id, pname, params);
}

/// ```c
/// define glMulticastGetQueryObjectivNV GLEW_GET_FUN(__glewMulticastGetQueryObjectivNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTGETQUERYOBJECTIVNVPROC __glewMulticastGetQueryObjectivNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastGetQueryObjectivNV;
void glMulticastGetQueryObjectivNV(int gpu, int id, int pname, Pointer<Int32>? params) {
  final _glMulticastGetQueryObjectivNV = glad__glMulticastGetQueryObjectivNV!
      .cast<NativeFunction<Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int gpu, int id, int pname, Pointer<Int32>? params)>();
  return _glMulticastGetQueryObjectivNV(gpu, id, pname, params);
}

/// ```c
/// define glMulticastGetQueryObjectui64vNV GLEW_GET_FUN(__glewMulticastGetQueryObjectui64vNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC __glewMulticastGetQueryObjectui64vNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint64* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastGetQueryObjectui64vNV;
void glMulticastGetQueryObjectui64vNV(int gpu, int id, int pname, Pointer<Uint64>? params) {
  final _glMulticastGetQueryObjectui64vNV = glad__glMulticastGetQueryObjectui64vNV!
      .cast<NativeFunction<Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int gpu, int id, int pname, Pointer<Uint64>? params)>();
  return _glMulticastGetQueryObjectui64vNV(gpu, id, pname, params);
}

/// ```c
/// define glMulticastGetQueryObjectuivNV GLEW_GET_FUN(__glewMulticastGetQueryObjectuivNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC __glewMulticastGetQueryObjectuivNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastGetQueryObjectuivNV;
void glMulticastGetQueryObjectuivNV(int gpu, int id, int pname, Pointer<Uint32>? params) {
  final _glMulticastGetQueryObjectuivNV = glad__glMulticastGetQueryObjectuivNV!
      .cast<NativeFunction<Void Function(Uint32 gpu, Uint32 id, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int gpu, int id, int pname, Pointer<Uint32>? params)>();
  return _glMulticastGetQueryObjectuivNV(gpu, id, pname, params);
}

/// ```c
/// define glMulticastWaitSyncNV GLEW_GET_FUN(__glewMulticastWaitSyncNV)
/// GLEW_FUN_EXPORT PFNGLMULTICASTWAITSYNCNVPROC __glewMulticastWaitSyncNV
/// typedef void (GLAPIENTRY * PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGpu, GLbitfield waitGpuMask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMulticastWaitSyncNV;
void glMulticastWaitSyncNV(int signalGpu, int waitGpuMask) {
  final _glMulticastWaitSyncNV = glad__glMulticastWaitSyncNV!
      .cast<NativeFunction<Void Function(Uint32 signalGpu, Uint32 waitGpuMask)>>()
      .asFunction<void Function(int signalGpu, int waitGpuMask)>();
  return _glMulticastWaitSyncNV(signalGpu, waitGpuMask);
}

/// ```c
/// define glRenderGpuMaskNV GLEW_GET_FUN(__glewRenderGpuMaskNV)
/// GLEW_FUN_EXPORT PFNGLRENDERGPUMASKNVPROC __glewRenderGpuMaskNV
/// typedef void (GLAPIENTRY * PFNGLRENDERGPUMASKNVPROC) (GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRenderGpuMaskNV;
void glRenderGpuMaskNV(int mask) {
  final _glRenderGpuMaskNV = glad__glRenderGpuMaskNV!
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return _glRenderGpuMaskNV(mask);
}

/// --------------------------- GL_NV_gpu_program4 --------------------------
/// ```c
/// define glProgramEnvParameterI4iNV GLEW_GET_FUN(__glewProgramEnvParameterI4iNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4INVPROC __glewProgramEnvParameterI4iNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameterI4iNV;
void glProgramEnvParameterI4iNV(int target, int index, int x, int y, int z, int w) {
  final _glProgramEnvParameterI4iNV = glad__glProgramEnvParameterI4iNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int target, int index, int x, int y, int z, int w)>();
  return _glProgramEnvParameterI4iNV(target, index, x, y, z, w);
}

/// ```c
/// define glProgramEnvParameterI4ivNV GLEW_GET_FUN(__glewProgramEnvParameterI4ivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glewProgramEnvParameterI4ivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameterI4ivNV;
void glProgramEnvParameterI4ivNV(int target, int index, Pointer<Int32>? params) {
  final _glProgramEnvParameterI4ivNV = glad__glProgramEnvParameterI4ivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Int32>? params)>();
  return _glProgramEnvParameterI4ivNV(target, index, params);
}

/// ```c
/// define glProgramEnvParameterI4uiNV GLEW_GET_FUN(__glewProgramEnvParameterI4uiNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4UINVPROC __glewProgramEnvParameterI4uiNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameterI4uiNV;
void glProgramEnvParameterI4uiNV(int target, int index, int x, int y, int z, int w) {
  final _glProgramEnvParameterI4uiNV = glad__glProgramEnvParameterI4uiNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w)>>()
      .asFunction<void Function(int target, int index, int x, int y, int z, int w)>();
  return _glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
}

/// ```c
/// define glProgramEnvParameterI4uivNV GLEW_GET_FUN(__glewProgramEnvParameterI4uivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glewProgramEnvParameterI4uivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParameterI4uivNV;
void glProgramEnvParameterI4uivNV(int target, int index, Pointer<Uint32>? params) {
  final _glProgramEnvParameterI4uivNV = glad__glProgramEnvParameterI4uivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Uint32>? params)>();
  return _glProgramEnvParameterI4uivNV(target, index, params);
}

/// ```c
/// define glProgramEnvParametersI4ivNV GLEW_GET_FUN(__glewProgramEnvParametersI4ivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glewProgramEnvParametersI4ivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParametersI4ivNV;
void glProgramEnvParametersI4ivNV(int target, int index, int count, Pointer<Int32>? params) {
  final _glProgramEnvParametersI4ivNV = glad__glProgramEnvParametersI4ivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int index, int count, Pointer<Int32>? params)>();
  return _glProgramEnvParametersI4ivNV(target, index, count, params);
}

/// ```c
/// define glProgramEnvParametersI4uivNV GLEW_GET_FUN(__glewProgramEnvParametersI4uivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glewProgramEnvParametersI4uivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramEnvParametersI4uivNV;
void glProgramEnvParametersI4uivNV(int target, int index, int count, Pointer<Uint32>? params) {
  final _glProgramEnvParametersI4uivNV = glad__glProgramEnvParametersI4uivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int index, int count, Pointer<Uint32>? params)>();
  return _glProgramEnvParametersI4uivNV(target, index, count, params);
}

/// ```c
/// define glProgramLocalParameterI4iNV GLEW_GET_FUN(__glewProgramLocalParameterI4iNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glewProgramLocalParameterI4iNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameterI4iNV;
void glProgramLocalParameterI4iNV(int target, int index, int x, int y, int z, int w) {
  final _glProgramLocalParameterI4iNV = glad__glProgramLocalParameterI4iNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Int32 x, Int32 y, Int32 z, Int32 w)>>()
      .asFunction<void Function(int target, int index, int x, int y, int z, int w)>();
  return _glProgramLocalParameterI4iNV(target, index, x, y, z, w);
}

/// ```c
/// define glProgramLocalParameterI4ivNV GLEW_GET_FUN(__glewProgramLocalParameterI4ivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glewProgramLocalParameterI4ivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameterI4ivNV;
void glProgramLocalParameterI4ivNV(int target, int index, Pointer<Int32>? params) {
  final _glProgramLocalParameterI4ivNV = glad__glProgramLocalParameterI4ivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Int32>? params)>();
  return _glProgramLocalParameterI4ivNV(target, index, params);
}

/// ```c
/// define glProgramLocalParameterI4uiNV GLEW_GET_FUN(__glewProgramLocalParameterI4uiNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glewProgramLocalParameterI4uiNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameterI4uiNV;
void glProgramLocalParameterI4uiNV(int target, int index, int x, int y, int z, int w) {
  final _glProgramLocalParameterI4uiNV = glad__glProgramLocalParameterI4uiNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 x, Uint32 y, Uint32 z, Uint32 w)>>()
      .asFunction<void Function(int target, int index, int x, int y, int z, int w)>();
  return _glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
}

/// ```c
/// define glProgramLocalParameterI4uivNV GLEW_GET_FUN(__glewProgramLocalParameterI4uivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glewProgramLocalParameterI4uivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParameterI4uivNV;
void glProgramLocalParameterI4uivNV(int target, int index, Pointer<Uint32>? params) {
  final _glProgramLocalParameterI4uivNV = glad__glProgramLocalParameterI4uivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Uint32>? params)>();
  return _glProgramLocalParameterI4uivNV(target, index, params);
}

/// ```c
/// define glProgramLocalParametersI4ivNV GLEW_GET_FUN(__glewProgramLocalParametersI4ivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glewProgramLocalParametersI4ivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParametersI4ivNV;
void glProgramLocalParametersI4ivNV(int target, int index, int count, Pointer<Int32>? params) {
  final _glProgramLocalParametersI4ivNV = glad__glProgramLocalParametersI4ivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int index, int count, Pointer<Int32>? params)>();
  return _glProgramLocalParametersI4ivNV(target, index, count, params);
}

/// ```c
/// define glProgramLocalParametersI4uivNV GLEW_GET_FUN(__glewProgramLocalParametersI4uivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glewProgramLocalParametersI4uivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramLocalParametersI4uivNV;
void glProgramLocalParametersI4uivNV(int target, int index, int count, Pointer<Uint32>? params) {
  final _glProgramLocalParametersI4uivNV = glad__glProgramLocalParametersI4uivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 count, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int index, int count, Pointer<Uint32>? params)>();
  return _glProgramLocalParametersI4uivNV(target, index, count, params);
}

/// --------------------------- GL_NV_gpu_shader5 ---------------------------
/// ```c
/// define glGetUniformi64vNV GLEW_GET_FUN(__glewGetUniformi64vNV)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMI64VNVPROC __glewGetUniformi64vNV
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformi64vNV;
void glGetUniformi64vNV(int program, int location, Pointer<Int64>? params) {
  final _glGetUniformi64vNV = glad__glGetUniformi64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Int64>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Int64>? params)>();
  return _glGetUniformi64vNV(program, location, params);
}

/// ```c
/// define glGetUniformui64vNV GLEW_GET_FUN(__glewGetUniformui64vNV)
/// GLEW_FUN_EXPORT PFNGLGETUNIFORMUI64VNVPROC __glewGetUniformui64vNV
/// typedef void (GLAPIENTRY * PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetUniformui64vNV;
void glGetUniformui64vNV(int program, int location, Pointer<Uint64>? params) {
  final _glGetUniformui64vNV = glad__glGetUniformui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int program, int location, Pointer<Uint64>? params)>();
  return _glGetUniformui64vNV(program, location, params);
}

/// ```c
/// define glProgramUniform1i64NV GLEW_GET_FUN(__glewProgramUniform1i64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1I64NVPROC __glewProgramUniform1i64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1i64NV;
void glProgramUniform1i64NV(int program, int location, int x) {
  final _glProgramUniform1i64NV = glad__glProgramUniform1i64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x)>>()
      .asFunction<void Function(int program, int location, int x)>();
  return _glProgramUniform1i64NV(program, location, x);
}

/// ```c
/// define glProgramUniform1i64vNV GLEW_GET_FUN(__glewProgramUniform1i64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1I64VNVPROC __glewProgramUniform1i64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1i64vNV;
void glProgramUniform1i64vNV(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform1i64vNV = glad__glProgramUniform1i64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform1i64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform1ui64NV GLEW_GET_FUN(__glewProgramUniform1ui64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UI64NVPROC __glewProgramUniform1ui64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1ui64NV;
void glProgramUniform1ui64NV(int program, int location, int x) {
  final _glProgramUniform1ui64NV = glad__glProgramUniform1ui64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x)>>()
      .asFunction<void Function(int program, int location, int x)>();
  return _glProgramUniform1ui64NV(program, location, x);
}

/// ```c
/// define glProgramUniform1ui64vNV GLEW_GET_FUN(__glewProgramUniform1ui64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM1UI64VNVPROC __glewProgramUniform1ui64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform1ui64vNV;
void glProgramUniform1ui64vNV(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform1ui64vNV = glad__glProgramUniform1ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform1ui64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform2i64NV GLEW_GET_FUN(__glewProgramUniform2i64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2I64NVPROC __glewProgramUniform2i64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2i64NV;
void glProgramUniform2i64NV(int program, int location, int x, int y) {
  final _glProgramUniform2i64NV = glad__glProgramUniform2i64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x, Int64 y)>>()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return _glProgramUniform2i64NV(program, location, x, y);
}

/// ```c
/// define glProgramUniform2i64vNV GLEW_GET_FUN(__glewProgramUniform2i64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2I64VNVPROC __glewProgramUniform2i64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2i64vNV;
void glProgramUniform2i64vNV(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform2i64vNV = glad__glProgramUniform2i64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform2i64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform2ui64NV GLEW_GET_FUN(__glewProgramUniform2ui64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UI64NVPROC __glewProgramUniform2ui64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2ui64NV;
void glProgramUniform2ui64NV(int program, int location, int x, int y) {
  final _glProgramUniform2ui64NV = glad__glProgramUniform2ui64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int program, int location, int x, int y)>();
  return _glProgramUniform2ui64NV(program, location, x, y);
}

/// ```c
/// define glProgramUniform2ui64vNV GLEW_GET_FUN(__glewProgramUniform2ui64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM2UI64VNVPROC __glewProgramUniform2ui64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform2ui64vNV;
void glProgramUniform2ui64vNV(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform2ui64vNV = glad__glProgramUniform2ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform2ui64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform3i64NV GLEW_GET_FUN(__glewProgramUniform3i64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3I64NVPROC __glewProgramUniform3i64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3i64NV;
void glProgramUniform3i64NV(int program, int location, int x, int y, int z) {
  final _glProgramUniform3i64NV = glad__glProgramUniform3i64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x, Int64 y, Int64 z)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z)>();
  return _glProgramUniform3i64NV(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3i64vNV GLEW_GET_FUN(__glewProgramUniform3i64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3I64VNVPROC __glewProgramUniform3i64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3i64vNV;
void glProgramUniform3i64vNV(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform3i64vNV = glad__glProgramUniform3i64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform3i64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform3ui64NV GLEW_GET_FUN(__glewProgramUniform3ui64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UI64NVPROC __glewProgramUniform3ui64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3ui64NV;
void glProgramUniform3ui64NV(int program, int location, int x, int y, int z) {
  final _glProgramUniform3ui64NV = glad__glProgramUniform3ui64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y, Uint64 z)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z)>();
  return _glProgramUniform3ui64NV(program, location, x, y, z);
}

/// ```c
/// define glProgramUniform3ui64vNV GLEW_GET_FUN(__glewProgramUniform3ui64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM3UI64VNVPROC __glewProgramUniform3ui64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform3ui64vNV;
void glProgramUniform3ui64vNV(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform3ui64vNV = glad__glProgramUniform3ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform3ui64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform4i64NV GLEW_GET_FUN(__glewProgramUniform4i64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4I64NVPROC __glewProgramUniform4i64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4i64NV;
void glProgramUniform4i64NV(int program, int location, int x, int y, int z, int w) {
  final _glProgramUniform4i64NV = glad__glProgramUniform4i64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Int64 x, Int64 y, Int64 z, Int64 w)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z, int w)>();
  return _glProgramUniform4i64NV(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4i64vNV GLEW_GET_FUN(__glewProgramUniform4i64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4I64VNVPROC __glewProgramUniform4i64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4i64vNV;
void glProgramUniform4i64vNV(int program, int location, int count, Pointer<Int64>? value) {
  final _glProgramUniform4i64vNV = glad__glProgramUniform4i64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Int64>? value)>();
  return _glProgramUniform4i64vNV(program, location, count, value);
}

/// ```c
/// define glProgramUniform4ui64NV GLEW_GET_FUN(__glewProgramUniform4ui64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UI64NVPROC __glewProgramUniform4ui64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4ui64NV;
void glProgramUniform4ui64NV(int program, int location, int x, int y, int z, int w) {
  final _glProgramUniform4ui64NV = glad__glProgramUniform4ui64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w)>>()
      .asFunction<void Function(int program, int location, int x, int y, int z, int w)>();
  return _glProgramUniform4ui64NV(program, location, x, y, z, w);
}

/// ```c
/// define glProgramUniform4ui64vNV GLEW_GET_FUN(__glewProgramUniform4ui64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORM4UI64VNVPROC __glewProgramUniform4ui64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniform4ui64vNV;
void glProgramUniform4ui64vNV(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniform4ui64vNV = glad__glProgramUniform4ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniform4ui64vNV(program, location, count, value);
}

/// ```c
/// define glUniform1i64NV GLEW_GET_FUN(__glewUniform1i64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1I64NVPROC __glewUniform1i64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1i64NV;
void glUniform1i64NV(int location, int x) {
  final _glUniform1i64NV = glad__glUniform1i64NV!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return _glUniform1i64NV(location, x);
}

/// ```c
/// define glUniform1i64vNV GLEW_GET_FUN(__glewUniform1i64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1I64VNVPROC __glewUniform1i64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1i64vNV;
void glUniform1i64vNV(int location, int count, Pointer<Int64>? value) {
  final _glUniform1i64vNV = glad__glUniform1i64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform1i64vNV(location, count, value);
}

/// ```c
/// define glUniform1ui64NV GLEW_GET_FUN(__glewUniform1ui64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UI64NVPROC __glewUniform1ui64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1ui64NV;
void glUniform1ui64NV(int location, int x) {
  final _glUniform1ui64NV = glad__glUniform1ui64NV!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x)>>()
      .asFunction<void Function(int location, int x)>();
  return _glUniform1ui64NV(location, x);
}

/// ```c
/// define glUniform1ui64vNV GLEW_GET_FUN(__glewUniform1ui64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM1UI64VNVPROC __glewUniform1ui64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform1ui64vNV;
void glUniform1ui64vNV(int location, int count, Pointer<Uint64>? value) {
  final _glUniform1ui64vNV = glad__glUniform1ui64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform1ui64vNV(location, count, value);
}

/// ```c
/// define glUniform2i64NV GLEW_GET_FUN(__glewUniform2i64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2I64NVPROC __glewUniform2i64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2i64NV;
void glUniform2i64NV(int location, int x, int y) {
  final _glUniform2i64NV = glad__glUniform2i64NV!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return _glUniform2i64NV(location, x, y);
}

/// ```c
/// define glUniform2i64vNV GLEW_GET_FUN(__glewUniform2i64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2I64VNVPROC __glewUniform2i64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2i64vNV;
void glUniform2i64vNV(int location, int count, Pointer<Int64>? value) {
  final _glUniform2i64vNV = glad__glUniform2i64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform2i64vNV(location, count, value);
}

/// ```c
/// define glUniform2ui64NV GLEW_GET_FUN(__glewUniform2ui64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UI64NVPROC __glewUniform2ui64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2ui64NV;
void glUniform2ui64NV(int location, int x, int y) {
  final _glUniform2ui64NV = glad__glUniform2ui64NV!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int location, int x, int y)>();
  return _glUniform2ui64NV(location, x, y);
}

/// ```c
/// define glUniform2ui64vNV GLEW_GET_FUN(__glewUniform2ui64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM2UI64VNVPROC __glewUniform2ui64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform2ui64vNV;
void glUniform2ui64vNV(int location, int count, Pointer<Uint64>? value) {
  final _glUniform2ui64vNV = glad__glUniform2ui64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform2ui64vNV(location, count, value);
}

/// ```c
/// define glUniform3i64NV GLEW_GET_FUN(__glewUniform3i64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3I64NVPROC __glewUniform3i64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3i64NV;
void glUniform3i64NV(int location, int x, int y, int z) {
  final _glUniform3i64NV = glad__glUniform3i64NV!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y, Int64 z)>>()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return _glUniform3i64NV(location, x, y, z);
}

/// ```c
/// define glUniform3i64vNV GLEW_GET_FUN(__glewUniform3i64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3I64VNVPROC __glewUniform3i64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3i64vNV;
void glUniform3i64vNV(int location, int count, Pointer<Int64>? value) {
  final _glUniform3i64vNV = glad__glUniform3i64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform3i64vNV(location, count, value);
}

/// ```c
/// define glUniform3ui64NV GLEW_GET_FUN(__glewUniform3ui64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UI64NVPROC __glewUniform3ui64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3ui64NV;
void glUniform3ui64NV(int location, int x, int y, int z) {
  final _glUniform3ui64NV = glad__glUniform3ui64NV!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z)>>()
      .asFunction<void Function(int location, int x, int y, int z)>();
  return _glUniform3ui64NV(location, x, y, z);
}

/// ```c
/// define glUniform3ui64vNV GLEW_GET_FUN(__glewUniform3ui64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM3UI64VNVPROC __glewUniform3ui64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform3ui64vNV;
void glUniform3ui64vNV(int location, int count, Pointer<Uint64>? value) {
  final _glUniform3ui64vNV = glad__glUniform3ui64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform3ui64vNV(location, count, value);
}

/// ```c
/// define glUniform4i64NV GLEW_GET_FUN(__glewUniform4i64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4I64NVPROC __glewUniform4i64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4i64NV;
void glUniform4i64NV(int location, int x, int y, int z, int w) {
  final _glUniform4i64NV = glad__glUniform4i64NV!
      .cast<NativeFunction<Void Function(Int32 location, Int64 x, Int64 y, Int64 z, Int64 w)>>()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return _glUniform4i64NV(location, x, y, z, w);
}

/// ```c
/// define glUniform4i64vNV GLEW_GET_FUN(__glewUniform4i64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4I64VNVPROC __glewUniform4i64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4i64vNV;
void glUniform4i64vNV(int location, int count, Pointer<Int64>? value) {
  final _glUniform4i64vNV = glad__glUniform4i64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Int64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Int64>? value)>();
  return _glUniform4i64vNV(location, count, value);
}

/// ```c
/// define glUniform4ui64NV GLEW_GET_FUN(__glewUniform4ui64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UI64NVPROC __glewUniform4ui64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4ui64NV;
void glUniform4ui64NV(int location, int x, int y, int z, int w) {
  final _glUniform4ui64NV = glad__glUniform4ui64NV!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 x, Uint64 y, Uint64 z, Uint64 w)>>()
      .asFunction<void Function(int location, int x, int y, int z, int w)>();
  return _glUniform4ui64NV(location, x, y, z, w);
}

/// ```c
/// define glUniform4ui64vNV GLEW_GET_FUN(__glewUniform4ui64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORM4UI64VNVPROC __glewUniform4ui64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniform4ui64vNV;
void glUniform4ui64vNV(int location, int count, Pointer<Uint64>? value) {
  final _glUniform4ui64vNV = glad__glUniform4ui64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniform4ui64vNV(location, count, value);
}

/// ```c
/// define glColor3hNV GLEW_GET_FUN(__glewColor3hNV)
/// GLEW_FUN_EXPORT PFNGLCOLOR3HNVPROC __glewColor3hNV
/// typedef void (GLAPIENTRY * PFNGLCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor3hNV;
void glColor3hNV(int red, int green, int blue) {
  final _glColor3hNV = glad__glColor3hNV!
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glColor3hNV(red, green, blue);
}

/// ```c
/// define glColor3hvNV GLEW_GET_FUN(__glewColor3hvNV)
/// GLEW_FUN_EXPORT PFNGLCOLOR3HVNVPROC __glewColor3hvNV
/// typedef void (GLAPIENTRY * PFNGLCOLOR3HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor3hvNV;
void glColor3hvNV(Pointer<Int16>? v) {
  final _glColor3hvNV = glad__glColor3hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glColor3hvNV(v);
}

/// ```c
/// define glColor4hNV GLEW_GET_FUN(__glewColor4hNV)
/// GLEW_FUN_EXPORT PFNGLCOLOR4HNVPROC __glewColor4hNV
/// typedef void (GLAPIENTRY * PFNGLCOLOR4HNVPROC) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4hNV;
void glColor4hNV(int red, int green, int blue, int alpha) {
  final _glColor4hNV = glad__glColor4hNV!
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue, Int16 alpha)>>()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return _glColor4hNV(red, green, blue, alpha);
}

/// ```c
/// define glColor4hvNV GLEW_GET_FUN(__glewColor4hvNV)
/// GLEW_FUN_EXPORT PFNGLCOLOR4HVNVPROC __glewColor4hvNV
/// typedef void (GLAPIENTRY * PFNGLCOLOR4HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4hvNV;
void glColor4hvNV(Pointer<Int16>? v) {
  final _glColor4hvNV = glad__glColor4hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glColor4hvNV(v);
}

/// ```c
/// define glFogCoordhNV GLEW_GET_FUN(__glewFogCoordhNV)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDHNVPROC __glewFogCoordhNV
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDHNVPROC) (GLhalf fog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordhNV;
void glFogCoordhNV(int fog) {
  final _glFogCoordhNV = glad__glFogCoordhNV!
      .cast<NativeFunction<Void Function(Int16 fog)>>()
      .asFunction<void Function(int fog)>();
  return _glFogCoordhNV(fog);
}

/// ```c
/// define glFogCoordhvNV GLEW_GET_FUN(__glewFogCoordhvNV)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDHVNVPROC __glewFogCoordhvNV
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDHVNVPROC) (const GLhalf* fog)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordhvNV;
void glFogCoordhvNV(Pointer<Int16>? fog) {
  final _glFogCoordhvNV = glad__glFogCoordhvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? fog)>>()
      .asFunction<void Function(Pointer<Int16>? fog)>();
  return _glFogCoordhvNV(fog);
}

/// ```c
/// define glMultiTexCoord1hNV GLEW_GET_FUN(__glewMultiTexCoord1hNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1HNVPROC __glewMultiTexCoord1hNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalf s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1hNV;
void glMultiTexCoord1hNV(int target, int s) {
  final _glMultiTexCoord1hNV = glad__glMultiTexCoord1hNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s)>>()
      .asFunction<void Function(int target, int s)>();
  return _glMultiTexCoord1hNV(target, s);
}

/// ```c
/// define glMultiTexCoord1hvNV GLEW_GET_FUN(__glewMultiTexCoord1hvNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1HVNVPROC __glewMultiTexCoord1hvNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord1hvNV;
void glMultiTexCoord1hvNV(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord1hvNV = glad__glMultiTexCoord1hvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord1hvNV(target, v);
}

/// ```c
/// define glMultiTexCoord2hNV GLEW_GET_FUN(__glewMultiTexCoord2hNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2HNVPROC __glewMultiTexCoord2hNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalf s, GLhalf t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2hNV;
void glMultiTexCoord2hNV(int target, int s, int t) {
  final _glMultiTexCoord2hNV = glad__glMultiTexCoord2hNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t)>>()
      .asFunction<void Function(int target, int s, int t)>();
  return _glMultiTexCoord2hNV(target, s, t);
}

/// ```c
/// define glMultiTexCoord2hvNV GLEW_GET_FUN(__glewMultiTexCoord2hvNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2HVNVPROC __glewMultiTexCoord2hvNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord2hvNV;
void glMultiTexCoord2hvNV(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord2hvNV = glad__glMultiTexCoord2hvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord2hvNV(target, v);
}

/// ```c
/// define glMultiTexCoord3hNV GLEW_GET_FUN(__glewMultiTexCoord3hNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3HNVPROC __glewMultiTexCoord3hNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3hNV;
void glMultiTexCoord3hNV(int target, int s, int t, int r) {
  final _glMultiTexCoord3hNV = glad__glMultiTexCoord3hNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r)>>()
      .asFunction<void Function(int target, int s, int t, int r)>();
  return _glMultiTexCoord3hNV(target, s, t, r);
}

/// ```c
/// define glMultiTexCoord3hvNV GLEW_GET_FUN(__glewMultiTexCoord3hvNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3HVNVPROC __glewMultiTexCoord3hvNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord3hvNV;
void glMultiTexCoord3hvNV(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord3hvNV = glad__glMultiTexCoord3hvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord3hvNV(target, v);
}

/// ```c
/// define glMultiTexCoord4hNV GLEW_GET_FUN(__glewMultiTexCoord4hNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4HNVPROC __glewMultiTexCoord4hNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4hNV;
void glMultiTexCoord4hNV(int target, int s, int t, int r, int q) {
  final _glMultiTexCoord4hNV = glad__glMultiTexCoord4hNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int16 s, Int16 t, Int16 r, Int16 q)>>()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return _glMultiTexCoord4hNV(target, s, t, r, q);
}

/// ```c
/// define glMultiTexCoord4hvNV GLEW_GET_FUN(__glewMultiTexCoord4hvNV)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4HVNVPROC __glewMultiTexCoord4hvNV
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4hvNV;
void glMultiTexCoord4hvNV(int target, Pointer<Int16>? v) {
  final _glMultiTexCoord4hvNV = glad__glMultiTexCoord4hvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Int16>? v)>>()
      .asFunction<void Function(int target, Pointer<Int16>? v)>();
  return _glMultiTexCoord4hvNV(target, v);
}

/// ```c
/// define glNormal3hNV GLEW_GET_FUN(__glewNormal3hNV)
/// GLEW_FUN_EXPORT PFNGLNORMAL3HNVPROC __glewNormal3hNV
/// typedef void (GLAPIENTRY * PFNGLNORMAL3HNVPROC) (GLhalf nx, GLhalf ny, GLhalf nz)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormal3hNV;
void glNormal3hNV(int nx, int ny, int nz) {
  final _glNormal3hNV = glad__glNormal3hNV!
      .cast<NativeFunction<Void Function(Int16 nx, Int16 ny, Int16 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return _glNormal3hNV(nx, ny, nz);
}

/// ```c
/// define glNormal3hvNV GLEW_GET_FUN(__glewNormal3hvNV)
/// GLEW_FUN_EXPORT PFNGLNORMAL3HVNVPROC __glewNormal3hvNV
/// typedef void (GLAPIENTRY * PFNGLNORMAL3HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormal3hvNV;
void glNormal3hvNV(Pointer<Int16>? v) {
  final _glNormal3hvNV = glad__glNormal3hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glNormal3hvNV(v);
}

/// ```c
/// define glSecondaryColor3hNV GLEW_GET_FUN(__glewSecondaryColor3hNV)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3HNVPROC __glewSecondaryColor3hNV
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3hNV;
void glSecondaryColor3hNV(int red, int green, int blue) {
  final _glSecondaryColor3hNV = glad__glSecondaryColor3hNV!
      .cast<NativeFunction<Void Function(Int16 red, Int16 green, Int16 blue)>>()
      .asFunction<void Function(int red, int green, int blue)>();
  return _glSecondaryColor3hNV(red, green, blue);
}

/// ```c
/// define glSecondaryColor3hvNV GLEW_GET_FUN(__glewSecondaryColor3hvNV)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3HVNVPROC __glewSecondaryColor3hvNV
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColor3hvNV;
void glSecondaryColor3hvNV(Pointer<Int16>? v) {
  final _glSecondaryColor3hvNV = glad__glSecondaryColor3hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glSecondaryColor3hvNV(v);
}

/// ```c
/// define glTexCoord1hNV GLEW_GET_FUN(__glewTexCoord1hNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD1HNVPROC __glewTexCoord1hNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD1HNVPROC) (GLhalf s)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord1hNV;
void glTexCoord1hNV(int s) {
  final _glTexCoord1hNV = glad__glTexCoord1hNV!
      .cast<NativeFunction<Void Function(Int16 s)>>()
      .asFunction<void Function(int s)>();
  return _glTexCoord1hNV(s);
}

/// ```c
/// define glTexCoord1hvNV GLEW_GET_FUN(__glewTexCoord1hvNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD1HVNVPROC __glewTexCoord1hvNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD1HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord1hvNV;
void glTexCoord1hvNV(Pointer<Int16>? v) {
  final _glTexCoord1hvNV = glad__glTexCoord1hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glTexCoord1hvNV(v);
}

/// ```c
/// define glTexCoord2hNV GLEW_GET_FUN(__glewTexCoord2hNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2HNVPROC __glewTexCoord2hNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2HNVPROC) (GLhalf s, GLhalf t)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2hNV;
void glTexCoord2hNV(int s, int t) {
  final _glTexCoord2hNV = glad__glTexCoord2hNV!
      .cast<NativeFunction<Void Function(Int16 s, Int16 t)>>()
      .asFunction<void Function(int s, int t)>();
  return _glTexCoord2hNV(s, t);
}

/// ```c
/// define glTexCoord2hvNV GLEW_GET_FUN(__glewTexCoord2hvNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2HVNVPROC __glewTexCoord2hvNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2hvNV;
void glTexCoord2hvNV(Pointer<Int16>? v) {
  final _glTexCoord2hvNV = glad__glTexCoord2hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glTexCoord2hvNV(v);
}

/// ```c
/// define glTexCoord3hNV GLEW_GET_FUN(__glewTexCoord3hNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD3HNVPROC __glewTexCoord3hNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD3HNVPROC) (GLhalf s, GLhalf t, GLhalf r)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord3hNV;
void glTexCoord3hNV(int s, int t, int r) {
  final _glTexCoord3hNV = glad__glTexCoord3hNV!
      .cast<NativeFunction<Void Function(Int16 s, Int16 t, Int16 r)>>()
      .asFunction<void Function(int s, int t, int r)>();
  return _glTexCoord3hNV(s, t, r);
}

/// ```c
/// define glTexCoord3hvNV GLEW_GET_FUN(__glewTexCoord3hvNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD3HVNVPROC __glewTexCoord3hvNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD3HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord3hvNV;
void glTexCoord3hvNV(Pointer<Int16>? v) {
  final _glTexCoord3hvNV = glad__glTexCoord3hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glTexCoord3hvNV(v);
}

/// ```c
/// define glTexCoord4hNV GLEW_GET_FUN(__glewTexCoord4hNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD4HNVPROC __glewTexCoord4hNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD4HNVPROC) (GLhalf s, GLhalf t, GLhalf r, GLhalf q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord4hNV;
void glTexCoord4hNV(int s, int t, int r, int q) {
  final _glTexCoord4hNV = glad__glTexCoord4hNV!
      .cast<NativeFunction<Void Function(Int16 s, Int16 t, Int16 r, Int16 q)>>()
      .asFunction<void Function(int s, int t, int r, int q)>();
  return _glTexCoord4hNV(s, t, r, q);
}

/// ```c
/// define glTexCoord4hvNV GLEW_GET_FUN(__glewTexCoord4hvNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD4HVNVPROC __glewTexCoord4hvNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD4HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord4hvNV;
void glTexCoord4hvNV(Pointer<Int16>? v) {
  final _glTexCoord4hvNV = glad__glTexCoord4hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glTexCoord4hvNV(v);
}

/// ```c
/// define glVertex2hNV GLEW_GET_FUN(__glewVertex2hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEX2HNVPROC __glewVertex2hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEX2HNVPROC) (GLhalf x, GLhalf y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertex2hNV;
void glVertex2hNV(int x, int y) {
  final _glVertex2hNV = glad__glVertex2hNV!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glVertex2hNV(x, y);
}

/// ```c
/// define glVertex2hvNV GLEW_GET_FUN(__glewVertex2hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEX2HVNVPROC __glewVertex2hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEX2HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertex2hvNV;
void glVertex2hvNV(Pointer<Int16>? v) {
  final _glVertex2hvNV = glad__glVertex2hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glVertex2hvNV(v);
}

/// ```c
/// define glVertex3hNV GLEW_GET_FUN(__glewVertex3hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEX3HNVPROC __glewVertex3hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEX3HNVPROC) (GLhalf x, GLhalf y, GLhalf z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertex3hNV;
void glVertex3hNV(int x, int y, int z) {
  final _glVertex3hNV = glad__glVertex3hNV!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glVertex3hNV(x, y, z);
}

/// ```c
/// define glVertex3hvNV GLEW_GET_FUN(__glewVertex3hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEX3HVNVPROC __glewVertex3hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEX3HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertex3hvNV;
void glVertex3hvNV(Pointer<Int16>? v) {
  final _glVertex3hvNV = glad__glVertex3hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glVertex3hvNV(v);
}

/// ```c
/// define glVertex4hNV GLEW_GET_FUN(__glewVertex4hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEX4HNVPROC __glewVertex4hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEX4HNVPROC) (GLhalf x, GLhalf y, GLhalf z, GLhalf w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertex4hNV;
void glVertex4hNV(int x, int y, int z, int w) {
  final _glVertex4hNV = glad__glVertex4hNV!
      .cast<NativeFunction<Void Function(Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int x, int y, int z, int w)>();
  return _glVertex4hNV(x, y, z, w);
}

/// ```c
/// define glVertex4hvNV GLEW_GET_FUN(__glewVertex4hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEX4HVNVPROC __glewVertex4hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEX4HVNVPROC) (const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertex4hvNV;
void glVertex4hvNV(Pointer<Int16>? v) {
  final _glVertex4hvNV = glad__glVertex4hvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? v)>>()
      .asFunction<void Function(Pointer<Int16>? v)>();
  return _glVertex4hvNV(v);
}

/// ```c
/// define glVertexAttrib1hNV GLEW_GET_FUN(__glewVertexAttrib1hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1HNVPROC __glewVertexAttrib1hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalf x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1hNV;
void glVertexAttrib1hNV(int index, int x) {
  final _glVertexAttrib1hNV = glad__glVertexAttrib1hNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttrib1hNV(index, x);
}

/// ```c
/// define glVertexAttrib1hvNV GLEW_GET_FUN(__glewVertexAttrib1hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1HVNVPROC __glewVertexAttrib1hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1hvNV;
void glVertexAttrib1hvNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib1hvNV = glad__glVertexAttrib1hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib1hvNV(index, v);
}

/// ```c
/// define glVertexAttrib2hNV GLEW_GET_FUN(__glewVertexAttrib2hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2HNVPROC __glewVertexAttrib2hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalf x, GLhalf y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2hNV;
void glVertexAttrib2hNV(int index, int x, int y) {
  final _glVertexAttrib2hNV = glad__glVertexAttrib2hNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttrib2hNV(index, x, y);
}

/// ```c
/// define glVertexAttrib2hvNV GLEW_GET_FUN(__glewVertexAttrib2hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2HVNVPROC __glewVertexAttrib2hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2hvNV;
void glVertexAttrib2hvNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib2hvNV = glad__glVertexAttrib2hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib2hvNV(index, v);
}

/// ```c
/// define glVertexAttrib3hNV GLEW_GET_FUN(__glewVertexAttrib3hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3HNVPROC __glewVertexAttrib3hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3hNV;
void glVertexAttrib3hNV(int index, int x, int y, int z) {
  final _glVertexAttrib3hNV = glad__glVertexAttrib3hNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttrib3hNV(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3hvNV GLEW_GET_FUN(__glewVertexAttrib3hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3HVNVPROC __glewVertexAttrib3hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3hvNV;
void glVertexAttrib3hvNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib3hvNV = glad__glVertexAttrib3hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib3hvNV(index, v);
}

/// ```c
/// define glVertexAttrib4hNV GLEW_GET_FUN(__glewVertexAttrib4hNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4HNVPROC __glewVertexAttrib4hNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4hNV;
void glVertexAttrib4hNV(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4hNV = glad__glVertexAttrib4hNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4hNV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4hvNV GLEW_GET_FUN(__glewVertexAttrib4hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4HVNVPROC __glewVertexAttrib4hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4hvNV;
void glVertexAttrib4hvNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib4hvNV = glad__glVertexAttrib4hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib4hvNV(index, v);
}

/// ```c
/// define glVertexAttribs1hvNV GLEW_GET_FUN(__glewVertexAttribs1hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1HVNVPROC __glewVertexAttribs1hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs1hvNV;
void glVertexAttribs1hvNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs1hvNV = glad__glVertexAttribs1hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs1hvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs2hvNV GLEW_GET_FUN(__glewVertexAttribs2hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2HVNVPROC __glewVertexAttribs2hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs2hvNV;
void glVertexAttribs2hvNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs2hvNV = glad__glVertexAttribs2hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs2hvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs3hvNV GLEW_GET_FUN(__glewVertexAttribs3hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3HVNVPROC __glewVertexAttribs3hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs3hvNV;
void glVertexAttribs3hvNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs3hvNV = glad__glVertexAttribs3hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs3hvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs4hvNV GLEW_GET_FUN(__glewVertexAttribs4hvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4HVNVPROC __glewVertexAttribs4hvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs4hvNV;
void glVertexAttribs4hvNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs4hvNV = glad__glVertexAttribs4hvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs4hvNV(index, n, v);
}

/// ```c
/// define glVertexWeighthNV GLEW_GET_FUN(__glewVertexWeighthNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTHNVPROC __glewVertexWeighthNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHNVPROC) (GLhalf weight)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexWeighthNV;
void glVertexWeighthNV(int weight) {
  final _glVertexWeighthNV = glad__glVertexWeighthNV!
      .cast<NativeFunction<Void Function(Int16 weight)>>()
      .asFunction<void Function(int weight)>();
  return _glVertexWeighthNV(weight);
}

/// ```c
/// define glVertexWeighthvNV GLEW_GET_FUN(__glewVertexWeighthvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTHVNVPROC __glewVertexWeighthvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalf* weight)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexWeighthvNV;
void glVertexWeighthvNV(Pointer<Int16>? weight) {
  final _glVertexWeighthvNV = glad__glVertexWeighthvNV!
      .cast<NativeFunction<Void Function(Pointer<Int16>? weight)>>()
      .asFunction<void Function(Pointer<Int16>? weight)>();
  return _glVertexWeighthvNV(weight);
}

/// ------------------------- GL_NV_instanced_arrays ------------------------
/// ```c
/// define glVertexAttribDivisorNV GLEW_GET_FUN(__glewVertexAttribDivisorNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBDIVISORNVPROC __glewVertexAttribDivisorNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORNVPROC) (GLuint index, GLuint divisor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribDivisorNV;
void glVertexAttribDivisorNV(int index, int divisor) {
  final _glVertexAttribDivisorNV = glad__glVertexAttribDivisorNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 divisor)>>()
      .asFunction<void Function(int index, int divisor)>();
  return _glVertexAttribDivisorNV(index, divisor);
}

/// ------------------- GL_NV_internalformat_sample_query -------------------
/// ```c
/// define glGetInternalformatSampleivNV GLEW_GET_FUN(__glewGetInternalformatSampleivNV)
/// GLEW_FUN_EXPORT PFNGLGETINTERNALFORMATSAMPLEIVNVPROC __glewGetInternalformatSampleivNV
/// typedef void (GLAPIENTRY * PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetInternalformatSampleivNV;
void glGetInternalformatSampleivNV(int target, int internalformat, int samples, int pname, int bufSize, Pointer<Int32>? params) {
  final _glGetInternalformatSampleivNV = glad__glGetInternalformatSampleivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 samples, Uint32 pname, Uint32 bufSize, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int internalformat, int samples, int pname, int bufSize, Pointer<Int32>? params)>();
  return _glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params);
}

/// ----------------------- GL_NV_non_square_matrices -----------------------
/// ```c
/// define glUniformMatrix2x3fvNV GLEW_GET_FUN(__glewUniformMatrix2x3fvNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X3FVNVPROC __glewUniformMatrix2x3fvNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2x3fvNV;
void glUniformMatrix2x3fvNV(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix2x3fvNV = glad__glUniformMatrix2x3fvNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix2x3fvNV(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix2x4fvNV GLEW_GET_FUN(__glewUniformMatrix2x4fvNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X4FVNVPROC __glewUniformMatrix2x4fvNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix2x4fvNV;
void glUniformMatrix2x4fvNV(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix2x4fvNV = glad__glUniformMatrix2x4fvNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix2x4fvNV(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3x2fvNV GLEW_GET_FUN(__glewUniformMatrix3x2fvNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X2FVNVPROC __glewUniformMatrix3x2fvNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3x2fvNV;
void glUniformMatrix3x2fvNV(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix3x2fvNV = glad__glUniformMatrix3x2fvNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix3x2fvNV(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix3x4fvNV GLEW_GET_FUN(__glewUniformMatrix3x4fvNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X4FVNVPROC __glewUniformMatrix3x4fvNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix3x4fvNV;
void glUniformMatrix3x4fvNV(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix3x4fvNV = glad__glUniformMatrix3x4fvNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix3x4fvNV(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4x2fvNV GLEW_GET_FUN(__glewUniformMatrix4x2fvNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X2FVNVPROC __glewUniformMatrix4x2fvNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4x2fvNV;
void glUniformMatrix4x2fvNV(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix4x2fvNV = glad__glUniformMatrix4x2fvNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix4x2fvNV(location, count, transpose, value);
}

/// ```c
/// define glUniformMatrix4x3fvNV GLEW_GET_FUN(__glewUniformMatrix4x3fvNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X3FVNVPROC __glewUniformMatrix4x3fvNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformMatrix4x3fvNV;
void glUniformMatrix4x3fvNV(int location, int count, int transpose, Pointer<Float>? value) {
  final _glUniformMatrix4x3fvNV = glad__glUniformMatrix4x3fvNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Uint8 transpose, Pointer<Float>? value)>>()
      .asFunction<void Function(int location, int count, int transpose, Pointer<Float>? value)>();
  return _glUniformMatrix4x3fvNV(location, count, transpose, value);
}

/// ------------------------- GL_NV_occlusion_query -------------------------
/// ```c
/// define glBeginOcclusionQueryNV GLEW_GET_FUN(__glewBeginOcclusionQueryNV)
/// GLEW_FUN_EXPORT PFNGLBEGINOCCLUSIONQUERYNVPROC __glewBeginOcclusionQueryNV
/// typedef void (GLAPIENTRY * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginOcclusionQueryNV;
void glBeginOcclusionQueryNV(int id) {
  final _glBeginOcclusionQueryNV = glad__glBeginOcclusionQueryNV!
      .cast<NativeFunction<Void Function(Uint32 id)>>()
      .asFunction<void Function(int id)>();
  return _glBeginOcclusionQueryNV(id);
}

/// ```c
/// define glDeleteOcclusionQueriesNV GLEW_GET_FUN(__glewDeleteOcclusionQueriesNV)
/// GLEW_FUN_EXPORT PFNGLDELETEOCCLUSIONQUERIESNVPROC __glewDeleteOcclusionQueriesNV
/// typedef void (GLAPIENTRY * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteOcclusionQueriesNV;
void glDeleteOcclusionQueriesNV(int n, Pointer<Uint32>? ids) {
  final _glDeleteOcclusionQueriesNV = glad__glDeleteOcclusionQueriesNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteOcclusionQueriesNV(n, ids);
}

/// ```c
/// define glEndOcclusionQueryNV GLEW_GET_FUN(__glewEndOcclusionQueryNV)
/// GLEW_FUN_EXPORT PFNGLENDOCCLUSIONQUERYNVPROC __glewEndOcclusionQueryNV
/// typedef void (GLAPIENTRY * PFNGLENDOCCLUSIONQUERYNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndOcclusionQueryNV;
void glEndOcclusionQueryNV() {
  final _glEndOcclusionQueryNV = glad__glEndOcclusionQueryNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndOcclusionQueryNV();
}

/// ```c
/// define glGenOcclusionQueriesNV GLEW_GET_FUN(__glewGenOcclusionQueriesNV)
/// GLEW_FUN_EXPORT PFNGLGENOCCLUSIONQUERIESNVPROC __glewGenOcclusionQueriesNV
/// typedef void (GLAPIENTRY * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenOcclusionQueriesNV;
void glGenOcclusionQueriesNV(int n, Pointer<Uint32>? ids) {
  final _glGenOcclusionQueriesNV = glad__glGenOcclusionQueriesNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenOcclusionQueriesNV(n, ids);
}

/// ```c
/// define glGetOcclusionQueryivNV GLEW_GET_FUN(__glewGetOcclusionQueryivNV)
/// GLEW_FUN_EXPORT PFNGLGETOCCLUSIONQUERYIVNVPROC __glewGetOcclusionQueryivNV
/// typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetOcclusionQueryivNV;
void glGetOcclusionQueryivNV(int id, int pname, Pointer<Int32>? params) {
  final _glGetOcclusionQueryivNV = glad__glGetOcclusionQueryivNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int32>? params)>();
  return _glGetOcclusionQueryivNV(id, pname, params);
}

/// ```c
/// define glGetOcclusionQueryuivNV GLEW_GET_FUN(__glewGetOcclusionQueryuivNV)
/// GLEW_FUN_EXPORT PFNGLGETOCCLUSIONQUERYUIVNVPROC __glewGetOcclusionQueryuivNV
/// typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetOcclusionQueryuivNV;
void glGetOcclusionQueryuivNV(int id, int pname, Pointer<Uint32>? params) {
  final _glGetOcclusionQueryuivNV = glad__glGetOcclusionQueryuivNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint32>? params)>();
  return _glGetOcclusionQueryuivNV(id, pname, params);
}

/// ```c
/// define glIsOcclusionQueryNV GLEW_GET_FUN(__glewIsOcclusionQueryNV)
/// GLEW_FUN_EXPORT PFNGLISOCCLUSIONQUERYNVPROC __glewIsOcclusionQueryNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsOcclusionQueryNV;
int glIsOcclusionQueryNV(int id) {
  final _glIsOcclusionQueryNV = glad__glIsOcclusionQueryNV!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsOcclusionQueryNV(id);
}

/// --------------------- GL_NV_parameter_buffer_object ---------------------
/// ```c
/// define glProgramBufferParametersIivNV GLEW_GET_FUN(__glewProgramBufferParametersIivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glewProgramBufferParametersIivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramBufferParametersIivNV;
void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, Pointer<Int32>? params) {
  final _glProgramBufferParametersIivNV = glad__glProgramBufferParametersIivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer, Uint32 index, Uint32 count, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int buffer, int index, int count, Pointer<Int32>? params)>();
  return _glProgramBufferParametersIivNV(target, buffer, index, count, params);
}

/// ```c
/// define glProgramBufferParametersIuivNV GLEW_GET_FUN(__glewProgramBufferParametersIuivNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glewProgramBufferParametersIuivNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramBufferParametersIuivNV;
void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, Pointer<Uint32>? params) {
  final _glProgramBufferParametersIuivNV = glad__glProgramBufferParametersIuivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer, Uint32 index, Uint32 count, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int target, int buffer, int index, int count, Pointer<Uint32>? params)>();
  return _glProgramBufferParametersIuivNV(target, buffer, index, count, params);
}

/// ```c
/// define glProgramBufferParametersfvNV GLEW_GET_FUN(__glewProgramBufferParametersfvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glewProgramBufferParametersfvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramBufferParametersfvNV;
void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, Pointer<Float>? params) {
  final _glProgramBufferParametersfvNV = glad__glProgramBufferParametersfvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 buffer, Uint32 index, Uint32 count, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int buffer, int index, int count, Pointer<Float>? params)>();
  return _glProgramBufferParametersfvNV(target, buffer, index, count, params);
}

/// -------------------------- GL_NV_path_rendering -------------------------
/// ```c
/// define glCopyPathNV GLEW_GET_FUN(__glewCopyPathNV)
/// GLEW_FUN_EXPORT PFNGLCOPYPATHNVPROC __glewCopyPathNV
/// typedef void (GLAPIENTRY * PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyPathNV;
void glCopyPathNV(int resultPath, int srcPath) {
  final _glCopyPathNV = glad__glCopyPathNV!
      .cast<NativeFunction<Void Function(Uint32 resultPath, Uint32 srcPath)>>()
      .asFunction<void Function(int resultPath, int srcPath)>();
  return _glCopyPathNV(resultPath, srcPath);
}

/// ```c
/// define glCoverFillPathInstancedNV GLEW_GET_FUN(__glewCoverFillPathInstancedNV)
/// GLEW_FUN_EXPORT PFNGLCOVERFILLPATHINSTANCEDNVPROC __glewCoverFillPathInstancedNV
/// typedef void (GLAPIENTRY * PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCoverFillPathInstancedNV;
void glCoverFillPathInstancedNV(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int coverMode, int transformType, Pointer<Float>? transformValues) {
  final _glCoverFillPathInstancedNV = glad__glCoverFillPathInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Uint32 coverMode, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int coverMode, int transformType, Pointer<Float>? transformValues)>();
  return _glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

/// ```c
/// define glCoverFillPathNV GLEW_GET_FUN(__glewCoverFillPathNV)
/// GLEW_FUN_EXPORT PFNGLCOVERFILLPATHNVPROC __glewCoverFillPathNV
/// typedef void (GLAPIENTRY * PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCoverFillPathNV;
void glCoverFillPathNV(int path, int coverMode) {
  final _glCoverFillPathNV = glad__glCoverFillPathNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 coverMode)>>()
      .asFunction<void Function(int path, int coverMode)>();
  return _glCoverFillPathNV(path, coverMode);
}

/// ```c
/// define glCoverStrokePathInstancedNV GLEW_GET_FUN(__glewCoverStrokePathInstancedNV)
/// GLEW_FUN_EXPORT PFNGLCOVERSTROKEPATHINSTANCEDNVPROC __glewCoverStrokePathInstancedNV
/// typedef void (GLAPIENTRY * PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCoverStrokePathInstancedNV;
void glCoverStrokePathInstancedNV(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int coverMode, int transformType, Pointer<Float>? transformValues) {
  final _glCoverStrokePathInstancedNV = glad__glCoverStrokePathInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Uint32 coverMode, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int coverMode, int transformType, Pointer<Float>? transformValues)>();
  return _glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

/// ```c
/// define glCoverStrokePathNV GLEW_GET_FUN(__glewCoverStrokePathNV)
/// GLEW_FUN_EXPORT PFNGLCOVERSTROKEPATHNVPROC __glewCoverStrokePathNV
/// typedef void (GLAPIENTRY * PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCoverStrokePathNV;
void glCoverStrokePathNV(int path, int coverMode) {
  final _glCoverStrokePathNV = glad__glCoverStrokePathNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 coverMode)>>()
      .asFunction<void Function(int path, int coverMode)>();
  return _glCoverStrokePathNV(path, coverMode);
}

/// ```c
/// define glDeletePathsNV GLEW_GET_FUN(__glewDeletePathsNV)
/// GLEW_FUN_EXPORT PFNGLDELETEPATHSNVPROC __glewDeletePathsNV
/// typedef void (GLAPIENTRY * PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeletePathsNV;
void glDeletePathsNV(int path, int range) {
  final _glDeletePathsNV = glad__glDeletePathsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 range)>>()
      .asFunction<void Function(int path, int range)>();
  return _glDeletePathsNV(path, range);
}

/// ```c
/// define glGenPathsNV GLEW_GET_FUN(__glewGenPathsNV)
/// GLEW_FUN_EXPORT PFNGLGENPATHSNVPROC __glewGenPathsNV
/// typedef GLuint (GLAPIENTRY * PFNGLGENPATHSNVPROC) (GLsizei range)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenPathsNV;
int glGenPathsNV(int range) {
  final _glGenPathsNV = glad__glGenPathsNV!
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return _glGenPathsNV(range);
}

/// ```c
/// define glGetPathColorGenfvNV GLEW_GET_FUN(__glewGetPathColorGenfvNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHCOLORGENFVNVPROC __glewGetPathColorGenfvNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathColorGenfvNV;
void glGetPathColorGenfvNV(int color, int pname, Pointer<Float>? value) {
  final _glGetPathColorGenfvNV = glad__glGetPathColorGenfvNV!
      .cast<NativeFunction<Void Function(Uint32 color, Uint32 pname, Pointer<Float>? value)>>()
      .asFunction<void Function(int color, int pname, Pointer<Float>? value)>();
  return _glGetPathColorGenfvNV(color, pname, value);
}

/// ```c
/// define glGetPathColorGenivNV GLEW_GET_FUN(__glewGetPathColorGenivNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHCOLORGENIVNVPROC __glewGetPathColorGenivNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathColorGenivNV;
void glGetPathColorGenivNV(int color, int pname, Pointer<Int32>? value) {
  final _glGetPathColorGenivNV = glad__glGetPathColorGenivNV!
      .cast<NativeFunction<Void Function(Uint32 color, Uint32 pname, Pointer<Int32>? value)>>()
      .asFunction<void Function(int color, int pname, Pointer<Int32>? value)>();
  return _glGetPathColorGenivNV(color, pname, value);
}

/// ```c
/// define glGetPathCommandsNV GLEW_GET_FUN(__glewGetPathCommandsNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHCOMMANDSNVPROC __glewGetPathCommandsNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte* commands)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathCommandsNV;
void glGetPathCommandsNV(int path, Pointer<Uint8>? commands) {
  final _glGetPathCommandsNV = glad__glGetPathCommandsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Pointer<Uint8>? commands)>>()
      .asFunction<void Function(int path, Pointer<Uint8>? commands)>();
  return _glGetPathCommandsNV(path, commands);
}

/// ```c
/// define glGetPathCoordsNV GLEW_GET_FUN(__glewGetPathCoordsNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHCOORDSNVPROC __glewGetPathCoordsNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat* coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathCoordsNV;
void glGetPathCoordsNV(int path, Pointer<Float>? coords) {
  final _glGetPathCoordsNV = glad__glGetPathCoordsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Pointer<Float>? coords)>>()
      .asFunction<void Function(int path, Pointer<Float>? coords)>();
  return _glGetPathCoordsNV(path, coords);
}

/// ```c
/// define glGetPathDashArrayNV GLEW_GET_FUN(__glewGetPathDashArrayNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHDASHARRAYNVPROC __glewGetPathDashArrayNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat* dashArray)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathDashArrayNV;
void glGetPathDashArrayNV(int path, Pointer<Float>? dashArray) {
  final _glGetPathDashArrayNV = glad__glGetPathDashArrayNV!
      .cast<NativeFunction<Void Function(Uint32 path, Pointer<Float>? dashArray)>>()
      .asFunction<void Function(int path, Pointer<Float>? dashArray)>();
  return _glGetPathDashArrayNV(path, dashArray);
}

/// ```c
/// define glGetPathLengthNV GLEW_GET_FUN(__glewGetPathLengthNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHLENGTHNVPROC __glewGetPathLengthNV
/// typedef GLfloat (GLAPIENTRY * PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathLengthNV;
double glGetPathLengthNV(int path, int startSegment, int numSegments) {
  final _glGetPathLengthNV = glad__glGetPathLengthNV!
      .cast<NativeFunction<Float Function(Uint32 path, Uint32 startSegment, Uint32 numSegments)>>()
      .asFunction<double Function(int path, int startSegment, int numSegments)>();
  return _glGetPathLengthNV(path, startSegment, numSegments);
}

/// ```c
/// define glGetPathMetricRangeNV GLEW_GET_FUN(__glewGetPathMetricRangeNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHMETRICRANGENVPROC __glewGetPathMetricRangeNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathMetricRangeNV;
void glGetPathMetricRangeNV(int metricQueryMask, int firstPathName, int numPaths, int stride, Pointer<Float>? metrics) {
  final _glGetPathMetricRangeNV = glad__glGetPathMetricRangeNV!
      .cast<NativeFunction<Void Function(Uint32 metricQueryMask, Uint32 firstPathName, Uint32 numPaths, Uint32 stride, Pointer<Float>? metrics)>>()
      .asFunction<void Function(int metricQueryMask, int firstPathName, int numPaths, int stride, Pointer<Float>? metrics)>();
  return _glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
}

/// ```c
/// define glGetPathMetricsNV GLEW_GET_FUN(__glewGetPathMetricsNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHMETRICSNVPROC __glewGetPathMetricsNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathMetricsNV;
void glGetPathMetricsNV(int metricQueryMask, int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int stride, Pointer<Float>? metrics) {
  final _glGetPathMetricsNV = glad__glGetPathMetricsNV!
      .cast<NativeFunction<Void Function(Uint32 metricQueryMask, Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Uint32 stride, Pointer<Float>? metrics)>>()
      .asFunction<void Function(int metricQueryMask, int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int stride, Pointer<Float>? metrics)>();
  return _glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

/// ```c
/// define glGetPathParameterfvNV GLEW_GET_FUN(__glewGetPathParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHPARAMETERFVNVPROC __glewGetPathParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathParameterfvNV;
void glGetPathParameterfvNV(int path, int pname, Pointer<Float>? value) {
  final _glGetPathParameterfvNV = glad__glGetPathParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 pname, Pointer<Float>? value)>>()
      .asFunction<void Function(int path, int pname, Pointer<Float>? value)>();
  return _glGetPathParameterfvNV(path, pname, value);
}

/// ```c
/// define glGetPathParameterivNV GLEW_GET_FUN(__glewGetPathParameterivNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHPARAMETERIVNVPROC __glewGetPathParameterivNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathParameterivNV;
void glGetPathParameterivNV(int path, int pname, Pointer<Int32>? value) {
  final _glGetPathParameterivNV = glad__glGetPathParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 pname, Pointer<Int32>? value)>>()
      .asFunction<void Function(int path, int pname, Pointer<Int32>? value)>();
  return _glGetPathParameterivNV(path, pname, value);
}

/// ```c
/// define glGetPathSpacingNV GLEW_GET_FUN(__glewGetPathSpacingNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHSPACINGNVPROC __glewGetPathSpacingNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathSpacingNV;
void glGetPathSpacingNV(int pathListMode, int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, double advanceScale, double kerningScale, int transformType, Pointer<Float>? returnedSpacing) {
  final _glGetPathSpacingNV = glad__glGetPathSpacingNV!
      .cast<NativeFunction<Void Function(Uint32 pathListMode, Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Float advanceScale, Float kerningScale, Uint32 transformType, Pointer<Float>? returnedSpacing)>>()
      .asFunction<void Function(int pathListMode, int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, double advanceScale, double kerningScale, int transformType, Pointer<Float>? returnedSpacing)>();
  return _glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

/// ```c
/// define glGetPathTexGenfvNV GLEW_GET_FUN(__glewGetPathTexGenfvNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHTEXGENFVNVPROC __glewGetPathTexGenfvNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathTexGenfvNV;
void glGetPathTexGenfvNV(int texCoordSet, int pname, Pointer<Float>? value) {
  final _glGetPathTexGenfvNV = glad__glGetPathTexGenfvNV!
      .cast<NativeFunction<Void Function(Uint32 texCoordSet, Uint32 pname, Pointer<Float>? value)>>()
      .asFunction<void Function(int texCoordSet, int pname, Pointer<Float>? value)>();
  return _glGetPathTexGenfvNV(texCoordSet, pname, value);
}

/// ```c
/// define glGetPathTexGenivNV GLEW_GET_FUN(__glewGetPathTexGenivNV)
/// GLEW_FUN_EXPORT PFNGLGETPATHTEXGENIVNVPROC __glewGetPathTexGenivNV
/// typedef void (GLAPIENTRY * PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPathTexGenivNV;
void glGetPathTexGenivNV(int texCoordSet, int pname, Pointer<Int32>? value) {
  final _glGetPathTexGenivNV = glad__glGetPathTexGenivNV!
      .cast<NativeFunction<Void Function(Uint32 texCoordSet, Uint32 pname, Pointer<Int32>? value)>>()
      .asFunction<void Function(int texCoordSet, int pname, Pointer<Int32>? value)>();
  return _glGetPathTexGenivNV(texCoordSet, pname, value);
}

/// ```c
/// define glGetProgramResourcefvNV GLEW_GET_FUN(__glewGetProgramResourcefvNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMRESOURCEFVNVPROC __glewGetProgramResourcefvNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei *length, GLfloat *params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramResourcefvNV;
void glGetProgramResourcefvNV(int program, int programInterface, int index, int propCount, Pointer<Uint32>? props, int bufSize, Pointer<Uint32>? length, Pointer<Float>? params) {
  final _glGetProgramResourcefvNV = glad__glGetProgramResourcefvNV!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 programInterface, Uint32 index, Uint32 propCount, Pointer<Uint32>? props, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Float>? params)>>()
      .asFunction<void Function(int program, int programInterface, int index, int propCount, Pointer<Uint32>? props, int bufSize, Pointer<Uint32>? length, Pointer<Float>? params)>();
  return _glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params);
}

/// ```c
/// define glInterpolatePathsNV GLEW_GET_FUN(__glewInterpolatePathsNV)
/// GLEW_FUN_EXPORT PFNGLINTERPOLATEPATHSNVPROC __glewInterpolatePathsNV
/// typedef void (GLAPIENTRY * PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInterpolatePathsNV;
void glInterpolatePathsNV(int resultPath, int pathA, int pathB, double weight) {
  final _glInterpolatePathsNV = glad__glInterpolatePathsNV!
      .cast<NativeFunction<Void Function(Uint32 resultPath, Uint32 pathA, Uint32 pathB, Float weight)>>()
      .asFunction<void Function(int resultPath, int pathA, int pathB, double weight)>();
  return _glInterpolatePathsNV(resultPath, pathA, pathB, weight);
}

/// ```c
/// define glIsPathNV GLEW_GET_FUN(__glewIsPathNV)
/// GLEW_FUN_EXPORT PFNGLISPATHNVPROC __glewIsPathNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISPATHNVPROC) (GLuint path)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsPathNV;
int glIsPathNV(int path) {
  final _glIsPathNV = glad__glIsPathNV!
      .cast<NativeFunction<Uint8 Function(Uint32 path)>>()
      .asFunction<int Function(int path)>();
  return _glIsPathNV(path);
}

/// ```c
/// define glIsPointInFillPathNV GLEW_GET_FUN(__glewIsPointInFillPathNV)
/// GLEW_FUN_EXPORT PFNGLISPOINTINFILLPATHNVPROC __glewIsPointInFillPathNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsPointInFillPathNV;
int glIsPointInFillPathNV(int path, int mask, double x, double y) {
  final _glIsPointInFillPathNV = glad__glIsPointInFillPathNV!
      .cast<NativeFunction<Uint8 Function(Uint32 path, Uint32 mask, Float x, Float y)>>()
      .asFunction<int Function(int path, int mask, double x, double y)>();
  return _glIsPointInFillPathNV(path, mask, x, y);
}

/// ```c
/// define glIsPointInStrokePathNV GLEW_GET_FUN(__glewIsPointInStrokePathNV)
/// GLEW_FUN_EXPORT PFNGLISPOINTINSTROKEPATHNVPROC __glewIsPointInStrokePathNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsPointInStrokePathNV;
int glIsPointInStrokePathNV(int path, double x, double y) {
  final _glIsPointInStrokePathNV = glad__glIsPointInStrokePathNV!
      .cast<NativeFunction<Uint8 Function(Uint32 path, Float x, Float y)>>()
      .asFunction<int Function(int path, double x, double y)>();
  return _glIsPointInStrokePathNV(path, x, y);
}

/// ```c
/// define glMatrixLoad3x2fNV GLEW_GET_FUN(__glewMatrixLoad3x2fNV)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOAD3X2FNVPROC __glewMatrixLoad3x2fNV
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoad3x2fNV;
void glMatrixLoad3x2fNV(int matrixMode, Pointer<Float>? m) {
  final _glMatrixLoad3x2fNV = glad__glMatrixLoad3x2fNV!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixLoad3x2fNV(matrixMode, m);
}

/// ```c
/// define glMatrixLoad3x3fNV GLEW_GET_FUN(__glewMatrixLoad3x3fNV)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOAD3X3FNVPROC __glewMatrixLoad3x3fNV
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoad3x3fNV;
void glMatrixLoad3x3fNV(int matrixMode, Pointer<Float>? m) {
  final _glMatrixLoad3x3fNV = glad__glMatrixLoad3x3fNV!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixLoad3x3fNV(matrixMode, m);
}

/// ```c
/// define glMatrixLoadTranspose3x3fNV GLEW_GET_FUN(__glewMatrixLoadTranspose3x3fNV)
/// GLEW_FUN_EXPORT PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC __glewMatrixLoadTranspose3x3fNV
/// typedef void (GLAPIENTRY * PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixLoadTranspose3x3fNV;
void glMatrixLoadTranspose3x3fNV(int matrixMode, Pointer<Float>? m) {
  final _glMatrixLoadTranspose3x3fNV = glad__glMatrixLoadTranspose3x3fNV!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixLoadTranspose3x3fNV(matrixMode, m);
}

/// ```c
/// define glMatrixMult3x2fNV GLEW_GET_FUN(__glewMatrixMult3x2fNV)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULT3X2FNVPROC __glewMatrixMult3x2fNV
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMult3x2fNV;
void glMatrixMult3x2fNV(int matrixMode, Pointer<Float>? m) {
  final _glMatrixMult3x2fNV = glad__glMatrixMult3x2fNV!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixMult3x2fNV(matrixMode, m);
}

/// ```c
/// define glMatrixMult3x3fNV GLEW_GET_FUN(__glewMatrixMult3x3fNV)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULT3X3FNVPROC __glewMatrixMult3x3fNV
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMult3x3fNV;
void glMatrixMult3x3fNV(int matrixMode, Pointer<Float>? m) {
  final _glMatrixMult3x3fNV = glad__glMatrixMult3x3fNV!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixMult3x3fNV(matrixMode, m);
}

/// ```c
/// define glMatrixMultTranspose3x3fNV GLEW_GET_FUN(__glewMatrixMultTranspose3x3fNV)
/// GLEW_FUN_EXPORT PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC __glewMatrixMultTranspose3x3fNV
/// typedef void (GLAPIENTRY * PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMatrixMultTranspose3x3fNV;
void glMatrixMultTranspose3x3fNV(int matrixMode, Pointer<Float>? m) {
  final _glMatrixMultTranspose3x3fNV = glad__glMatrixMultTranspose3x3fNV!
      .cast<NativeFunction<Void Function(Uint32 matrixMode, Pointer<Float>? m)>>()
      .asFunction<void Function(int matrixMode, Pointer<Float>? m)>();
  return _glMatrixMultTranspose3x3fNV(matrixMode, m);
}

/// ```c
/// define glPathColorGenNV GLEW_GET_FUN(__glewPathColorGenNV)
/// GLEW_FUN_EXPORT PFNGLPATHCOLORGENNVPROC __glewPathColorGenNV
/// typedef void (GLAPIENTRY * PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathColorGenNV;
void glPathColorGenNV(int color, int genMode, int colorFormat, Pointer<Float>? coeffs) {
  final _glPathColorGenNV = glad__glPathColorGenNV!
      .cast<NativeFunction<Void Function(Uint32 color, Uint32 genMode, Uint32 colorFormat, Pointer<Float>? coeffs)>>()
      .asFunction<void Function(int color, int genMode, int colorFormat, Pointer<Float>? coeffs)>();
  return _glPathColorGenNV(color, genMode, colorFormat, coeffs);
}

/// ```c
/// define glPathCommandsNV GLEW_GET_FUN(__glewPathCommandsNV)
/// GLEW_FUN_EXPORT PFNGLPATHCOMMANDSNVPROC __glewPathCommandsNV
/// typedef void (GLAPIENTRY * PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathCommandsNV;
void glPathCommandsNV(int path, int numCommands, Pointer<Uint8>? commands, int numCoords, int coordType, Pointer<Void>? coords) {
  final _glPathCommandsNV = glad__glPathCommandsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 numCommands, Pointer<Uint8>? commands, Uint32 numCoords, Uint32 coordType, Pointer<Void>? coords)>>()
      .asFunction<void Function(int path, int numCommands, Pointer<Uint8>? commands, int numCoords, int coordType, Pointer<Void>? coords)>();
  return _glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
}

/// ```c
/// define glPathCoordsNV GLEW_GET_FUN(__glewPathCoordsNV)
/// GLEW_FUN_EXPORT PFNGLPATHCOORDSNVPROC __glewPathCoordsNV
/// typedef void (GLAPIENTRY * PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathCoordsNV;
void glPathCoordsNV(int path, int numCoords, int coordType, Pointer<Void>? coords) {
  final _glPathCoordsNV = glad__glPathCoordsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 numCoords, Uint32 coordType, Pointer<Void>? coords)>>()
      .asFunction<void Function(int path, int numCoords, int coordType, Pointer<Void>? coords)>();
  return _glPathCoordsNV(path, numCoords, coordType, coords);
}

/// ```c
/// define glPathCoverDepthFuncNV GLEW_GET_FUN(__glewPathCoverDepthFuncNV)
/// GLEW_FUN_EXPORT PFNGLPATHCOVERDEPTHFUNCNVPROC __glewPathCoverDepthFuncNV
/// typedef void (GLAPIENTRY * PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum zfunc)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathCoverDepthFuncNV;
void glPathCoverDepthFuncNV(int zfunc) {
  final _glPathCoverDepthFuncNV = glad__glPathCoverDepthFuncNV!
      .cast<NativeFunction<Void Function(Uint32 zfunc)>>()
      .asFunction<void Function(int zfunc)>();
  return _glPathCoverDepthFuncNV(zfunc);
}

/// ```c
/// define glPathDashArrayNV GLEW_GET_FUN(__glewPathDashArrayNV)
/// GLEW_FUN_EXPORT PFNGLPATHDASHARRAYNVPROC __glewPathDashArrayNV
/// typedef void (GLAPIENTRY * PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat* dashArray)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathDashArrayNV;
void glPathDashArrayNV(int path, int dashCount, Pointer<Float>? dashArray) {
  final _glPathDashArrayNV = glad__glPathDashArrayNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 dashCount, Pointer<Float>? dashArray)>>()
      .asFunction<void Function(int path, int dashCount, Pointer<Float>? dashArray)>();
  return _glPathDashArrayNV(path, dashCount, dashArray);
}

/// ```c
/// define glPathFogGenNV GLEW_GET_FUN(__glewPathFogGenNV)
/// GLEW_FUN_EXPORT PFNGLPATHFOGGENNVPROC __glewPathFogGenNV
/// typedef void (GLAPIENTRY * PFNGLPATHFOGGENNVPROC) (GLenum genMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathFogGenNV;
void glPathFogGenNV(int genMode) {
  final _glPathFogGenNV = glad__glPathFogGenNV!
      .cast<NativeFunction<Void Function(Uint32 genMode)>>()
      .asFunction<void Function(int genMode)>();
  return _glPathFogGenNV(genMode);
}

/// ```c
/// define glPathGlyphIndexArrayNV GLEW_GET_FUN(__glewPathGlyphIndexArrayNV)
/// GLEW_FUN_EXPORT PFNGLPATHGLYPHINDEXARRAYNVPROC __glewPathGlyphIndexArrayNV
/// typedef GLenum (GLAPIENTRY * PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathGlyphIndexArrayNV;
int glPathGlyphIndexArrayNV(int firstPathName, int fontTarget, Pointer<Void>? fontName, int fontStyle, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, double emScale) {
  final _glPathGlyphIndexArrayNV = glad__glPathGlyphIndexArrayNV!
      .cast<NativeFunction<Uint32 Function(Uint32 firstPathName, Uint32 fontTarget, Pointer<Void>? fontName, Uint32 fontStyle, Uint32 firstGlyphIndex, Uint32 numGlyphs, Uint32 pathParameterTemplate, Float emScale)>>()
      .asFunction<int Function(int firstPathName, int fontTarget, Pointer<Void>? fontName, int fontStyle, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, double emScale)>();
  return _glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}

/// ```c
/// define glPathGlyphIndexRangeNV GLEW_GET_FUN(__glewPathGlyphIndexRangeNV)
/// GLEW_FUN_EXPORT PFNGLPATHGLYPHINDEXRANGENVPROC __glewPathGlyphIndexRangeNV
/// typedef GLenum (GLAPIENTRY * PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathGlyphIndexRangeNV;
int glPathGlyphIndexRangeNV(int fontTarget, Pointer<Void>? fontName, int fontStyle, int pathParameterTemplate, double emScale, int baseAndCount) {
  final _glPathGlyphIndexRangeNV = glad__glPathGlyphIndexRangeNV!
      .cast<NativeFunction<Uint32 Function(Uint32 fontTarget, Pointer<Void>? fontName, Uint32 fontStyle, Uint32 pathParameterTemplate, Float emScale, Uint32 baseAndCount)>>()
      .asFunction<int Function(int fontTarget, Pointer<Void>? fontName, int fontStyle, int pathParameterTemplate, double emScale, int baseAndCount)>();
  return _glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
}

/// ```c
/// define glPathGlyphRangeNV GLEW_GET_FUN(__glewPathGlyphRangeNV)
/// GLEW_FUN_EXPORT PFNGLPATHGLYPHRANGENVPROC __glewPathGlyphRangeNV
/// typedef void (GLAPIENTRY * PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathGlyphRangeNV;
void glPathGlyphRangeNV(int firstPathName, int fontTarget, Pointer<Void>? fontName, int fontStyle, int firstGlyph, int numGlyphs, int handleMissingGlyphs, int pathParameterTemplate, double emScale) {
  final _glPathGlyphRangeNV = glad__glPathGlyphRangeNV!
      .cast<NativeFunction<Void Function(Uint32 firstPathName, Uint32 fontTarget, Pointer<Void>? fontName, Uint32 fontStyle, Uint32 firstGlyph, Uint32 numGlyphs, Uint32 handleMissingGlyphs, Uint32 pathParameterTemplate, Float emScale)>>()
      .asFunction<void Function(int firstPathName, int fontTarget, Pointer<Void>? fontName, int fontStyle, int firstGlyph, int numGlyphs, int handleMissingGlyphs, int pathParameterTemplate, double emScale)>();
  return _glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

/// ```c
/// define glPathGlyphsNV GLEW_GET_FUN(__glewPathGlyphsNV)
/// GLEW_FUN_EXPORT PFNGLPATHGLYPHSNVPROC __glewPathGlyphsNV
/// typedef void (GLAPIENTRY * PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathGlyphsNV;
void glPathGlyphsNV(int firstPathName, int fontTarget, Pointer<Void>? fontName, int fontStyle, int numGlyphs, int type, Pointer<Void>? charcodes, int handleMissingGlyphs, int pathParameterTemplate, double emScale) {
  final _glPathGlyphsNV = glad__glPathGlyphsNV!
      .cast<NativeFunction<Void Function(Uint32 firstPathName, Uint32 fontTarget, Pointer<Void>? fontName, Uint32 fontStyle, Uint32 numGlyphs, Uint32 type, Pointer<Void>? charcodes, Uint32 handleMissingGlyphs, Uint32 pathParameterTemplate, Float emScale)>>()
      .asFunction<void Function(int firstPathName, int fontTarget, Pointer<Void>? fontName, int fontStyle, int numGlyphs, int type, Pointer<Void>? charcodes, int handleMissingGlyphs, int pathParameterTemplate, double emScale)>();
  return _glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

/// ```c
/// define glPathMemoryGlyphIndexArrayNV GLEW_GET_FUN(__glewPathMemoryGlyphIndexArrayNV)
/// GLEW_FUN_EXPORT PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC __glewPathMemoryGlyphIndexArrayNV
/// typedef GLenum (GLAPIENTRY * PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathMemoryGlyphIndexArrayNV;
int glPathMemoryGlyphIndexArrayNV(int firstPathName, int fontTarget, int fontSize, Pointer<Void>? fontData, int faceIndex, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, double emScale) {
  final _glPathMemoryGlyphIndexArrayNV = glad__glPathMemoryGlyphIndexArrayNV!
      .cast<NativeFunction<Uint32 Function(Uint32 firstPathName, Uint32 fontTarget, Uint64 fontSize, Pointer<Void>? fontData, Uint32 faceIndex, Uint32 firstGlyphIndex, Uint32 numGlyphs, Uint32 pathParameterTemplate, Float emScale)>>()
      .asFunction<int Function(int firstPathName, int fontTarget, int fontSize, Pointer<Void>? fontData, int faceIndex, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, double emScale)>();
  return _glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}

/// ```c
/// define glPathParameterfNV GLEW_GET_FUN(__glewPathParameterfNV)
/// GLEW_FUN_EXPORT PFNGLPATHPARAMETERFNVPROC __glewPathParameterfNV
/// typedef void (GLAPIENTRY * PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathParameterfNV;
void glPathParameterfNV(int path, int pname, double value) {
  final _glPathParameterfNV = glad__glPathParameterfNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 pname, Float value)>>()
      .asFunction<void Function(int path, int pname, double value)>();
  return _glPathParameterfNV(path, pname, value);
}

/// ```c
/// define glPathParameterfvNV GLEW_GET_FUN(__glewPathParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLPATHPARAMETERFVNVPROC __glewPathParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathParameterfvNV;
void glPathParameterfvNV(int path, int pname, Pointer<Float>? value) {
  final _glPathParameterfvNV = glad__glPathParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 pname, Pointer<Float>? value)>>()
      .asFunction<void Function(int path, int pname, Pointer<Float>? value)>();
  return _glPathParameterfvNV(path, pname, value);
}

/// ```c
/// define glPathParameteriNV GLEW_GET_FUN(__glewPathParameteriNV)
/// GLEW_FUN_EXPORT PFNGLPATHPARAMETERINVPROC __glewPathParameteriNV
/// typedef void (GLAPIENTRY * PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathParameteriNV;
void glPathParameteriNV(int path, int pname, int value) {
  final _glPathParameteriNV = glad__glPathParameteriNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 pname, Int32 value)>>()
      .asFunction<void Function(int path, int pname, int value)>();
  return _glPathParameteriNV(path, pname, value);
}

/// ```c
/// define glPathParameterivNV GLEW_GET_FUN(__glewPathParameterivNV)
/// GLEW_FUN_EXPORT PFNGLPATHPARAMETERIVNVPROC __glewPathParameterivNV
/// typedef void (GLAPIENTRY * PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathParameterivNV;
void glPathParameterivNV(int path, int pname, Pointer<Int32>? value) {
  final _glPathParameterivNV = glad__glPathParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 pname, Pointer<Int32>? value)>>()
      .asFunction<void Function(int path, int pname, Pointer<Int32>? value)>();
  return _glPathParameterivNV(path, pname, value);
}

/// ```c
/// define glPathStencilDepthOffsetNV GLEW_GET_FUN(__glewPathStencilDepthOffsetNV)
/// GLEW_FUN_EXPORT PFNGLPATHSTENCILDEPTHOFFSETNVPROC __glewPathStencilDepthOffsetNV
/// typedef void (GLAPIENTRY * PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathStencilDepthOffsetNV;
void glPathStencilDepthOffsetNV(double factor, double units) {
  final _glPathStencilDepthOffsetNV = glad__glPathStencilDepthOffsetNV!
      .cast<NativeFunction<Void Function(Float factor, Float units)>>()
      .asFunction<void Function(double factor, double units)>();
  return _glPathStencilDepthOffsetNV(factor, units);
}

/// ```c
/// define glPathStencilFuncNV GLEW_GET_FUN(__glewPathStencilFuncNV)
/// GLEW_FUN_EXPORT PFNGLPATHSTENCILFUNCNVPROC __glewPathStencilFuncNV
/// typedef void (GLAPIENTRY * PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathStencilFuncNV;
void glPathStencilFuncNV(int func, int ref, int mask) {
  final _glPathStencilFuncNV = glad__glPathStencilFuncNV!
      .cast<NativeFunction<Void Function(Uint32 func, Int32 ref, Uint32 mask)>>()
      .asFunction<void Function(int func, int ref, int mask)>();
  return _glPathStencilFuncNV(func, ref, mask);
}

/// ```c
/// define glPathStringNV GLEW_GET_FUN(__glewPathStringNV)
/// GLEW_FUN_EXPORT PFNGLPATHSTRINGNVPROC __glewPathStringNV
/// typedef void (GLAPIENTRY * PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathStringNV;
void glPathStringNV(int path, int format, int length, Pointer<Void>? pathString) {
  final _glPathStringNV = glad__glPathStringNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 format, Uint32 length, Pointer<Void>? pathString)>>()
      .asFunction<void Function(int path, int format, int length, Pointer<Void>? pathString)>();
  return _glPathStringNV(path, format, length, pathString);
}

/// ```c
/// define glPathSubCommandsNV GLEW_GET_FUN(__glewPathSubCommandsNV)
/// GLEW_FUN_EXPORT PFNGLPATHSUBCOMMANDSNVPROC __glewPathSubCommandsNV
/// typedef void (GLAPIENTRY * PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void*coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathSubCommandsNV;
void glPathSubCommandsNV(int path, int commandStart, int commandsToDelete, int numCommands, Pointer<Uint8>? commands, int numCoords, int coordType, Pointer<Void>? coords) {
  final _glPathSubCommandsNV = glad__glPathSubCommandsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 commandStart, Uint32 commandsToDelete, Uint32 numCommands, Pointer<Uint8>? commands, Uint32 numCoords, Uint32 coordType, Pointer<Void>? coords)>>()
      .asFunction<void Function(int path, int commandStart, int commandsToDelete, int numCommands, Pointer<Uint8>? commands, int numCoords, int coordType, Pointer<Void>? coords)>();
  return _glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

/// ```c
/// define glPathSubCoordsNV GLEW_GET_FUN(__glewPathSubCoordsNV)
/// GLEW_FUN_EXPORT PFNGLPATHSUBCOORDSNVPROC __glewPathSubCoordsNV
/// typedef void (GLAPIENTRY * PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathSubCoordsNV;
void glPathSubCoordsNV(int path, int coordStart, int numCoords, int coordType, Pointer<Void>? coords) {
  final _glPathSubCoordsNV = glad__glPathSubCoordsNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 coordStart, Uint32 numCoords, Uint32 coordType, Pointer<Void>? coords)>>()
      .asFunction<void Function(int path, int coordStart, int numCoords, int coordType, Pointer<Void>? coords)>();
  return _glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
}

/// ```c
/// define glPathTexGenNV GLEW_GET_FUN(__glewPathTexGenNV)
/// GLEW_FUN_EXPORT PFNGLPATHTEXGENNVPROC __glewPathTexGenNV
/// typedef void (GLAPIENTRY * PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPathTexGenNV;
void glPathTexGenNV(int texCoordSet, int genMode, int components, Pointer<Float>? coeffs) {
  final _glPathTexGenNV = glad__glPathTexGenNV!
      .cast<NativeFunction<Void Function(Uint32 texCoordSet, Uint32 genMode, Int32 components, Pointer<Float>? coeffs)>>()
      .asFunction<void Function(int texCoordSet, int genMode, int components, Pointer<Float>? coeffs)>();
  return _glPathTexGenNV(texCoordSet, genMode, components, coeffs);
}

/// ```c
/// define glPointAlongPathNV GLEW_GET_FUN(__glewPointAlongPathNV)
/// GLEW_FUN_EXPORT PFNGLPOINTALONGPATHNVPROC __glewPointAlongPathNV
/// typedef GLboolean (GLAPIENTRY * PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointAlongPathNV;
int glPointAlongPathNV(int path, int startSegment, int numSegments, double distance, Pointer<Float>? x, Pointer<Float>? y, Pointer<Float>? tangentX, Pointer<Float>? tangentY) {
  final _glPointAlongPathNV = glad__glPointAlongPathNV!
      .cast<NativeFunction<Uint8 Function(Uint32 path, Uint32 startSegment, Uint32 numSegments, Float distance, Pointer<Float>? x, Pointer<Float>? y, Pointer<Float>? tangentX, Pointer<Float>? tangentY)>>()
      .asFunction<int Function(int path, int startSegment, int numSegments, double distance, Pointer<Float>? x, Pointer<Float>? y, Pointer<Float>? tangentX, Pointer<Float>? tangentY)>();
  return _glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}

/// ```c
/// define glProgramPathFragmentInputGenNV GLEW_GET_FUN(__glewProgramPathFragmentInputGenNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC __glewProgramPathFragmentInputGenNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramPathFragmentInputGenNV;
void glProgramPathFragmentInputGenNV(int program, int location, int genMode, int components, Pointer<Float>? coeffs) {
  final _glProgramPathFragmentInputGenNV = glad__glProgramPathFragmentInputGenNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 genMode, Int32 components, Pointer<Float>? coeffs)>>()
      .asFunction<void Function(int program, int location, int genMode, int components, Pointer<Float>? coeffs)>();
  return _glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
}

/// ```c
/// define glStencilFillPathInstancedNV GLEW_GET_FUN(__glewStencilFillPathInstancedNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILFILLPATHINSTANCEDNVPROC __glewStencilFillPathInstancedNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilFillPathInstancedNV;
void glStencilFillPathInstancedNV(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int fillMode, int mask, int transformType, Pointer<Float>? transformValues) {
  final _glStencilFillPathInstancedNV = glad__glStencilFillPathInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Uint32 fillMode, Uint32 mask, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int fillMode, int mask, int transformType, Pointer<Float>? transformValues)>();
  return _glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

/// ```c
/// define glStencilFillPathNV GLEW_GET_FUN(__glewStencilFillPathNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILFILLPATHNVPROC __glewStencilFillPathNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilFillPathNV;
void glStencilFillPathNV(int path, int fillMode, int mask) {
  final _glStencilFillPathNV = glad__glStencilFillPathNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 fillMode, Uint32 mask)>>()
      .asFunction<void Function(int path, int fillMode, int mask)>();
  return _glStencilFillPathNV(path, fillMode, mask);
}

/// ```c
/// define glStencilStrokePathInstancedNV GLEW_GET_FUN(__glewStencilStrokePathInstancedNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC __glewStencilStrokePathInstancedNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilStrokePathInstancedNV;
void glStencilStrokePathInstancedNV(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int reference, int mask, int transformType, Pointer<Float>? transformValues) {
  final _glStencilStrokePathInstancedNV = glad__glStencilStrokePathInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Int32 reference, Uint32 mask, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int reference, int mask, int transformType, Pointer<Float>? transformValues)>();
  return _glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

/// ```c
/// define glStencilStrokePathNV GLEW_GET_FUN(__glewStencilStrokePathNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILSTROKEPATHNVPROC __glewStencilStrokePathNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilStrokePathNV;
void glStencilStrokePathNV(int path, int reference, int mask) {
  final _glStencilStrokePathNV = glad__glStencilStrokePathNV!
      .cast<NativeFunction<Void Function(Uint32 path, Int32 reference, Uint32 mask)>>()
      .asFunction<void Function(int path, int reference, int mask)>();
  return _glStencilStrokePathNV(path, reference, mask);
}

/// ```c
/// define glStencilThenCoverFillPathInstancedNV GLEW_GET_FUN(__glewStencilThenCoverFillPathInstancedNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC __glewStencilThenCoverFillPathInstancedNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilThenCoverFillPathInstancedNV;
void glStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int fillMode, int mask, int coverMode, int transformType, Pointer<Float>? transformValues) {
  final _glStencilThenCoverFillPathInstancedNV = glad__glStencilThenCoverFillPathInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Uint32 fillMode, Uint32 mask, Uint32 coverMode, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int fillMode, int mask, int coverMode, int transformType, Pointer<Float>? transformValues)>();
  return _glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
}

/// ```c
/// define glStencilThenCoverFillPathNV GLEW_GET_FUN(__glewStencilThenCoverFillPathNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILTHENCOVERFILLPATHNVPROC __glewStencilThenCoverFillPathNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilThenCoverFillPathNV;
void glStencilThenCoverFillPathNV(int path, int fillMode, int mask, int coverMode) {
  final _glStencilThenCoverFillPathNV = glad__glStencilThenCoverFillPathNV!
      .cast<NativeFunction<Void Function(Uint32 path, Uint32 fillMode, Uint32 mask, Uint32 coverMode)>>()
      .asFunction<void Function(int path, int fillMode, int mask, int coverMode)>();
  return _glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
}

/// ```c
/// define glStencilThenCoverStrokePathInstancedNV GLEW_GET_FUN(__glewStencilThenCoverStrokePathInstancedNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC __glewStencilThenCoverStrokePathInstancedNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilThenCoverStrokePathInstancedNV;
void glStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int reference, int mask, int coverMode, int transformType, Pointer<Float>? transformValues) {
  final _glStencilThenCoverStrokePathInstancedNV = glad__glStencilThenCoverStrokePathInstancedNV!
      .cast<NativeFunction<Void Function(Uint32 numPaths, Uint32 pathNameType, Pointer<Void>? paths, Uint32 pathBase, Int32 reference, Uint32 mask, Uint32 coverMode, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int numPaths, int pathNameType, Pointer<Void>? paths, int pathBase, int reference, int mask, int coverMode, int transformType, Pointer<Float>? transformValues)>();
  return _glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
}

/// ```c
/// define glStencilThenCoverStrokePathNV GLEW_GET_FUN(__glewStencilThenCoverStrokePathNV)
/// GLEW_FUN_EXPORT PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC __glewStencilThenCoverStrokePathNV
/// typedef void (GLAPIENTRY * PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStencilThenCoverStrokePathNV;
void glStencilThenCoverStrokePathNV(int path, int reference, int mask, int coverMode) {
  final _glStencilThenCoverStrokePathNV = glad__glStencilThenCoverStrokePathNV!
      .cast<NativeFunction<Void Function(Uint32 path, Int32 reference, Uint32 mask, Uint32 coverMode)>>()
      .asFunction<void Function(int path, int reference, int mask, int coverMode)>();
  return _glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
}

/// ```c
/// define glTransformPathNV GLEW_GET_FUN(__glewTransformPathNV)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMPATHNVPROC __glewTransformPathNV
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformPathNV;
void glTransformPathNV(int resultPath, int srcPath, int transformType, Pointer<Float>? transformValues) {
  final _glTransformPathNV = glad__glTransformPathNV!
      .cast<NativeFunction<Void Function(Uint32 resultPath, Uint32 srcPath, Uint32 transformType, Pointer<Float>? transformValues)>>()
      .asFunction<void Function(int resultPath, int srcPath, int transformType, Pointer<Float>? transformValues)>();
  return _glTransformPathNV(resultPath, srcPath, transformType, transformValues);
}

/// ```c
/// define glWeightPathsNV GLEW_GET_FUN(__glewWeightPathsNV)
/// GLEW_FUN_EXPORT PFNGLWEIGHTPATHSNVPROC __glewWeightPathsNV
/// typedef void (GLAPIENTRY * PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glWeightPathsNV;
void glWeightPathsNV(int resultPath, int numPaths, int paths, double weights) {
  final _glWeightPathsNV = glad__glWeightPathsNV!
      .cast<NativeFunction<Void Function(Uint32 resultPath, Uint32 numPaths, Uint32 paths, Float weights)>>()
      .asFunction<void Function(int resultPath, int numPaths, int paths, double weights)>();
  return _glWeightPathsNV(resultPath, numPaths, paths, weights);
}

/// ------------------------- GL_NV_pixel_data_range ------------------------
/// ```c
/// define glFlushPixelDataRangeNV GLEW_GET_FUN(__glewFlushPixelDataRangeNV)
/// GLEW_FUN_EXPORT PFNGLFLUSHPIXELDATARANGENVPROC __glewFlushPixelDataRangeNV
/// typedef void (GLAPIENTRY * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushPixelDataRangeNV;
void glFlushPixelDataRangeNV(int target) {
  final _glFlushPixelDataRangeNV = glad__glFlushPixelDataRangeNV!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glFlushPixelDataRangeNV(target);
}

/// ```c
/// define glPixelDataRangeNV GLEW_GET_FUN(__glewPixelDataRangeNV)
/// GLEW_FUN_EXPORT PFNGLPIXELDATARANGENVPROC __glewPixelDataRangeNV
/// typedef void (GLAPIENTRY * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelDataRangeNV;
void glPixelDataRangeNV(int target, int length, Pointer<Void>? pointer) {
  final _glPixelDataRangeNV = glad__glPixelDataRangeNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 length, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int target, int length, Pointer<Void>? pointer)>();
  return _glPixelDataRangeNV(target, length, pointer);
}

/// --------------------------- GL_NV_point_sprite --------------------------
/// ```c
/// define glPointParameteriNV GLEW_GET_FUN(__glewPointParameteriNV)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERINVPROC __glewPointParameteriNV
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameteriNV;
void glPointParameteriNV(int pname, int param) {
  final _glPointParameteriNV = glad__glPointParameteriNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glPointParameteriNV(pname, param);
}

/// ```c
/// define glPointParameterivNV GLEW_GET_FUN(__glewPointParameterivNV)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIVNVPROC __glewPointParameterivNV
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterivNV;
void glPointParameterivNV(int pname, Pointer<Int32>? params) {
  final _glPointParameterivNV = glad__glPointParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glPointParameterivNV(pname, params);
}

/// --------------------------- GL_NV_polygon_mode --------------------------
/// ```c
/// define glPolygonModeNV GLEW_GET_FUN(__glewPolygonModeNV)
/// GLEW_FUN_EXPORT PFNGLPOLYGONMODENVPROC __glewPolygonModeNV
/// typedef void (GLAPIENTRY * PFNGLPOLYGONMODENVPROC) (GLenum face, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPolygonModeNV;
void glPolygonModeNV(int face, int mode) {
  final _glPolygonModeNV = glad__glPolygonModeNV!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return _glPolygonModeNV(face, mode);
}

/// -------------------------- GL_NV_present_video --------------------------
/// ```c
/// define glGetVideoi64vNV GLEW_GET_FUN(__glewGetVideoi64vNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOI64VNVPROC __glewGetVideoi64vNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoi64vNV;
void glGetVideoi64vNV(int video_slot, int pname, Pointer<Int64>? params) {
  final _glGetVideoi64vNV = glad__glGetVideoi64vNV!
      .cast<NativeFunction<Void Function(Uint32 video_slot, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int video_slot, int pname, Pointer<Int64>? params)>();
  return _glGetVideoi64vNV(video_slot, pname, params);
}

/// ```c
/// define glGetVideoivNV GLEW_GET_FUN(__glewGetVideoivNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOIVNVPROC __glewGetVideoivNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoivNV;
void glGetVideoivNV(int video_slot, int pname, Pointer<Int32>? params) {
  final _glGetVideoivNV = glad__glGetVideoivNV!
      .cast<NativeFunction<Void Function(Uint32 video_slot, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int video_slot, int pname, Pointer<Int32>? params)>();
  return _glGetVideoivNV(video_slot, pname, params);
}

/// ```c
/// define glGetVideoui64vNV GLEW_GET_FUN(__glewGetVideoui64vNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOUI64VNVPROC __glewGetVideoui64vNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoui64vNV;
void glGetVideoui64vNV(int video_slot, int pname, Pointer<Uint64>? params) {
  final _glGetVideoui64vNV = glad__glGetVideoui64vNV!
      .cast<NativeFunction<Void Function(Uint32 video_slot, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int video_slot, int pname, Pointer<Uint64>? params)>();
  return _glGetVideoui64vNV(video_slot, pname, params);
}

/// ```c
/// define glGetVideouivNV GLEW_GET_FUN(__glewGetVideouivNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOUIVNVPROC __glewGetVideouivNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideouivNV;
void glGetVideouivNV(int video_slot, int pname, Pointer<Uint32>? params) {
  final _glGetVideouivNV = glad__glGetVideouivNV!
      .cast<NativeFunction<Void Function(Uint32 video_slot, Uint32 pname, Pointer<Uint32>? params)>>()
      .asFunction<void Function(int video_slot, int pname, Pointer<Uint32>? params)>();
  return _glGetVideouivNV(video_slot, pname, params);
}

/// ```c
/// define glPresentFrameDualFillNV GLEW_GET_FUN(__glewPresentFrameDualFillNV)
/// GLEW_FUN_EXPORT PFNGLPRESENTFRAMEDUALFILLNVPROC __glewPresentFrameDualFillNV
/// typedef void (GLAPIENTRY * PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPresentFrameDualFillNV;
void glPresentFrameDualFillNV(int video_slot, int minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int target1, int fill1, int target2, int fill2, int target3, int fill3) {
  final _glPresentFrameDualFillNV = glad__glPresentFrameDualFillNV!
      .cast<NativeFunction<Void Function(Uint32 video_slot, Uint64 minPresentTime, Uint32 beginPresentTimeId, Uint32 presentDurationId, Uint32 type, Uint32 target0, Uint32 fill0, Uint32 target1, Uint32 fill1, Uint32 target2, Uint32 fill2, Uint32 target3, Uint32 fill3)>>()
      .asFunction<void Function(int video_slot, int minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int target1, int fill1, int target2, int fill2, int target3, int fill3)>();
  return _glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

/// ```c
/// define glPresentFrameKeyedNV GLEW_GET_FUN(__glewPresentFrameKeyedNV)
/// GLEW_FUN_EXPORT PFNGLPRESENTFRAMEKEYEDNVPROC __glewPresentFrameKeyedNV
/// typedef void (GLAPIENTRY * PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPresentFrameKeyedNV;
void glPresentFrameKeyedNV(int video_slot, int minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int key0, int target1, int fill1, int key1) {
  final _glPresentFrameKeyedNV = glad__glPresentFrameKeyedNV!
      .cast<NativeFunction<Void Function(Uint32 video_slot, Uint64 minPresentTime, Uint32 beginPresentTimeId, Uint32 presentDurationId, Uint32 type, Uint32 target0, Uint32 fill0, Uint32 key0, Uint32 target1, Uint32 fill1, Uint32 key1)>>()
      .asFunction<void Function(int video_slot, int minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int key0, int target1, int fill1, int key1)>();
  return _glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

/// ------------------------ GL_NV_primitive_restart ------------------------
/// ```c
/// define glPrimitiveRestartIndexNV GLEW_GET_FUN(__glewPrimitiveRestartIndexNV)
/// GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTINDEXNVPROC __glewPrimitiveRestartIndexNV
/// typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPrimitiveRestartIndexNV;
void glPrimitiveRestartIndexNV(int index) {
  final _glPrimitiveRestartIndexNV = glad__glPrimitiveRestartIndexNV!
      .cast<NativeFunction<Void Function(Uint32 index)>>()
      .asFunction<void Function(int index)>();
  return _glPrimitiveRestartIndexNV(index);
}

/// ```c
/// define glPrimitiveRestartNV GLEW_GET_FUN(__glewPrimitiveRestartNV)
/// GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTNVPROC __glewPrimitiveRestartNV
/// typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPrimitiveRestartNV;
void glPrimitiveRestartNV() {
  final _glPrimitiveRestartNV = glad__glPrimitiveRestartNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glPrimitiveRestartNV();
}

/// ------------------------ GL_NV_register_combiners -----------------------
/// ```c
/// define glCombinerInputNV GLEW_GET_FUN(__glewCombinerInputNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINERINPUTNVPROC __glewCombinerInputNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerInputNV;
void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage) {
  final _glCombinerInputNV = glad__glCombinerInputNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 portion, Uint32 variable, Uint32 input, Uint32 mapping, Uint32 componentUsage)>>()
      .asFunction<void Function(int stage, int portion, int variable, int input, int mapping, int componentUsage)>();
  return _glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
}

/// ```c
/// define glCombinerOutputNV GLEW_GET_FUN(__glewCombinerOutputNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINEROUTPUTNVPROC __glewCombinerOutputNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerOutputNV;
void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum) {
  final _glCombinerOutputNV = glad__glCombinerOutputNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 portion, Uint32 abOutput, Uint32 cdOutput, Uint32 sumOutput, Uint32 scale, Uint32 bias, Uint8 abDotProduct, Uint8 cdDotProduct, Uint8 muxSum)>>()
      .asFunction<void Function(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, int abDotProduct, int cdDotProduct, int muxSum)>();
  return _glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

/// ```c
/// define glCombinerParameterfNV GLEW_GET_FUN(__glewCombinerParameterfNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERFNVPROC __glewCombinerParameterfNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerParameterfNV;
void glCombinerParameterfNV(int pname, double param) {
  final _glCombinerParameterfNV = glad__glCombinerParameterfNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glCombinerParameterfNV(pname, param);
}

/// ```c
/// define glCombinerParameterfvNV GLEW_GET_FUN(__glewCombinerParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERFVNVPROC __glewCombinerParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerParameterfvNV;
void glCombinerParameterfvNV(int pname, Pointer<Float>? params) {
  final _glCombinerParameterfvNV = glad__glCombinerParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glCombinerParameterfvNV(pname, params);
}

/// ```c
/// define glCombinerParameteriNV GLEW_GET_FUN(__glewCombinerParameteriNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERINVPROC __glewCombinerParameteriNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerParameteriNV;
void glCombinerParameteriNV(int pname, int param) {
  final _glCombinerParameteriNV = glad__glCombinerParameteriNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glCombinerParameteriNV(pname, param);
}

/// ```c
/// define glCombinerParameterivNV GLEW_GET_FUN(__glewCombinerParameterivNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERIVNVPROC __glewCombinerParameterivNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerParameterivNV;
void glCombinerParameterivNV(int pname, Pointer<Int32>? params) {
  final _glCombinerParameterivNV = glad__glCombinerParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glCombinerParameterivNV(pname, params);
}

/// ```c
/// define glFinalCombinerInputNV GLEW_GET_FUN(__glewFinalCombinerInputNV)
/// GLEW_FUN_EXPORT PFNGLFINALCOMBINERINPUTNVPROC __glewFinalCombinerInputNV
/// typedef void (GLAPIENTRY * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFinalCombinerInputNV;
void glFinalCombinerInputNV(int variable, int input, int mapping, int componentUsage) {
  final _glFinalCombinerInputNV = glad__glFinalCombinerInputNV!
      .cast<NativeFunction<Void Function(Uint32 variable, Uint32 input, Uint32 mapping, Uint32 componentUsage)>>()
      .asFunction<void Function(int variable, int input, int mapping, int componentUsage)>();
  return _glFinalCombinerInputNV(variable, input, mapping, componentUsage);
}

/// ```c
/// define glGetCombinerInputParameterfvNV GLEW_GET_FUN(__glewGetCombinerInputParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glewGetCombinerInputParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCombinerInputParameterfvNV;
void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, Pointer<Float>? params) {
  final _glGetCombinerInputParameterfvNV = glad__glGetCombinerInputParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 portion, Uint32 variable, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int stage, int portion, int variable, int pname, Pointer<Float>? params)>();
  return _glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
}

/// ```c
/// define glGetCombinerInputParameterivNV GLEW_GET_FUN(__glewGetCombinerInputParameterivNV)
/// GLEW_FUN_EXPORT PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glewGetCombinerInputParameterivNV
/// typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCombinerInputParameterivNV;
void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, Pointer<Int32>? params) {
  final _glGetCombinerInputParameterivNV = glad__glGetCombinerInputParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 portion, Uint32 variable, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int stage, int portion, int variable, int pname, Pointer<Int32>? params)>();
  return _glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
}

/// ```c
/// define glGetCombinerOutputParameterfvNV GLEW_GET_FUN(__glewGetCombinerOutputParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glewGetCombinerOutputParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCombinerOutputParameterfvNV;
void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, Pointer<Float>? params) {
  final _glGetCombinerOutputParameterfvNV = glad__glGetCombinerOutputParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 portion, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int stage, int portion, int pname, Pointer<Float>? params)>();
  return _glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
}

/// ```c
/// define glGetCombinerOutputParameterivNV GLEW_GET_FUN(__glewGetCombinerOutputParameterivNV)
/// GLEW_FUN_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glewGetCombinerOutputParameterivNV
/// typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCombinerOutputParameterivNV;
void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, Pointer<Int32>? params) {
  final _glGetCombinerOutputParameterivNV = glad__glGetCombinerOutputParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 portion, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int stage, int portion, int pname, Pointer<Int32>? params)>();
  return _glGetCombinerOutputParameterivNV(stage, portion, pname, params);
}

/// ```c
/// define glGetFinalCombinerInputParameterfvNV GLEW_GET_FUN(__glewGetFinalCombinerInputParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glewGetFinalCombinerInputParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFinalCombinerInputParameterfvNV;
void glGetFinalCombinerInputParameterfvNV(int variable, int pname, Pointer<Float>? params) {
  final _glGetFinalCombinerInputParameterfvNV = glad__glGetFinalCombinerInputParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 variable, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int variable, int pname, Pointer<Float>? params)>();
  return _glGetFinalCombinerInputParameterfvNV(variable, pname, params);
}

/// ```c
/// define glGetFinalCombinerInputParameterivNV GLEW_GET_FUN(__glewGetFinalCombinerInputParameterivNV)
/// GLEW_FUN_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glewGetFinalCombinerInputParameterivNV
/// typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFinalCombinerInputParameterivNV;
void glGetFinalCombinerInputParameterivNV(int variable, int pname, Pointer<Int32>? params) {
  final _glGetFinalCombinerInputParameterivNV = glad__glGetFinalCombinerInputParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 variable, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int variable, int pname, Pointer<Int32>? params)>();
  return _glGetFinalCombinerInputParameterivNV(variable, pname, params);
}

/// ----------------------- GL_NV_register_combiners2 -----------------------
/// ```c
/// define glCombinerStageParameterfvNV GLEW_GET_FUN(__glewCombinerStageParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glewCombinerStageParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCombinerStageParameterfvNV;
void glCombinerStageParameterfvNV(int stage, int pname, Pointer<Float>? params) {
  final _glCombinerStageParameterfvNV = glad__glCombinerStageParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int stage, int pname, Pointer<Float>? params)>();
  return _glCombinerStageParameterfvNV(stage, pname, params);
}

/// ```c
/// define glGetCombinerStageParameterfvNV GLEW_GET_FUN(__glewGetCombinerStageParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glewGetCombinerStageParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetCombinerStageParameterfvNV;
void glGetCombinerStageParameterfvNV(int stage, int pname, Pointer<Float>? params) {
  final _glGetCombinerStageParameterfvNV = glad__glGetCombinerStageParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 stage, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int stage, int pname, Pointer<Float>? params)>();
  return _glGetCombinerStageParameterfvNV(stage, pname, params);
}

/// ------------------------- GL_NV_sample_locations ------------------------
/// ```c
/// define glFramebufferSampleLocationsfvNV GLEW_GET_FUN(__glewFramebufferSampleLocationsfvNV)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glewFramebufferSampleLocationsfvNV
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferSampleLocationsfvNV;
void glFramebufferSampleLocationsfvNV(int target, int start, int count, Pointer<Float>? v) {
  final _glFramebufferSampleLocationsfvNV = glad__glFramebufferSampleLocationsfvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 start, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int target, int start, int count, Pointer<Float>? v)>();
  return _glFramebufferSampleLocationsfvNV(target, start, count, v);
}

/// ```c
/// define glNamedFramebufferSampleLocationsfvNV GLEW_GET_FUN(__glewNamedFramebufferSampleLocationsfvNV)
/// GLEW_FUN_EXPORT PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC __glewNamedFramebufferSampleLocationsfvNV
/// typedef void (GLAPIENTRY * PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNamedFramebufferSampleLocationsfvNV;
void glNamedFramebufferSampleLocationsfvNV(int framebuffer, int start, int count, Pointer<Float>? v) {
  final _glNamedFramebufferSampleLocationsfvNV = glad__glNamedFramebufferSampleLocationsfvNV!
      .cast<NativeFunction<Void Function(Uint32 framebuffer, Uint32 start, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int framebuffer, int start, int count, Pointer<Float>? v)>();
  return _glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
}

/// ------------------------ GL_NV_shader_buffer_load -----------------------
/// ```c
/// define glGetBufferParameterui64vNV GLEW_GET_FUN(__glewGetBufferParameterui64vNV)
/// GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERUI64VNVPROC __glewGetBufferParameterui64vNV
/// typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetBufferParameterui64vNV;
void glGetBufferParameterui64vNV(int target, int pname, Pointer<Uint64>? params) {
  final _glGetBufferParameterui64vNV = glad__glGetBufferParameterui64vNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Uint64>? params)>();
  return _glGetBufferParameterui64vNV(target, pname, params);
}

/// ```c
/// define glGetIntegerui64vNV GLEW_GET_FUN(__glewGetIntegerui64vNV)
/// GLEW_FUN_EXPORT PFNGLGETINTEGERUI64VNVPROC __glewGetIntegerui64vNV
/// typedef void (GLAPIENTRY * PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT* result)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetIntegerui64vNV;
void glGetIntegerui64vNV(int value, Pointer<Uint64>? result) {
  final _glGetIntegerui64vNV = glad__glGetIntegerui64vNV!
      .cast<NativeFunction<Void Function(Uint32 value, Pointer<Uint64>? result)>>()
      .asFunction<void Function(int value, Pointer<Uint64>? result)>();
  return _glGetIntegerui64vNV(value, result);
}

/// ```c
/// define glGetNamedBufferParameterui64vNV GLEW_GET_FUN(__glewGetNamedBufferParameterui64vNV)
/// GLEW_FUN_EXPORT PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC __glewGetNamedBufferParameterui64vNV
/// typedef void (GLAPIENTRY * PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNamedBufferParameterui64vNV;
void glGetNamedBufferParameterui64vNV(int buffer, int pname, Pointer<Uint64>? params) {
  final _glGetNamedBufferParameterui64vNV = glad__glGetNamedBufferParameterui64vNV!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int buffer, int pname, Pointer<Uint64>? params)>();
  return _glGetNamedBufferParameterui64vNV(buffer, pname, params);
}

/// ```c
/// define glIsBufferResidentNV GLEW_GET_FUN(__glewIsBufferResidentNV)
/// GLEW_FUN_EXPORT PFNGLISBUFFERRESIDENTNVPROC __glewIsBufferResidentNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERRESIDENTNVPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsBufferResidentNV;
int glIsBufferResidentNV(int target) {
  final _glIsBufferResidentNV = glad__glIsBufferResidentNV!
      .cast<NativeFunction<Uint8 Function(Uint32 target)>>()
      .asFunction<int Function(int target)>();
  return _glIsBufferResidentNV(target);
}

/// ```c
/// define glIsNamedBufferResidentNV GLEW_GET_FUN(__glewIsNamedBufferResidentNV)
/// GLEW_FUN_EXPORT PFNGLISNAMEDBUFFERRESIDENTNVPROC __glewIsNamedBufferResidentNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsNamedBufferResidentNV;
int glIsNamedBufferResidentNV(int buffer) {
  final _glIsNamedBufferResidentNV = glad__glIsNamedBufferResidentNV!
      .cast<NativeFunction<Uint8 Function(Uint32 buffer)>>()
      .asFunction<int Function(int buffer)>();
  return _glIsNamedBufferResidentNV(buffer);
}

/// ```c
/// define glMakeBufferNonResidentNV GLEW_GET_FUN(__glewMakeBufferNonResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKEBUFFERNONRESIDENTNVPROC __glewMakeBufferNonResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeBufferNonResidentNV;
void glMakeBufferNonResidentNV(int target) {
  final _glMakeBufferNonResidentNV = glad__glMakeBufferNonResidentNV!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glMakeBufferNonResidentNV(target);
}

/// ```c
/// define glMakeBufferResidentNV GLEW_GET_FUN(__glewMakeBufferResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKEBUFFERRESIDENTNVPROC __glewMakeBufferResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeBufferResidentNV;
void glMakeBufferResidentNV(int target, int access) {
  final _glMakeBufferResidentNV = glad__glMakeBufferResidentNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 access)>>()
      .asFunction<void Function(int target, int access)>();
  return _glMakeBufferResidentNV(target, access);
}

/// ```c
/// define glMakeNamedBufferNonResidentNV GLEW_GET_FUN(__glewMakeNamedBufferNonResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC __glewMakeNamedBufferNonResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeNamedBufferNonResidentNV;
void glMakeNamedBufferNonResidentNV(int buffer) {
  final _glMakeNamedBufferNonResidentNV = glad__glMakeNamedBufferNonResidentNV!
      .cast<NativeFunction<Void Function(Uint32 buffer)>>()
      .asFunction<void Function(int buffer)>();
  return _glMakeNamedBufferNonResidentNV(buffer);
}

/// ```c
/// define glMakeNamedBufferResidentNV GLEW_GET_FUN(__glewMakeNamedBufferResidentNV)
/// GLEW_FUN_EXPORT PFNGLMAKENAMEDBUFFERRESIDENTNVPROC __glewMakeNamedBufferResidentNV
/// typedef void (GLAPIENTRY * PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMakeNamedBufferResidentNV;
void glMakeNamedBufferResidentNV(int buffer, int access) {
  final _glMakeNamedBufferResidentNV = glad__glMakeNamedBufferResidentNV!
      .cast<NativeFunction<Void Function(Uint32 buffer, Uint32 access)>>()
      .asFunction<void Function(int buffer, int access)>();
  return _glMakeNamedBufferResidentNV(buffer, access);
}

/// ```c
/// define glProgramUniformui64NV GLEW_GET_FUN(__glewProgramUniformui64NV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMUI64NVPROC __glewProgramUniformui64NV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformui64NV;
void glProgramUniformui64NV(int program, int location, int value) {
  final _glProgramUniformui64NV = glad__glProgramUniformui64NV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint64 value)>>()
      .asFunction<void Function(int program, int location, int value)>();
  return _glProgramUniformui64NV(program, location, value);
}

/// ```c
/// define glProgramUniformui64vNV GLEW_GET_FUN(__glewProgramUniformui64vNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMUNIFORMUI64VNVPROC __glewProgramUniformui64vNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramUniformui64vNV;
void glProgramUniformui64vNV(int program, int location, int count, Pointer<Uint64>? value) {
  final _glProgramUniformui64vNV = glad__glProgramUniformui64vNV!
      .cast<NativeFunction<Void Function(Uint32 program, Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int program, int location, int count, Pointer<Uint64>? value)>();
  return _glProgramUniformui64vNV(program, location, count, value);
}

/// ```c
/// define glUniformui64NV GLEW_GET_FUN(__glewUniformui64NV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMUI64NVPROC __glewUniformui64NV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformui64NV;
void glUniformui64NV(int location, int value) {
  final _glUniformui64NV = glad__glUniformui64NV!
      .cast<NativeFunction<Void Function(Int32 location, Uint64 value)>>()
      .asFunction<void Function(int location, int value)>();
  return _glUniformui64NV(location, value);
}

/// ```c
/// define glUniformui64vNV GLEW_GET_FUN(__glewUniformui64vNV)
/// GLEW_FUN_EXPORT PFNGLUNIFORMUI64VNVPROC __glewUniformui64vNV
/// typedef void (GLAPIENTRY * PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT* value)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glUniformui64vNV;
void glUniformui64vNV(int location, int count, Pointer<Uint64>? value) {
  final _glUniformui64vNV = glad__glUniformui64vNV!
      .cast<NativeFunction<Void Function(Int32 location, Uint32 count, Pointer<Uint64>? value)>>()
      .asFunction<void Function(int location, int count, Pointer<Uint64>? value)>();
  return _glUniformui64vNV(location, count, value);
}

/// -------------------------- GL_NV_texture_array --------------------------
/// ```c
/// define glCompressedTexImage3DNV GLEW_GET_FUN(__glewCompressedTexImage3DNV)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DNVPROC __glewCompressedTexImage3DNV
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DNVPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexImage3DNV;
void glCompressedTexImage3DNV(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexImage3DNV = glad__glCompressedTexImage3DNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexImage3DNV(target, level, internalformat, width, height, depth, border, imageSize, data);
}

/// ```c
/// define glCompressedTexSubImage3DNV GLEW_GET_FUN(__glewCompressedTexSubImage3DNV)
/// GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DNVPROC __glewCompressedTexSubImage3DNV
/// typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DNVPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCompressedTexSubImage3DNV;
void glCompressedTexSubImage3DNV(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data) {
  final _glCompressedTexSubImage3DNV = glad__glCompressedTexSubImage3DNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 imageSize, Pointer<Void>? data)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Pointer<Void>? data)>();
  return _glCompressedTexSubImage3DNV(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

/// ```c
/// define glCopyTexSubImage3DNV GLEW_GET_FUN(__glewCopyTexSubImage3DNV)
/// GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DNVPROC __glewCopyTexSubImage3DNV
/// typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DNVPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyTexSubImage3DNV;
void glCopyTexSubImage3DNV(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
  final _glCopyTexSubImage3DNV = glad__glCopyTexSubImage3DNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)>();
  return _glCopyTexSubImage3DNV(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/// ```c
/// define glFramebufferTextureLayerNV GLEW_GET_FUN(__glewFramebufferTextureLayerNV)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURELAYERNVPROC __glewFramebufferTextureLayerNV
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYERNVPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureLayerNV;
void glFramebufferTextureLayerNV(int target, int attachment, int texture, int level, int layer) {
  final _glFramebufferTextureLayerNV = glad__glFramebufferTextureLayerNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Int32 layer)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int layer)>();
  return _glFramebufferTextureLayerNV(target, attachment, texture, level, layer);
}

/// ```c
/// define glTexImage3DNV GLEW_GET_FUN(__glewTexImage3DNV)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE3DNVPROC __glewTexImage3DNV
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DNVPROC) (GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage3DNV;
void glTexImage3DNV(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTexImage3DNV = glad__glTexImage3DNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTexImage3DNV(target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

/// ```c
/// define glTexSubImage3DNV GLEW_GET_FUN(__glewTexSubImage3DNV)
/// GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DNVPROC __glewTexSubImage3DNV
/// typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DNVPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexSubImage3DNV;
void glTexSubImage3DNV(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels) {
  final _glTexSubImage3DNV = glad__glTexSubImage3DNV!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? pixels)>();
  return _glTexSubImage3DNV(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/// ------------------------- GL_NV_texture_barrier -------------------------
/// ```c
/// define glTextureBarrierNV GLEW_GET_FUN(__glewTextureBarrierNV)
/// GLEW_FUN_EXPORT PFNGLTEXTUREBARRIERNVPROC __glewTextureBarrierNV
/// typedef void (GLAPIENTRY * PFNGLTEXTUREBARRIERNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureBarrierNV;
void glTextureBarrierNV() {
  final _glTextureBarrierNV = glad__glTextureBarrierNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glTextureBarrierNV();
}

/// ----------------------- GL_NV_texture_multisample -----------------------
/// ```c
/// define glTexImage2DMultisampleCoverageNV GLEW_GET_FUN(__glewTexImage2DMultisampleCoverageNV)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC __glewTexImage2DMultisampleCoverageNV
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage2DMultisampleCoverageNV;
void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int fixedSampleLocations) {
  final _glTexImage2DMultisampleCoverageNV = glad__glTexImage2DMultisampleCoverageNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 coverageSamples, Uint32 colorSamples, Int32 internalFormat, Uint32 width, Uint32 height, Uint8 fixedSampleLocations)>>()
      .asFunction<void Function(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int fixedSampleLocations)>();
  return _glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

/// ```c
/// define glTexImage3DMultisampleCoverageNV GLEW_GET_FUN(__glewTexImage3DMultisampleCoverageNV)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC __glewTexImage3DMultisampleCoverageNV
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage3DMultisampleCoverageNV;
void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, int fixedSampleLocations) {
  final _glTexImage3DMultisampleCoverageNV = glad__glTexImage3DMultisampleCoverageNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 coverageSamples, Uint32 colorSamples, Int32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedSampleLocations)>>()
      .asFunction<void Function(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, int fixedSampleLocations)>();
  return _glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

/// ```c
/// define glTextureImage2DMultisampleCoverageNV GLEW_GET_FUN(__glewTextureImage2DMultisampleCoverageNV)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC __glewTextureImage2DMultisampleCoverageNV
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage2DMultisampleCoverageNV;
void glTextureImage2DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int fixedSampleLocations) {
  final _glTextureImage2DMultisampleCoverageNV = glad__glTextureImage2DMultisampleCoverageNV!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 coverageSamples, Uint32 colorSamples, Int32 internalFormat, Uint32 width, Uint32 height, Uint8 fixedSampleLocations)>>()
      .asFunction<void Function(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int fixedSampleLocations)>();
  return _glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

/// ```c
/// define glTextureImage2DMultisampleNV GLEW_GET_FUN(__glewTextureImage2DMultisampleNV)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC __glewTextureImage2DMultisampleNV
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage2DMultisampleNV;
void glTextureImage2DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, int fixedSampleLocations) {
  final _glTextureImage2DMultisampleNV = glad__glTextureImage2DMultisampleNV!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 samples, Int32 internalFormat, Uint32 width, Uint32 height, Uint8 fixedSampleLocations)>>()
      .asFunction<void Function(int texture, int target, int samples, int internalFormat, int width, int height, int fixedSampleLocations)>();
  return _glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

/// ```c
/// define glTextureImage3DMultisampleCoverageNV GLEW_GET_FUN(__glewTextureImage3DMultisampleCoverageNV)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC __glewTextureImage3DMultisampleCoverageNV
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage3DMultisampleCoverageNV;
void glTextureImage3DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, int fixedSampleLocations) {
  final _glTextureImage3DMultisampleCoverageNV = glad__glTextureImage3DMultisampleCoverageNV!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 coverageSamples, Uint32 colorSamples, Int32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedSampleLocations)>>()
      .asFunction<void Function(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, int fixedSampleLocations)>();
  return _glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

/// ```c
/// define glTextureImage3DMultisampleNV GLEW_GET_FUN(__glewTextureImage3DMultisampleNV)
/// GLEW_FUN_EXPORT PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC __glewTextureImage3DMultisampleNV
/// typedef void (GLAPIENTRY * PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureImage3DMultisampleNV;
void glTextureImage3DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, int depth, int fixedSampleLocations) {
  final _glTextureImage3DMultisampleNV = glad__glTextureImage3DMultisampleNV!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 target, Uint32 samples, Int32 internalFormat, Uint32 width, Uint32 height, Uint32 depth, Uint8 fixedSampleLocations)>>()
      .asFunction<void Function(int texture, int target, int samples, int internalFormat, int width, int height, int depth, int fixedSampleLocations)>();
  return _glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

/// ------------------------ GL_NV_transform_feedback -----------------------
/// ```c
/// define glActiveVaryingNV GLEW_GET_FUN(__glewActiveVaryingNV)
/// GLEW_FUN_EXPORT PFNGLACTIVEVARYINGNVPROC __glewActiveVaryingNV
/// typedef void (GLAPIENTRY * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glActiveVaryingNV;
void glActiveVaryingNV(int program, String name) {
  final _glActiveVaryingNV = glad__glActiveVaryingNV!
      .cast<NativeFunction<Void Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<void Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glActiveVaryingNV(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glBeginTransformFeedbackNV GLEW_GET_FUN(__glewBeginTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glewBeginTransformFeedbackNV
/// typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginTransformFeedbackNV;
void glBeginTransformFeedbackNV(int primitiveMode) {
  final _glBeginTransformFeedbackNV = glad__glBeginTransformFeedbackNV!
      .cast<NativeFunction<Void Function(Uint32 primitiveMode)>>()
      .asFunction<void Function(int primitiveMode)>();
  return _glBeginTransformFeedbackNV(primitiveMode);
}

/// ```c
/// define glBindBufferBaseNV GLEW_GET_FUN(__glewBindBufferBaseNV)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERBASENVPROC __glewBindBufferBaseNV
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferBaseNV;
void glBindBufferBaseNV(int target, int index, int buffer) {
  final _glBindBufferBaseNV = glad__glBindBufferBaseNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer)>>()
      .asFunction<void Function(int target, int index, int buffer)>();
  return _glBindBufferBaseNV(target, index, buffer);
}

/// ```c
/// define glBindBufferOffsetNV GLEW_GET_FUN(__glewBindBufferOffsetNV)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFEROFFSETNVPROC __glewBindBufferOffsetNV
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferOffsetNV;
void glBindBufferOffsetNV(int target, int index, int buffer, int offset) {
  final _glBindBufferOffsetNV = glad__glBindBufferOffsetNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer, Uint64 offset)>>()
      .asFunction<void Function(int target, int index, int buffer, int offset)>();
  return _glBindBufferOffsetNV(target, index, buffer, offset);
}

/// ```c
/// define glBindBufferRangeNV GLEW_GET_FUN(__glewBindBufferRangeNV)
/// GLEW_FUN_EXPORT PFNGLBINDBUFFERRANGENVPROC __glewBindBufferRangeNV
/// typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindBufferRangeNV;
void glBindBufferRangeNV(int target, int index, int buffer, int offset, int size) {
  final _glBindBufferRangeNV = glad__glBindBufferRangeNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 buffer, Uint64 offset, Uint64 size)>>()
      .asFunction<void Function(int target, int index, int buffer, int offset, int size)>();
  return _glBindBufferRangeNV(target, index, buffer, offset, size);
}

/// ```c
/// define glEndTransformFeedbackNV GLEW_GET_FUN(__glewEndTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLENDTRANSFORMFEEDBACKNVPROC __glewEndTransformFeedbackNV
/// typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndTransformFeedbackNV;
void glEndTransformFeedbackNV() {
  final _glEndTransformFeedbackNV = glad__glEndTransformFeedbackNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glEndTransformFeedbackNV();
}

/// ```c
/// define glGetActiveVaryingNV GLEW_GET_FUN(__glewGetActiveVaryingNV)
/// GLEW_FUN_EXPORT PFNGLGETACTIVEVARYINGNVPROC __glewGetActiveVaryingNV
/// typedef void (GLAPIENTRY * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetActiveVaryingNV;
void glGetActiveVaryingNV(int program, int index, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name) {
  final _glGetActiveVaryingNV = glad__glGetActiveVaryingNV!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>>()
      .asFunction<void Function(int program, int index, int bufSize, Pointer<Uint32>? length, Pointer<Uint32>? size, Pointer<Uint32>? type, Pointer<Int8>? name)>();
  return _glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
}

/// ```c
/// define glGetTransformFeedbackVaryingNV GLEW_GET_FUN(__glewGetTransformFeedbackVaryingNV)
/// GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glewGetTransformFeedbackVaryingNV
/// typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTransformFeedbackVaryingNV;
void glGetTransformFeedbackVaryingNV(int program, int index, Pointer<Int32>? location) {
  final _glGetTransformFeedbackVaryingNV = glad__glGetTransformFeedbackVaryingNV!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 index, Pointer<Int32>? location)>>()
      .asFunction<void Function(int program, int index, Pointer<Int32>? location)>();
  return _glGetTransformFeedbackVaryingNV(program, index, location);
}

/// ```c
/// define glGetVaryingLocationNV GLEW_GET_FUN(__glewGetVaryingLocationNV)
/// GLEW_FUN_EXPORT PFNGLGETVARYINGLOCATIONNVPROC __glewGetVaryingLocationNV
/// typedef GLint (GLAPIENTRY * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVaryingLocationNV;
int glGetVaryingLocationNV(int program, String name) {
  final _glGetVaryingLocationNV = glad__glGetVaryingLocationNV!
      .cast<NativeFunction<Int32 Function(Uint32 program, Pointer<Utf8>? name)>>()
      .asFunction<int Function(int program, Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetVaryingLocationNV(program, _namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ```c
/// define glTransformFeedbackAttribsNV GLEW_GET_FUN(__glewTransformFeedbackAttribsNV)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glewTransformFeedbackAttribsNV
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformFeedbackAttribsNV;
void glTransformFeedbackAttribsNV(int count, Pointer<Int32>? attribs, int bufferMode) {
  final _glTransformFeedbackAttribsNV = glad__glTransformFeedbackAttribsNV!
      .cast<NativeFunction<Void Function(Uint32 count, Pointer<Int32>? attribs, Uint32 bufferMode)>>()
      .asFunction<void Function(int count, Pointer<Int32>? attribs, int bufferMode)>();
  return _glTransformFeedbackAttribsNV(count, attribs, bufferMode);
}

/// ```c
/// define glTransformFeedbackVaryingsNV GLEW_GET_FUN(__glewTransformFeedbackVaryingsNV)
/// GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glewTransformFeedbackVaryingsNV
/// typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTransformFeedbackVaryingsNV;
void glTransformFeedbackVaryingsNV(int program, int count, Pointer<Int32>? locations, int bufferMode) {
  final _glTransformFeedbackVaryingsNV = glad__glTransformFeedbackVaryingsNV!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 count, Pointer<Int32>? locations, Uint32 bufferMode)>>()
      .asFunction<void Function(int program, int count, Pointer<Int32>? locations, int bufferMode)>();
  return _glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
}

/// ----------------------- GL_NV_transform_feedback2 -----------------------
/// ```c
/// define glBindTransformFeedbackNV GLEW_GET_FUN(__glewBindTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLBINDTRANSFORMFEEDBACKNVPROC __glewBindTransformFeedbackNV
/// typedef void (GLAPIENTRY * PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindTransformFeedbackNV;
void glBindTransformFeedbackNV(int target, int id) {
  final _glBindTransformFeedbackNV = glad__glBindTransformFeedbackNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return _glBindTransformFeedbackNV(target, id);
}

/// ```c
/// define glDeleteTransformFeedbacksNV GLEW_GET_FUN(__glewDeleteTransformFeedbacksNV)
/// GLEW_FUN_EXPORT PFNGLDELETETRANSFORMFEEDBACKSNVPROC __glewDeleteTransformFeedbacksNV
/// typedef void (GLAPIENTRY * PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteTransformFeedbacksNV;
void glDeleteTransformFeedbacksNV(int n, Pointer<Uint32>? ids) {
  final _glDeleteTransformFeedbacksNV = glad__glDeleteTransformFeedbacksNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteTransformFeedbacksNV(n, ids);
}

/// ```c
/// define glDrawTransformFeedbackNV GLEW_GET_FUN(__glewDrawTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLDRAWTRANSFORMFEEDBACKNVPROC __glewDrawTransformFeedbackNV
/// typedef void (GLAPIENTRY * PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDrawTransformFeedbackNV;
void glDrawTransformFeedbackNV(int mode, int id) {
  final _glDrawTransformFeedbackNV = glad__glDrawTransformFeedbackNV!
      .cast<NativeFunction<Void Function(Uint32 mode, Uint32 id)>>()
      .asFunction<void Function(int mode, int id)>();
  return _glDrawTransformFeedbackNV(mode, id);
}

/// ```c
/// define glGenTransformFeedbacksNV GLEW_GET_FUN(__glewGenTransformFeedbacksNV)
/// GLEW_FUN_EXPORT PFNGLGENTRANSFORMFEEDBACKSNVPROC __glewGenTransformFeedbacksNV
/// typedef void (GLAPIENTRY * PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenTransformFeedbacksNV;
void glGenTransformFeedbacksNV(int n, Pointer<Uint32>? ids) {
  final _glGenTransformFeedbacksNV = glad__glGenTransformFeedbacksNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenTransformFeedbacksNV(n, ids);
}

/// ```c
/// define glIsTransformFeedbackNV GLEW_GET_FUN(__glewIsTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLISTRANSFORMFEEDBACKNVPROC __glewIsTransformFeedbackNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsTransformFeedbackNV;
int glIsTransformFeedbackNV(int id) {
  final _glIsTransformFeedbackNV = glad__glIsTransformFeedbackNV!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsTransformFeedbackNV(id);
}

/// ```c
/// define glPauseTransformFeedbackNV GLEW_GET_FUN(__glewPauseTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLPAUSETRANSFORMFEEDBACKNVPROC __glewPauseTransformFeedbackNV
/// typedef void (GLAPIENTRY * PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPauseTransformFeedbackNV;
void glPauseTransformFeedbackNV() {
  final _glPauseTransformFeedbackNV = glad__glPauseTransformFeedbackNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glPauseTransformFeedbackNV();
}

/// ```c
/// define glResumeTransformFeedbackNV GLEW_GET_FUN(__glewResumeTransformFeedbackNV)
/// GLEW_FUN_EXPORT PFNGLRESUMETRANSFORMFEEDBACKNVPROC __glewResumeTransformFeedbackNV
/// typedef void (GLAPIENTRY * PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glResumeTransformFeedbackNV;
void glResumeTransformFeedbackNV() {
  final _glResumeTransformFeedbackNV = glad__glResumeTransformFeedbackNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glResumeTransformFeedbackNV();
}

/// ```c
/// define glVDPAUFiniNV GLEW_GET_FUN(__glewVDPAUFiniNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUFININVPROC __glewVDPAUFiniNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUFININVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUFiniNV;
void glVDPAUFiniNV() {
  final _glVDPAUFiniNV = glad__glVDPAUFiniNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glVDPAUFiniNV();
}

/// ```c
/// define glVDPAUGetSurfaceivNV GLEW_GET_FUN(__glewVDPAUGetSurfaceivNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUGETSURFACEIVNVPROC __glewVDPAUGetSurfaceivNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint *values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUGetSurfaceivNV;
void glVDPAUGetSurfaceivNV(int surface, int pname, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? values) {
  final _glVDPAUGetSurfaceivNV = glad__glVDPAUGetSurfaceivNV!
      .cast<NativeFunction<Void Function(Uint64 surface, Uint32 pname, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int32>? values)>>()
      .asFunction<void Function(int surface, int pname, int bufSize, Pointer<Uint32>? length, Pointer<Int32>? values)>();
  return _glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
}

/// ```c
/// define glVDPAUInitNV GLEW_GET_FUN(__glewVDPAUInitNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUINITNVPROC __glewVDPAUInitNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUINITNVPROC) (const void* vdpDevice, const void*getProcAddress)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUInitNV;
void glVDPAUInitNV(Pointer<Void>? vdpDevice, Pointer<Void>? getProcAddress) {
  final _glVDPAUInitNV = glad__glVDPAUInitNV!
      .cast<NativeFunction<Void Function(Pointer<Void>? vdpDevice, Pointer<Void>? getProcAddress)>>()
      .asFunction<void Function(Pointer<Void>? vdpDevice, Pointer<Void>? getProcAddress)>();
  return _glVDPAUInitNV(vdpDevice, getProcAddress);
}

/// ```c
/// define glVDPAUIsSurfaceNV GLEW_GET_FUN(__glewVDPAUIsSurfaceNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUISSURFACENVPROC __glewVDPAUIsSurfaceNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUIsSurfaceNV;
void glVDPAUIsSurfaceNV(int surface) {
  final _glVDPAUIsSurfaceNV = glad__glVDPAUIsSurfaceNV!
      .cast<NativeFunction<Void Function(Uint64 surface)>>()
      .asFunction<void Function(int surface)>();
  return _glVDPAUIsSurfaceNV(surface);
}

/// ```c
/// define glVDPAUMapSurfacesNV GLEW_GET_FUN(__glewVDPAUMapSurfacesNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUMAPSURFACESNVPROC __glewVDPAUMapSurfacesNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUMapSurfacesNV;
void glVDPAUMapSurfacesNV(int numSurfaces, Pointer<Uint64>? surfaces) {
  final _glVDPAUMapSurfacesNV = glad__glVDPAUMapSurfacesNV!
      .cast<NativeFunction<Void Function(Uint32 numSurfaces, Pointer<Uint64>? surfaces)>>()
      .asFunction<void Function(int numSurfaces, Pointer<Uint64>? surfaces)>();
  return _glVDPAUMapSurfacesNV(numSurfaces, surfaces);
}

/// ```c
/// define glVDPAURegisterOutputSurfaceNV GLEW_GET_FUN(__glewVDPAURegisterOutputSurfaceNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC __glewVDPAURegisterOutputSurfaceNV
/// typedef GLvdpauSurfaceNV (GLAPIENTRY * PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAURegisterOutputSurfaceNV;
int glVDPAURegisterOutputSurfaceNV(Pointer<Void>? vdpSurface, int target, int numTextureNames, Pointer<Uint32>? textureNames) {
  final _glVDPAURegisterOutputSurfaceNV = glad__glVDPAURegisterOutputSurfaceNV!
      .cast<NativeFunction<Uint64 Function(Pointer<Void>? vdpSurface, Uint32 target, Uint32 numTextureNames, Pointer<Uint32>? textureNames)>>()
      .asFunction<int Function(Pointer<Void>? vdpSurface, int target, int numTextureNames, Pointer<Uint32>? textureNames)>();
  return _glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

/// ```c
/// define glVDPAURegisterVideoSurfaceNV GLEW_GET_FUN(__glewVDPAURegisterVideoSurfaceNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUREGISTERVIDEOSURFACENVPROC __glewVDPAURegisterVideoSurfaceNV
/// typedef GLvdpauSurfaceNV (GLAPIENTRY * PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAURegisterVideoSurfaceNV;
int glVDPAURegisterVideoSurfaceNV(Pointer<Void>? vdpSurface, int target, int numTextureNames, Pointer<Uint32>? textureNames) {
  final _glVDPAURegisterVideoSurfaceNV = glad__glVDPAURegisterVideoSurfaceNV!
      .cast<NativeFunction<Uint64 Function(Pointer<Void>? vdpSurface, Uint32 target, Uint32 numTextureNames, Pointer<Uint32>? textureNames)>>()
      .asFunction<int Function(Pointer<Void>? vdpSurface, int target, int numTextureNames, Pointer<Uint32>? textureNames)>();
  return _glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

/// ```c
/// define glVDPAUSurfaceAccessNV GLEW_GET_FUN(__glewVDPAUSurfaceAccessNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUSURFACEACCESSNVPROC __glewVDPAUSurfaceAccessNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUSurfaceAccessNV;
void glVDPAUSurfaceAccessNV(int surface, int access) {
  final _glVDPAUSurfaceAccessNV = glad__glVDPAUSurfaceAccessNV!
      .cast<NativeFunction<Void Function(Uint64 surface, Uint32 access)>>()
      .asFunction<void Function(int surface, int access)>();
  return _glVDPAUSurfaceAccessNV(surface, access);
}

/// ```c
/// define glVDPAUUnmapSurfacesNV GLEW_GET_FUN(__glewVDPAUUnmapSurfacesNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUUNMAPSURFACESNVPROC __glewVDPAUUnmapSurfacesNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV* surfaces)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUUnmapSurfacesNV;
void glVDPAUUnmapSurfacesNV(int numSurface, Pointer<Uint64>? surfaces) {
  final _glVDPAUUnmapSurfacesNV = glad__glVDPAUUnmapSurfacesNV!
      .cast<NativeFunction<Void Function(Uint32 numSurface, Pointer<Uint64>? surfaces)>>()
      .asFunction<void Function(int numSurface, Pointer<Uint64>? surfaces)>();
  return _glVDPAUUnmapSurfacesNV(numSurface, surfaces);
}

/// ```c
/// define glVDPAUUnregisterSurfaceNV GLEW_GET_FUN(__glewVDPAUUnregisterSurfaceNV)
/// GLEW_FUN_EXPORT PFNGLVDPAUUNREGISTERSURFACENVPROC __glewVDPAUUnregisterSurfaceNV
/// typedef void (GLAPIENTRY * PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVDPAUUnregisterSurfaceNV;
void glVDPAUUnregisterSurfaceNV(int surface) {
  final _glVDPAUUnregisterSurfaceNV = glad__glVDPAUUnregisterSurfaceNV!
      .cast<NativeFunction<Void Function(Uint64 surface)>>()
      .asFunction<void Function(int surface)>();
  return _glVDPAUUnregisterSurfaceNV(surface);
}

/// ------------------------ GL_NV_vertex_array_range -----------------------
/// ```c
/// define glFlushVertexArrayRangeNV GLEW_GET_FUN(__glewFlushVertexArrayRangeNV)
/// GLEW_FUN_EXPORT PFNGLFLUSHVERTEXARRAYRANGENVPROC __glewFlushVertexArrayRangeNV
/// typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushVertexArrayRangeNV;
void glFlushVertexArrayRangeNV() {
  final _glFlushVertexArrayRangeNV = glad__glFlushVertexArrayRangeNV!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glFlushVertexArrayRangeNV();
}

/// ```c
/// define glVertexArrayRangeNV GLEW_GET_FUN(__glewVertexArrayRangeNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXARRAYRANGENVPROC __glewVertexArrayRangeNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexArrayRangeNV;
void glVertexArrayRangeNV(int length, Pointer<Void>? pointer) {
  final _glVertexArrayRangeNV = glad__glVertexArrayRangeNV!
      .cast<NativeFunction<Void Function(Uint32 length, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int length, Pointer<Void>? pointer)>();
  return _glVertexArrayRangeNV(length, pointer);
}

/// ------------------- GL_NV_vertex_attrib_integer_64bit -------------------
/// ```c
/// define glGetVertexAttribLi64vNV GLEW_GET_FUN(__glewGetVertexAttribLi64vNV)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBLI64VNVPROC __glewGetVertexAttribLi64vNV
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribLi64vNV;
void glGetVertexAttribLi64vNV(int index, int pname, Pointer<Int64>? params) {
  final _glGetVertexAttribLi64vNV = glad__glGetVertexAttribLi64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int64>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int64>? params)>();
  return _glGetVertexAttribLi64vNV(index, pname, params);
}

/// ```c
/// define glGetVertexAttribLui64vNV GLEW_GET_FUN(__glewGetVertexAttribLui64vNV)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBLUI64VNVPROC __glewGetVertexAttribLui64vNV
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribLui64vNV;
void glGetVertexAttribLui64vNV(int index, int pname, Pointer<Uint64>? params) {
  final _glGetVertexAttribLui64vNV = glad__glGetVertexAttribLui64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Uint64>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Uint64>? params)>();
  return _glGetVertexAttribLui64vNV(index, pname, params);
}

/// ```c
/// define glVertexAttribL1i64NV GLEW_GET_FUN(__glewVertexAttribL1i64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1I64NVPROC __glewVertexAttribL1i64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1i64NV;
void glVertexAttribL1i64NV(int index, int x) {
  final _glVertexAttribL1i64NV = glad__glVertexAttribL1i64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Int64 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttribL1i64NV(index, x);
}

/// ```c
/// define glVertexAttribL1i64vNV GLEW_GET_FUN(__glewVertexAttribL1i64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1I64VNVPROC __glewVertexAttribL1i64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1i64vNV;
void glVertexAttribL1i64vNV(int index, Pointer<Int64>? v) {
  final _glVertexAttribL1i64vNV = glad__glVertexAttribL1i64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64>? v)>>()
      .asFunction<void Function(int index, Pointer<Int64>? v)>();
  return _glVertexAttribL1i64vNV(index, v);
}

/// ```c
/// define glVertexAttribL1ui64NV GLEW_GET_FUN(__glewVertexAttribL1ui64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1UI64NVPROC __glewVertexAttribL1ui64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1ui64NV;
void glVertexAttribL1ui64NV(int index, int x) {
  final _glVertexAttribL1ui64NV = glad__glVertexAttribL1ui64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttribL1ui64NV(index, x);
}

/// ```c
/// define glVertexAttribL1ui64vNV GLEW_GET_FUN(__glewVertexAttribL1ui64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL1UI64VNVPROC __glewVertexAttribL1ui64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL1ui64vNV;
void glVertexAttribL1ui64vNV(int index, Pointer<Uint64>? v) {
  final _glVertexAttribL1ui64vNV = glad__glVertexAttribL1ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint64>? v)>();
  return _glVertexAttribL1ui64vNV(index, v);
}

/// ```c
/// define glVertexAttribL2i64NV GLEW_GET_FUN(__glewVertexAttribL2i64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2I64NVPROC __glewVertexAttribL2i64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2i64NV;
void glVertexAttribL2i64NV(int index, int x, int y) {
  final _glVertexAttribL2i64NV = glad__glVertexAttribL2i64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Int64 x, Int64 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttribL2i64NV(index, x, y);
}

/// ```c
/// define glVertexAttribL2i64vNV GLEW_GET_FUN(__glewVertexAttribL2i64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2I64VNVPROC __glewVertexAttribL2i64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2i64vNV;
void glVertexAttribL2i64vNV(int index, Pointer<Int64>? v) {
  final _glVertexAttribL2i64vNV = glad__glVertexAttribL2i64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64>? v)>>()
      .asFunction<void Function(int index, Pointer<Int64>? v)>();
  return _glVertexAttribL2i64vNV(index, v);
}

/// ```c
/// define glVertexAttribL2ui64NV GLEW_GET_FUN(__glewVertexAttribL2ui64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2UI64NVPROC __glewVertexAttribL2ui64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2ui64NV;
void glVertexAttribL2ui64NV(int index, int x, int y) {
  final _glVertexAttribL2ui64NV = glad__glVertexAttribL2ui64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x, Uint64 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttribL2ui64NV(index, x, y);
}

/// ```c
/// define glVertexAttribL2ui64vNV GLEW_GET_FUN(__glewVertexAttribL2ui64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL2UI64VNVPROC __glewVertexAttribL2ui64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL2ui64vNV;
void glVertexAttribL2ui64vNV(int index, Pointer<Uint64>? v) {
  final _glVertexAttribL2ui64vNV = glad__glVertexAttribL2ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint64>? v)>();
  return _glVertexAttribL2ui64vNV(index, v);
}

/// ```c
/// define glVertexAttribL3i64NV GLEW_GET_FUN(__glewVertexAttribL3i64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3I64NVPROC __glewVertexAttribL3i64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3i64NV;
void glVertexAttribL3i64NV(int index, int x, int y, int z) {
  final _glVertexAttribL3i64NV = glad__glVertexAttribL3i64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Int64 x, Int64 y, Int64 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttribL3i64NV(index, x, y, z);
}

/// ```c
/// define glVertexAttribL3i64vNV GLEW_GET_FUN(__glewVertexAttribL3i64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3I64VNVPROC __glewVertexAttribL3i64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3i64vNV;
void glVertexAttribL3i64vNV(int index, Pointer<Int64>? v) {
  final _glVertexAttribL3i64vNV = glad__glVertexAttribL3i64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64>? v)>>()
      .asFunction<void Function(int index, Pointer<Int64>? v)>();
  return _glVertexAttribL3i64vNV(index, v);
}

/// ```c
/// define glVertexAttribL3ui64NV GLEW_GET_FUN(__glewVertexAttribL3ui64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3UI64NVPROC __glewVertexAttribL3ui64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3ui64NV;
void glVertexAttribL3ui64NV(int index, int x, int y, int z) {
  final _glVertexAttribL3ui64NV = glad__glVertexAttribL3ui64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x, Uint64 y, Uint64 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttribL3ui64NV(index, x, y, z);
}

/// ```c
/// define glVertexAttribL3ui64vNV GLEW_GET_FUN(__glewVertexAttribL3ui64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL3UI64VNVPROC __glewVertexAttribL3ui64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL3ui64vNV;
void glVertexAttribL3ui64vNV(int index, Pointer<Uint64>? v) {
  final _glVertexAttribL3ui64vNV = glad__glVertexAttribL3ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint64>? v)>();
  return _glVertexAttribL3ui64vNV(index, v);
}

/// ```c
/// define glVertexAttribL4i64NV GLEW_GET_FUN(__glewVertexAttribL4i64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4I64NVPROC __glewVertexAttribL4i64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4i64NV;
void glVertexAttribL4i64NV(int index, int x, int y, int z, int w) {
  final _glVertexAttribL4i64NV = glad__glVertexAttribL4i64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Int64 x, Int64 y, Int64 z, Int64 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttribL4i64NV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttribL4i64vNV GLEW_GET_FUN(__glewVertexAttribL4i64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4I64VNVPROC __glewVertexAttribL4i64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4i64vNV;
void glVertexAttribL4i64vNV(int index, Pointer<Int64>? v) {
  final _glVertexAttribL4i64vNV = glad__glVertexAttribL4i64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int64>? v)>>()
      .asFunction<void Function(int index, Pointer<Int64>? v)>();
  return _glVertexAttribL4i64vNV(index, v);
}

/// ```c
/// define glVertexAttribL4ui64NV GLEW_GET_FUN(__glewVertexAttribL4ui64NV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4UI64NVPROC __glewVertexAttribL4ui64NV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4ui64NV;
void glVertexAttribL4ui64NV(int index, int x, int y, int z, int w) {
  final _glVertexAttribL4ui64NV = glad__glVertexAttribL4ui64NV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint64 x, Uint64 y, Uint64 z, Uint64 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttribL4ui64NV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttribL4ui64vNV GLEW_GET_FUN(__glewVertexAttribL4ui64vNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBL4UI64VNVPROC __glewVertexAttribL4ui64vNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribL4ui64vNV;
void glVertexAttribL4ui64vNV(int index, Pointer<Uint64>? v) {
  final _glVertexAttribL4ui64vNV = glad__glVertexAttribL4ui64vNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint64>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint64>? v)>();
  return _glVertexAttribL4ui64vNV(index, v);
}

/// ```c
/// define glVertexAttribLFormatNV GLEW_GET_FUN(__glewVertexAttribLFormatNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBLFORMATNVPROC __glewVertexAttribLFormatNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribLFormatNV;
void glVertexAttribLFormatNV(int index, int size, int type, int stride) {
  final _glVertexAttribLFormatNV = glad__glVertexAttribLFormatNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int index, int size, int type, int stride)>();
  return _glVertexAttribLFormatNV(index, size, type, stride);
}

/// ------------------- GL_NV_vertex_buffer_unified_memory ------------------
/// ```c
/// define glBufferAddressRangeNV GLEW_GET_FUN(__glewBufferAddressRangeNV)
/// GLEW_FUN_EXPORT PFNGLBUFFERADDRESSRANGENVPROC __glewBufferAddressRangeNV
/// typedef void (GLAPIENTRY * PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBufferAddressRangeNV;
void glBufferAddressRangeNV(int pname, int index, int address, int length) {
  final _glBufferAddressRangeNV = glad__glBufferAddressRangeNV!
      .cast<NativeFunction<Void Function(Uint32 pname, Uint32 index, Uint64 address, Uint64 length)>>()
      .asFunction<void Function(int pname, int index, int address, int length)>();
  return _glBufferAddressRangeNV(pname, index, address, length);
}

/// ```c
/// define glColorFormatNV GLEW_GET_FUN(__glewColorFormatNV)
/// GLEW_FUN_EXPORT PFNGLCOLORFORMATNVPROC __glewColorFormatNV
/// typedef void (GLAPIENTRY * PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorFormatNV;
void glColorFormatNV(int size, int type, int stride) {
  final _glColorFormatNV = glad__glColorFormatNV!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int size, int type, int stride)>();
  return _glColorFormatNV(size, type, stride);
}

/// ```c
/// define glEdgeFlagFormatNV GLEW_GET_FUN(__glewEdgeFlagFormatNV)
/// GLEW_FUN_EXPORT PFNGLEDGEFLAGFORMATNVPROC __glewEdgeFlagFormatNV
/// typedef void (GLAPIENTRY * PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEdgeFlagFormatNV;
void glEdgeFlagFormatNV(int stride) {
  final _glEdgeFlagFormatNV = glad__glEdgeFlagFormatNV!
      .cast<NativeFunction<Void Function(Uint32 stride)>>()
      .asFunction<void Function(int stride)>();
  return _glEdgeFlagFormatNV(stride);
}

/// ```c
/// define glFogCoordFormatNV GLEW_GET_FUN(__glewFogCoordFormatNV)
/// GLEW_FUN_EXPORT PFNGLFOGCOORDFORMATNVPROC __glewFogCoordFormatNV
/// typedef void (GLAPIENTRY * PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogCoordFormatNV;
void glFogCoordFormatNV(int type, int stride) {
  final _glFogCoordFormatNV = glad__glFogCoordFormatNV!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int type, int stride)>();
  return _glFogCoordFormatNV(type, stride);
}

/// ```c
/// define glGetIntegerui64i_vNV GLEW_GET_FUN(__glewGetIntegerui64i_vNV)
/// GLEW_FUN_EXPORT PFNGLGETINTEGERUI64I_VNVPROC __glewGetIntegerui64i_vNV
/// typedef void (GLAPIENTRY * PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT result[])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetIntegerui64i_vNV;
void glGetIntegerui64i_vNV(int value, int index, int result) {
  final _glGetIntegerui64i_vNV = glad__glGetIntegerui64i_vNV!
      .cast<NativeFunction<Void Function(Uint32 value, Uint32 index, Uint64 result)>>()
      .asFunction<void Function(int value, int index, int result)>();
  return _glGetIntegerui64i_vNV(value, index, result);
}

/// ```c
/// define glIndexFormatNV GLEW_GET_FUN(__glewIndexFormatNV)
/// GLEW_FUN_EXPORT PFNGLINDEXFORMATNVPROC __glewIndexFormatNV
/// typedef void (GLAPIENTRY * PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIndexFormatNV;
void glIndexFormatNV(int type, int stride) {
  final _glIndexFormatNV = glad__glIndexFormatNV!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int type, int stride)>();
  return _glIndexFormatNV(type, stride);
}

/// ```c
/// define glNormalFormatNV GLEW_GET_FUN(__glewNormalFormatNV)
/// GLEW_FUN_EXPORT PFNGLNORMALFORMATNVPROC __glewNormalFormatNV
/// typedef void (GLAPIENTRY * PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormalFormatNV;
void glNormalFormatNV(int type, int stride) {
  final _glNormalFormatNV = glad__glNormalFormatNV!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int type, int stride)>();
  return _glNormalFormatNV(type, stride);
}

/// ```c
/// define glSecondaryColorFormatNV GLEW_GET_FUN(__glewSecondaryColorFormatNV)
/// GLEW_FUN_EXPORT PFNGLSECONDARYCOLORFORMATNVPROC __glewSecondaryColorFormatNV
/// typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSecondaryColorFormatNV;
void glSecondaryColorFormatNV(int size, int type, int stride) {
  final _glSecondaryColorFormatNV = glad__glSecondaryColorFormatNV!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int size, int type, int stride)>();
  return _glSecondaryColorFormatNV(size, type, stride);
}

/// ```c
/// define glTexCoordFormatNV GLEW_GET_FUN(__glewTexCoordFormatNV)
/// GLEW_FUN_EXPORT PFNGLTEXCOORDFORMATNVPROC __glewTexCoordFormatNV
/// typedef void (GLAPIENTRY * PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoordFormatNV;
void glTexCoordFormatNV(int size, int type, int stride) {
  final _glTexCoordFormatNV = glad__glTexCoordFormatNV!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int size, int type, int stride)>();
  return _glTexCoordFormatNV(size, type, stride);
}

/// ```c
/// define glVertexAttribFormatNV GLEW_GET_FUN(__glewVertexAttribFormatNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBFORMATNVPROC __glewVertexAttribFormatNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribFormatNV;
void glVertexAttribFormatNV(int index, int size, int type, int normalized, int stride) {
  final _glVertexAttribFormatNV = glad__glVertexAttribFormatNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint8 normalized, Uint32 stride)>>()
      .asFunction<void Function(int index, int size, int type, int normalized, int stride)>();
  return _glVertexAttribFormatNV(index, size, type, normalized, stride);
}

/// ```c
/// define glVertexAttribIFormatNV GLEW_GET_FUN(__glewVertexAttribIFormatNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIFORMATNVPROC __glewVertexAttribIFormatNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribIFormatNV;
void glVertexAttribIFormatNV(int index, int size, int type, int stride) {
  final _glVertexAttribIFormatNV = glad__glVertexAttribIFormatNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int index, int size, int type, int stride)>();
  return _glVertexAttribIFormatNV(index, size, type, stride);
}

/// ```c
/// define glVertexFormatNV GLEW_GET_FUN(__glewVertexFormatNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXFORMATNVPROC __glewVertexFormatNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexFormatNV;
void glVertexFormatNV(int size, int type, int stride) {
  final _glVertexFormatNV = glad__glVertexFormatNV!
      .cast<NativeFunction<Void Function(Int32 size, Uint32 type, Uint32 stride)>>()
      .asFunction<void Function(int size, int type, int stride)>();
  return _glVertexFormatNV(size, type, stride);
}

/// -------------------------- GL_NV_vertex_program -------------------------
/// ```c
/// define glAreProgramsResidentNV GLEW_GET_FUN(__glewAreProgramsResidentNV)
/// GLEW_FUN_EXPORT PFNGLAREPROGRAMSRESIDENTNVPROC __glewAreProgramsResidentNV
/// typedef GLboolean (GLAPIENTRY * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint* ids, GLboolean *residences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAreProgramsResidentNV;
int glAreProgramsResidentNV(int n, Pointer<Uint32>? ids, Pointer<Uint8>? residences) {
  final _glAreProgramsResidentNV = glad__glAreProgramsResidentNV!
      .cast<NativeFunction<Uint8 Function(Uint32 n, Pointer<Uint32>? ids, Pointer<Uint8>? residences)>>()
      .asFunction<int Function(int n, Pointer<Uint32>? ids, Pointer<Uint8>? residences)>();
  return _glAreProgramsResidentNV(n, ids, residences);
}

/// ```c
/// define glBindProgramNV GLEW_GET_FUN(__glewBindProgramNV)
/// GLEW_FUN_EXPORT PFNGLBINDPROGRAMNVPROC __glewBindProgramNV
/// typedef void (GLAPIENTRY * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindProgramNV;
void glBindProgramNV(int target, int id) {
  final _glBindProgramNV = glad__glBindProgramNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id)>>()
      .asFunction<void Function(int target, int id)>();
  return _glBindProgramNV(target, id);
}

/// ```c
/// define glDeleteProgramsNV GLEW_GET_FUN(__glewDeleteProgramsNV)
/// GLEW_FUN_EXPORT PFNGLDELETEPROGRAMSNVPROC __glewDeleteProgramsNV
/// typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteProgramsNV;
void glDeleteProgramsNV(int n, Pointer<Uint32>? ids) {
  final _glDeleteProgramsNV = glad__glDeleteProgramsNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glDeleteProgramsNV(n, ids);
}

/// ```c
/// define glExecuteProgramNV GLEW_GET_FUN(__glewExecuteProgramNV)
/// GLEW_FUN_EXPORT PFNGLEXECUTEPROGRAMNVPROC __glewExecuteProgramNV
/// typedef void (GLAPIENTRY * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExecuteProgramNV;
void glExecuteProgramNV(int target, int id, Pointer<Float>? params) {
  final _glExecuteProgramNV = glad__glExecuteProgramNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int id, Pointer<Float>? params)>();
  return _glExecuteProgramNV(target, id, params);
}

/// ```c
/// define glGenProgramsNV GLEW_GET_FUN(__glewGenProgramsNV)
/// GLEW_FUN_EXPORT PFNGLGENPROGRAMSNVPROC __glewGenProgramsNV
/// typedef void (GLAPIENTRY * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenProgramsNV;
void glGenProgramsNV(int n, Pointer<Uint32>? ids) {
  final _glGenProgramsNV = glad__glGenProgramsNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glGenProgramsNV(n, ids);
}

/// ```c
/// define glGetProgramParameterdvNV GLEW_GET_FUN(__glewGetProgramParameterdvNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMPARAMETERDVNVPROC __glewGetProgramParameterdvNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramParameterdvNV;
void glGetProgramParameterdvNV(int target, int index, int pname, Pointer<Double>? params) {
  final _glGetProgramParameterdvNV = glad__glGetProgramParameterdvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, int pname, Pointer<Double>? params)>();
  return _glGetProgramParameterdvNV(target, index, pname, params);
}

/// ```c
/// define glGetProgramParameterfvNV GLEW_GET_FUN(__glewGetProgramParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMPARAMETERFVNVPROC __glewGetProgramParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramParameterfvNV;
void glGetProgramParameterfvNV(int target, int index, int pname, Pointer<Float>? params) {
  final _glGetProgramParameterfvNV = glad__glGetProgramParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, int pname, Pointer<Float>? params)>();
  return _glGetProgramParameterfvNV(target, index, pname, params);
}

/// ```c
/// define glGetProgramStringNV GLEW_GET_FUN(__glewGetProgramStringNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMSTRINGNVPROC __glewGetProgramStringNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte* program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramStringNV;
void glGetProgramStringNV(int id, int pname, Pointer<Uint8>? program) {
  final _glGetProgramStringNV = glad__glGetProgramStringNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Uint8>? program)>>()
      .asFunction<void Function(int id, int pname, Pointer<Uint8>? program)>();
  return _glGetProgramStringNV(id, pname, program);
}

/// ```c
/// define glGetProgramivNV GLEW_GET_FUN(__glewGetProgramivNV)
/// GLEW_FUN_EXPORT PFNGLGETPROGRAMIVNVPROC __glewGetProgramivNV
/// typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProgramivNV;
void glGetProgramivNV(int id, int pname, Pointer<Int32>? params) {
  final _glGetProgramivNV = glad__glGetProgramivNV!
      .cast<NativeFunction<Void Function(Uint32 id, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int id, int pname, Pointer<Int32>? params)>();
  return _glGetProgramivNV(id, pname, params);
}

/// ```c
/// define glGetTrackMatrixivNV GLEW_GET_FUN(__glewGetTrackMatrixivNV)
/// GLEW_FUN_EXPORT PFNGLGETTRACKMATRIXIVNVPROC __glewGetTrackMatrixivNV
/// typedef void (GLAPIENTRY * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTrackMatrixivNV;
void glGetTrackMatrixivNV(int target, int address, int pname, Pointer<Int32>? params) {
  final _glGetTrackMatrixivNV = glad__glGetTrackMatrixivNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 address, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int address, int pname, Pointer<Int32>? params)>();
  return _glGetTrackMatrixivNV(target, address, pname, params);
}

/// ```c
/// define glGetVertexAttribPointervNV GLEW_GET_FUN(__glewGetVertexAttribPointervNV)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glewGetVertexAttribPointervNV
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void** pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribPointervNV;
void glGetVertexAttribPointervNV(int index, int pname, Pointer<Pointer<Void>>? pointer) {
  final _glGetVertexAttribPointervNV = glad__glGetVertexAttribPointervNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Pointer<Void>>? pointer)>>()
      .asFunction<void Function(int index, int pname, Pointer<Pointer<Void>>? pointer)>();
  return _glGetVertexAttribPointervNV(index, pname, pointer);
}

/// ```c
/// define glGetVertexAttribdvNV GLEW_GET_FUN(__glewGetVertexAttribdvNV)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVNVPROC __glewGetVertexAttribdvNV
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribdvNV;
void glGetVertexAttribdvNV(int index, int pname, Pointer<Double>? params) {
  final _glGetVertexAttribdvNV = glad__glGetVertexAttribdvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Double>? params)>();
  return _glGetVertexAttribdvNV(index, pname, params);
}

/// ```c
/// define glGetVertexAttribfvNV GLEW_GET_FUN(__glewGetVertexAttribfvNV)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVNVPROC __glewGetVertexAttribfvNV
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribfvNV;
void glGetVertexAttribfvNV(int index, int pname, Pointer<Float>? params) {
  final _glGetVertexAttribfvNV = glad__glGetVertexAttribfvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Float>? params)>();
  return _glGetVertexAttribfvNV(index, pname, params);
}

/// ```c
/// define glGetVertexAttribivNV GLEW_GET_FUN(__glewGetVertexAttribivNV)
/// GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVNVPROC __glewGetVertexAttribivNV
/// typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVertexAttribivNV;
void glGetVertexAttribivNV(int index, int pname, Pointer<Int32>? params) {
  final _glGetVertexAttribivNV = glad__glGetVertexAttribivNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int index, int pname, Pointer<Int32>? params)>();
  return _glGetVertexAttribivNV(index, pname, params);
}

/// ```c
/// define glIsProgramNV GLEW_GET_FUN(__glewIsProgramNV)
/// GLEW_FUN_EXPORT PFNGLISPROGRAMNVPROC __glewIsProgramNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMNVPROC) (GLuint id)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsProgramNV;
int glIsProgramNV(int id) {
  final _glIsProgramNV = glad__glIsProgramNV!
      .cast<NativeFunction<Uint8 Function(Uint32 id)>>()
      .asFunction<int Function(int id)>();
  return _glIsProgramNV(id);
}

/// ```c
/// define glLoadProgramNV GLEW_GET_FUN(__glewLoadProgramNV)
/// GLEW_FUN_EXPORT PFNGLLOADPROGRAMNVPROC __glewLoadProgramNV
/// typedef void (GLAPIENTRY * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte* program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadProgramNV;
void glLoadProgramNV(int target, int id, int len, Pointer<Uint8>? program) {
  final _glLoadProgramNV = glad__glLoadProgramNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 id, Uint32 len, Pointer<Uint8>? program)>>()
      .asFunction<void Function(int target, int id, int len, Pointer<Uint8>? program)>();
  return _glLoadProgramNV(target, id, len, program);
}

/// ```c
/// define glProgramParameter4dNV GLEW_GET_FUN(__glewProgramParameter4dNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4DNVPROC __glewProgramParameter4dNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameter4dNV;
void glProgramParameter4dNV(int target, int index, double x, double y, double z, double w) {
  final _glProgramParameter4dNV = glad__glProgramParameter4dNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int target, int index, double x, double y, double z, double w)>();
  return _glProgramParameter4dNV(target, index, x, y, z, w);
}

/// ```c
/// define glProgramParameter4dvNV GLEW_GET_FUN(__glewProgramParameter4dvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4DVNVPROC __glewProgramParameter4dvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameter4dvNV;
void glProgramParameter4dvNV(int target, int index, Pointer<Double>? params) {
  final _glProgramParameter4dvNV = glad__glProgramParameter4dvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Double>? params)>();
  return _glProgramParameter4dvNV(target, index, params);
}

/// ```c
/// define glProgramParameter4fNV GLEW_GET_FUN(__glewProgramParameter4fNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4FNVPROC __glewProgramParameter4fNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameter4fNV;
void glProgramParameter4fNV(int target, int index, double x, double y, double z, double w) {
  final _glProgramParameter4fNV = glad__glProgramParameter4fNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int target, int index, double x, double y, double z, double w)>();
  return _glProgramParameter4fNV(target, index, x, y, z, w);
}

/// ```c
/// define glProgramParameter4fvNV GLEW_GET_FUN(__glewProgramParameter4fvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4FVNVPROC __glewProgramParameter4fvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameter4fvNV;
void glProgramParameter4fvNV(int target, int index, Pointer<Float>? params) {
  final _glProgramParameter4fvNV = glad__glProgramParameter4fvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? params)>();
  return _glProgramParameter4fvNV(target, index, params);
}

/// ```c
/// define glProgramParameters4dvNV GLEW_GET_FUN(__glewProgramParameters4dvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERS4DVNVPROC __glewProgramParameters4dvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei num, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameters4dvNV;
void glProgramParameters4dvNV(int target, int index, int num, Pointer<Double>? params) {
  final _glProgramParameters4dvNV = glad__glProgramParameters4dvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 num, Pointer<Double>? params)>>()
      .asFunction<void Function(int target, int index, int num, Pointer<Double>? params)>();
  return _glProgramParameters4dvNV(target, index, num, params);
}

/// ```c
/// define glProgramParameters4fvNV GLEW_GET_FUN(__glewProgramParameters4fvNV)
/// GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERS4FVNVPROC __glewProgramParameters4fvNV
/// typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei num, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glProgramParameters4fvNV;
void glProgramParameters4fvNV(int target, int index, int num, Pointer<Float>? params) {
  final _glProgramParameters4fvNV = glad__glProgramParameters4fvNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Uint32 num, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int index, int num, Pointer<Float>? params)>();
  return _glProgramParameters4fvNV(target, index, num, params);
}

/// ```c
/// define glRequestResidentProgramsNV GLEW_GET_FUN(__glewRequestResidentProgramsNV)
/// GLEW_FUN_EXPORT PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glewRequestResidentProgramsNV
/// typedef void (GLAPIENTRY * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, GLuint* ids)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRequestResidentProgramsNV;
void glRequestResidentProgramsNV(int n, Pointer<Uint32>? ids) {
  final _glRequestResidentProgramsNV = glad__glRequestResidentProgramsNV!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? ids)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? ids)>();
  return _glRequestResidentProgramsNV(n, ids);
}

/// ```c
/// define glTrackMatrixNV GLEW_GET_FUN(__glewTrackMatrixNV)
/// GLEW_FUN_EXPORT PFNGLTRACKMATRIXNVPROC __glewTrackMatrixNV
/// typedef void (GLAPIENTRY * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTrackMatrixNV;
void glTrackMatrixNV(int target, int address, int matrix, int transform) {
  final _glTrackMatrixNV = glad__glTrackMatrixNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 address, Uint32 matrix, Uint32 transform)>>()
      .asFunction<void Function(int target, int address, int matrix, int transform)>();
  return _glTrackMatrixNV(target, address, matrix, transform);
}

/// ```c
/// define glVertexAttrib1dNV GLEW_GET_FUN(__glewVertexAttrib1dNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DNVPROC __glewVertexAttrib1dNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1dNV;
void glVertexAttrib1dNV(int index, double x) {
  final _glVertexAttrib1dNV = glad__glVertexAttrib1dNV!
      .cast<NativeFunction<Void Function(Uint32 index, Double x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttrib1dNV(index, x);
}

/// ```c
/// define glVertexAttrib1dvNV GLEW_GET_FUN(__glewVertexAttrib1dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVNVPROC __glewVertexAttrib1dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1dvNV;
void glVertexAttrib1dvNV(int index, Pointer<Double>? v) {
  final _glVertexAttrib1dvNV = glad__glVertexAttrib1dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib1dvNV(index, v);
}

/// ```c
/// define glVertexAttrib1fNV GLEW_GET_FUN(__glewVertexAttrib1fNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FNVPROC __glewVertexAttrib1fNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1fNV;
void glVertexAttrib1fNV(int index, double x) {
  final _glVertexAttrib1fNV = glad__glVertexAttrib1fNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float x)>>()
      .asFunction<void Function(int index, double x)>();
  return _glVertexAttrib1fNV(index, x);
}

/// ```c
/// define glVertexAttrib1fvNV GLEW_GET_FUN(__glewVertexAttrib1fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVNVPROC __glewVertexAttrib1fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1fvNV;
void glVertexAttrib1fvNV(int index, Pointer<Float>? v) {
  final _glVertexAttrib1fvNV = glad__glVertexAttrib1fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib1fvNV(index, v);
}

/// ```c
/// define glVertexAttrib1sNV GLEW_GET_FUN(__glewVertexAttrib1sNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SNVPROC __glewVertexAttrib1sNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1sNV;
void glVertexAttrib1sNV(int index, int x) {
  final _glVertexAttrib1sNV = glad__glVertexAttrib1sNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x)>>()
      .asFunction<void Function(int index, int x)>();
  return _glVertexAttrib1sNV(index, x);
}

/// ```c
/// define glVertexAttrib1svNV GLEW_GET_FUN(__glewVertexAttrib1svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVNVPROC __glewVertexAttrib1svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib1svNV;
void glVertexAttrib1svNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib1svNV = glad__glVertexAttrib1svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib1svNV(index, v);
}

/// ```c
/// define glVertexAttrib2dNV GLEW_GET_FUN(__glewVertexAttrib2dNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DNVPROC __glewVertexAttrib2dNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2dNV;
void glVertexAttrib2dNV(int index, double x, double y) {
  final _glVertexAttrib2dNV = glad__glVertexAttrib2dNV!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttrib2dNV(index, x, y);
}

/// ```c
/// define glVertexAttrib2dvNV GLEW_GET_FUN(__glewVertexAttrib2dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVNVPROC __glewVertexAttrib2dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2dvNV;
void glVertexAttrib2dvNV(int index, Pointer<Double>? v) {
  final _glVertexAttrib2dvNV = glad__glVertexAttrib2dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib2dvNV(index, v);
}

/// ```c
/// define glVertexAttrib2fNV GLEW_GET_FUN(__glewVertexAttrib2fNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FNVPROC __glewVertexAttrib2fNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2fNV;
void glVertexAttrib2fNV(int index, double x, double y) {
  final _glVertexAttrib2fNV = glad__glVertexAttrib2fNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y)>>()
      .asFunction<void Function(int index, double x, double y)>();
  return _glVertexAttrib2fNV(index, x, y);
}

/// ```c
/// define glVertexAttrib2fvNV GLEW_GET_FUN(__glewVertexAttrib2fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVNVPROC __glewVertexAttrib2fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2fvNV;
void glVertexAttrib2fvNV(int index, Pointer<Float>? v) {
  final _glVertexAttrib2fvNV = glad__glVertexAttrib2fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib2fvNV(index, v);
}

/// ```c
/// define glVertexAttrib2sNV GLEW_GET_FUN(__glewVertexAttrib2sNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SNVPROC __glewVertexAttrib2sNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2sNV;
void glVertexAttrib2sNV(int index, int x, int y) {
  final _glVertexAttrib2sNV = glad__glVertexAttrib2sNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y)>>()
      .asFunction<void Function(int index, int x, int y)>();
  return _glVertexAttrib2sNV(index, x, y);
}

/// ```c
/// define glVertexAttrib2svNV GLEW_GET_FUN(__glewVertexAttrib2svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVNVPROC __glewVertexAttrib2svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib2svNV;
void glVertexAttrib2svNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib2svNV = glad__glVertexAttrib2svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib2svNV(index, v);
}

/// ```c
/// define glVertexAttrib3dNV GLEW_GET_FUN(__glewVertexAttrib3dNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DNVPROC __glewVertexAttrib3dNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3dNV;
void glVertexAttrib3dNV(int index, double x, double y, double z) {
  final _glVertexAttrib3dNV = glad__glVertexAttrib3dNV!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttrib3dNV(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3dvNV GLEW_GET_FUN(__glewVertexAttrib3dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVNVPROC __glewVertexAttrib3dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3dvNV;
void glVertexAttrib3dvNV(int index, Pointer<Double>? v) {
  final _glVertexAttrib3dvNV = glad__glVertexAttrib3dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib3dvNV(index, v);
}

/// ```c
/// define glVertexAttrib3fNV GLEW_GET_FUN(__glewVertexAttrib3fNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FNVPROC __glewVertexAttrib3fNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3fNV;
void glVertexAttrib3fNV(int index, double x, double y, double z) {
  final _glVertexAttrib3fNV = glad__glVertexAttrib3fNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z)>>()
      .asFunction<void Function(int index, double x, double y, double z)>();
  return _glVertexAttrib3fNV(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3fvNV GLEW_GET_FUN(__glewVertexAttrib3fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVNVPROC __glewVertexAttrib3fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3fvNV;
void glVertexAttrib3fvNV(int index, Pointer<Float>? v) {
  final _glVertexAttrib3fvNV = glad__glVertexAttrib3fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib3fvNV(index, v);
}

/// ```c
/// define glVertexAttrib3sNV GLEW_GET_FUN(__glewVertexAttrib3sNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SNVPROC __glewVertexAttrib3sNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3sNV;
void glVertexAttrib3sNV(int index, int x, int y, int z) {
  final _glVertexAttrib3sNV = glad__glVertexAttrib3sNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z)>>()
      .asFunction<void Function(int index, int x, int y, int z)>();
  return _glVertexAttrib3sNV(index, x, y, z);
}

/// ```c
/// define glVertexAttrib3svNV GLEW_GET_FUN(__glewVertexAttrib3svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVNVPROC __glewVertexAttrib3svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib3svNV;
void glVertexAttrib3svNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib3svNV = glad__glVertexAttrib3svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib3svNV(index, v);
}

/// ```c
/// define glVertexAttrib4dNV GLEW_GET_FUN(__glewVertexAttrib4dNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DNVPROC __glewVertexAttrib4dNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4dNV;
void glVertexAttrib4dNV(int index, double x, double y, double z, double w) {
  final _glVertexAttrib4dNV = glad__glVertexAttrib4dNV!
      .cast<NativeFunction<Void Function(Uint32 index, Double x, Double y, Double z, Double w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttrib4dNV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4dvNV GLEW_GET_FUN(__glewVertexAttrib4dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVNVPROC __glewVertexAttrib4dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4dvNV;
void glVertexAttrib4dvNV(int index, Pointer<Double>? v) {
  final _glVertexAttrib4dvNV = glad__glVertexAttrib4dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, Pointer<Double>? v)>();
  return _glVertexAttrib4dvNV(index, v);
}

/// ```c
/// define glVertexAttrib4fNV GLEW_GET_FUN(__glewVertexAttrib4fNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FNVPROC __glewVertexAttrib4fNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4fNV;
void glVertexAttrib4fNV(int index, double x, double y, double z, double w) {
  final _glVertexAttrib4fNV = glad__glVertexAttrib4fNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(int index, double x, double y, double z, double w)>();
  return _glVertexAttrib4fNV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4fvNV GLEW_GET_FUN(__glewVertexAttrib4fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVNVPROC __glewVertexAttrib4fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4fvNV;
void glVertexAttrib4fvNV(int index, Pointer<Float>? v) {
  final _glVertexAttrib4fvNV = glad__glVertexAttrib4fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glVertexAttrib4fvNV(index, v);
}

/// ```c
/// define glVertexAttrib4sNV GLEW_GET_FUN(__glewVertexAttrib4sNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SNVPROC __glewVertexAttrib4sNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4sNV;
void glVertexAttrib4sNV(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4sNV = glad__glVertexAttrib4sNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int16 x, Int16 y, Int16 z, Int16 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4sNV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4svNV GLEW_GET_FUN(__glewVertexAttrib4svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVNVPROC __glewVertexAttrib4svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4svNV;
void glVertexAttrib4svNV(int index, Pointer<Int16>? v) {
  final _glVertexAttrib4svNV = glad__glVertexAttrib4svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, Pointer<Int16>? v)>();
  return _glVertexAttrib4svNV(index, v);
}

/// ```c
/// define glVertexAttrib4ubNV GLEW_GET_FUN(__glewVertexAttrib4ubNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBNVPROC __glewVertexAttrib4ubNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4ubNV;
void glVertexAttrib4ubNV(int index, int x, int y, int z, int w) {
  final _glVertexAttrib4ubNV = glad__glVertexAttrib4ubNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint8 x, Uint8 y, Uint8 z, Uint8 w)>>()
      .asFunction<void Function(int index, int x, int y, int z, int w)>();
  return _glVertexAttrib4ubNV(index, x, y, z, w);
}

/// ```c
/// define glVertexAttrib4ubvNV GLEW_GET_FUN(__glewVertexAttrib4ubvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVNVPROC __glewVertexAttrib4ubvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttrib4ubvNV;
void glVertexAttrib4ubvNV(int index, Pointer<Uint8>? v) {
  final _glVertexAttrib4ubvNV = glad__glVertexAttrib4ubvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, Pointer<Uint8>? v)>();
  return _glVertexAttrib4ubvNV(index, v);
}

/// ```c
/// define glVertexAttribPointerNV GLEW_GET_FUN(__glewVertexAttribPointerNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERNVPROC __glewVertexAttribPointerNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribPointerNV;
void glVertexAttribPointerNV(int index, int size, int type, int stride, Pointer<Void>? pointer) {
  final _glVertexAttribPointerNV = glad__glVertexAttribPointerNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 size, Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int index, int size, int type, int stride, Pointer<Void>? pointer)>();
  return _glVertexAttribPointerNV(index, size, type, stride, pointer);
}

/// ```c
/// define glVertexAttribs1dvNV GLEW_GET_FUN(__glewVertexAttribs1dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1DVNVPROC __glewVertexAttribs1dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs1dvNV;
void glVertexAttribs1dvNV(int index, int n, Pointer<Double>? v) {
  final _glVertexAttribs1dvNV = glad__glVertexAttribs1dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Double>? v)>();
  return _glVertexAttribs1dvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs1fvNV GLEW_GET_FUN(__glewVertexAttribs1fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1FVNVPROC __glewVertexAttribs1fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs1fvNV;
void glVertexAttribs1fvNV(int index, int n, Pointer<Float>? v) {
  final _glVertexAttribs1fvNV = glad__glVertexAttribs1fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Float>? v)>();
  return _glVertexAttribs1fvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs1svNV GLEW_GET_FUN(__glewVertexAttribs1svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1SVNVPROC __glewVertexAttribs1svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei n, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs1svNV;
void glVertexAttribs1svNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs1svNV = glad__glVertexAttribs1svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs1svNV(index, n, v);
}

/// ```c
/// define glVertexAttribs2dvNV GLEW_GET_FUN(__glewVertexAttribs2dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2DVNVPROC __glewVertexAttribs2dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs2dvNV;
void glVertexAttribs2dvNV(int index, int n, Pointer<Double>? v) {
  final _glVertexAttribs2dvNV = glad__glVertexAttribs2dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Double>? v)>();
  return _glVertexAttribs2dvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs2fvNV GLEW_GET_FUN(__glewVertexAttribs2fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2FVNVPROC __glewVertexAttribs2fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs2fvNV;
void glVertexAttribs2fvNV(int index, int n, Pointer<Float>? v) {
  final _glVertexAttribs2fvNV = glad__glVertexAttribs2fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Float>? v)>();
  return _glVertexAttribs2fvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs2svNV GLEW_GET_FUN(__glewVertexAttribs2svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2SVNVPROC __glewVertexAttribs2svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei n, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs2svNV;
void glVertexAttribs2svNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs2svNV = glad__glVertexAttribs2svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs2svNV(index, n, v);
}

/// ```c
/// define glVertexAttribs3dvNV GLEW_GET_FUN(__glewVertexAttribs3dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3DVNVPROC __glewVertexAttribs3dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs3dvNV;
void glVertexAttribs3dvNV(int index, int n, Pointer<Double>? v) {
  final _glVertexAttribs3dvNV = glad__glVertexAttribs3dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Double>? v)>();
  return _glVertexAttribs3dvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs3fvNV GLEW_GET_FUN(__glewVertexAttribs3fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3FVNVPROC __glewVertexAttribs3fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs3fvNV;
void glVertexAttribs3fvNV(int index, int n, Pointer<Float>? v) {
  final _glVertexAttribs3fvNV = glad__glVertexAttribs3fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Float>? v)>();
  return _glVertexAttribs3fvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs3svNV GLEW_GET_FUN(__glewVertexAttribs3svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3SVNVPROC __glewVertexAttribs3svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei n, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs3svNV;
void glVertexAttribs3svNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs3svNV = glad__glVertexAttribs3svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs3svNV(index, n, v);
}

/// ```c
/// define glVertexAttribs4dvNV GLEW_GET_FUN(__glewVertexAttribs4dvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4DVNVPROC __glewVertexAttribs4dvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs4dvNV;
void glVertexAttribs4dvNV(int index, int n, Pointer<Double>? v) {
  final _glVertexAttribs4dvNV = glad__glVertexAttribs4dvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Double>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Double>? v)>();
  return _glVertexAttribs4dvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs4fvNV GLEW_GET_FUN(__glewVertexAttribs4fvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4FVNVPROC __glewVertexAttribs4fvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs4fvNV;
void glVertexAttribs4fvNV(int index, int n, Pointer<Float>? v) {
  final _glVertexAttribs4fvNV = glad__glVertexAttribs4fvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Float>? v)>();
  return _glVertexAttribs4fvNV(index, n, v);
}

/// ```c
/// define glVertexAttribs4svNV GLEW_GET_FUN(__glewVertexAttribs4svNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4SVNVPROC __glewVertexAttribs4svNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei n, const GLshort* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs4svNV;
void glVertexAttribs4svNV(int index, int n, Pointer<Int16>? v) {
  final _glVertexAttribs4svNV = glad__glVertexAttribs4svNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Int16>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Int16>? v)>();
  return _glVertexAttribs4svNV(index, n, v);
}

/// ```c
/// define glVertexAttribs4ubvNV GLEW_GET_FUN(__glewVertexAttribs4ubvNV)
/// GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4UBVNVPROC __glewVertexAttribs4ubvNV
/// typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei n, const GLubyte* v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVertexAttribs4ubvNV;
void glVertexAttribs4ubvNV(int index, int n, Pointer<Uint8>? v) {
  final _glVertexAttribs4ubvNV = glad__glVertexAttribs4ubvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 n, Pointer<Uint8>? v)>>()
      .asFunction<void Function(int index, int n, Pointer<Uint8>? v)>();
  return _glVertexAttribs4ubvNV(index, n, v);
}

/// -------------------------- GL_NV_video_capture --------------------------
/// ```c
/// define glBeginVideoCaptureNV GLEW_GET_FUN(__glewBeginVideoCaptureNV)
/// GLEW_FUN_EXPORT PFNGLBEGINVIDEOCAPTURENVPROC __glewBeginVideoCaptureNV
/// typedef void (GLAPIENTRY * PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBeginVideoCaptureNV;
void glBeginVideoCaptureNV(int video_capture_slot) {
  final _glBeginVideoCaptureNV = glad__glBeginVideoCaptureNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot)>>()
      .asFunction<void Function(int video_capture_slot)>();
  return _glBeginVideoCaptureNV(video_capture_slot);
}

/// ```c
/// define glBindVideoCaptureStreamBufferNV GLEW_GET_FUN(__glewBindVideoCaptureStreamBufferNV)
/// GLEW_FUN_EXPORT PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC __glewBindVideoCaptureStreamBufferNV
/// typedef void (GLAPIENTRY * PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVideoCaptureStreamBufferNV;
void glBindVideoCaptureStreamBufferNV(int video_capture_slot, int stream, int frame_region, Pointer<Void>? offset) {
  final _glBindVideoCaptureStreamBufferNV = glad__glBindVideoCaptureStreamBufferNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 frame_region, Pointer<Void>? offset)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int frame_region, Pointer<Void>? offset)>();
  return _glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
}

/// ```c
/// define glBindVideoCaptureStreamTextureNV GLEW_GET_FUN(__glewBindVideoCaptureStreamTextureNV)
/// GLEW_FUN_EXPORT PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC __glewBindVideoCaptureStreamTextureNV
/// typedef void (GLAPIENTRY * PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVideoCaptureStreamTextureNV;
void glBindVideoCaptureStreamTextureNV(int video_capture_slot, int stream, int frame_region, int target, int texture) {
  final _glBindVideoCaptureStreamTextureNV = glad__glBindVideoCaptureStreamTextureNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 frame_region, Uint32 target, Uint32 texture)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int frame_region, int target, int texture)>();
  return _glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
}

/// ```c
/// define glEndVideoCaptureNV GLEW_GET_FUN(__glewEndVideoCaptureNV)
/// GLEW_FUN_EXPORT PFNGLENDVIDEOCAPTURENVPROC __glewEndVideoCaptureNV
/// typedef void (GLAPIENTRY * PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndVideoCaptureNV;
void glEndVideoCaptureNV(int video_capture_slot) {
  final _glEndVideoCaptureNV = glad__glEndVideoCaptureNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot)>>()
      .asFunction<void Function(int video_capture_slot)>();
  return _glEndVideoCaptureNV(video_capture_slot);
}

/// ```c
/// define glGetVideoCaptureStreamdvNV GLEW_GET_FUN(__glewGetVideoCaptureStreamdvNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOCAPTURESTREAMDVNVPROC __glewGetVideoCaptureStreamdvNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoCaptureStreamdvNV;
void glGetVideoCaptureStreamdvNV(int video_capture_slot, int stream, int pname, Pointer<Double>? params) {
  final _glGetVideoCaptureStreamdvNV = glad__glGetVideoCaptureStreamdvNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int pname, Pointer<Double>? params)>();
  return _glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
}

/// ```c
/// define glGetVideoCaptureStreamfvNV GLEW_GET_FUN(__glewGetVideoCaptureStreamfvNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOCAPTURESTREAMFVNVPROC __glewGetVideoCaptureStreamfvNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoCaptureStreamfvNV;
void glGetVideoCaptureStreamfvNV(int video_capture_slot, int stream, int pname, Pointer<Float>? params) {
  final _glGetVideoCaptureStreamfvNV = glad__glGetVideoCaptureStreamfvNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int pname, Pointer<Float>? params)>();
  return _glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
}

/// ```c
/// define glGetVideoCaptureStreamivNV GLEW_GET_FUN(__glewGetVideoCaptureStreamivNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOCAPTURESTREAMIVNVPROC __glewGetVideoCaptureStreamivNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoCaptureStreamivNV;
void glGetVideoCaptureStreamivNV(int video_capture_slot, int stream, int pname, Pointer<Int32>? params) {
  final _glGetVideoCaptureStreamivNV = glad__glGetVideoCaptureStreamivNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int pname, Pointer<Int32>? params)>();
  return _glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
}

/// ```c
/// define glGetVideoCaptureivNV GLEW_GET_FUN(__glewGetVideoCaptureivNV)
/// GLEW_FUN_EXPORT PFNGLGETVIDEOCAPTUREIVNVPROC __glewGetVideoCaptureivNV
/// typedef void (GLAPIENTRY * PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVideoCaptureivNV;
void glGetVideoCaptureivNV(int video_capture_slot, int pname, Pointer<Int32>? params) {
  final _glGetVideoCaptureivNV = glad__glGetVideoCaptureivNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int video_capture_slot, int pname, Pointer<Int32>? params)>();
  return _glGetVideoCaptureivNV(video_capture_slot, pname, params);
}

/// ```c
/// define glVideoCaptureNV GLEW_GET_FUN(__glewVideoCaptureNV)
/// GLEW_FUN_EXPORT PFNGLVIDEOCAPTURENVPROC __glewVideoCaptureNV
/// typedef GLenum (GLAPIENTRY * PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT *capture_time)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVideoCaptureNV;
int glVideoCaptureNV(int video_capture_slot, Pointer<Uint32>? sequence_num, Pointer<Uint64>? capture_time) {
  final _glVideoCaptureNV = glad__glVideoCaptureNV!
      .cast<NativeFunction<Uint32 Function(Uint32 video_capture_slot, Pointer<Uint32>? sequence_num, Pointer<Uint64>? capture_time)>>()
      .asFunction<int Function(int video_capture_slot, Pointer<Uint32>? sequence_num, Pointer<Uint64>? capture_time)>();
  return _glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
}

/// ```c
/// define glVideoCaptureStreamParameterdvNV GLEW_GET_FUN(__glewVideoCaptureStreamParameterdvNV)
/// GLEW_FUN_EXPORT PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC __glewVideoCaptureStreamParameterdvNV
/// typedef void (GLAPIENTRY * PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVideoCaptureStreamParameterdvNV;
void glVideoCaptureStreamParameterdvNV(int video_capture_slot, int stream, int pname, Pointer<Double>? params) {
  final _glVideoCaptureStreamParameterdvNV = glad__glVideoCaptureStreamParameterdvNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 pname, Pointer<Double>? params)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int pname, Pointer<Double>? params)>();
  return _glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
}

/// ```c
/// define glVideoCaptureStreamParameterfvNV GLEW_GET_FUN(__glewVideoCaptureStreamParameterfvNV)
/// GLEW_FUN_EXPORT PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC __glewVideoCaptureStreamParameterfvNV
/// typedef void (GLAPIENTRY * PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVideoCaptureStreamParameterfvNV;
void glVideoCaptureStreamParameterfvNV(int video_capture_slot, int stream, int pname, Pointer<Float>? params) {
  final _glVideoCaptureStreamParameterfvNV = glad__glVideoCaptureStreamParameterfvNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int pname, Pointer<Float>? params)>();
  return _glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
}

/// ```c
/// define glVideoCaptureStreamParameterivNV GLEW_GET_FUN(__glewVideoCaptureStreamParameterivNV)
/// GLEW_FUN_EXPORT PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC __glewVideoCaptureStreamParameterivNV
/// typedef void (GLAPIENTRY * PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVideoCaptureStreamParameterivNV;
void glVideoCaptureStreamParameterivNV(int video_capture_slot, int stream, int pname, Pointer<Int32>? params) {
  final _glVideoCaptureStreamParameterivNV = glad__glVideoCaptureStreamParameterivNV!
      .cast<NativeFunction<Void Function(Uint32 video_capture_slot, Uint32 stream, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int video_capture_slot, int stream, int pname, Pointer<Int32>? params)>();
  return _glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
}

/// -------------------------- GL_NV_viewport_array -------------------------
/// ```c
/// define glDepthRangeArrayfvNV GLEW_GET_FUN(__glewDepthRangeArrayfvNV)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEARRAYFVNVPROC __glewDepthRangeArrayfvNV
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEARRAYFVNVPROC) (GLuint first, GLsizei count, const GLfloat * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangeArrayfvNV;
void glDepthRangeArrayfvNV(int first, int count, Pointer<Float>? v) {
  final _glDepthRangeArrayfvNV = glad__glDepthRangeArrayfvNV!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int first, int count, Pointer<Float>? v)>();
  return _glDepthRangeArrayfvNV(first, count, v);
}

/// ```c
/// define glDepthRangeIndexedfNV GLEW_GET_FUN(__glewDepthRangeIndexedfNV)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEINDEXEDFNVPROC __glewDepthRangeIndexedfNV
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEINDEXEDFNVPROC) (GLuint index, GLfloat n, GLfloat f)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangeIndexedfNV;
void glDepthRangeIndexedfNV(int index, double n, double f) {
  final _glDepthRangeIndexedfNV = glad__glDepthRangeIndexedfNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float n, Float f)>>()
      .asFunction<void Function(int index, double n, double f)>();
  return _glDepthRangeIndexedfNV(index, n, f);
}

/// ```c
/// define glDisableiNV GLEW_GET_FUN(__glewDisableiNV)
/// GLEW_FUN_EXPORT PFNGLDISABLEINVPROC __glewDisableiNV
/// typedef void (GLAPIENTRY * PFNGLDISABLEINVPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableiNV;
void glDisableiNV(int target, int index) {
  final _glDisableiNV = glad__glDisableiNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glDisableiNV(target, index);
}

/// ```c
/// define glEnableiNV GLEW_GET_FUN(__glewEnableiNV)
/// GLEW_FUN_EXPORT PFNGLENABLEINVPROC __glewEnableiNV
/// typedef void (GLAPIENTRY * PFNGLENABLEINVPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableiNV;
void glEnableiNV(int target, int index) {
  final _glEnableiNV = glad__glEnableiNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index)>>()
      .asFunction<void Function(int target, int index)>();
  return _glEnableiNV(target, index);
}

/// ```c
/// define glGetFloati_vNV GLEW_GET_FUN(__glewGetFloati_vNV)
/// GLEW_FUN_EXPORT PFNGLGETFLOATI_VNVPROC __glewGetFloati_vNV
/// typedef void (GLAPIENTRY * PFNGLGETFLOATI_VNVPROC) (GLenum target, GLuint index, GLfloat* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFloati_vNV;
void glGetFloati_vNV(int target, int index, Pointer<Float>? data) {
  final _glGetFloati_vNV = glad__glGetFloati_vNV!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 index, Pointer<Float>? data)>>()
      .asFunction<void Function(int target, int index, Pointer<Float>? data)>();
  return _glGetFloati_vNV(target, index, data);
}

/// ```c
/// define glIsEnablediNV GLEW_GET_FUN(__glewIsEnablediNV)
/// GLEW_FUN_EXPORT PFNGLISENABLEDINVPROC __glewIsEnablediNV
/// typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDINVPROC) (GLenum target, GLuint index)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsEnablediNV;
int glIsEnablediNV(int target, int index) {
  final _glIsEnablediNV = glad__glIsEnablediNV!
      .cast<NativeFunction<Uint8 Function(Uint32 target, Uint32 index)>>()
      .asFunction<int Function(int target, int index)>();
  return _glIsEnablediNV(target, index);
}

/// ```c
/// define glScissorArrayvNV GLEW_GET_FUN(__glewScissorArrayvNV)
/// GLEW_FUN_EXPORT PFNGLSCISSORARRAYVNVPROC __glewScissorArrayvNV
/// typedef void (GLAPIENTRY * PFNGLSCISSORARRAYVNVPROC) (GLuint first, GLsizei count, const GLint * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScissorArrayvNV;
void glScissorArrayvNV(int first, int count, Pointer<Int32>? v) {
  final _glScissorArrayvNV = glad__glScissorArrayvNV!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Int32>? v)>>()
      .asFunction<void Function(int first, int count, Pointer<Int32>? v)>();
  return _glScissorArrayvNV(first, count, v);
}

/// ```c
/// define glScissorIndexedNV GLEW_GET_FUN(__glewScissorIndexedNV)
/// GLEW_FUN_EXPORT PFNGLSCISSORINDEXEDNVPROC __glewScissorIndexedNV
/// typedef void (GLAPIENTRY * PFNGLSCISSORINDEXEDNVPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScissorIndexedNV;
void glScissorIndexedNV(int index, int left, int bottom, int width, int height) {
  final _glScissorIndexedNV = glad__glScissorIndexedNV!
      .cast<NativeFunction<Void Function(Uint32 index, Int32 left, Int32 bottom, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int index, int left, int bottom, int width, int height)>();
  return _glScissorIndexedNV(index, left, bottom, width, height);
}

/// ```c
/// define glScissorIndexedvNV GLEW_GET_FUN(__glewScissorIndexedvNV)
/// GLEW_FUN_EXPORT PFNGLSCISSORINDEXEDVNVPROC __glewScissorIndexedvNV
/// typedef void (GLAPIENTRY * PFNGLSCISSORINDEXEDVNVPROC) (GLuint index, const GLint * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScissorIndexedvNV;
void glScissorIndexedvNV(int index, Pointer<Int32>? v) {
  final _glScissorIndexedvNV = glad__glScissorIndexedvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Int32>? v)>>()
      .asFunction<void Function(int index, Pointer<Int32>? v)>();
  return _glScissorIndexedvNV(index, v);
}

/// ```c
/// define glViewportArrayvNV GLEW_GET_FUN(__glewViewportArrayvNV)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTARRAYVNVPROC __glewViewportArrayvNV
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTARRAYVNVPROC) (GLuint first, GLsizei count, const GLfloat * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportArrayvNV;
void glViewportArrayvNV(int first, int count, Pointer<Float>? v) {
  final _glViewportArrayvNV = glad__glViewportArrayvNV!
      .cast<NativeFunction<Void Function(Uint32 first, Uint32 count, Pointer<Float>? v)>>()
      .asFunction<void Function(int first, int count, Pointer<Float>? v)>();
  return _glViewportArrayvNV(first, count, v);
}

/// ```c
/// define glViewportIndexedfNV GLEW_GET_FUN(__glewViewportIndexedfNV)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTINDEXEDFNVPROC __glewViewportIndexedfNV
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTINDEXEDFNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportIndexedfNV;
void glViewportIndexedfNV(int index, double x, double y, double w, double h) {
  final _glViewportIndexedfNV = glad__glViewportIndexedfNV!
      .cast<NativeFunction<Void Function(Uint32 index, Float x, Float y, Float w, Float h)>>()
      .asFunction<void Function(int index, double x, double y, double w, double h)>();
  return _glViewportIndexedfNV(index, x, y, w, h);
}

/// ```c
/// define glViewportIndexedfvNV GLEW_GET_FUN(__glewViewportIndexedfvNV)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTINDEXEDFVNVPROC __glewViewportIndexedfvNV
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTINDEXEDFVNVPROC) (GLuint index, const GLfloat * v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportIndexedfvNV;
void glViewportIndexedfvNV(int index, Pointer<Float>? v) {
  final _glViewportIndexedfvNV = glad__glViewportIndexedfvNV!
      .cast<NativeFunction<Void Function(Uint32 index, Pointer<Float>? v)>>()
      .asFunction<void Function(int index, Pointer<Float>? v)>();
  return _glViewportIndexedfvNV(index, v);
}

/// ------------------------- GL_NV_viewport_swizzle ------------------------
/// ```c
/// define glViewportSwizzleNV GLEW_GET_FUN(__glewViewportSwizzleNV)
/// GLEW_FUN_EXPORT PFNGLVIEWPORTSWIZZLENVPROC __glewViewportSwizzleNV
/// typedef void (GLAPIENTRY * PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glViewportSwizzleNV;
void glViewportSwizzleNV(int index, int swizzlex, int swizzley, int swizzlez, int swizzlew) {
  final _glViewportSwizzleNV = glad__glViewportSwizzleNV!
      .cast<NativeFunction<Void Function(Uint32 index, Uint32 swizzlex, Uint32 swizzley, Uint32 swizzlez, Uint32 swizzlew)>>()
      .asFunction<void Function(int index, int swizzlex, int swizzley, int swizzlez, int swizzlew)>();
  return _glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
}

/// ---------------------------- GL_OVR_multiview ---------------------------
/// ```c
/// define glFramebufferTextureMultiviewOVR GLEW_GET_FUN(__glewFramebufferTextureMultiviewOVR)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC __glewFramebufferTextureMultiviewOVR
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureMultiviewOVR;
void glFramebufferTextureMultiviewOVR(int target, int attachment, int texture, int level, int baseViewIndex, int numViews) {
  final _glFramebufferTextureMultiviewOVR = glad__glFramebufferTextureMultiviewOVR!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Int32 baseViewIndex, Uint32 numViews)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int baseViewIndex, int numViews)>();
  return _glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
}

/// ------------ GL_OVR_multiview_multisampled_render_to_texture ------------
/// ```c
/// define glFramebufferTextureMultisampleMultiviewOVR GLEW_GET_FUN(__glewFramebufferTextureMultisampleMultiviewOVR)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC __glewFramebufferTextureMultisampleMultiviewOVR
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferTextureMultisampleMultiviewOVR;
void glFramebufferTextureMultisampleMultiviewOVR(int target, int attachment, int texture, int level, int samples, int baseViewIndex, int numViews) {
  final _glFramebufferTextureMultisampleMultiviewOVR = glad__glFramebufferTextureMultisampleMultiviewOVR!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 attachment, Uint32 texture, Int32 level, Uint32 samples, Int32 baseViewIndex, Uint32 numViews)>>()
      .asFunction<void Function(int target, int attachment, int texture, int level, int samples, int baseViewIndex, int numViews)>();
  return _glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews);
}

/// --------------------------- GL_QCOM_alpha_test --------------------------
/// ```c
/// define glAlphaFuncQCOM GLEW_GET_FUN(__glewAlphaFuncQCOM)
/// GLEW_FUN_EXPORT PFNGLALPHAFUNCQCOMPROC __glewAlphaFuncQCOM
/// typedef void (GLAPIENTRY * PFNGLALPHAFUNCQCOMPROC) (GLenum func, GLclampf ref)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAlphaFuncQCOM;
void glAlphaFuncQCOM(int func, double ref) {
  final _glAlphaFuncQCOM = glad__glAlphaFuncQCOM!
      .cast<NativeFunction<Void Function(Uint32 func, Float ref)>>()
      .asFunction<void Function(int func, double ref)>();
  return _glAlphaFuncQCOM(func, ref);
}

/// ------------------------- GL_QCOM_driver_control ------------------------
/// ```c
/// define glDisableDriverControlQCOM GLEW_GET_FUN(__glewDisableDriverControlQCOM)
/// GLEW_FUN_EXPORT PFNGLDISABLEDRIVERCONTROLQCOMPROC __glewDisableDriverControlQCOM
/// typedef void (GLAPIENTRY * PFNGLDISABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDisableDriverControlQCOM;
void glDisableDriverControlQCOM(int driverControl) {
  final _glDisableDriverControlQCOM = glad__glDisableDriverControlQCOM!
      .cast<NativeFunction<Void Function(Uint32 driverControl)>>()
      .asFunction<void Function(int driverControl)>();
  return _glDisableDriverControlQCOM(driverControl);
}

/// ```c
/// define glEnableDriverControlQCOM GLEW_GET_FUN(__glewEnableDriverControlQCOM)
/// GLEW_FUN_EXPORT PFNGLENABLEDRIVERCONTROLQCOMPROC __glewEnableDriverControlQCOM
/// typedef void (GLAPIENTRY * PFNGLENABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEnableDriverControlQCOM;
void glEnableDriverControlQCOM(int driverControl) {
  final _glEnableDriverControlQCOM = glad__glEnableDriverControlQCOM!
      .cast<NativeFunction<Void Function(Uint32 driverControl)>>()
      .asFunction<void Function(int driverControl)>();
  return _glEnableDriverControlQCOM(driverControl);
}

/// ```c
/// define glGetDriverControlStringQCOM GLEW_GET_FUN(__glewGetDriverControlStringQCOM)
/// GLEW_FUN_EXPORT PFNGLGETDRIVERCONTROLSTRINGQCOMPROC __glewGetDriverControlStringQCOM
/// typedef void (GLAPIENTRY * PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) (GLuint driverControl, GLsizei bufSize, GLsizei* length, GLchar *driverControlString)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDriverControlStringQCOM;
void glGetDriverControlStringQCOM(int driverControl, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? driverControlString) {
  final _glGetDriverControlStringQCOM = glad__glGetDriverControlStringQCOM!
      .cast<NativeFunction<Void Function(Uint32 driverControl, Uint32 bufSize, Pointer<Uint32>? length, Pointer<Int8>? driverControlString)>>()
      .asFunction<void Function(int driverControl, int bufSize, Pointer<Uint32>? length, Pointer<Int8>? driverControlString)>();
  return _glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
}

/// ```c
/// define glGetDriverControlsQCOM GLEW_GET_FUN(__glewGetDriverControlsQCOM)
/// GLEW_FUN_EXPORT PFNGLGETDRIVERCONTROLSQCOMPROC __glewGetDriverControlsQCOM
/// typedef void (GLAPIENTRY * PFNGLGETDRIVERCONTROLSQCOMPROC) (GLint* num, GLsizei size, GLuint *driverControls)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDriverControlsQCOM;
void glGetDriverControlsQCOM(Pointer<Int32>? num, int size, Pointer<Uint32>? driverControls) {
  final _glGetDriverControlsQCOM = glad__glGetDriverControlsQCOM!
      .cast<NativeFunction<Void Function(Pointer<Int32>? num, Uint32 size, Pointer<Uint32>? driverControls)>>()
      .asFunction<void Function(Pointer<Int32>? num, int size, Pointer<Uint32>? driverControls)>();
  return _glGetDriverControlsQCOM(num, size, driverControls);
}

/// -------------------------- GL_QCOM_extended_get -------------------------
/// ```c
/// define glExtGetBufferPointervQCOM GLEW_GET_FUN(__glewExtGetBufferPointervQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETBUFFERPOINTERVQCOMPROC __glewExtGetBufferPointervQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETBUFFERPOINTERVQCOMPROC) (GLenum target, void** params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetBufferPointervQCOM;
void glExtGetBufferPointervQCOM(int target, Pointer<Pointer<Void>>? params) {
  final _glExtGetBufferPointervQCOM = glad__glExtGetBufferPointervQCOM!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Pointer<Void>>? params)>>()
      .asFunction<void Function(int target, Pointer<Pointer<Void>>? params)>();
  return _glExtGetBufferPointervQCOM(target, params);
}

/// ```c
/// define glExtGetBuffersQCOM GLEW_GET_FUN(__glewExtGetBuffersQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETBUFFERSQCOMPROC __glewExtGetBuffersQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETBUFFERSQCOMPROC) (GLuint* buffers, GLint maxBuffers, GLint* numBuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetBuffersQCOM;
void glExtGetBuffersQCOM(Pointer<Uint32>? buffers, int maxBuffers, Pointer<Int32>? numBuffers) {
  final _glExtGetBuffersQCOM = glad__glExtGetBuffersQCOM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? buffers, Int32 maxBuffers, Pointer<Int32>? numBuffers)>>()
      .asFunction<void Function(Pointer<Uint32>? buffers, int maxBuffers, Pointer<Int32>? numBuffers)>();
  return _glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
}

/// ```c
/// define glExtGetFramebuffersQCOM GLEW_GET_FUN(__glewExtGetFramebuffersQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETFRAMEBUFFERSQCOMPROC __glewExtGetFramebuffersQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETFRAMEBUFFERSQCOMPROC) (GLuint* framebuffers, GLint maxFramebuffers, GLint* numFramebuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetFramebuffersQCOM;
void glExtGetFramebuffersQCOM(Pointer<Uint32>? framebuffers, int maxFramebuffers, Pointer<Int32>? numFramebuffers) {
  final _glExtGetFramebuffersQCOM = glad__glExtGetFramebuffersQCOM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? framebuffers, Int32 maxFramebuffers, Pointer<Int32>? numFramebuffers)>>()
      .asFunction<void Function(Pointer<Uint32>? framebuffers, int maxFramebuffers, Pointer<Int32>? numFramebuffers)>();
  return _glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
}

/// ```c
/// define glExtGetRenderbuffersQCOM GLEW_GET_FUN(__glewExtGetRenderbuffersQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETRENDERBUFFERSQCOMPROC __glewExtGetRenderbuffersQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETRENDERBUFFERSQCOMPROC) (GLuint* renderbuffers, GLint maxRenderbuffers, GLint* numRenderbuffers)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetRenderbuffersQCOM;
void glExtGetRenderbuffersQCOM(Pointer<Uint32>? renderbuffers, int maxRenderbuffers, Pointer<Int32>? numRenderbuffers) {
  final _glExtGetRenderbuffersQCOM = glad__glExtGetRenderbuffersQCOM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? renderbuffers, Int32 maxRenderbuffers, Pointer<Int32>? numRenderbuffers)>>()
      .asFunction<void Function(Pointer<Uint32>? renderbuffers, int maxRenderbuffers, Pointer<Int32>? numRenderbuffers)>();
  return _glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
}

/// ```c
/// define glExtGetTexLevelParameterivQCOM GLEW_GET_FUN(__glewExtGetTexLevelParameterivQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC __glewExtGetTexLevelParameterivQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetTexLevelParameterivQCOM;
void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, Pointer<Int32>? params) {
  final _glExtGetTexLevelParameterivQCOM = glad__glExtGetTexLevelParameterivQCOM!
      .cast<NativeFunction<Void Function(Uint32 texture, Uint32 face, Int32 level, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int texture, int face, int level, int pname, Pointer<Int32>? params)>();
  return _glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params);
}

/// ```c
/// define glExtGetTexSubImageQCOM GLEW_GET_FUN(__glewExtGetTexSubImageQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETTEXSUBIMAGEQCOMPROC __glewExtGetTexSubImageQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETTEXSUBIMAGEQCOMPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetTexSubImageQCOM;
void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? texels) {
  final _glExtGetTexSubImageQCOM = glad__glExtGetTexSubImageQCOM!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 format, Uint32 type, Pointer<Void>? texels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Pointer<Void>? texels)>();
  return _glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}

/// ```c
/// define glExtGetTexturesQCOM GLEW_GET_FUN(__glewExtGetTexturesQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETTEXTURESQCOMPROC __glewExtGetTexturesQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETTEXTURESQCOMPROC) (GLuint* textures, GLint maxTextures, GLint* numTextures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetTexturesQCOM;
void glExtGetTexturesQCOM(Pointer<Uint32>? textures, int maxTextures, Pointer<Int32>? numTextures) {
  final _glExtGetTexturesQCOM = glad__glExtGetTexturesQCOM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? textures, Int32 maxTextures, Pointer<Int32>? numTextures)>>()
      .asFunction<void Function(Pointer<Uint32>? textures, int maxTextures, Pointer<Int32>? numTextures)>();
  return _glExtGetTexturesQCOM(textures, maxTextures, numTextures);
}

/// ```c
/// define glExtTexObjectStateOverrideiQCOM GLEW_GET_FUN(__glewExtTexObjectStateOverrideiQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC __glewExtTexObjectStateOverrideiQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) (GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtTexObjectStateOverrideiQCOM;
void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param) {
  final _glExtTexObjectStateOverrideiQCOM = glad__glExtTexObjectStateOverrideiQCOM!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glExtTexObjectStateOverrideiQCOM(target, pname, param);
}

/// ------------------------- GL_QCOM_extended_get2 -------------------------
/// ```c
/// define glExtGetProgramBinarySourceQCOM GLEW_GET_FUN(__glewExtGetProgramBinarySourceQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC __glewExtGetProgramBinarySourceQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) (GLuint program, GLenum shadertype, GLchar* source, GLint* length)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetProgramBinarySourceQCOM;
void glExtGetProgramBinarySourceQCOM(int program, int shadertype, Pointer<Int8>? source, Pointer<Int32>? length) {
  final _glExtGetProgramBinarySourceQCOM = glad__glExtGetProgramBinarySourceQCOM!
      .cast<NativeFunction<Void Function(Uint32 program, Uint32 shadertype, Pointer<Int8>? source, Pointer<Int32>? length)>>()
      .asFunction<void Function(int program, int shadertype, Pointer<Int8>? source, Pointer<Int32>? length)>();
  return _glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
}

/// ```c
/// define glExtGetProgramsQCOM GLEW_GET_FUN(__glewExtGetProgramsQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETPROGRAMSQCOMPROC __glewExtGetProgramsQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETPROGRAMSQCOMPROC) (GLuint* programs, GLint maxPrograms, GLint* numPrograms)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetProgramsQCOM;
void glExtGetProgramsQCOM(Pointer<Uint32>? programs, int maxPrograms, Pointer<Int32>? numPrograms) {
  final _glExtGetProgramsQCOM = glad__glExtGetProgramsQCOM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? programs, Int32 maxPrograms, Pointer<Int32>? numPrograms)>>()
      .asFunction<void Function(Pointer<Uint32>? programs, int maxPrograms, Pointer<Int32>? numPrograms)>();
  return _glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
}

/// ```c
/// define glExtGetShadersQCOM GLEW_GET_FUN(__glewExtGetShadersQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTGETSHADERSQCOMPROC __glewExtGetShadersQCOM
/// typedef void (GLAPIENTRY * PFNGLEXTGETSHADERSQCOMPROC) (GLuint* shaders, GLint maxShaders, GLint* numShaders)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtGetShadersQCOM;
void glExtGetShadersQCOM(Pointer<Uint32>? shaders, int maxShaders, Pointer<Int32>? numShaders) {
  final _glExtGetShadersQCOM = glad__glExtGetShadersQCOM!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? shaders, Int32 maxShaders, Pointer<Int32>? numShaders)>>()
      .asFunction<void Function(Pointer<Uint32>? shaders, int maxShaders, Pointer<Int32>? numShaders)>();
  return _glExtGetShadersQCOM(shaders, maxShaders, numShaders);
}

/// ```c
/// define glExtIsProgramBinaryQCOM GLEW_GET_FUN(__glewExtIsProgramBinaryQCOM)
/// GLEW_FUN_EXPORT PFNGLEXTISPROGRAMBINARYQCOMPROC __glewExtIsProgramBinaryQCOM
/// typedef GLboolean (GLAPIENTRY * PFNGLEXTISPROGRAMBINARYQCOMPROC) (GLuint program)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glExtIsProgramBinaryQCOM;
int glExtIsProgramBinaryQCOM(int program) {
  final _glExtIsProgramBinaryQCOM = glad__glExtIsProgramBinaryQCOM!
      .cast<NativeFunction<Uint8 Function(Uint32 program)>>()
      .asFunction<int Function(int program)>();
  return _glExtIsProgramBinaryQCOM(program);
}

/// ---------------------- GL_QCOM_framebuffer_foveated ---------------------
/// ```c
/// define glFramebufferFoveationConfigQCOM GLEW_GET_FUN(__glewFramebufferFoveationConfigQCOM)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC __glewFramebufferFoveationConfigQCOM
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC) (GLuint fbo, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint* providedFeatures)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferFoveationConfigQCOM;
void glFramebufferFoveationConfigQCOM(int fbo, int numLayers, int focalPointsPerLayer, int requestedFeatures, Pointer<Uint32>? providedFeatures) {
  final _glFramebufferFoveationConfigQCOM = glad__glFramebufferFoveationConfigQCOM!
      .cast<NativeFunction<Void Function(Uint32 fbo, Uint32 numLayers, Uint32 focalPointsPerLayer, Uint32 requestedFeatures, Pointer<Uint32>? providedFeatures)>>()
      .asFunction<void Function(int fbo, int numLayers, int focalPointsPerLayer, int requestedFeatures, Pointer<Uint32>? providedFeatures)>();
  return _glFramebufferFoveationConfigQCOM(fbo, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
}

/// ```c
/// define glFramebufferFoveationParametersQCOM GLEW_GET_FUN(__glewFramebufferFoveationParametersQCOM)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC __glewFramebufferFoveationParametersQCOM
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC) (GLuint fbo, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferFoveationParametersQCOM;
void glFramebufferFoveationParametersQCOM(int fbo, int layer, int focalPoint, double focalX, double focalY, double gainX, double gainY, double foveaArea) {
  final _glFramebufferFoveationParametersQCOM = glad__glFramebufferFoveationParametersQCOM!
      .cast<NativeFunction<Void Function(Uint32 fbo, Uint32 layer, Uint32 focalPoint, Float focalX, Float focalY, Float gainX, Float gainY, Float foveaArea)>>()
      .asFunction<void Function(int fbo, int layer, int focalPoint, double focalX, double focalY, double gainX, double gainY, double foveaArea)>();
  return _glFramebufferFoveationParametersQCOM(fbo, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
}

/// -------------- GL_QCOM_shader_framebuffer_fetch_noncoherent -------------
/// ```c
/// define glFramebufferFetchBarrierQCOM GLEW_GET_FUN(__glewFramebufferFetchBarrierQCOM)
/// GLEW_FUN_EXPORT PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC __glewFramebufferFetchBarrierQCOM
/// typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFramebufferFetchBarrierQCOM;
void glFramebufferFetchBarrierQCOM() {
  final _glFramebufferFetchBarrierQCOM = glad__glFramebufferFetchBarrierQCOM!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glFramebufferFetchBarrierQCOM();
}

/// ------------------------ GL_QCOM_tiled_rendering ------------------------
/// ```c
/// define glEndTilingQCOM GLEW_GET_FUN(__glewEndTilingQCOM)
/// GLEW_FUN_EXPORT PFNGLENDTILINGQCOMPROC __glewEndTilingQCOM
/// typedef void (GLAPIENTRY * PFNGLENDTILINGQCOMPROC) (GLbitfield preserveMask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glEndTilingQCOM;
void glEndTilingQCOM(int preserveMask) {
  final _glEndTilingQCOM = glad__glEndTilingQCOM!
      .cast<NativeFunction<Void Function(Uint32 preserveMask)>>()
      .asFunction<void Function(int preserveMask)>();
  return _glEndTilingQCOM(preserveMask);
}

/// ```c
/// define glStartTilingQCOM GLEW_GET_FUN(__glewStartTilingQCOM)
/// GLEW_FUN_EXPORT PFNGLSTARTTILINGQCOMPROC __glewStartTilingQCOM
/// typedef void (GLAPIENTRY * PFNGLSTARTTILINGQCOMPROC) (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glStartTilingQCOM;
void glStartTilingQCOM(int x, int y, int width, int height, int preserveMask) {
  final _glStartTilingQCOM = glad__glStartTilingQCOM!
      .cast<NativeFunction<Void Function(Uint32 x, Uint32 y, Uint32 width, Uint32 height, Uint32 preserveMask)>>()
      .asFunction<void Function(int x, int y, int width, int height, int preserveMask)>();
  return _glStartTilingQCOM(x, y, width, height, preserveMask);
}

/// ```c
/// define glAlphaFuncx GLEW_GET_FUN(__glewAlphaFuncx)
/// GLEW_FUN_EXPORT PFNGLALPHAFUNCXPROC __glewAlphaFuncx
/// typedef void (GLAPIENTRY * PFNGLALPHAFUNCXPROC) (GLenum func, GLclampx ref)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAlphaFuncx;
void glAlphaFuncx(int func, int ref) {
  final _glAlphaFuncx = glad__glAlphaFuncx!
      .cast<NativeFunction<Void Function(Uint32 func, Int32 ref)>>()
      .asFunction<void Function(int func, int ref)>();
  return _glAlphaFuncx(func, ref);
}

/// ```c
/// define glClearColorx GLEW_GET_FUN(__glewClearColorx)
/// GLEW_FUN_EXPORT PFNGLCLEARCOLORXPROC __glewClearColorx
/// typedef void (GLAPIENTRY * PFNGLCLEARCOLORXPROC) (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearColorx;
void glClearColorx(int red, int green, int blue, int alpha) {
  final _glClearColorx = glad__glClearColorx!
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)>>()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return _glClearColorx(red, green, blue, alpha);
}

/// ```c
/// define glClearDepthx GLEW_GET_FUN(__glewClearDepthx)
/// GLEW_FUN_EXPORT PFNGLCLEARDEPTHXPROC __glewClearDepthx
/// typedef void (GLAPIENTRY * PFNGLCLEARDEPTHXPROC) (GLclampx depth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClearDepthx;
void glClearDepthx(int depth) {
  final _glClearDepthx = glad__glClearDepthx!
      .cast<NativeFunction<Void Function(Int32 depth)>>()
      .asFunction<void Function(int depth)>();
  return _glClearDepthx(depth);
}

/// ```c
/// define glColor4x GLEW_GET_FUN(__glewColor4x)
/// GLEW_FUN_EXPORT PFNGLCOLOR4XPROC __glewColor4x
/// typedef void (GLAPIENTRY * PFNGLCOLOR4XPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4x;
void glColor4x(int red, int green, int blue, int alpha) {
  final _glColor4x = glad__glColor4x!
      .cast<NativeFunction<Void Function(Int32 red, Int32 green, Int32 blue, Int32 alpha)>>()
      .asFunction<void Function(int red, int green, int blue, int alpha)>();
  return _glColor4x(red, green, blue, alpha);
}

/// ```c
/// define glDepthRangex GLEW_GET_FUN(__glewDepthRangex)
/// GLEW_FUN_EXPORT PFNGLDEPTHRANGEXPROC __glewDepthRangex
/// typedef void (GLAPIENTRY * PFNGLDEPTHRANGEXPROC) (GLclampx zNear, GLclampx zFar)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDepthRangex;
void glDepthRangex(int zNear, int zFar) {
  final _glDepthRangex = glad__glDepthRangex!
      .cast<NativeFunction<Void Function(Int32 zNear, Int32 zFar)>>()
      .asFunction<void Function(int zNear, int zFar)>();
  return _glDepthRangex(zNear, zFar);
}

/// ```c
/// define glFogx GLEW_GET_FUN(__glewFogx)
/// GLEW_FUN_EXPORT PFNGLFOGXPROC __glewFogx
/// typedef void (GLAPIENTRY * PFNGLFOGXPROC) (GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogx;
void glFogx(int pname, int param) {
  final _glFogx = glad__glFogx!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glFogx(pname, param);
}

/// ```c
/// define glFogxv GLEW_GET_FUN(__glewFogxv)
/// GLEW_FUN_EXPORT PFNGLFOGXVPROC __glewFogxv
/// typedef void (GLAPIENTRY * PFNGLFOGXVPROC) (GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogxv;
void glFogxv(int pname, Pointer<Int32>? params) {
  final _glFogxv = glad__glFogxv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glFogxv(pname, params);
}

/// ```c
/// define glFrustumf GLEW_GET_FUN(__glewFrustumf)
/// GLEW_FUN_EXPORT PFNGLFRUSTUMFPROC __glewFrustumf
/// typedef void (GLAPIENTRY * PFNGLFRUSTUMFPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFrustumf;
void glFrustumf(double left, double right, double bottom, double top, double zNear, double zFar) {
  final _glFrustumf = glad__glFrustumf!
      .cast<NativeFunction<Void Function(Float left, Float right, Float bottom, Float top, Float zNear, Float zFar)>>()
      .asFunction<void Function(double left, double right, double bottom, double top, double zNear, double zFar)>();
  return _glFrustumf(left, right, bottom, top, zNear, zFar);
}

/// ```c
/// define glFrustumx GLEW_GET_FUN(__glewFrustumx)
/// GLEW_FUN_EXPORT PFNGLFRUSTUMXPROC __glewFrustumx
/// typedef void (GLAPIENTRY * PFNGLFRUSTUMXPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFrustumx;
void glFrustumx(int left, int right, int bottom, int top, int zNear, int zFar) {
  final _glFrustumx = glad__glFrustumx!
      .cast<NativeFunction<Void Function(Int32 left, Int32 right, Int32 bottom, Int32 top, Int32 zNear, Int32 zFar)>>()
      .asFunction<void Function(int left, int right, int bottom, int top, int zNear, int zFar)>();
  return _glFrustumx(left, right, bottom, top, zNear, zFar);
}

/// ```c
/// define glLightModelx GLEW_GET_FUN(__glewLightModelx)
/// GLEW_FUN_EXPORT PFNGLLIGHTMODELXPROC __glewLightModelx
/// typedef void (GLAPIENTRY * PFNGLLIGHTMODELXPROC) (GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLightModelx;
void glLightModelx(int pname, int param) {
  final _glLightModelx = glad__glLightModelx!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glLightModelx(pname, param);
}

/// ```c
/// define glLightModelxv GLEW_GET_FUN(__glewLightModelxv)
/// GLEW_FUN_EXPORT PFNGLLIGHTMODELXVPROC __glewLightModelxv
/// typedef void (GLAPIENTRY * PFNGLLIGHTMODELXVPROC) (GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLightModelxv;
void glLightModelxv(int pname, Pointer<Int32>? params) {
  final _glLightModelxv = glad__glLightModelxv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glLightModelxv(pname, params);
}

/// ```c
/// define glLightx GLEW_GET_FUN(__glewLightx)
/// GLEW_FUN_EXPORT PFNGLLIGHTXPROC __glewLightx
/// typedef void (GLAPIENTRY * PFNGLLIGHTXPROC) (GLenum light, GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLightx;
void glLightx(int light, int pname, int param) {
  final _glLightx = glad__glLightx!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int light, int pname, int param)>();
  return _glLightx(light, pname, param);
}

/// ```c
/// define glLightxv GLEW_GET_FUN(__glewLightxv)
/// GLEW_FUN_EXPORT PFNGLLIGHTXVPROC __glewLightxv
/// typedef void (GLAPIENTRY * PFNGLLIGHTXVPROC) (GLenum light, GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLightxv;
void glLightxv(int light, int pname, Pointer<Int32>? params) {
  final _glLightxv = glad__glLightxv!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Int32>? params)>();
  return _glLightxv(light, pname, params);
}

/// ```c
/// define glLineWidthx GLEW_GET_FUN(__glewLineWidthx)
/// GLEW_FUN_EXPORT PFNGLLINEWIDTHXPROC __glewLineWidthx
/// typedef void (GLAPIENTRY * PFNGLLINEWIDTHXPROC) (GLfixed width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLineWidthx;
void glLineWidthx(int width) {
  final _glLineWidthx = glad__glLineWidthx!
      .cast<NativeFunction<Void Function(Int32 width)>>()
      .asFunction<void Function(int width)>();
  return _glLineWidthx(width);
}

/// ```c
/// define glLoadMatrixx GLEW_GET_FUN(__glewLoadMatrixx)
/// GLEW_FUN_EXPORT PFNGLLOADMATRIXXPROC __glewLoadMatrixx
/// typedef void (GLAPIENTRY * PFNGLLOADMATRIXXPROC) (const GLfixed* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadMatrixx;
void glLoadMatrixx(Pointer<Int32>? m) {
  final _glLoadMatrixx = glad__glLoadMatrixx!
      .cast<NativeFunction<Void Function(Pointer<Int32>? m)>>()
      .asFunction<void Function(Pointer<Int32>? m)>();
  return _glLoadMatrixx(m);
}

/// ```c
/// define glMaterialx GLEW_GET_FUN(__glewMaterialx)
/// GLEW_FUN_EXPORT PFNGLMATERIALXPROC __glewMaterialx
/// typedef void (GLAPIENTRY * PFNGLMATERIALXPROC) (GLenum face, GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMaterialx;
void glMaterialx(int face, int pname, int param) {
  final _glMaterialx = glad__glMaterialx!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int face, int pname, int param)>();
  return _glMaterialx(face, pname, param);
}

/// ```c
/// define glMaterialxv GLEW_GET_FUN(__glewMaterialxv)
/// GLEW_FUN_EXPORT PFNGLMATERIALXVPROC __glewMaterialxv
/// typedef void (GLAPIENTRY * PFNGLMATERIALXVPROC) (GLenum face, GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMaterialxv;
void glMaterialxv(int face, int pname, Pointer<Int32>? params) {
  final _glMaterialxv = glad__glMaterialxv!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? params)>();
  return _glMaterialxv(face, pname, params);
}

/// ```c
/// define glMultMatrixx GLEW_GET_FUN(__glewMultMatrixx)
/// GLEW_FUN_EXPORT PFNGLMULTMATRIXXPROC __glewMultMatrixx
/// typedef void (GLAPIENTRY * PFNGLMULTMATRIXXPROC) (const GLfixed* m)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultMatrixx;
void glMultMatrixx(Pointer<Int32>? m) {
  final _glMultMatrixx = glad__glMultMatrixx!
      .cast<NativeFunction<Void Function(Pointer<Int32>? m)>>()
      .asFunction<void Function(Pointer<Int32>? m)>();
  return _glMultMatrixx(m);
}

/// ```c
/// define glMultiTexCoord4x GLEW_GET_FUN(__glewMultiTexCoord4x)
/// GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4XPROC __glewMultiTexCoord4x
/// typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4XPROC) (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultiTexCoord4x;
void glMultiTexCoord4x(int target, int s, int t, int r, int q) {
  final _glMultiTexCoord4x = glad__glMultiTexCoord4x!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 s, Int32 t, Int32 r, Int32 q)>>()
      .asFunction<void Function(int target, int s, int t, int r, int q)>();
  return _glMultiTexCoord4x(target, s, t, r, q);
}

/// ```c
/// define glNormal3x GLEW_GET_FUN(__glewNormal3x)
/// GLEW_FUN_EXPORT PFNGLNORMAL3XPROC __glewNormal3x
/// typedef void (GLAPIENTRY * PFNGLNORMAL3XPROC) (GLfixed nx, GLfixed ny, GLfixed nz)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormal3x;
void glNormal3x(int nx, int ny, int nz) {
  final _glNormal3x = glad__glNormal3x!
      .cast<NativeFunction<Void Function(Int32 nx, Int32 ny, Int32 nz)>>()
      .asFunction<void Function(int nx, int ny, int nz)>();
  return _glNormal3x(nx, ny, nz);
}

/// ```c
/// define glOrthof GLEW_GET_FUN(__glewOrthof)
/// GLEW_FUN_EXPORT PFNGLORTHOFPROC __glewOrthof
/// typedef void (GLAPIENTRY * PFNGLORTHOFPROC) (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glOrthof;
void glOrthof(double left, double right, double bottom, double top, double zNear, double zFar) {
  final _glOrthof = glad__glOrthof!
      .cast<NativeFunction<Void Function(Float left, Float right, Float bottom, Float top, Float zNear, Float zFar)>>()
      .asFunction<void Function(double left, double right, double bottom, double top, double zNear, double zFar)>();
  return _glOrthof(left, right, bottom, top, zNear, zFar);
}

/// ```c
/// define glOrthox GLEW_GET_FUN(__glewOrthox)
/// GLEW_FUN_EXPORT PFNGLORTHOXPROC __glewOrthox
/// typedef void (GLAPIENTRY * PFNGLORTHOXPROC) (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glOrthox;
void glOrthox(int left, int right, int bottom, int top, int zNear, int zFar) {
  final _glOrthox = glad__glOrthox!
      .cast<NativeFunction<Void Function(Int32 left, Int32 right, Int32 bottom, Int32 top, Int32 zNear, Int32 zFar)>>()
      .asFunction<void Function(int left, int right, int bottom, int top, int zNear, int zFar)>();
  return _glOrthox(left, right, bottom, top, zNear, zFar);
}

/// ```c
/// define glPointSizex GLEW_GET_FUN(__glewPointSizex)
/// GLEW_FUN_EXPORT PFNGLPOINTSIZEXPROC __glewPointSizex
/// typedef void (GLAPIENTRY * PFNGLPOINTSIZEXPROC) (GLfixed size)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointSizex;
void glPointSizex(int size) {
  final _glPointSizex = glad__glPointSizex!
      .cast<NativeFunction<Void Function(Int32 size)>>()
      .asFunction<void Function(int size)>();
  return _glPointSizex(size);
}

/// ```c
/// define glPolygonOffsetx GLEW_GET_FUN(__glewPolygonOffsetx)
/// GLEW_FUN_EXPORT PFNGLPOLYGONOFFSETXPROC __glewPolygonOffsetx
/// typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETXPROC) (GLfixed factor, GLfixed units)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPolygonOffsetx;
void glPolygonOffsetx(int factor, int units) {
  final _glPolygonOffsetx = glad__glPolygonOffsetx!
      .cast<NativeFunction<Void Function(Int32 factor, Int32 units)>>()
      .asFunction<void Function(int factor, int units)>();
  return _glPolygonOffsetx(factor, units);
}

/// ```c
/// define glRotatex GLEW_GET_FUN(__glewRotatex)
/// GLEW_FUN_EXPORT PFNGLROTATEXPROC __glewRotatex
/// typedef void (GLAPIENTRY * PFNGLROTATEXPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glRotatex;
void glRotatex(int angle, int x, int y, int z) {
  final _glRotatex = glad__glRotatex!
      .cast<NativeFunction<Void Function(Int32 angle, Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int angle, int x, int y, int z)>();
  return _glRotatex(angle, x, y, z);
}

/// ```c
/// define glSampleCoveragex GLEW_GET_FUN(__glewSampleCoveragex)
/// GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEXPROC __glewSampleCoveragex
/// typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEXPROC) (GLclampx value, GLboolean invert)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleCoveragex;
void glSampleCoveragex(int value, int invert) {
  final _glSampleCoveragex = glad__glSampleCoveragex!
      .cast<NativeFunction<Void Function(Int32 value, Uint8 invert)>>()
      .asFunction<void Function(int value, int invert)>();
  return _glSampleCoveragex(value, invert);
}

/// ```c
/// define glScalex GLEW_GET_FUN(__glewScalex)
/// GLEW_FUN_EXPORT PFNGLSCALEXPROC __glewScalex
/// typedef void (GLAPIENTRY * PFNGLSCALEXPROC) (GLfixed x, GLfixed y, GLfixed z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glScalex;
void glScalex(int x, int y, int z) {
  final _glScalex = glad__glScalex!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glScalex(x, y, z);
}

/// ```c
/// define glTexEnvx GLEW_GET_FUN(__glewTexEnvx)
/// GLEW_FUN_EXPORT PFNGLTEXENVXPROC __glewTexEnvx
/// typedef void (GLAPIENTRY * PFNGLTEXENVXPROC) (GLenum target, GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexEnvx;
void glTexEnvx(int target, int pname, int param) {
  final _glTexEnvx = glad__glTexEnvx!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glTexEnvx(target, pname, param);
}

/// ```c
/// define glTexEnvxv GLEW_GET_FUN(__glewTexEnvxv)
/// GLEW_FUN_EXPORT PFNGLTEXENVXVPROC __glewTexEnvxv
/// typedef void (GLAPIENTRY * PFNGLTEXENVXVPROC) (GLenum target, GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexEnvxv;
void glTexEnvxv(int target, int pname, Pointer<Int32>? params) {
  final _glTexEnvxv = glad__glTexEnvxv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glTexEnvxv(target, pname, params);
}

/// ```c
/// define glTexParameterx GLEW_GET_FUN(__glewTexParameterx)
/// GLEW_FUN_EXPORT PFNGLTEXPARAMETERXPROC __glewTexParameterx
/// typedef void (GLAPIENTRY * PFNGLTEXPARAMETERXPROC) (GLenum target, GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexParameterx;
void glTexParameterx(int target, int pname, int param) {
  final _glTexParameterx = glad__glTexParameterx!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glTexParameterx(target, pname, param);
}

/// ```c
/// define glTranslatex GLEW_GET_FUN(__glewTranslatex)
/// GLEW_FUN_EXPORT PFNGLTRANSLATEXPROC __glewTranslatex
/// typedef void (GLAPIENTRY * PFNGLTRANSLATEXPROC) (GLfixed x, GLfixed y, GLfixed z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTranslatex;
void glTranslatex(int x, int y, int z) {
  final _glTranslatex = glad__glTranslatex!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Int32 z)>>()
      .asFunction<void Function(int x, int y, int z)>();
  return _glTranslatex(x, y, z);
}

/// ---------------------- GL_REGAL_ES1_1_compatibility ---------------------
/// ```c
/// define glClipPlanef GLEW_GET_FUN(__glewClipPlanef)
/// GLEW_FUN_EXPORT PFNGLCLIPPLANEFPROC __glewClipPlanef
/// typedef void (GLAPIENTRY * PFNGLCLIPPLANEFPROC) (GLenum plane, const GLfloat* equation)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClipPlanef;
void glClipPlanef(int plane, Pointer<Float>? equation) {
  final _glClipPlanef = glad__glClipPlanef!
      .cast<NativeFunction<Void Function(Uint32 plane, Pointer<Float>? equation)>>()
      .asFunction<void Function(int plane, Pointer<Float>? equation)>();
  return _glClipPlanef(plane, equation);
}

/// ```c
/// define glClipPlanex GLEW_GET_FUN(__glewClipPlanex)
/// GLEW_FUN_EXPORT PFNGLCLIPPLANEXPROC __glewClipPlanex
/// typedef void (GLAPIENTRY * PFNGLCLIPPLANEXPROC) (GLenum plane, const GLfixed* equation)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glClipPlanex;
void glClipPlanex(int plane, Pointer<Int32>? equation) {
  final _glClipPlanex = glad__glClipPlanex!
      .cast<NativeFunction<Void Function(Uint32 plane, Pointer<Int32>? equation)>>()
      .asFunction<void Function(int plane, Pointer<Int32>? equation)>();
  return _glClipPlanex(plane, equation);
}

/// ```c
/// define glGetClipPlanef GLEW_GET_FUN(__glewGetClipPlanef)
/// GLEW_FUN_EXPORT PFNGLGETCLIPPLANEFPROC __glewGetClipPlanef
/// typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEFPROC) (GLenum pname, GLfloat eqn[4])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetClipPlanef;
void glGetClipPlanef(int pname, double eqn) {
  final _glGetClipPlanef = glad__glGetClipPlanef!
      .cast<NativeFunction<Void Function(Uint32 pname, Float eqn)>>()
      .asFunction<void Function(int pname, double eqn)>();
  return _glGetClipPlanef(pname, eqn);
}

/// ```c
/// define glGetClipPlanex GLEW_GET_FUN(__glewGetClipPlanex)
/// GLEW_FUN_EXPORT PFNGLGETCLIPPLANEXPROC __glewGetClipPlanex
/// typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEXPROC) (GLenum pname, GLfixed eqn[4])
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetClipPlanex;
void glGetClipPlanex(int pname, int eqn) {
  final _glGetClipPlanex = glad__glGetClipPlanex!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 eqn)>>()
      .asFunction<void Function(int pname, int eqn)>();
  return _glGetClipPlanex(pname, eqn);
}

/// ```c
/// define glGetFixedv GLEW_GET_FUN(__glewGetFixedv)
/// GLEW_FUN_EXPORT PFNGLGETFIXEDVPROC __glewGetFixedv
/// typedef void (GLAPIENTRY * PFNGLGETFIXEDVPROC) (GLenum pname, GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFixedv;
void glGetFixedv(int pname, Pointer<Int32>? params) {
  final _glGetFixedv = glad__glGetFixedv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glGetFixedv(pname, params);
}

/// ```c
/// define glGetLightxv GLEW_GET_FUN(__glewGetLightxv)
/// GLEW_FUN_EXPORT PFNGLGETLIGHTXVPROC __glewGetLightxv
/// typedef void (GLAPIENTRY * PFNGLGETLIGHTXVPROC) (GLenum light, GLenum pname, GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetLightxv;
void glGetLightxv(int light, int pname, Pointer<Int32>? params) {
  final _glGetLightxv = glad__glGetLightxv!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Int32>? params)>();
  return _glGetLightxv(light, pname, params);
}

/// ```c
/// define glGetMaterialxv GLEW_GET_FUN(__glewGetMaterialxv)
/// GLEW_FUN_EXPORT PFNGLGETMATERIALXVPROC __glewGetMaterialxv
/// typedef void (GLAPIENTRY * PFNGLGETMATERIALXVPROC) (GLenum face, GLenum pname, GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMaterialxv;
void glGetMaterialxv(int face, int pname, Pointer<Int32>? params) {
  final _glGetMaterialxv = glad__glGetMaterialxv!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? params)>();
  return _glGetMaterialxv(face, pname, params);
}

/// ```c
/// define glGetTexEnvxv GLEW_GET_FUN(__glewGetTexEnvxv)
/// GLEW_FUN_EXPORT PFNGLGETTEXENVXVPROC __glewGetTexEnvxv
/// typedef void (GLAPIENTRY * PFNGLGETTEXENVXVPROC) (GLenum env, GLenum pname, GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexEnvxv;
void glGetTexEnvxv(int env, int pname, Pointer<Int32>? params) {
  final _glGetTexEnvxv = glad__glGetTexEnvxv!
      .cast<NativeFunction<Void Function(Uint32 env, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int env, int pname, Pointer<Int32>? params)>();
  return _glGetTexEnvxv(env, pname, params);
}

/// ```c
/// define glGetTexParameterxv GLEW_GET_FUN(__glewGetTexParameterxv)
/// GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERXVPROC __glewGetTexParameterxv
/// typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERXVPROC) (GLenum target, GLenum pname, GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexParameterxv;
void glGetTexParameterxv(int target, int pname, Pointer<Int32>? params) {
  final _glGetTexParameterxv = glad__glGetTexParameterxv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetTexParameterxv(target, pname, params);
}

/// ```c
/// define glPointParameterx GLEW_GET_FUN(__glewPointParameterx)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERXPROC __glewPointParameterx
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERXPROC) (GLenum pname, GLfixed param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterx;
void glPointParameterx(int pname, int param) {
  final _glPointParameterx = glad__glPointParameterx!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glPointParameterx(pname, param);
}

/// ```c
/// define glPointParameterxv GLEW_GET_FUN(__glewPointParameterxv)
/// GLEW_FUN_EXPORT PFNGLPOINTPARAMETERXVPROC __glewPointParameterxv
/// typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERXVPROC) (GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointParameterxv;
void glPointParameterxv(int pname, Pointer<Int32>? params) {
  final _glPointParameterxv = glad__glPointParameterxv!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glPointParameterxv(pname, params);
}

/// ```c
/// define glPointSizePointerOES GLEW_GET_FUN(__glewPointSizePointerOES)
/// GLEW_FUN_EXPORT PFNGLPOINTSIZEPOINTEROESPROC __glewPointSizePointerOES
/// typedef void (GLAPIENTRY * PFNGLPOINTSIZEPOINTEROESPROC) (GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPointSizePointerOES;
void glPointSizePointerOES(int type, int stride, Pointer<Void>? pointer) {
  final _glPointSizePointerOES = glad__glPointSizePointerOES!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, Pointer<Void>? pointer)>();
  return _glPointSizePointerOES(type, stride, pointer);
}

/// ```c
/// define glTexParameterxv GLEW_GET_FUN(__glewTexParameterxv)
/// GLEW_FUN_EXPORT PFNGLTEXPARAMETERXVPROC __glewTexParameterxv
/// typedef void (GLAPIENTRY * PFNGLTEXPARAMETERXVPROC) (GLenum target, GLenum pname, const GLfixed* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexParameterxv;
void glTexParameterxv(int target, int pname, Pointer<Int32>? params) {
  final _glTexParameterxv = glad__glTexParameterxv!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glTexParameterxv(target, pname, params);
}

/// ------------------------- GL_REGAL_error_string -------------------------
/// ```c
/// define glErrorStringREGAL GLEW_GET_FUN(__glewErrorStringREGAL)
/// GLEW_FUN_EXPORT PFNGLERRORSTRINGREGALPROC __glewErrorStringREGAL
/// typedef const GLchar* (GLAPIENTRY * PFNGLERRORSTRINGREGALPROC) (GLenum error)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glErrorStringREGAL;
String glErrorStringREGAL(int error) {
  final _glErrorStringREGAL = glad__glErrorStringREGAL!
      .cast<NativeFunction<Pointer<Utf8>? Function(Uint32 error)>>()
      .asFunction<Pointer<Utf8>? Function(int error)>();
  return _glErrorStringREGAL(error)!.toDartString();
}

/// ------------------------ GL_REGAL_extension_query -----------------------
/// ```c
/// define glGetExtensionREGAL GLEW_GET_FUN(__glewGetExtensionREGAL)
/// GLEW_FUN_EXPORT PFNGLGETEXTENSIONREGALPROC __glewGetExtensionREGAL
/// typedef GLboolean (GLAPIENTRY * PFNGLGETEXTENSIONREGALPROC) (const GLchar* ext)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetExtensionREGAL;
int glGetExtensionREGAL(String ext) {
  final _glGetExtensionREGAL = glad__glGetExtensionREGAL!
      .cast<NativeFunction<Uint8 Function(Pointer<Utf8>? ext)>>()
      .asFunction<int Function(Pointer<Utf8>? ext)>();
  final _extPointer = ext.toNativeUtf8();
  final _result = _glGetExtensionREGAL(_extPointer);
  calloc.free(_extPointer);
  return _result;
}

/// ```c
/// define glIsSupportedREGAL GLEW_GET_FUN(__glewIsSupportedREGAL)
/// GLEW_FUN_EXPORT PFNGLISSUPPORTEDREGALPROC __glewIsSupportedREGAL
/// typedef GLboolean (GLAPIENTRY * PFNGLISSUPPORTEDREGALPROC) (const GLchar* ext)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsSupportedREGAL;
int glIsSupportedREGAL(String ext) {
  final _glIsSupportedREGAL = glad__glIsSupportedREGAL!
      .cast<NativeFunction<Uint8 Function(Pointer<Utf8>? ext)>>()
      .asFunction<int Function(Pointer<Utf8>? ext)>();
  final _extPointer = ext.toNativeUtf8();
  final _result = _glIsSupportedREGAL(_extPointer);
  calloc.free(_extPointer);
  return _result;
}

/// ```c
/// define glLogMessageCallbackREGAL GLEW_GET_FUN(__glewLogMessageCallbackREGAL)
/// GLEW_FUN_EXPORT PFNGLLOGMESSAGECALLBACKREGALPROC __glewLogMessageCallbackREGAL
/// typedef void (GLAPIENTRY * PFNGLLOGMESSAGECALLBACKREGALPROC) (GLLOGPROCREGAL callback)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLogMessageCallbackREGAL;
void glLogMessageCallbackREGAL(Pointer<Void>? callback) {
  final _glLogMessageCallbackREGAL = glad__glLogMessageCallbackREGAL!
      .cast<NativeFunction<Void Function(Pointer<Void>? callback)>>()
      .asFunction<void Function(Pointer<Void>? callback)>();
  return _glLogMessageCallbackREGAL(callback);
}

/// ------------------------- GL_REGAL_proc_address -------------------------
/// ```c
/// define glGetProcAddressREGAL GLEW_GET_FUN(__glewGetProcAddressREGAL)
/// GLEW_FUN_EXPORT PFNGLGETPROCADDRESSREGALPROC __glewGetProcAddressREGAL
/// typedef void * (GLAPIENTRY * PFNGLGETPROCADDRESSREGALPROC) (const GLchar *name)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetProcAddressREGAL;
Pointer<Void>? glGetProcAddressREGAL(String name) {
  final _glGetProcAddressREGAL = glad__glGetProcAddressREGAL!
      .cast<NativeFunction<Pointer<Void>? Function(Pointer<Utf8>? name)>>()
      .asFunction<Pointer<Void>? Function(Pointer<Utf8>? name)>();
  final _namePointer = name.toNativeUtf8();
  final _result = _glGetProcAddressREGAL(_namePointer);
  calloc.free(_namePointer);
  return _result;
}

/// ------------------------- GL_SGIS_detail_texture ------------------------
/// ```c
/// define glDetailTexFuncSGIS GLEW_GET_FUN(__glewDetailTexFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLDETAILTEXFUNCSGISPROC __glewDetailTexFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDetailTexFuncSGIS;
void glDetailTexFuncSGIS(int target, int n, Pointer<Float>? points) {
  final _glDetailTexFuncSGIS = glad__glDetailTexFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 n, Pointer<Float>? points)>>()
      .asFunction<void Function(int target, int n, Pointer<Float>? points)>();
  return _glDetailTexFuncSGIS(target, n, points);
}

/// ```c
/// define glGetDetailTexFuncSGIS GLEW_GET_FUN(__glewGetDetailTexFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLGETDETAILTEXFUNCSGISPROC __glewGetDetailTexFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetDetailTexFuncSGIS;
void glGetDetailTexFuncSGIS(int target, Pointer<Float>? points) {
  final _glGetDetailTexFuncSGIS = glad__glGetDetailTexFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? points)>>()
      .asFunction<void Function(int target, Pointer<Float>? points)>();
  return _glGetDetailTexFuncSGIS(target, points);
}

/// -------------------------- GL_SGIS_fog_function -------------------------
/// ```c
/// define glFogFuncSGIS GLEW_GET_FUN(__glewFogFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLFOGFUNCSGISPROC __glewFogFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogFuncSGIS;
void glFogFuncSGIS(int n, Pointer<Float>? points) {
  final _glFogFuncSGIS = glad__glFogFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Float>? points)>>()
      .asFunction<void Function(int n, Pointer<Float>? points)>();
  return _glFogFuncSGIS(n, points);
}

/// ```c
/// define glGetFogFuncSGIS GLEW_GET_FUN(__glewGetFogFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLGETFOGFUNCSGISPROC __glewGetFogFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLGETFOGFUNCSGISPROC) (GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFogFuncSGIS;
void glGetFogFuncSGIS(Pointer<Float>? points) {
  final _glGetFogFuncSGIS = glad__glGetFogFuncSGIS!
      .cast<NativeFunction<Void Function(Pointer<Float>? points)>>()
      .asFunction<void Function(Pointer<Float>? points)>();
  return _glGetFogFuncSGIS(points);
}

/// -------------------------- GL_SGIS_multisample --------------------------
/// ```c
/// define glSampleMaskSGIS GLEW_GET_FUN(__glewSampleMaskSGIS)
/// GLEW_FUN_EXPORT PFNGLSAMPLEMASKSGISPROC __glewSampleMaskSGIS
/// typedef void (GLAPIENTRY * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSampleMaskSGIS;
void glSampleMaskSGIS(double value, int invert) {
  final _glSampleMaskSGIS = glad__glSampleMaskSGIS!
      .cast<NativeFunction<Void Function(Float value, Uint8 invert)>>()
      .asFunction<void Function(double value, int invert)>();
  return _glSampleMaskSGIS(value, invert);
}

/// ```c
/// define glSamplePatternSGIS GLEW_GET_FUN(__glewSamplePatternSGIS)
/// GLEW_FUN_EXPORT PFNGLSAMPLEPATTERNSGISPROC __glewSamplePatternSGIS
/// typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSamplePatternSGIS;
void glSamplePatternSGIS(int pattern) {
  final _glSamplePatternSGIS = glad__glSamplePatternSGIS!
      .cast<NativeFunction<Void Function(Uint32 pattern)>>()
      .asFunction<void Function(int pattern)>();
  return _glSamplePatternSGIS(pattern);
}

/// -------------------------- GL_SGIS_multitexture -------------------------
/// ```c
/// define glInterleavedTextureCoordSetsSGIS GLEW_GET_FUN(__glewInterleavedTextureCoordSetsSGIS)
/// GLEW_FUN_EXPORT PFNGLINTERLEAVEDTEXTURECOORDSETSSGISPROC __glewInterleavedTextureCoordSetsSGIS
/// typedef void (GLAPIENTRY * PFNGLINTERLEAVEDTEXTURECOORDSETSSGISPROC) (GLint factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glInterleavedTextureCoordSetsSGIS;
void glInterleavedTextureCoordSetsSGIS(int factor) {
  final _glInterleavedTextureCoordSetsSGIS = glad__glInterleavedTextureCoordSetsSGIS!
      .cast<NativeFunction<Void Function(Int32 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glInterleavedTextureCoordSetsSGIS(factor);
}

/// ```c
/// define glSelectTextureCoordSetSGIS GLEW_GET_FUN(__glewSelectTextureCoordSetSGIS)
/// GLEW_FUN_EXPORT PFNGLSELECTTEXTURECOORDSETSGISPROC __glewSelectTextureCoordSetSGIS
/// typedef void (GLAPIENTRY * PFNGLSELECTTEXTURECOORDSETSGISPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSelectTextureCoordSetSGIS;
void glSelectTextureCoordSetSGIS(int target) {
  final _glSelectTextureCoordSetSGIS = glad__glSelectTextureCoordSetSGIS!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glSelectTextureCoordSetSGIS(target);
}

/// ```c
/// define glSelectTextureSGIS GLEW_GET_FUN(__glewSelectTextureSGIS)
/// GLEW_FUN_EXPORT PFNGLSELECTTEXTURESGISPROC __glewSelectTextureSGIS
/// typedef void (GLAPIENTRY * PFNGLSELECTTEXTURESGISPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSelectTextureSGIS;
void glSelectTextureSGIS(int target) {
  final _glSelectTextureSGIS = glad__glSelectTextureSGIS!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glSelectTextureSGIS(target);
}

/// ```c
/// define glSelectTextureTransformSGIS GLEW_GET_FUN(__glewSelectTextureTransformSGIS)
/// GLEW_FUN_EXPORT PFNGLSELECTTEXTURETRANSFORMSGISPROC __glewSelectTextureTransformSGIS
/// typedef void (GLAPIENTRY * PFNGLSELECTTEXTURETRANSFORMSGISPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSelectTextureTransformSGIS;
void glSelectTextureTransformSGIS(int target) {
  final _glSelectTextureTransformSGIS = glad__glSelectTextureTransformSGIS!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glSelectTextureTransformSGIS(target);
}

/// ----------------------- GL_SGIS_shared_multisample ----------------------
/// ```c
/// define glMultisampleSubRectPosSGIS GLEW_GET_FUN(__glewMultisampleSubRectPosSGIS)
/// GLEW_FUN_EXPORT PFNGLMULTISAMPLESUBRECTPOSSGISPROC __glewMultisampleSubRectPosSGIS
/// typedef void (GLAPIENTRY * PFNGLMULTISAMPLESUBRECTPOSSGISPROC) (GLint x, GLint y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMultisampleSubRectPosSGIS;
void glMultisampleSubRectPosSGIS(int x, int y) {
  final _glMultisampleSubRectPosSGIS = glad__glMultisampleSubRectPosSGIS!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y)>>()
      .asFunction<void Function(int x, int y)>();
  return _glMultisampleSubRectPosSGIS(x, y);
}

/// ------------------------ GL_SGIS_sharpen_texture ------------------------
/// ```c
/// define glGetSharpenTexFuncSGIS GLEW_GET_FUN(__glewGetSharpenTexFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLGETSHARPENTEXFUNCSGISPROC __glewGetSharpenTexFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetSharpenTexFuncSGIS;
void glGetSharpenTexFuncSGIS(int target, Pointer<Float>? points) {
  final _glGetSharpenTexFuncSGIS = glad__glGetSharpenTexFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Float>? points)>>()
      .asFunction<void Function(int target, Pointer<Float>? points)>();
  return _glGetSharpenTexFuncSGIS(target, points);
}

/// ```c
/// define glSharpenTexFuncSGIS GLEW_GET_FUN(__glewSharpenTexFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLSHARPENTEXFUNCSGISPROC __glewSharpenTexFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSharpenTexFuncSGIS;
void glSharpenTexFuncSGIS(int target, int n, Pointer<Float>? points) {
  final _glSharpenTexFuncSGIS = glad__glSharpenTexFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 n, Pointer<Float>? points)>>()
      .asFunction<void Function(int target, int n, Pointer<Float>? points)>();
  return _glSharpenTexFuncSGIS(target, n, points);
}

/// --------------------------- GL_SGIS_texture4D ---------------------------
/// ```c
/// define glTexImage4DSGIS GLEW_GET_FUN(__glewTexImage4DSGIS)
/// GLEW_FUN_EXPORT PFNGLTEXIMAGE4DSGISPROC __glewTexImage4DSGIS
/// typedef void (GLAPIENTRY * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexImage4DSGIS;
void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int extent, int border, int format, int type, Pointer<Void>? pixels) {
  final _glTexImage4DSGIS = glad__glTexImage4DSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Uint32 internalformat, Uint32 width, Uint32 height, Uint32 depth, Uint32 extent, Int32 border, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int internalformat, int width, int height, int depth, int extent, int border, int format, int type, Pointer<Void>? pixels)>();
  return _glTexImage4DSGIS(target, level, internalformat, width, height, depth, extent, border, format, type, pixels);
}

/// ```c
/// define glTexSubImage4DSGIS GLEW_GET_FUN(__glewTexSubImage4DSGIS)
/// GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE4DSGISPROC __glewTexSubImage4DSGIS
/// typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexSubImage4DSGIS;
void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int extent, int format, int type, Pointer<Void>? pixels) {
  final _glTexSubImage4DSGIS = glad__glTexSubImage4DSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Uint32 width, Uint32 height, Uint32 depth, Uint32 extent, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int extent, int format, int type, Pointer<Void>? pixels)>();
  return _glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, extent, format, type, pixels);
}

/// ------------------------ GL_SGIS_texture_filter4 ------------------------
/// ```c
/// define glGetTexFilterFuncSGIS GLEW_GET_FUN(__glewGetTexFilterFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLGETTEXFILTERFUNCSGISPROC __glewGetTexFilterFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat* weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetTexFilterFuncSGIS;
void glGetTexFilterFuncSGIS(int target, int filter, Pointer<Float>? weights) {
  final _glGetTexFilterFuncSGIS = glad__glGetTexFilterFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 filter, Pointer<Float>? weights)>>()
      .asFunction<void Function(int target, int filter, Pointer<Float>? weights)>();
  return _glGetTexFilterFuncSGIS(target, filter, weights);
}

/// ```c
/// define glTexFilterFuncSGIS GLEW_GET_FUN(__glewTexFilterFuncSGIS)
/// GLEW_FUN_EXPORT PFNGLTEXFILTERFUNCSGISPROC __glewTexFilterFuncSGIS
/// typedef void (GLAPIENTRY * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat* weights)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexFilterFuncSGIS;
void glTexFilterFuncSGIS(int target, int filter, int n, Pointer<Float>? weights) {
  final _glTexFilterFuncSGIS = glad__glTexFilterFuncSGIS!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 filter, Uint32 n, Pointer<Float>? weights)>>()
      .asFunction<void Function(int target, int filter, int n, Pointer<Float>? weights)>();
  return _glTexFilterFuncSGIS(target, filter, n, weights);
}

/// ----------------------------- GL_SGIX_async -----------------------------
/// ```c
/// define glAsyncMarkerSGIX GLEW_GET_FUN(__glewAsyncMarkerSGIX)
/// GLEW_FUN_EXPORT PFNGLASYNCMARKERSGIXPROC __glewAsyncMarkerSGIX
/// typedef void (GLAPIENTRY * PFNGLASYNCMARKERSGIXPROC) (GLuint marker)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAsyncMarkerSGIX;
void glAsyncMarkerSGIX(int marker) {
  final _glAsyncMarkerSGIX = glad__glAsyncMarkerSGIX!
      .cast<NativeFunction<Void Function(Uint32 marker)>>()
      .asFunction<void Function(int marker)>();
  return _glAsyncMarkerSGIX(marker);
}

/// ```c
/// define glDeleteAsyncMarkersSGIX GLEW_GET_FUN(__glewDeleteAsyncMarkersSGIX)
/// GLEW_FUN_EXPORT PFNGLDELETEASYNCMARKERSSGIXPROC __glewDeleteAsyncMarkersSGIX
/// typedef void (GLAPIENTRY * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteAsyncMarkersSGIX;
void glDeleteAsyncMarkersSGIX(int marker, int range) {
  final _glDeleteAsyncMarkersSGIX = glad__glDeleteAsyncMarkersSGIX!
      .cast<NativeFunction<Void Function(Uint32 marker, Uint32 range)>>()
      .asFunction<void Function(int marker, int range)>();
  return _glDeleteAsyncMarkersSGIX(marker, range);
}

/// ```c
/// define glFinishAsyncSGIX GLEW_GET_FUN(__glewFinishAsyncSGIX)
/// GLEW_FUN_EXPORT PFNGLFINISHASYNCSGIXPROC __glewFinishAsyncSGIX
/// typedef GLint (GLAPIENTRY * PFNGLFINISHASYNCSGIXPROC) (GLuint* markerp)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFinishAsyncSGIX;
int glFinishAsyncSGIX(Pointer<Uint32>? markerp) {
  final _glFinishAsyncSGIX = glad__glFinishAsyncSGIX!
      .cast<NativeFunction<Int32 Function(Pointer<Uint32>? markerp)>>()
      .asFunction<int Function(Pointer<Uint32>? markerp)>();
  return _glFinishAsyncSGIX(markerp);
}

/// ```c
/// define glGenAsyncMarkersSGIX GLEW_GET_FUN(__glewGenAsyncMarkersSGIX)
/// GLEW_FUN_EXPORT PFNGLGENASYNCMARKERSSGIXPROC __glewGenAsyncMarkersSGIX
/// typedef GLuint (GLAPIENTRY * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenAsyncMarkersSGIX;
int glGenAsyncMarkersSGIX(int range) {
  final _glGenAsyncMarkersSGIX = glad__glGenAsyncMarkersSGIX!
      .cast<NativeFunction<Uint32 Function(Uint32 range)>>()
      .asFunction<int Function(int range)>();
  return _glGenAsyncMarkersSGIX(range);
}

/// ```c
/// define glIsAsyncMarkerSGIX GLEW_GET_FUN(__glewIsAsyncMarkerSGIX)
/// GLEW_FUN_EXPORT PFNGLISASYNCMARKERSGIXPROC __glewIsAsyncMarkerSGIX
/// typedef GLboolean (GLAPIENTRY * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsAsyncMarkerSGIX;
int glIsAsyncMarkerSGIX(int marker) {
  final _glIsAsyncMarkerSGIX = glad__glIsAsyncMarkerSGIX!
      .cast<NativeFunction<Uint8 Function(Uint32 marker)>>()
      .asFunction<int Function(int marker)>();
  return _glIsAsyncMarkerSGIX(marker);
}

/// ```c
/// define glPollAsyncSGIX GLEW_GET_FUN(__glewPollAsyncSGIX)
/// GLEW_FUN_EXPORT PFNGLPOLLASYNCSGIXPROC __glewPollAsyncSGIX
/// typedef GLint (GLAPIENTRY * PFNGLPOLLASYNCSGIXPROC) (GLuint* markerp)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPollAsyncSGIX;
int glPollAsyncSGIX(Pointer<Uint32>? markerp) {
  final _glPollAsyncSGIX = glad__glPollAsyncSGIX!
      .cast<NativeFunction<Int32 Function(Pointer<Uint32>? markerp)>>()
      .asFunction<int Function(Pointer<Uint32>? markerp)>();
  return _glPollAsyncSGIX(markerp);
}

/// ---------------------------- GL_SGIX_datapipe ---------------------------
/// ```c
/// define glAddressSpace GLEW_GET_FUN(__glewAddressSpace)
/// GLEW_FUN_EXPORT PFNGLADDRESSSPACEPROC __glewAddressSpace
/// typedef void (GLAPIENTRY * PFNGLADDRESSSPACEPROC) (GLenum space, GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAddressSpace;
void glAddressSpace(int space, int mask) {
  final _glAddressSpace = glad__glAddressSpace!
      .cast<NativeFunction<Void Function(Uint32 space, Uint32 mask)>>()
      .asFunction<void Function(int space, int mask)>();
  return _glAddressSpace(space, mask);
}

/// ```c
/// define glDataPipe GLEW_GET_FUN(__glewDataPipe)
/// GLEW_FUN_EXPORT PFNGLDATAPIPEPROC __glewDataPipe
/// typedef GLint (GLAPIENTRY * PFNGLDATAPIPEPROC) (GLenum space)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDataPipe;
int glDataPipe(int space) {
  final _glDataPipe = glad__glDataPipe!
      .cast<NativeFunction<Int32 Function(Uint32 space)>>()
      .asFunction<int Function(int space)>();
  return _glDataPipe(space);
}

/// -------------------------- GL_SGIX_flush_raster -------------------------
/// ```c
/// define glFlushRasterSGIX GLEW_GET_FUN(__glewFlushRasterSGIX)
/// GLEW_FUN_EXPORT PFNGLFLUSHRASTERSGIXPROC __glewFlushRasterSGIX
/// typedef void (GLAPIENTRY * PFNGLFLUSHRASTERSGIXPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFlushRasterSGIX;
void glFlushRasterSGIX() {
  final _glFlushRasterSGIX = glad__glFlushRasterSGIX!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glFlushRasterSGIX();
}

/// --------------------------- GL_SGIX_fog_layers --------------------------
/// ```c
/// define glFogLayersSGIX GLEW_GET_FUN(__glewFogLayersSGIX)
/// GLEW_FUN_EXPORT PFNGLFOGLAYERSSGIXPROC __glewFogLayersSGIX
/// typedef void (GLAPIENTRY * PFNGLFOGLAYERSSGIXPROC) (GLsizei n, const GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFogLayersSGIX;
void glFogLayersSGIX(int n, Pointer<Float>? points) {
  final _glFogLayersSGIX = glad__glFogLayersSGIX!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Float>? points)>>()
      .asFunction<void Function(int n, Pointer<Float>? points)>();
  return _glFogLayersSGIX(n, points);
}

/// ```c
/// define glGetFogLayersSGIX GLEW_GET_FUN(__glewGetFogLayersSGIX)
/// GLEW_FUN_EXPORT PFNGLGETFOGLAYERSSGIXPROC __glewGetFogLayersSGIX
/// typedef void (GLAPIENTRY * PFNGLGETFOGLAYERSSGIXPROC) (GLfloat* points)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFogLayersSGIX;
void glGetFogLayersSGIX(Pointer<Float>? points) {
  final _glGetFogLayersSGIX = glad__glGetFogLayersSGIX!
      .cast<NativeFunction<Void Function(Pointer<Float>? points)>>()
      .asFunction<void Function(Pointer<Float>? points)>();
  return _glGetFogLayersSGIX(points);
}

/// -------------------------- GL_SGIX_fog_texture --------------------------
/// ```c
/// define glTextureFogSGIX GLEW_GET_FUN(__glewTextureFogSGIX)
/// GLEW_FUN_EXPORT PFNGLTEXTUREFOGSGIXPROC __glewTextureFogSGIX
/// typedef void (GLAPIENTRY * PFNGLTEXTUREFOGSGIXPROC) (GLenum pname)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTextureFogSGIX;
void glTextureFogSGIX(int pname) {
  final _glTextureFogSGIX = glad__glTextureFogSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname)>>()
      .asFunction<void Function(int pname)>();
  return _glTextureFogSGIX(pname);
}

/// ------------------- GL_SGIX_fragment_specular_lighting ------------------
/// ```c
/// define glFragmentColorMaterialSGIX GLEW_GET_FUN(__glewFragmentColorMaterialSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glewFragmentColorMaterialSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentColorMaterialSGIX;
void glFragmentColorMaterialSGIX(int face, int mode) {
  final _glFragmentColorMaterialSGIX = glad__glFragmentColorMaterialSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 mode)>>()
      .asFunction<void Function(int face, int mode)>();
  return _glFragmentColorMaterialSGIX(face, mode);
}

/// ```c
/// define glFragmentLightModelfSGIX GLEW_GET_FUN(__glewFragmentLightModelfSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glewFragmentLightModelfSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModelfSGIX;
void glFragmentLightModelfSGIX(int pname, double param) {
  final _glFragmentLightModelfSGIX = glad__glFragmentLightModelfSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glFragmentLightModelfSGIX(pname, param);
}

/// ```c
/// define glFragmentLightModelfvSGIX GLEW_GET_FUN(__glewFragmentLightModelfvSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glewFragmentLightModelfvSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModelfvSGIX;
void glFragmentLightModelfvSGIX(int pname, Pointer<Float>? params) {
  final _glFragmentLightModelfvSGIX = glad__glFragmentLightModelfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glFragmentLightModelfvSGIX(pname, params);
}

/// ```c
/// define glFragmentLightModeliSGIX GLEW_GET_FUN(__glewFragmentLightModeliSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELISGIXPROC __glewFragmentLightModeliSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModeliSGIX;
void glFragmentLightModeliSGIX(int pname, int param) {
  final _glFragmentLightModeliSGIX = glad__glFragmentLightModeliSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glFragmentLightModeliSGIX(pname, param);
}

/// ```c
/// define glFragmentLightModelivSGIX GLEW_GET_FUN(__glewFragmentLightModelivSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glewFragmentLightModelivSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightModelivSGIX;
void glFragmentLightModelivSGIX(int pname, Pointer<Int32>? params) {
  final _glFragmentLightModelivSGIX = glad__glFragmentLightModelivSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glFragmentLightModelivSGIX(pname, params);
}

/// ```c
/// define glFragmentLightfSGIX GLEW_GET_FUN(__glewFragmentLightfSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFSGIXPROC __glewFragmentLightfSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightfSGIX;
void glFragmentLightfSGIX(int light, int pname, double param) {
  final _glFragmentLightfSGIX = glad__glFragmentLightfSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Float param)>>()
      .asFunction<void Function(int light, int pname, double param)>();
  return _glFragmentLightfSGIX(light, pname, param);
}

/// ```c
/// define glFragmentLightfvSGIX GLEW_GET_FUN(__glewFragmentLightfvSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFVSGIXPROC __glewFragmentLightfvSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightfvSGIX;
void glFragmentLightfvSGIX(int light, int pname, Pointer<Float>? params) {
  final _glFragmentLightfvSGIX = glad__glFragmentLightfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Float>? params)>();
  return _glFragmentLightfvSGIX(light, pname, params);
}

/// ```c
/// define glFragmentLightiSGIX GLEW_GET_FUN(__glewFragmentLightiSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTISGIXPROC __glewFragmentLightiSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightiSGIX;
void glFragmentLightiSGIX(int light, int pname, int param) {
  final _glFragmentLightiSGIX = glad__glFragmentLightiSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int light, int pname, int param)>();
  return _glFragmentLightiSGIX(light, pname, param);
}

/// ```c
/// define glFragmentLightivSGIX GLEW_GET_FUN(__glewFragmentLightivSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIVSGIXPROC __glewFragmentLightivSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentLightivSGIX;
void glFragmentLightivSGIX(int light, int pname, Pointer<Int32>? params) {
  final _glFragmentLightivSGIX = glad__glFragmentLightivSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int light, int pname, Pointer<Int32>? params)>();
  return _glFragmentLightivSGIX(light, pname, params);
}

/// ```c
/// define glFragmentMaterialfSGIX GLEW_GET_FUN(__glewFragmentMaterialfSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFSGIXPROC __glewFragmentMaterialfSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, const GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialfSGIX;
void glFragmentMaterialfSGIX(int face, int pname, double param) {
  final _glFragmentMaterialfSGIX = glad__glFragmentMaterialfSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Float param)>>()
      .asFunction<void Function(int face, int pname, double param)>();
  return _glFragmentMaterialfSGIX(face, pname, param);
}

/// ```c
/// define glFragmentMaterialfvSGIX GLEW_GET_FUN(__glewFragmentMaterialfvSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFVSGIXPROC __glewFragmentMaterialfvSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialfvSGIX;
void glFragmentMaterialfvSGIX(int face, int pname, Pointer<Float>? params) {
  final _glFragmentMaterialfvSGIX = glad__glFragmentMaterialfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Float>? params)>();
  return _glFragmentMaterialfvSGIX(face, pname, params);
}

/// ```c
/// define glFragmentMaterialiSGIX GLEW_GET_FUN(__glewFragmentMaterialiSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALISGIXPROC __glewFragmentMaterialiSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, const GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialiSGIX;
void glFragmentMaterialiSGIX(int face, int pname, int param) {
  final _glFragmentMaterialiSGIX = glad__glFragmentMaterialiSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int face, int pname, int param)>();
  return _glFragmentMaterialiSGIX(face, pname, param);
}

/// ```c
/// define glFragmentMaterialivSGIX GLEW_GET_FUN(__glewFragmentMaterialivSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIVSGIXPROC __glewFragmentMaterialivSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFragmentMaterialivSGIX;
void glFragmentMaterialivSGIX(int face, int pname, Pointer<Int32>? params) {
  final _glFragmentMaterialivSGIX = glad__glFragmentMaterialivSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? params)>();
  return _glFragmentMaterialivSGIX(face, pname, params);
}

/// ```c
/// define glGetFragmentLightfvSGIX GLEW_GET_FUN(__glewGetFragmentLightfvSGIX)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glewGetFragmentLightfvSGIX
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum value, GLfloat* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentLightfvSGIX;
void glGetFragmentLightfvSGIX(int light, int value, Pointer<Float>? data) {
  final _glGetFragmentLightfvSGIX = glad__glGetFragmentLightfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 value, Pointer<Float>? data)>>()
      .asFunction<void Function(int light, int value, Pointer<Float>? data)>();
  return _glGetFragmentLightfvSGIX(light, value, data);
}

/// ```c
/// define glGetFragmentLightivSGIX GLEW_GET_FUN(__glewGetFragmentLightivSGIX)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glewGetFragmentLightivSGIX
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum value, GLint* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentLightivSGIX;
void glGetFragmentLightivSGIX(int light, int value, Pointer<Int32>? data) {
  final _glGetFragmentLightivSGIX = glad__glGetFragmentLightivSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 value, Pointer<Int32>? data)>>()
      .asFunction<void Function(int light, int value, Pointer<Int32>? data)>();
  return _glGetFragmentLightivSGIX(light, value, data);
}

/// ```c
/// define glGetFragmentMaterialfvSGIX GLEW_GET_FUN(__glewGetFragmentMaterialfvSGIX)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glewGetFragmentMaterialfvSGIX
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentMaterialfvSGIX;
void glGetFragmentMaterialfvSGIX(int face, int pname, Pointer<Float>? data) {
  final _glGetFragmentMaterialfvSGIX = glad__glGetFragmentMaterialfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Float>? data)>>()
      .asFunction<void Function(int face, int pname, Pointer<Float>? data)>();
  return _glGetFragmentMaterialfvSGIX(face, pname, data);
}

/// ```c
/// define glGetFragmentMaterialivSGIX GLEW_GET_FUN(__glewGetFragmentMaterialivSGIX)
/// GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glewGetFragmentMaterialivSGIX
/// typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetFragmentMaterialivSGIX;
void glGetFragmentMaterialivSGIX(int face, int pname, Pointer<Int32>? data) {
  final _glGetFragmentMaterialivSGIX = glad__glGetFragmentMaterialivSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? data)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? data)>();
  return _glGetFragmentMaterialivSGIX(face, pname, data);
}

/// --------------------------- GL_SGIX_framezoom ---------------------------
/// ```c
/// define glFrameZoomSGIX GLEW_GET_FUN(__glewFrameZoomSGIX)
/// GLEW_FUN_EXPORT PFNGLFRAMEZOOMSGIXPROC __glewFrameZoomSGIX
/// typedef void (GLAPIENTRY * PFNGLFRAMEZOOMSGIXPROC) (GLint factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFrameZoomSGIX;
void glFrameZoomSGIX(int factor) {
  final _glFrameZoomSGIX = glad__glFrameZoomSGIX!
      .cast<NativeFunction<Void Function(Int32 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glFrameZoomSGIX(factor);
}

/// ------------------------ GL_SGIX_igloo_interface ------------------------
/// ```c
/// define glIglooInterfaceSGIX GLEW_GET_FUN(__glewIglooInterfaceSGIX)
/// GLEW_FUN_EXPORT PFNGLIGLOOINTERFACESGIXPROC __glewIglooInterfaceSGIX
/// typedef void (GLAPIENTRY * PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, void *param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIglooInterfaceSGIX;
void glIglooInterfaceSGIX(int pname, Pointer<Void>? param) {
  final _glIglooInterfaceSGIX = glad__glIglooInterfaceSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Void>? param)>>()
      .asFunction<void Function(int pname, Pointer<Void>? param)>();
  return _glIglooInterfaceSGIX(pname, param);
}

/// ----------------------------- GL_SGIX_mpeg1 -----------------------------
/// ```c
/// define glAllocMPEGPredictorsSGIX GLEW_GET_FUN(__glewAllocMPEGPredictorsSGIX)
/// GLEW_FUN_EXPORT PFNGLALLOCMPEGPREDICTORSSGIXPROC __glewAllocMPEGPredictorsSGIX
/// typedef void (GLAPIENTRY * PFNGLALLOCMPEGPREDICTORSSGIXPROC) (GLsizei width, GLsizei height, GLsizei n, GLuint* predictors)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAllocMPEGPredictorsSGIX;
void glAllocMPEGPredictorsSGIX(int width, int height, int n, Pointer<Uint32>? predictors) {
  final _glAllocMPEGPredictorsSGIX = glad__glAllocMPEGPredictorsSGIX!
      .cast<NativeFunction<Void Function(Uint32 width, Uint32 height, Uint32 n, Pointer<Uint32>? predictors)>>()
      .asFunction<void Function(int width, int height, int n, Pointer<Uint32>? predictors)>();
  return _glAllocMPEGPredictorsSGIX(width, height, n, predictors);
}

/// ```c
/// define glDeleteMPEGPredictorsSGIX GLEW_GET_FUN(__glewDeleteMPEGPredictorsSGIX)
/// GLEW_FUN_EXPORT PFNGLDELETEMPEGPREDICTORSSGIXPROC __glewDeleteMPEGPredictorsSGIX
/// typedef void (GLAPIENTRY * PFNGLDELETEMPEGPREDICTORSSGIXPROC) (GLsizei n, GLuint* predictors)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteMPEGPredictorsSGIX;
void glDeleteMPEGPredictorsSGIX(int n, Pointer<Uint32>? predictors) {
  final _glDeleteMPEGPredictorsSGIX = glad__glDeleteMPEGPredictorsSGIX!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? predictors)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? predictors)>();
  return _glDeleteMPEGPredictorsSGIX(n, predictors);
}

/// ```c
/// define glGenMPEGPredictorsSGIX GLEW_GET_FUN(__glewGenMPEGPredictorsSGIX)
/// GLEW_FUN_EXPORT PFNGLGENMPEGPREDICTORSSGIXPROC __glewGenMPEGPredictorsSGIX
/// typedef void (GLAPIENTRY * PFNGLGENMPEGPREDICTORSSGIXPROC) (GLsizei n, GLuint* predictors)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenMPEGPredictorsSGIX;
void glGenMPEGPredictorsSGIX(int n, Pointer<Uint32>? predictors) {
  final _glGenMPEGPredictorsSGIX = glad__glGenMPEGPredictorsSGIX!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? predictors)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? predictors)>();
  return _glGenMPEGPredictorsSGIX(n, predictors);
}

/// ```c
/// define glGetMPEGParameterfvSGIX GLEW_GET_FUN(__glewGetMPEGParameterfvSGIX)
/// GLEW_FUN_EXPORT PFNGLGETMPEGPARAMETERFVSGIXPROC __glewGetMPEGParameterfvSGIX
/// typedef void (GLAPIENTRY * PFNGLGETMPEGPARAMETERFVSGIXPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMPEGParameterfvSGIX;
void glGetMPEGParameterfvSGIX(int target, int pname, Pointer<Float>? params) {
  final _glGetMPEGParameterfvSGIX = glad__glGetMPEGParameterfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetMPEGParameterfvSGIX(target, pname, params);
}

/// ```c
/// define glGetMPEGParameterivSGIX GLEW_GET_FUN(__glewGetMPEGParameterivSGIX)
/// GLEW_FUN_EXPORT PFNGLGETMPEGPARAMETERIVSGIXPROC __glewGetMPEGParameterivSGIX
/// typedef void (GLAPIENTRY * PFNGLGETMPEGPARAMETERIVSGIXPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMPEGParameterivSGIX;
void glGetMPEGParameterivSGIX(int target, int pname, Pointer<Int32>? params) {
  final _glGetMPEGParameterivSGIX = glad__glGetMPEGParameterivSGIX!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetMPEGParameterivSGIX(target, pname, params);
}

/// ```c
/// define glGetMPEGPredictorSGIX GLEW_GET_FUN(__glewGetMPEGPredictorSGIX)
/// GLEW_FUN_EXPORT PFNGLGETMPEGPREDICTORSGIXPROC __glewGetMPEGPredictorSGIX
/// typedef void (GLAPIENTRY * PFNGLGETMPEGPREDICTORSGIXPROC) (GLenum target, GLenum format, GLenum type, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMPEGPredictorSGIX;
void glGetMPEGPredictorSGIX(int target, int format, int type, Pointer<Void>? pixels) {
  final _glGetMPEGPredictorSGIX = glad__glGetMPEGPredictorSGIX!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? pixels)>();
  return _glGetMPEGPredictorSGIX(target, format, type, pixels);
}

/// ```c
/// define glGetMPEGQuantTableubv GLEW_GET_FUN(__glewGetMPEGQuantTableubv)
/// GLEW_FUN_EXPORT PFNGLGETMPEGQUANTTABLEUBVPROC __glewGetMPEGQuantTableubv
/// typedef void (GLAPIENTRY * PFNGLGETMPEGQUANTTABLEUBVPROC) (GLenum target, GLubyte* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetMPEGQuantTableubv;
void glGetMPEGQuantTableubv(int target, Pointer<Uint8>? values) {
  final _glGetMPEGQuantTableubv = glad__glGetMPEGQuantTableubv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Uint8>? values)>>()
      .asFunction<void Function(int target, Pointer<Uint8>? values)>();
  return _glGetMPEGQuantTableubv(target, values);
}

/// ```c
/// define glIsMPEGPredictorSGIX GLEW_GET_FUN(__glewIsMPEGPredictorSGIX)
/// GLEW_FUN_EXPORT PFNGLISMPEGPREDICTORSGIXPROC __glewIsMPEGPredictorSGIX
/// typedef GLboolean (GLAPIENTRY * PFNGLISMPEGPREDICTORSGIXPROC) (GLuint predictor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsMPEGPredictorSGIX;
int glIsMPEGPredictorSGIX(int predictor) {
  final _glIsMPEGPredictorSGIX = glad__glIsMPEGPredictorSGIX!
      .cast<NativeFunction<Uint8 Function(Uint32 predictor)>>()
      .asFunction<int Function(int predictor)>();
  return _glIsMPEGPredictorSGIX(predictor);
}

/// ```c
/// define glMPEGPredictorSGIX GLEW_GET_FUN(__glewMPEGPredictorSGIX)
/// GLEW_FUN_EXPORT PFNGLMPEGPREDICTORSGIXPROC __glewMPEGPredictorSGIX
/// typedef void (GLAPIENTRY * PFNGLMPEGPREDICTORSGIXPROC) (GLenum target, GLenum format, GLenum type, void *pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMPEGPredictorSGIX;
void glMPEGPredictorSGIX(int target, int format, int type, Pointer<Void>? pixels) {
  final _glMPEGPredictorSGIX = glad__glMPEGPredictorSGIX!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? pixels)>();
  return _glMPEGPredictorSGIX(target, format, type, pixels);
}

/// ```c
/// define glMPEGQuantTableubv GLEW_GET_FUN(__glewMPEGQuantTableubv)
/// GLEW_FUN_EXPORT PFNGLMPEGQUANTTABLEUBVPROC __glewMPEGQuantTableubv
/// typedef void (GLAPIENTRY * PFNGLMPEGQUANTTABLEUBVPROC) (GLenum target, GLubyte* values)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMPEGQuantTableubv;
void glMPEGQuantTableubv(int target, Pointer<Uint8>? values) {
  final _glMPEGQuantTableubv = glad__glMPEGQuantTableubv!
      .cast<NativeFunction<Void Function(Uint32 target, Pointer<Uint8>? values)>>()
      .asFunction<void Function(int target, Pointer<Uint8>? values)>();
  return _glMPEGQuantTableubv(target, values);
}

/// ```c
/// define glSwapMPEGPredictorsSGIX GLEW_GET_FUN(__glewSwapMPEGPredictorsSGIX)
/// GLEW_FUN_EXPORT PFNGLSWAPMPEGPREDICTORSSGIXPROC __glewSwapMPEGPredictorsSGIX
/// typedef void (GLAPIENTRY * PFNGLSWAPMPEGPREDICTORSSGIXPROC) (GLenum target0, GLenum target1)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSwapMPEGPredictorsSGIX;
void glSwapMPEGPredictorsSGIX(int target0, int target1) {
  final _glSwapMPEGPredictorsSGIX = glad__glSwapMPEGPredictorsSGIX!
      .cast<NativeFunction<Void Function(Uint32 target0, Uint32 target1)>>()
      .asFunction<void Function(int target0, int target1)>();
  return _glSwapMPEGPredictorsSGIX(target0, target1);
}

/// ------------------ GL_SGIX_nonlinear_lighting_pervertex -----------------
/// ```c
/// define glGetNonlinLightfvSGIX GLEW_GET_FUN(__glewGetNonlinLightfvSGIX)
/// GLEW_FUN_EXPORT PFNGLGETNONLINLIGHTFVSGIXPROC __glewGetNonlinLightfvSGIX
/// typedef void (GLAPIENTRY * PFNGLGETNONLINLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLint* terms, GLfloat *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNonlinLightfvSGIX;
void glGetNonlinLightfvSGIX(int light, int pname, Pointer<Int32>? terms, Pointer<Float>? data) {
  final _glGetNonlinLightfvSGIX = glad__glGetNonlinLightfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Pointer<Int32>? terms, Pointer<Float>? data)>>()
      .asFunction<void Function(int light, int pname, Pointer<Int32>? terms, Pointer<Float>? data)>();
  return _glGetNonlinLightfvSGIX(light, pname, terms, data);
}

/// ```c
/// define glGetNonlinMaterialfvSGIX GLEW_GET_FUN(__glewGetNonlinMaterialfvSGIX)
/// GLEW_FUN_EXPORT PFNGLGETNONLINMATERIALFVSGIXPROC __glewGetNonlinMaterialfvSGIX
/// typedef void (GLAPIENTRY * PFNGLGETNONLINMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLint* terms, const GLfloat *data)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetNonlinMaterialfvSGIX;
void glGetNonlinMaterialfvSGIX(int face, int pname, Pointer<Int32>? terms, Pointer<Float>? data) {
  final _glGetNonlinMaterialfvSGIX = glad__glGetNonlinMaterialfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Pointer<Int32>? terms, Pointer<Float>? data)>>()
      .asFunction<void Function(int face, int pname, Pointer<Int32>? terms, Pointer<Float>? data)>();
  return _glGetNonlinMaterialfvSGIX(face, pname, terms, data);
}

/// ```c
/// define glNonlinLightfvSGIX GLEW_GET_FUN(__glewNonlinLightfvSGIX)
/// GLEW_FUN_EXPORT PFNGLNONLINLIGHTFVSGIXPROC __glewNonlinLightfvSGIX
/// typedef void (GLAPIENTRY * PFNGLNONLINLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLint terms, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNonlinLightfvSGIX;
void glNonlinLightfvSGIX(int light, int pname, int terms, Pointer<Float>? params) {
  final _glNonlinLightfvSGIX = glad__glNonlinLightfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 light, Uint32 pname, Int32 terms, Pointer<Float>? params)>>()
      .asFunction<void Function(int light, int pname, int terms, Pointer<Float>? params)>();
  return _glNonlinLightfvSGIX(light, pname, terms, params);
}

/// ```c
/// define glNonlinMaterialfvSGIX GLEW_GET_FUN(__glewNonlinMaterialfvSGIX)
/// GLEW_FUN_EXPORT PFNGLNONLINMATERIALFVSGIXPROC __glewNonlinMaterialfvSGIX
/// typedef void (GLAPIENTRY * PFNGLNONLINMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLint terms, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNonlinMaterialfvSGIX;
void glNonlinMaterialfvSGIX(int face, int pname, int terms, Pointer<Float>? params) {
  final _glNonlinMaterialfvSGIX = glad__glNonlinMaterialfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 face, Uint32 pname, Int32 terms, Pointer<Float>? params)>>()
      .asFunction<void Function(int face, int pname, int terms, Pointer<Float>? params)>();
  return _glNonlinMaterialfvSGIX(face, pname, terms, params);
}

/// ------------------------- GL_SGIX_pixel_texture -------------------------
/// ```c
/// define glPixelTexGenSGIX GLEW_GET_FUN(__glewPixelTexGenSGIX)
/// GLEW_FUN_EXPORT PFNGLPIXELTEXGENSGIXPROC __glewPixelTexGenSGIX
/// typedef void (GLAPIENTRY * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTexGenSGIX;
void glPixelTexGenSGIX(int mode) {
  final _glPixelTexGenSGIX = glad__glPixelTexGenSGIX!
      .cast<NativeFunction<Void Function(Uint32 mode)>>()
      .asFunction<void Function(int mode)>();
  return _glPixelTexGenSGIX(mode);
}

/// ------------------------- GL_SGIX_polynomial_ffd ------------------------
/// ```c
/// define glDeformSGIX GLEW_GET_FUN(__glewDeformSGIX)
/// GLEW_FUN_EXPORT PFNGLDEFORMSGIXPROC __glewDeformSGIX
/// typedef void (GLAPIENTRY * PFNGLDEFORMSGIXPROC) (GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeformSGIX;
void glDeformSGIX(int mask) {
  final _glDeformSGIX = glad__glDeformSGIX!
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return _glDeformSGIX(mask);
}

/// ```c
/// define glLoadIdentityDeformationMapSGIX GLEW_GET_FUN(__glewLoadIdentityDeformationMapSGIX)
/// GLEW_FUN_EXPORT PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC __glewLoadIdentityDeformationMapSGIX
/// typedef void (GLAPIENTRY * PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glLoadIdentityDeformationMapSGIX;
void glLoadIdentityDeformationMapSGIX(int mask) {
  final _glLoadIdentityDeformationMapSGIX = glad__glLoadIdentityDeformationMapSGIX!
      .cast<NativeFunction<Void Function(Uint32 mask)>>()
      .asFunction<void Function(int mask)>();
  return _glLoadIdentityDeformationMapSGIX(mask);
}

/// --------------------------- GL_SGIX_quad_mesh ---------------------------
/// ```c
/// define glMeshBreadthSGIX GLEW_GET_FUN(__glewMeshBreadthSGIX)
/// GLEW_FUN_EXPORT PFNGLMESHBREADTHSGIXPROC __glewMeshBreadthSGIX
/// typedef void (GLAPIENTRY * PFNGLMESHBREADTHSGIXPROC) (GLint breadth)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMeshBreadthSGIX;
void glMeshBreadthSGIX(int breadth) {
  final _glMeshBreadthSGIX = glad__glMeshBreadthSGIX!
      .cast<NativeFunction<Void Function(Int32 breadth)>>()
      .asFunction<void Function(int breadth)>();
  return _glMeshBreadthSGIX(breadth);
}

/// ```c
/// define glMeshStrideSGIX GLEW_GET_FUN(__glewMeshStrideSGIX)
/// GLEW_FUN_EXPORT PFNGLMESHSTRIDESGIXPROC __glewMeshStrideSGIX
/// typedef void (GLAPIENTRY * PFNGLMESHSTRIDESGIXPROC) (GLint stride)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glMeshStrideSGIX;
void glMeshStrideSGIX(int stride) {
  final _glMeshStrideSGIX = glad__glMeshStrideSGIX!
      .cast<NativeFunction<Void Function(Int32 stride)>>()
      .asFunction<void Function(int stride)>();
  return _glMeshStrideSGIX(stride);
}

/// ------------------------ GL_SGIX_reference_plane ------------------------
/// ```c
/// define glReferencePlaneSGIX GLEW_GET_FUN(__glewReferencePlaneSGIX)
/// GLEW_FUN_EXPORT PFNGLREFERENCEPLANESGIXPROC __glewReferencePlaneSGIX
/// typedef void (GLAPIENTRY * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble* equation)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReferencePlaneSGIX;
void glReferencePlaneSGIX(Pointer<Double>? equation) {
  final _glReferencePlaneSGIX = glad__glReferencePlaneSGIX!
      .cast<NativeFunction<Void Function(Pointer<Double>? equation)>>()
      .asFunction<void Function(Pointer<Double>? equation)>();
  return _glReferencePlaneSGIX(equation);
}

/// ----------------------------- GL_SGIX_sprite ----------------------------
/// ```c
/// define glSpriteParameterfSGIX GLEW_GET_FUN(__glewSpriteParameterfSGIX)
/// GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERFSGIXPROC __glewSpriteParameterfSGIX
/// typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSpriteParameterfSGIX;
void glSpriteParameterfSGIX(int pname, double param) {
  final _glSpriteParameterfSGIX = glad__glSpriteParameterfSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Float param)>>()
      .asFunction<void Function(int pname, double param)>();
  return _glSpriteParameterfSGIX(pname, param);
}

/// ```c
/// define glSpriteParameterfvSGIX GLEW_GET_FUN(__glewSpriteParameterfvSGIX)
/// GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERFVSGIXPROC __glewSpriteParameterfvSGIX
/// typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSpriteParameterfvSGIX;
void glSpriteParameterfvSGIX(int pname, Pointer<Float>? params) {
  final _glSpriteParameterfvSGIX = glad__glSpriteParameterfvSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int pname, Pointer<Float>? params)>();
  return _glSpriteParameterfvSGIX(pname, params);
}

/// ```c
/// define glSpriteParameteriSGIX GLEW_GET_FUN(__glewSpriteParameteriSGIX)
/// GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERISGIXPROC __glewSpriteParameteriSGIX
/// typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSpriteParameteriSGIX;
void glSpriteParameteriSGIX(int pname, int param) {
  final _glSpriteParameteriSGIX = glad__glSpriteParameteriSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int pname, int param)>();
  return _glSpriteParameteriSGIX(pname, param);
}

/// ```c
/// define glSpriteParameterivSGIX GLEW_GET_FUN(__glewSpriteParameterivSGIX)
/// GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERIVSGIXPROC __glewSpriteParameterivSGIX
/// typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glSpriteParameterivSGIX;
void glSpriteParameterivSGIX(int pname, Pointer<Int32>? params) {
  final _glSpriteParameterivSGIX = glad__glSpriteParameterivSGIX!
      .cast<NativeFunction<Void Function(Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int pname, Pointer<Int32>? params)>();
  return _glSpriteParameterivSGIX(pname, params);
}

/// ----------------------- GL_SGIX_tag_sample_buffer -----------------------
/// ```c
/// define glTagSampleBufferSGIX GLEW_GET_FUN(__glewTagSampleBufferSGIX)
/// GLEW_FUN_EXPORT PFNGLTAGSAMPLEBUFFERSGIXPROC __glewTagSampleBufferSGIX
/// typedef void (GLAPIENTRY * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTagSampleBufferSGIX;
void glTagSampleBufferSGIX() {
  final _glTagSampleBufferSGIX = glad__glTagSampleBufferSGIX!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glTagSampleBufferSGIX();
}

/// --------------------------- GL_SGIX_vector_ops --------------------------
/// ```c
/// define glGetVectorOperationSGIX GLEW_GET_FUN(__glewGetVectorOperationSGIX)
/// GLEW_FUN_EXPORT PFNGLGETVECTOROPERATIONSGIXPROC __glewGetVectorOperationSGIX
/// typedef void (GLAPIENTRY * PFNGLGETVECTOROPERATIONSGIXPROC) (GLenum operation)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetVectorOperationSGIX;
void glGetVectorOperationSGIX(int operation) {
  final _glGetVectorOperationSGIX = glad__glGetVectorOperationSGIX!
      .cast<NativeFunction<Void Function(Uint32 operation)>>()
      .asFunction<void Function(int operation)>();
  return _glGetVectorOperationSGIX(operation);
}

/// ```c
/// define glVectorOperationSGIX GLEW_GET_FUN(__glewVectorOperationSGIX)
/// GLEW_FUN_EXPORT PFNGLVECTOROPERATIONSGIXPROC __glewVectorOperationSGIX
/// typedef void (GLAPIENTRY * PFNGLVECTOROPERATIONSGIXPROC) (GLenum operation)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glVectorOperationSGIX;
void glVectorOperationSGIX(int operation) {
  final _glVectorOperationSGIX = glad__glVectorOperationSGIX!
      .cast<NativeFunction<Void Function(Uint32 operation)>>()
      .asFunction<void Function(int operation)>();
  return _glVectorOperationSGIX(operation);
}

/// ---------------------- GL_SGIX_vertex_array_object ----------------------
/// ```c
/// define glAreVertexArraysResidentSGIX GLEW_GET_FUN(__glewAreVertexArraysResidentSGIX)
/// GLEW_FUN_EXPORT PFNGLAREVERTEXARRAYSRESIDENTSGIXPROC __glewAreVertexArraysResidentSGIX
/// typedef GLboolean (GLAPIENTRY * PFNGLAREVERTEXARRAYSRESIDENTSGIXPROC) (GLsizei n, const GLuint* arrays, GLboolean* residences)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAreVertexArraysResidentSGIX;
int glAreVertexArraysResidentSGIX(int n, Pointer<Uint32>? arrays, Pointer<Uint8>? residences) {
  final _glAreVertexArraysResidentSGIX = glad__glAreVertexArraysResidentSGIX!
      .cast<NativeFunction<Uint8 Function(Uint32 n, Pointer<Uint32>? arrays, Pointer<Uint8>? residences)>>()
      .asFunction<int Function(int n, Pointer<Uint32>? arrays, Pointer<Uint8>? residences)>();
  return _glAreVertexArraysResidentSGIX(n, arrays, residences);
}

/// ```c
/// define glBindVertexArraySGIX GLEW_GET_FUN(__glewBindVertexArraySGIX)
/// GLEW_FUN_EXPORT PFNGLBINDVERTEXARRAYSGIXPROC __glewBindVertexArraySGIX
/// typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYSGIXPROC) (GLuint array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glBindVertexArraySGIX;
void glBindVertexArraySGIX(int array) {
  final _glBindVertexArraySGIX = glad__glBindVertexArraySGIX!
      .cast<NativeFunction<Void Function(Uint32 array)>>()
      .asFunction<void Function(int array)>();
  return _glBindVertexArraySGIX(array);
}

/// ```c
/// define glDeleteVertexArraysSGIX GLEW_GET_FUN(__glewDeleteVertexArraysSGIX)
/// GLEW_FUN_EXPORT PFNGLDELETEVERTEXARRAYSSGIXPROC __glewDeleteVertexArraysSGIX
/// typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSSGIXPROC) (GLsizei n, const GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glDeleteVertexArraysSGIX;
void glDeleteVertexArraysSGIX(int n, Pointer<Uint32>? arrays) {
  final _glDeleteVertexArraysSGIX = glad__glDeleteVertexArraysSGIX!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glDeleteVertexArraysSGIX(n, arrays);
}

/// ```c
/// define glGenVertexArraysSGIX GLEW_GET_FUN(__glewGenVertexArraysSGIX)
/// GLEW_FUN_EXPORT PFNGLGENVERTEXARRAYSSGIXPROC __glewGenVertexArraysSGIX
/// typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSSGIXPROC) (GLsizei n, GLuint* arrays)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGenVertexArraysSGIX;
void glGenVertexArraysSGIX(int n, Pointer<Uint32>? arrays) {
  final _glGenVertexArraysSGIX = glad__glGenVertexArraysSGIX!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays)>();
  return _glGenVertexArraysSGIX(n, arrays);
}

/// ```c
/// define glIsVertexArraySGIX GLEW_GET_FUN(__glewIsVertexArraySGIX)
/// GLEW_FUN_EXPORT PFNGLISVERTEXARRAYSGIXPROC __glewIsVertexArraySGIX
/// typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYSGIXPROC) (GLuint array)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glIsVertexArraySGIX;
int glIsVertexArraySGIX(int array) {
  final _glIsVertexArraySGIX = glad__glIsVertexArraySGIX!
      .cast<NativeFunction<Uint8 Function(Uint32 array)>>()
      .asFunction<int Function(int array)>();
  return _glIsVertexArraySGIX(array);
}

/// ```c
/// define glPrioritizeVertexArraysSGIX GLEW_GET_FUN(__glewPrioritizeVertexArraysSGIX)
/// GLEW_FUN_EXPORT PFNGLPRIORITIZEVERTEXARRAYSSGIXPROC __glewPrioritizeVertexArraysSGIX
/// typedef void (GLAPIENTRY * PFNGLPRIORITIZEVERTEXARRAYSSGIXPROC) (GLsizei n, const GLuint* arrays, const GLclampf* priorities)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPrioritizeVertexArraysSGIX;
void glPrioritizeVertexArraysSGIX(int n, Pointer<Uint32>? arrays, Pointer<Float>? priorities) {
  final _glPrioritizeVertexArraysSGIX = glad__glPrioritizeVertexArraysSGIX!
      .cast<NativeFunction<Void Function(Uint32 n, Pointer<Uint32>? arrays, Pointer<Float>? priorities)>>()
      .asFunction<void Function(int n, Pointer<Uint32>? arrays, Pointer<Float>? priorities)>();
  return _glPrioritizeVertexArraysSGIX(n, arrays, priorities);
}

/// --------------------------- GL_SGI_color_table --------------------------
/// ```c
/// define glColorTableParameterfvSGI GLEW_GET_FUN(__glewColorTableParameterfvSGI)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERFVSGIPROC __glewColorTableParameterfvSGI
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTableParameterfvSGI;
void glColorTableParameterfvSGI(int target, int pname, Pointer<Float>? params) {
  final _glColorTableParameterfvSGI = glad__glColorTableParameterfvSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glColorTableParameterfvSGI(target, pname, params);
}

/// ```c
/// define glColorTableParameterivSGI GLEW_GET_FUN(__glewColorTableParameterivSGI)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERIVSGIPROC __glewColorTableParameterivSGI
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTableParameterivSGI;
void glColorTableParameterivSGI(int target, int pname, Pointer<Int32>? params) {
  final _glColorTableParameterivSGI = glad__glColorTableParameterivSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glColorTableParameterivSGI(target, pname, params);
}

/// ```c
/// define glColorTableSGI GLEW_GET_FUN(__glewColorTableSGI)
/// GLEW_FUN_EXPORT PFNGLCOLORTABLESGIPROC __glewColorTableSGI
/// typedef void (GLAPIENTRY * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColorTableSGI;
void glColorTableSGI(int target, int internalformat, int width, int format, int type, Pointer<Void>? table) {
  final _glColorTableSGI = glad__glColorTableSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Uint32 width, Uint32 format, Uint32 type, Pointer<Void>? table)>>()
      .asFunction<void Function(int target, int internalformat, int width, int format, int type, Pointer<Void>? table)>();
  return _glColorTableSGI(target, internalformat, width, format, type, table);
}

/// ```c
/// define glCopyColorTableSGI GLEW_GET_FUN(__glewCopyColorTableSGI)
/// GLEW_FUN_EXPORT PFNGLCOPYCOLORTABLESGIPROC __glewCopyColorTableSGI
/// typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glCopyColorTableSGI;
void glCopyColorTableSGI(int target, int internalformat, int x, int y, int width) {
  final _glCopyColorTableSGI = glad__glCopyColorTableSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 internalformat, Int32 x, Int32 y, Uint32 width)>>()
      .asFunction<void Function(int target, int internalformat, int x, int y, int width)>();
  return _glCopyColorTableSGI(target, internalformat, x, y, width);
}

/// ```c
/// define glGetColorTableParameterfvSGI GLEW_GET_FUN(__glewGetColorTableParameterfvSGI)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glewGetColorTableParameterfvSGI
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableParameterfvSGI;
void glGetColorTableParameterfvSGI(int target, int pname, Pointer<Float>? params) {
  final _glGetColorTableParameterfvSGI = glad__glGetColorTableParameterfvSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetColorTableParameterfvSGI(target, pname, params);
}

/// ```c
/// define glGetColorTableParameterivSGI GLEW_GET_FUN(__glewGetColorTableParameterivSGI)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glewGetColorTableParameterivSGI
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableParameterivSGI;
void glGetColorTableParameterivSGI(int target, int pname, Pointer<Int32>? params) {
  final _glGetColorTableParameterivSGI = glad__glGetColorTableParameterivSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetColorTableParameterivSGI(target, pname, params);
}

/// ```c
/// define glGetColorTableSGI GLEW_GET_FUN(__glewGetColorTableSGI)
/// GLEW_FUN_EXPORT PFNGLGETCOLORTABLESGIPROC __glewGetColorTableSGI
/// typedef void (GLAPIENTRY * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetColorTableSGI;
void glGetColorTableSGI(int target, int format, int type, Pointer<Void>? table) {
  final _glGetColorTableSGI = glad__glGetColorTableSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 format, Uint32 type, Pointer<Void>? table)>>()
      .asFunction<void Function(int target, int format, int type, Pointer<Void>? table)>();
  return _glGetColorTableSGI(target, format, type, table);
}

/// ------------------------------- GL_SGI_fft ------------------------------
/// ```c
/// define glGetPixelTransformParameterfvSGI GLEW_GET_FUN(__glewGetPixelTransformParameterfvSGI)
/// GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERFVSGIPROC __glewGetPixelTransformParameterfvSGI
/// typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPixelTransformParameterfvSGI;
void glGetPixelTransformParameterfvSGI(int target, int pname, Pointer<Float>? params) {
  final _glGetPixelTransformParameterfvSGI = glad__glGetPixelTransformParameterfvSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glGetPixelTransformParameterfvSGI(target, pname, params);
}

/// ```c
/// define glGetPixelTransformParameterivSGI GLEW_GET_FUN(__glewGetPixelTransformParameterivSGI)
/// GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERIVSGIPROC __glewGetPixelTransformParameterivSGI
/// typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGetPixelTransformParameterivSGI;
void glGetPixelTransformParameterivSGI(int target, int pname, Pointer<Int32>? params) {
  final _glGetPixelTransformParameterivSGI = glad__glGetPixelTransformParameterivSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glGetPixelTransformParameterivSGI(target, pname, params);
}

/// ```c
/// define glPixelTransformParameterfSGI GLEW_GET_FUN(__glewPixelTransformParameterfSGI)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFSGIPROC __glewPixelTransformParameterfSGI
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFSGIPROC) (GLenum target, GLenum pname, GLfloat param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameterfSGI;
void glPixelTransformParameterfSGI(int target, int pname, double param) {
  final _glPixelTransformParameterfSGI = glad__glPixelTransformParameterfSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Float param)>>()
      .asFunction<void Function(int target, int pname, double param)>();
  return _glPixelTransformParameterfSGI(target, pname, param);
}

/// ```c
/// define glPixelTransformParameterfvSGI GLEW_GET_FUN(__glewPixelTransformParameterfvSGI)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFVSGIPROC __glewPixelTransformParameterfvSGI
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameterfvSGI;
void glPixelTransformParameterfvSGI(int target, int pname, Pointer<Float>? params) {
  final _glPixelTransformParameterfvSGI = glad__glPixelTransformParameterfvSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Float>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Float>? params)>();
  return _glPixelTransformParameterfvSGI(target, pname, params);
}

/// ```c
/// define glPixelTransformParameteriSGI GLEW_GET_FUN(__glewPixelTransformParameteriSGI)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERISGIPROC __glewPixelTransformParameteriSGI
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERISGIPROC) (GLenum target, GLenum pname, GLint param)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameteriSGI;
void glPixelTransformParameteriSGI(int target, int pname, int param) {
  final _glPixelTransformParameteriSGI = glad__glPixelTransformParameteriSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Int32 param)>>()
      .asFunction<void Function(int target, int pname, int param)>();
  return _glPixelTransformParameteriSGI(target, pname, param);
}

/// ```c
/// define glPixelTransformParameterivSGI GLEW_GET_FUN(__glewPixelTransformParameterivSGI)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIVSGIPROC __glewPixelTransformParameterivSGI
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint* params)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformParameterivSGI;
void glPixelTransformParameterivSGI(int target, int pname, Pointer<Int32>? params) {
  final _glPixelTransformParameterivSGI = glad__glPixelTransformParameterivSGI!
      .cast<NativeFunction<Void Function(Uint32 target, Uint32 pname, Pointer<Int32>? params)>>()
      .asFunction<void Function(int target, int pname, Pointer<Int32>? params)>();
  return _glPixelTransformParameterivSGI(target, pname, params);
}

/// ```c
/// define glPixelTransformSGI GLEW_GET_FUN(__glewPixelTransformSGI)
/// GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMSGIPROC __glewPixelTransformSGI
/// typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMSGIPROC) (GLenum target)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glPixelTransformSGI;
void glPixelTransformSGI(int target) {
  final _glPixelTransformSGI = glad__glPixelTransformSGI!
      .cast<NativeFunction<Void Function(Uint32 target)>>()
      .asFunction<void Function(int target)>();
  return _glPixelTransformSGI(target);
}

/// ------------------------- GL_SUNX_constant_data -------------------------
/// ```c
/// define glFinishTextureSUNX GLEW_GET_FUN(__glewFinishTextureSUNX)
/// GLEW_FUN_EXPORT PFNGLFINISHTEXTURESUNXPROC __glewFinishTextureSUNX
/// typedef void (GLAPIENTRY * PFNGLFINISHTEXTURESUNXPROC) (void)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glFinishTextureSUNX;
void glFinishTextureSUNX() {
  final _glFinishTextureSUNX = glad__glFinishTextureSUNX!
      .cast<NativeFunction<Void Function()>>()
      .asFunction<void Function()>();
  return _glFinishTextureSUNX();
}

/// -------------------------- GL_SUN_global_alpha --------------------------
/// ```c
/// define glGlobalAlphaFactorbSUN GLEW_GET_FUN(__glewGlobalAlphaFactorbSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORBSUNPROC __glewGlobalAlphaFactorbSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactorbSUN;
void glGlobalAlphaFactorbSUN(int factor) {
  final _glGlobalAlphaFactorbSUN = glad__glGlobalAlphaFactorbSUN!
      .cast<NativeFunction<Void Function(Int8 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glGlobalAlphaFactorbSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactordSUN GLEW_GET_FUN(__glewGlobalAlphaFactordSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORDSUNPROC __glewGlobalAlphaFactordSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactordSUN;
void glGlobalAlphaFactordSUN(double factor) {
  final _glGlobalAlphaFactordSUN = glad__glGlobalAlphaFactordSUN!
      .cast<NativeFunction<Void Function(Double factor)>>()
      .asFunction<void Function(double factor)>();
  return _glGlobalAlphaFactordSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactorfSUN GLEW_GET_FUN(__glewGlobalAlphaFactorfSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORFSUNPROC __glewGlobalAlphaFactorfSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactorfSUN;
void glGlobalAlphaFactorfSUN(double factor) {
  final _glGlobalAlphaFactorfSUN = glad__glGlobalAlphaFactorfSUN!
      .cast<NativeFunction<Void Function(Float factor)>>()
      .asFunction<void Function(double factor)>();
  return _glGlobalAlphaFactorfSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactoriSUN GLEW_GET_FUN(__glewGlobalAlphaFactoriSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORISUNPROC __glewGlobalAlphaFactoriSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactoriSUN;
void glGlobalAlphaFactoriSUN(int factor) {
  final _glGlobalAlphaFactoriSUN = glad__glGlobalAlphaFactoriSUN!
      .cast<NativeFunction<Void Function(Int32 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glGlobalAlphaFactoriSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactorsSUN GLEW_GET_FUN(__glewGlobalAlphaFactorsSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORSSUNPROC __glewGlobalAlphaFactorsSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactorsSUN;
void glGlobalAlphaFactorsSUN(int factor) {
  final _glGlobalAlphaFactorsSUN = glad__glGlobalAlphaFactorsSUN!
      .cast<NativeFunction<Void Function(Int16 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glGlobalAlphaFactorsSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactorubSUN GLEW_GET_FUN(__glewGlobalAlphaFactorubSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUBSUNPROC __glewGlobalAlphaFactorubSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactorubSUN;
void glGlobalAlphaFactorubSUN(int factor) {
  final _glGlobalAlphaFactorubSUN = glad__glGlobalAlphaFactorubSUN!
      .cast<NativeFunction<Void Function(Uint8 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glGlobalAlphaFactorubSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactoruiSUN GLEW_GET_FUN(__glewGlobalAlphaFactoruiSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUISUNPROC __glewGlobalAlphaFactoruiSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactoruiSUN;
void glGlobalAlphaFactoruiSUN(int factor) {
  final _glGlobalAlphaFactoruiSUN = glad__glGlobalAlphaFactoruiSUN!
      .cast<NativeFunction<Void Function(Uint32 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glGlobalAlphaFactoruiSUN(factor);
}

/// ```c
/// define glGlobalAlphaFactorusSUN GLEW_GET_FUN(__glewGlobalAlphaFactorusSUN)
/// GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUSSUNPROC __glewGlobalAlphaFactorusSUN
/// typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glGlobalAlphaFactorusSUN;
void glGlobalAlphaFactorusSUN(int factor) {
  final _glGlobalAlphaFactorusSUN = glad__glGlobalAlphaFactorusSUN!
      .cast<NativeFunction<Void Function(Uint16 factor)>>()
      .asFunction<void Function(int factor)>();
  return _glGlobalAlphaFactorusSUN(factor);
}

/// ------------------------ GL_SUN_read_video_pixels -----------------------
/// ```c
/// define glReadVideoPixelsSUN GLEW_GET_FUN(__glewReadVideoPixelsSUN)
/// GLEW_FUN_EXPORT PFNGLREADVIDEOPIXELSSUNPROC __glewReadVideoPixelsSUN
/// typedef void (GLAPIENTRY * PFNGLREADVIDEOPIXELSSUNPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReadVideoPixelsSUN;
void glReadVideoPixelsSUN(int x, int y, int width, int height, int format, int type, Pointer<Void>? pixels) {
  final _glReadVideoPixelsSUN = glad__glReadVideoPixelsSUN!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height, Uint32 format, Uint32 type, Pointer<Void>? pixels)>>()
      .asFunction<void Function(int x, int y, int width, int height, int format, int type, Pointer<Void>? pixels)>();
  return _glReadVideoPixelsSUN(x, y, width, height, format, type, pixels);
}

/// -------------------------- GL_SUN_triangle_list -------------------------
/// ```c
/// define glReplacementCodePointerSUN GLEW_GET_FUN(__glewReplacementCodePointerSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEPOINTERSUNPROC __glewReplacementCodePointerSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void *pointer)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodePointerSUN;
void glReplacementCodePointerSUN(int type, int stride, Pointer<Void>? pointer) {
  final _glReplacementCodePointerSUN = glad__glReplacementCodePointerSUN!
      .cast<NativeFunction<Void Function(Uint32 type, Uint32 stride, Pointer<Void>? pointer)>>()
      .asFunction<void Function(int type, int stride, Pointer<Void>? pointer)>();
  return _glReplacementCodePointerSUN(type, stride, pointer);
}

/// ```c
/// define glReplacementCodeubSUN GLEW_GET_FUN(__glewReplacementCodeubSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUBSUNPROC __glewReplacementCodeubSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeubSUN;
void glReplacementCodeubSUN(int code) {
  final _glReplacementCodeubSUN = glad__glReplacementCodeubSUN!
      .cast<NativeFunction<Void Function(Uint8 code)>>()
      .asFunction<void Function(int code)>();
  return _glReplacementCodeubSUN(code);
}

/// ```c
/// define glReplacementCodeubvSUN GLEW_GET_FUN(__glewReplacementCodeubvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUBVSUNPROC __glewReplacementCodeubvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte* code)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeubvSUN;
void glReplacementCodeubvSUN(Pointer<Uint8>? code) {
  final _glReplacementCodeubvSUN = glad__glReplacementCodeubvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint8>? code)>>()
      .asFunction<void Function(Pointer<Uint8>? code)>();
  return _glReplacementCodeubvSUN(code);
}

/// ```c
/// define glReplacementCodeuiSUN GLEW_GET_FUN(__glewReplacementCodeuiSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUISUNPROC __glewReplacementCodeuiSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiSUN;
void glReplacementCodeuiSUN(int code) {
  final _glReplacementCodeuiSUN = glad__glReplacementCodeuiSUN!
      .cast<NativeFunction<Void Function(Uint32 code)>>()
      .asFunction<void Function(int code)>();
  return _glReplacementCodeuiSUN(code);
}

/// ```c
/// define glReplacementCodeuivSUN GLEW_GET_FUN(__glewReplacementCodeuivSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVSUNPROC __glewReplacementCodeuivSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint* code)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuivSUN;
void glReplacementCodeuivSUN(Pointer<Uint32>? code) {
  final _glReplacementCodeuivSUN = glad__glReplacementCodeuivSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? code)>>()
      .asFunction<void Function(Pointer<Uint32>? code)>();
  return _glReplacementCodeuivSUN(code);
}

/// ```c
/// define glReplacementCodeusSUN GLEW_GET_FUN(__glewReplacementCodeusSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUSSUNPROC __glewReplacementCodeusSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeusSUN;
void glReplacementCodeusSUN(int code) {
  final _glReplacementCodeusSUN = glad__glReplacementCodeusSUN!
      .cast<NativeFunction<Void Function(Uint16 code)>>()
      .asFunction<void Function(int code)>();
  return _glReplacementCodeusSUN(code);
}

/// ```c
/// define glReplacementCodeusvSUN GLEW_GET_FUN(__glewReplacementCodeusvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUSVSUNPROC __glewReplacementCodeusvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort* code)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeusvSUN;
void glReplacementCodeusvSUN(Pointer<Uint16>? code) {
  final _glReplacementCodeusvSUN = glad__glReplacementCodeusvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint16>? code)>>()
      .asFunction<void Function(Pointer<Uint16>? code)>();
  return _glReplacementCodeusvSUN(code);
}

/// ----------------------------- GL_SUN_vertex -----------------------------
/// ```c
/// define glColor3fVertex3fSUN GLEW_GET_FUN(__glewColor3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR3FVERTEX3FSUNPROC __glewColor3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor3fVertex3fSUN;
void glColor3fVertex3fSUN(double r, double g, double b, double x, double y, double z) {
  final _glColor3fVertex3fSUN = glad__glColor3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float r, Float g, Float b, Float x, Float y, Float z)>>()
      .asFunction<void Function(double r, double g, double b, double x, double y, double z)>();
  return _glColor3fVertex3fSUN(r, g, b, x, y, z);
}

/// ```c
/// define glColor3fVertex3fvSUN GLEW_GET_FUN(__glewColor3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR3FVERTEX3FVSUNPROC __glewColor3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor3fVertex3fvSUN;
void glColor3fVertex3fvSUN(Pointer<Float>? c, Pointer<Float>? v) {
  final _glColor3fVertex3fvSUN = glad__glColor3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? c, Pointer<Float>? v)>();
  return _glColor3fVertex3fvSUN(c, v);
}

/// ```c
/// define glColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewColor4fNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewColor4fNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4fNormal3fVertex3fSUN;
void glColor4fNormal3fVertex3fSUN(double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z) {
  final _glColor4fNormal3fVertex3fSUN = glad__glColor4fNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float r, Float g, Float b, Float a, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z)>();
  return _glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
}

/// ```c
/// define glColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewColor4fNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewColor4fNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4fNormal3fVertex3fvSUN;
void glColor4fNormal3fVertex3fvSUN(Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v) {
  final _glColor4fNormal3fVertex3fvSUN = glad__glColor4fNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glColor4fNormal3fVertex3fvSUN(c, n, v);
}

/// ```c
/// define glColor4ubVertex2fSUN GLEW_GET_FUN(__glewColor4ubVertex2fSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX2FSUNPROC __glewColor4ubVertex2fSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4ubVertex2fSUN;
void glColor4ubVertex2fSUN(int r, int g, int b, int a, double x, double y) {
  final _glColor4ubVertex2fSUN = glad__glColor4ubVertex2fSUN!
      .cast<NativeFunction<Void Function(Uint8 r, Uint8 g, Uint8 b, Uint8 a, Float x, Float y)>>()
      .asFunction<void Function(int r, int g, int b, int a, double x, double y)>();
  return _glColor4ubVertex2fSUN(r, g, b, a, x, y);
}

/// ```c
/// define glColor4ubVertex2fvSUN GLEW_GET_FUN(__glewColor4ubVertex2fvSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX2FVSUNPROC __glewColor4ubVertex2fvSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte* c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4ubVertex2fvSUN;
void glColor4ubVertex2fvSUN(Pointer<Uint8>? c, Pointer<Float>? v) {
  final _glColor4ubVertex2fvSUN = glad__glColor4ubVertex2fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint8>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint8>? c, Pointer<Float>? v)>();
  return _glColor4ubVertex2fvSUN(c, v);
}

/// ```c
/// define glColor4ubVertex3fSUN GLEW_GET_FUN(__glewColor4ubVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX3FSUNPROC __glewColor4ubVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4ubVertex3fSUN;
void glColor4ubVertex3fSUN(int r, int g, int b, int a, double x, double y, double z) {
  final _glColor4ubVertex3fSUN = glad__glColor4ubVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint8 r, Uint8 g, Uint8 b, Uint8 a, Float x, Float y, Float z)>>()
      .asFunction<void Function(int r, int g, int b, int a, double x, double y, double z)>();
  return _glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
}

/// ```c
/// define glColor4ubVertex3fvSUN GLEW_GET_FUN(__glewColor4ubVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX3FVSUNPROC __glewColor4ubVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte* c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glColor4ubVertex3fvSUN;
void glColor4ubVertex3fvSUN(Pointer<Uint8>? c, Pointer<Float>? v) {
  final _glColor4ubVertex3fvSUN = glad__glColor4ubVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint8>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint8>? c, Pointer<Float>? v)>();
  return _glColor4ubVertex3fvSUN(c, v);
}

/// ```c
/// define glNormal3fVertex3fSUN GLEW_GET_FUN(__glewNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLNORMAL3FVERTEX3FSUNPROC __glewNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormal3fVertex3fSUN;
void glNormal3fVertex3fSUN(double nx, double ny, double nz, double x, double y, double z) {
  final _glNormal3fVertex3fSUN = glad__glNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(double nx, double ny, double nz, double x, double y, double z)>();
  return _glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
}

/// ```c
/// define glNormal3fVertex3fvSUN GLEW_GET_FUN(__glewNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLNORMAL3FVERTEX3FVSUNPROC __glewNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glNormal3fVertex3fvSUN;
void glNormal3fVertex3fvSUN(Pointer<Float>? n, Pointer<Float>? v) {
  final _glNormal3fVertex3fvSUN = glad__glNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? n, Pointer<Float>? v)>();
  return _glNormal3fVertex3fvSUN(n, v);
}

/// ```c
/// define glReplacementCodeuiColor3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glewReplacementCodeuiColor3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiColor3fVertex3fSUN;
void glReplacementCodeuiColor3fVertex3fSUN(int rc, double r, double g, double b, double x, double y, double z) {
  final _glReplacementCodeuiColor3fVertex3fSUN = glad__glReplacementCodeuiColor3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float r, Float g, Float b, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double r, double g, double b, double x, double y, double z)>();
  return _glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
}

/// ```c
/// define glReplacementCodeuiColor3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiColor3fVertex3fvSUN;
void glReplacementCodeuiColor3fVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? c, Pointer<Float>? v) {
  final _glReplacementCodeuiColor3fVertex3fvSUN = glad__glReplacementCodeuiColor3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? c, Pointer<Float>? v)>();
  return _glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
}

/// ```c
/// define glReplacementCodeuiColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiColor4fNormal3fVertex3fSUN;
void glReplacementCodeuiColor4fNormal3fVertex3fSUN(int rc, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z) {
  final _glReplacementCodeuiColor4fNormal3fVertex3fSUN = glad__glReplacementCodeuiColor4fNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float r, Float g, Float b, Float a, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z)>();
  return _glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
}

/// ```c
/// define glReplacementCodeuiColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v) {
  final _glReplacementCodeuiColor4fNormal3fVertex3fvSUN = glad__glReplacementCodeuiColor4fNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
}

/// ```c
/// define glReplacementCodeuiColor4ubVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glewReplacementCodeuiColor4ubVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiColor4ubVertex3fSUN;
void glReplacementCodeuiColor4ubVertex3fSUN(int rc, int r, int g, int b, int a, double x, double y, double z) {
  final _glReplacementCodeuiColor4ubVertex3fSUN = glad__glReplacementCodeuiColor4ubVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Uint8 r, Uint8 g, Uint8 b, Uint8 a, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, int r, int g, int b, int a, double x, double y, double z)>();
  return _glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
}

/// ```c
/// define glReplacementCodeuiColor4ubVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glewReplacementCodeuiColor4ubVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint* rc, const GLubyte *c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiColor4ubVertex3fvSUN;
void glReplacementCodeuiColor4ubVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Uint8>? c, Pointer<Float>? v) {
  final _glReplacementCodeuiColor4ubVertex3fvSUN = glad__glReplacementCodeuiColor4ubVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Uint8>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Uint8>? c, Pointer<Float>? v)>();
  return _glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
}

/// ```c
/// define glReplacementCodeuiNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiNormal3fVertex3fSUN;
void glReplacementCodeuiNormal3fVertex3fSUN(int rc, double nx, double ny, double nz, double x, double y, double z) {
  final _glReplacementCodeuiNormal3fVertex3fSUN = glad__glReplacementCodeuiNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double nx, double ny, double nz, double x, double y, double z)>();
  return _glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
}

/// ```c
/// define glReplacementCodeuiNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiNormal3fVertex3fvSUN;
void glReplacementCodeuiNormal3fVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? n, Pointer<Float>? v) {
  final _glReplacementCodeuiNormal3fVertex3fvSUN = glad__glReplacementCodeuiNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
}

/// ```c
/// define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(int rc, double s, double t, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z) {
  final _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = glad__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float s, Float t, Float r, Float g, Float b, Float a, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double s, double t, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z)>();
  return _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

/// ```c
/// define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v) {
  final _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = glad__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
}

/// ```c
/// define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(int rc, double s, double t, double nx, double ny, double nz, double x, double y, double z) {
  final _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = glad__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float s, Float t, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double s, double t, double nx, double ny, double nz, double x, double y, double z)>();
  return _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
}

/// ```c
/// define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? n, Pointer<Float>? v) {
  final _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = glad__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
}

/// ```c
/// define glReplacementCodeuiTexCoord2fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiTexCoord2fVertex3fSUN;
void glReplacementCodeuiTexCoord2fVertex3fSUN(int rc, double s, double t, double x, double y, double z) {
  final _glReplacementCodeuiTexCoord2fVertex3fSUN = glad__glReplacementCodeuiTexCoord2fVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float s, Float t, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double s, double t, double x, double y, double z)>();
  return _glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
}

/// ```c
/// define glReplacementCodeuiTexCoord2fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiTexCoord2fVertex3fvSUN;
void glReplacementCodeuiTexCoord2fVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? v) {
  final _glReplacementCodeuiTexCoord2fVertex3fvSUN = glad__glReplacementCodeuiTexCoord2fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? tc, Pointer<Float>? v)>();
  return _glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
}

/// ```c
/// define glReplacementCodeuiVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glewReplacementCodeuiVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiVertex3fSUN;
void glReplacementCodeuiVertex3fSUN(int rc, double x, double y, double z) {
  final _glReplacementCodeuiVertex3fSUN = glad__glReplacementCodeuiVertex3fSUN!
      .cast<NativeFunction<Void Function(Uint32 rc, Float x, Float y, Float z)>>()
      .asFunction<void Function(int rc, double x, double y, double z)>();
  return _glReplacementCodeuiVertex3fSUN(rc, x, y, z);
}

/// ```c
/// define glReplacementCodeuiVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glewReplacementCodeuiVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glReplacementCodeuiVertex3fvSUN;
void glReplacementCodeuiVertex3fvSUN(Pointer<Uint32>? rc, Pointer<Float>? v) {
  final _glReplacementCodeuiVertex3fvSUN = glad__glReplacementCodeuiVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Uint32>? rc, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Uint32>? rc, Pointer<Float>? v)>();
  return _glReplacementCodeuiVertex3fvSUN(rc, v);
}

/// ```c
/// define glTexCoord2fColor3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glewTexCoord2fColor3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fColor3fVertex3fSUN;
void glTexCoord2fColor3fVertex3fSUN(double s, double t, double r, double g, double b, double x, double y, double z) {
  final _glTexCoord2fColor3fVertex3fSUN = glad__glTexCoord2fColor3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Float r, Float g, Float b, Float x, Float y, Float z)>>()
      .asFunction<void Function(double s, double t, double r, double g, double b, double x, double y, double z)>();
  return _glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
}

/// ```c
/// define glTexCoord2fColor3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glewTexCoord2fColor3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fColor3fVertex3fvSUN;
void glTexCoord2fColor3fVertex3fvSUN(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? v) {
  final _glTexCoord2fColor3fVertex3fvSUN = glad__glTexCoord2fColor3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? v)>();
  return _glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
}

/// ```c
/// define glTexCoord2fColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fColor4fNormal3fVertex3fSUN;
void glTexCoord2fColor4fNormal3fVertex3fSUN(double s, double t, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z) {
  final _glTexCoord2fColor4fNormal3fVertex3fSUN = glad__glTexCoord2fColor4fNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Float r, Float g, Float b, Float a, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(double s, double t, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z)>();
  return _glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

/// ```c
/// define glTexCoord2fColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fColor4fNormal3fVertex3fvSUN;
void glTexCoord2fColor4fNormal3fVertex3fvSUN(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v) {
  final _glTexCoord2fColor4fNormal3fVertex3fvSUN = glad__glTexCoord2fColor4fNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
}

/// ```c
/// define glTexCoord2fColor4ubVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glewTexCoord2fColor4ubVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fColor4ubVertex3fSUN;
void glTexCoord2fColor4ubVertex3fSUN(double s, double t, int r, int g, int b, int a, double x, double y, double z) {
  final _glTexCoord2fColor4ubVertex3fSUN = glad__glTexCoord2fColor4ubVertex3fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Uint8 r, Uint8 g, Uint8 b, Uint8 a, Float x, Float y, Float z)>>()
      .asFunction<void Function(double s, double t, int r, int g, int b, int a, double x, double y, double z)>();
  return _glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
}

/// ```c
/// define glTexCoord2fColor4ubVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glewTexCoord2fColor4ubVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat* tc, const GLubyte *c, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fColor4ubVertex3fvSUN;
void glTexCoord2fColor4ubVertex3fvSUN(Pointer<Float>? tc, Pointer<Uint8>? c, Pointer<Float>? v) {
  final _glTexCoord2fColor4ubVertex3fvSUN = glad__glTexCoord2fColor4ubVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Uint8>? c, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Uint8>? c, Pointer<Float>? v)>();
  return _glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
}

/// ```c
/// define glTexCoord2fNormal3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fNormal3fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fNormal3fVertex3fSUN;
void glTexCoord2fNormal3fVertex3fSUN(double s, double t, double nx, double ny, double nz, double x, double y, double z) {
  final _glTexCoord2fNormal3fVertex3fSUN = glad__glTexCoord2fNormal3fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Float nx, Float ny, Float nz, Float x, Float y, Float z)>>()
      .asFunction<void Function(double s, double t, double nx, double ny, double nz, double x, double y, double z)>();
  return _glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
}

/// ```c
/// define glTexCoord2fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fNormal3fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fNormal3fVertex3fvSUN;
void glTexCoord2fNormal3fVertex3fvSUN(Pointer<Float>? tc, Pointer<Float>? n, Pointer<Float>? v) {
  final _glTexCoord2fNormal3fVertex3fvSUN = glad__glTexCoord2fNormal3fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
}

/// ```c
/// define glTexCoord2fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fVertex3fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FVERTEX3FSUNPROC __glewTexCoord2fVertex3fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fVertex3fSUN;
void glTexCoord2fVertex3fSUN(double s, double t, double x, double y, double z) {
  final _glTexCoord2fVertex3fSUN = glad__glTexCoord2fVertex3fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Float x, Float y, Float z)>>()
      .asFunction<void Function(double s, double t, double x, double y, double z)>();
  return _glTexCoord2fVertex3fSUN(s, t, x, y, z);
}

/// ```c
/// define glTexCoord2fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fVertex3fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glewTexCoord2fVertex3fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord2fVertex3fvSUN;
void glTexCoord2fVertex3fvSUN(Pointer<Float>? tc, Pointer<Float>? v) {
  final _glTexCoord2fVertex3fvSUN = glad__glTexCoord2fVertex3fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Float>? v)>();
  return _glTexCoord2fVertex3fvSUN(tc, v);
}

/// ```c
/// define glTexCoord4fColor4fNormal3fVertex4fSUN GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord4fColor4fNormal3fVertex4fSUN;
void glTexCoord4fColor4fNormal3fVertex4fSUN(double s, double t, double p, double q, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z, double w) {
  final _glTexCoord4fColor4fNormal3fVertex4fSUN = glad__glTexCoord4fColor4fNormal3fVertex4fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Float p, Float q, Float r, Float g, Float b, Float a, Float nx, Float ny, Float nz, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(double s, double t, double p, double q, double r, double g, double b, double a, double nx, double ny, double nz, double x, double y, double z, double w)>();
  return _glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

/// ```c
/// define glTexCoord4fColor4fNormal3fVertex4fvSUN GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord4fColor4fNormal3fVertex4fvSUN;
void glTexCoord4fColor4fNormal3fVertex4fvSUN(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v) {
  final _glTexCoord4fColor4fNormal3fVertex4fvSUN = glad__glTexCoord4fColor4fNormal3fVertex4fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Float>? c, Pointer<Float>? n, Pointer<Float>? v)>();
  return _glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
}

/// ```c
/// define glTexCoord4fVertex4fSUN GLEW_GET_FUN(__glewTexCoord4fVertex4fSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD4FVERTEX4FSUNPROC __glewTexCoord4fVertex4fSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord4fVertex4fSUN;
void glTexCoord4fVertex4fSUN(double s, double t, double p, double q, double x, double y, double z, double w) {
  final _glTexCoord4fVertex4fSUN = glad__glTexCoord4fVertex4fSUN!
      .cast<NativeFunction<Void Function(Float s, Float t, Float p, Float q, Float x, Float y, Float z, Float w)>>()
      .asFunction<void Function(double s, double t, double p, double q, double x, double y, double z, double w)>();
  return _glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
}

/// ```c
/// define glTexCoord4fVertex4fvSUN GLEW_GET_FUN(__glewTexCoord4fVertex4fvSUN)
/// GLEW_FUN_EXPORT PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glewTexCoord4fVertex4fvSUN
/// typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *v)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glTexCoord4fVertex4fvSUN;
void glTexCoord4fVertex4fvSUN(Pointer<Float>? tc, Pointer<Float>? v) {
  final _glTexCoord4fVertex4fvSUN = glad__glTexCoord4fVertex4fvSUN!
      .cast<NativeFunction<Void Function(Pointer<Float>? tc, Pointer<Float>? v)>>()
      .asFunction<void Function(Pointer<Float>? tc, Pointer<Float>? v)>();
  return _glTexCoord4fVertex4fvSUN(tc, v);
}

/// ---------------------------- GL_WIN_swap_hint ---------------------------
/// ```c
/// define glAddSwapHintRectWIN GLEW_GET_FUN(__glewAddSwapHintRectWIN)
/// GLEW_FUN_EXPORT PFNGLADDSWAPHINTRECTWINPROC __glewAddSwapHintRectWIN
/// typedef void (GLAPIENTRY * PFNGLADDSWAPHINTRECTWINPROC) (GLint x, GLint y, GLsizei width, GLsizei height)
/// ```
Pointer<NativeFunction<Void Function()>>? glad__glAddSwapHintRectWIN;
void glAddSwapHintRectWIN(int x, int y, int width, int height) {
  final _glAddSwapHintRectWIN = glad__glAddSwapHintRectWIN!
      .cast<NativeFunction<Void Function(Int32 x, Int32 y, Uint32 width, Uint32 height)>>()
      .asFunction<void Function(int x, int y, int width, int height)>();
  return _glAddSwapHintRectWIN(x, y, width, height);
}

void gladLoadGLLoader(Pointer<NativeFunction<Void Function()>> Function(String) load) {
  glad__glCopyTexSubImage3D = load('glCopyTexSubImage3D');
  glad__glDrawRangeElements = load('glDrawRangeElements');
  glad__glTexImage3D = load('glTexImage3D');
  glad__glTexSubImage3D = load('glTexSubImage3D');
  glad__glActiveTexture = load('glActiveTexture');
  glad__glClientActiveTexture = load('glClientActiveTexture');
  glad__glCompressedTexImage1D = load('glCompressedTexImage1D');
  glad__glCompressedTexImage2D = load('glCompressedTexImage2D');
  glad__glCompressedTexImage3D = load('glCompressedTexImage3D');
  glad__glCompressedTexSubImage1D = load('glCompressedTexSubImage1D');
  glad__glCompressedTexSubImage2D = load('glCompressedTexSubImage2D');
  glad__glCompressedTexSubImage3D = load('glCompressedTexSubImage3D');
  glad__glGetCompressedTexImage = load('glGetCompressedTexImage');
  glad__glLoadTransposeMatrixd = load('glLoadTransposeMatrixd');
  glad__glLoadTransposeMatrixf = load('glLoadTransposeMatrixf');
  glad__glMultTransposeMatrixd = load('glMultTransposeMatrixd');
  glad__glMultTransposeMatrixf = load('glMultTransposeMatrixf');
  glad__glMultiTexCoord1d = load('glMultiTexCoord1d');
  glad__glMultiTexCoord1dv = load('glMultiTexCoord1dv');
  glad__glMultiTexCoord1f = load('glMultiTexCoord1f');
  glad__glMultiTexCoord1fv = load('glMultiTexCoord1fv');
  glad__glMultiTexCoord1i = load('glMultiTexCoord1i');
  glad__glMultiTexCoord1iv = load('glMultiTexCoord1iv');
  glad__glMultiTexCoord1s = load('glMultiTexCoord1s');
  glad__glMultiTexCoord1sv = load('glMultiTexCoord1sv');
  glad__glMultiTexCoord2d = load('glMultiTexCoord2d');
  glad__glMultiTexCoord2dv = load('glMultiTexCoord2dv');
  glad__glMultiTexCoord2f = load('glMultiTexCoord2f');
  glad__glMultiTexCoord2fv = load('glMultiTexCoord2fv');
  glad__glMultiTexCoord2i = load('glMultiTexCoord2i');
  glad__glMultiTexCoord2iv = load('glMultiTexCoord2iv');
  glad__glMultiTexCoord2s = load('glMultiTexCoord2s');
  glad__glMultiTexCoord2sv = load('glMultiTexCoord2sv');
  glad__glMultiTexCoord3d = load('glMultiTexCoord3d');
  glad__glMultiTexCoord3dv = load('glMultiTexCoord3dv');
  glad__glMultiTexCoord3f = load('glMultiTexCoord3f');
  glad__glMultiTexCoord3fv = load('glMultiTexCoord3fv');
  glad__glMultiTexCoord3i = load('glMultiTexCoord3i');
  glad__glMultiTexCoord3iv = load('glMultiTexCoord3iv');
  glad__glMultiTexCoord3s = load('glMultiTexCoord3s');
  glad__glMultiTexCoord3sv = load('glMultiTexCoord3sv');
  glad__glMultiTexCoord4d = load('glMultiTexCoord4d');
  glad__glMultiTexCoord4dv = load('glMultiTexCoord4dv');
  glad__glMultiTexCoord4f = load('glMultiTexCoord4f');
  glad__glMultiTexCoord4fv = load('glMultiTexCoord4fv');
  glad__glMultiTexCoord4i = load('glMultiTexCoord4i');
  glad__glMultiTexCoord4iv = load('glMultiTexCoord4iv');
  glad__glMultiTexCoord4s = load('glMultiTexCoord4s');
  glad__glMultiTexCoord4sv = load('glMultiTexCoord4sv');
  glad__glSampleCoverage = load('glSampleCoverage');
  glad__glBlendColor = load('glBlendColor');
  glad__glBlendEquation = load('glBlendEquation');
  glad__glBlendFuncSeparate = load('glBlendFuncSeparate');
  glad__glFogCoordPointer = load('glFogCoordPointer');
  glad__glFogCoordd = load('glFogCoordd');
  glad__glFogCoorddv = load('glFogCoorddv');
  glad__glFogCoordf = load('glFogCoordf');
  glad__glFogCoordfv = load('glFogCoordfv');
  glad__glMultiDrawArrays = load('glMultiDrawArrays');
  glad__glMultiDrawElements = load('glMultiDrawElements');
  glad__glPointParameterf = load('glPointParameterf');
  glad__glPointParameterfv = load('glPointParameterfv');
  glad__glPointParameteri = load('glPointParameteri');
  glad__glPointParameteriv = load('glPointParameteriv');
  glad__glSecondaryColor3b = load('glSecondaryColor3b');
  glad__glSecondaryColor3bv = load('glSecondaryColor3bv');
  glad__glSecondaryColor3d = load('glSecondaryColor3d');
  glad__glSecondaryColor3dv = load('glSecondaryColor3dv');
  glad__glSecondaryColor3f = load('glSecondaryColor3f');
  glad__glSecondaryColor3fv = load('glSecondaryColor3fv');
  glad__glSecondaryColor3i = load('glSecondaryColor3i');
  glad__glSecondaryColor3iv = load('glSecondaryColor3iv');
  glad__glSecondaryColor3s = load('glSecondaryColor3s');
  glad__glSecondaryColor3sv = load('glSecondaryColor3sv');
  glad__glSecondaryColor3ub = load('glSecondaryColor3ub');
  glad__glSecondaryColor3ubv = load('glSecondaryColor3ubv');
  glad__glSecondaryColor3ui = load('glSecondaryColor3ui');
  glad__glSecondaryColor3uiv = load('glSecondaryColor3uiv');
  glad__glSecondaryColor3us = load('glSecondaryColor3us');
  glad__glSecondaryColor3usv = load('glSecondaryColor3usv');
  glad__glSecondaryColorPointer = load('glSecondaryColorPointer');
  glad__glWindowPos2d = load('glWindowPos2d');
  glad__glWindowPos2dv = load('glWindowPos2dv');
  glad__glWindowPos2f = load('glWindowPos2f');
  glad__glWindowPos2fv = load('glWindowPos2fv');
  glad__glWindowPos2i = load('glWindowPos2i');
  glad__glWindowPos2iv = load('glWindowPos2iv');
  glad__glWindowPos2s = load('glWindowPos2s');
  glad__glWindowPos2sv = load('glWindowPos2sv');
  glad__glWindowPos3d = load('glWindowPos3d');
  glad__glWindowPos3dv = load('glWindowPos3dv');
  glad__glWindowPos3f = load('glWindowPos3f');
  glad__glWindowPos3fv = load('glWindowPos3fv');
  glad__glWindowPos3i = load('glWindowPos3i');
  glad__glWindowPos3iv = load('glWindowPos3iv');
  glad__glWindowPos3s = load('glWindowPos3s');
  glad__glWindowPos3sv = load('glWindowPos3sv');
  glad__glBeginQuery = load('glBeginQuery');
  glad__glBindBuffer = load('glBindBuffer');
  glad__glBufferData = load('glBufferData');
  glad__glBufferSubData = load('glBufferSubData');
  glad__glDeleteBuffers = load('glDeleteBuffers');
  glad__glDeleteQueries = load('glDeleteQueries');
  glad__glEndQuery = load('glEndQuery');
  glad__glGenBuffers = load('glGenBuffers');
  glad__glGenQueries = load('glGenQueries');
  glad__glGetBufferParameteriv = load('glGetBufferParameteriv');
  glad__glGetBufferPointerv = load('glGetBufferPointerv');
  glad__glGetBufferSubData = load('glGetBufferSubData');
  glad__glGetQueryObjectiv = load('glGetQueryObjectiv');
  glad__glGetQueryObjectuiv = load('glGetQueryObjectuiv');
  glad__glGetQueryiv = load('glGetQueryiv');
  glad__glIsBuffer = load('glIsBuffer');
  glad__glIsQuery = load('glIsQuery');
  glad__glMapBuffer = load('glMapBuffer');
  glad__glUnmapBuffer = load('glUnmapBuffer');
  glad__glAttachShader = load('glAttachShader');
  glad__glBindAttribLocation = load('glBindAttribLocation');
  glad__glBlendEquationSeparate = load('glBlendEquationSeparate');
  glad__glCompileShader = load('glCompileShader');
  glad__glCreateProgram = load('glCreateProgram');
  glad__glCreateShader = load('glCreateShader');
  glad__glDeleteProgram = load('glDeleteProgram');
  glad__glDeleteShader = load('glDeleteShader');
  glad__glDetachShader = load('glDetachShader');
  glad__glDisableVertexAttribArray = load('glDisableVertexAttribArray');
  glad__glDrawBuffers = load('glDrawBuffers');
  glad__glEnableVertexAttribArray = load('glEnableVertexAttribArray');
  glad__glGetActiveAttrib = load('glGetActiveAttrib');
  glad__glGetActiveUniform = load('glGetActiveUniform');
  glad__glGetAttachedShaders = load('glGetAttachedShaders');
  glad__glGetAttribLocation = load('glGetAttribLocation');
  glad__glGetProgramInfoLog = load('glGetProgramInfoLog');
  glad__glGetProgramiv = load('glGetProgramiv');
  glad__glGetShaderInfoLog = load('glGetShaderInfoLog');
  glad__glGetShaderSource = load('glGetShaderSource');
  glad__glGetShaderiv = load('glGetShaderiv');
  glad__glGetUniformLocation = load('glGetUniformLocation');
  glad__glGetUniformfv = load('glGetUniformfv');
  glad__glGetUniformiv = load('glGetUniformiv');
  glad__glGetVertexAttribPointerv = load('glGetVertexAttribPointerv');
  glad__glGetVertexAttribdv = load('glGetVertexAttribdv');
  glad__glGetVertexAttribfv = load('glGetVertexAttribfv');
  glad__glGetVertexAttribiv = load('glGetVertexAttribiv');
  glad__glIsProgram = load('glIsProgram');
  glad__glIsShader = load('glIsShader');
  glad__glLinkProgram = load('glLinkProgram');
  glad__glShaderSource = load('glShaderSource');
  glad__glStencilFuncSeparate = load('glStencilFuncSeparate');
  glad__glStencilMaskSeparate = load('glStencilMaskSeparate');
  glad__glStencilOpSeparate = load('glStencilOpSeparate');
  glad__glUniform1f = load('glUniform1f');
  glad__glUniform1fv = load('glUniform1fv');
  glad__glUniform1i = load('glUniform1i');
  glad__glUniform1iv = load('glUniform1iv');
  glad__glUniform2f = load('glUniform2f');
  glad__glUniform2fv = load('glUniform2fv');
  glad__glUniform2i = load('glUniform2i');
  glad__glUniform2iv = load('glUniform2iv');
  glad__glUniform3f = load('glUniform3f');
  glad__glUniform3fv = load('glUniform3fv');
  glad__glUniform3i = load('glUniform3i');
  glad__glUniform3iv = load('glUniform3iv');
  glad__glUniform4f = load('glUniform4f');
  glad__glUniform4fv = load('glUniform4fv');
  glad__glUniform4i = load('glUniform4i');
  glad__glUniform4iv = load('glUniform4iv');
  glad__glUniformMatrix2fv = load('glUniformMatrix2fv');
  glad__glUniformMatrix3fv = load('glUniformMatrix3fv');
  glad__glUniformMatrix4fv = load('glUniformMatrix4fv');
  glad__glUseProgram = load('glUseProgram');
  glad__glValidateProgram = load('glValidateProgram');
  glad__glVertexAttrib1d = load('glVertexAttrib1d');
  glad__glVertexAttrib1dv = load('glVertexAttrib1dv');
  glad__glVertexAttrib1f = load('glVertexAttrib1f');
  glad__glVertexAttrib1fv = load('glVertexAttrib1fv');
  glad__glVertexAttrib1s = load('glVertexAttrib1s');
  glad__glVertexAttrib1sv = load('glVertexAttrib1sv');
  glad__glVertexAttrib2d = load('glVertexAttrib2d');
  glad__glVertexAttrib2dv = load('glVertexAttrib2dv');
  glad__glVertexAttrib2f = load('glVertexAttrib2f');
  glad__glVertexAttrib2fv = load('glVertexAttrib2fv');
  glad__glVertexAttrib2s = load('glVertexAttrib2s');
  glad__glVertexAttrib2sv = load('glVertexAttrib2sv');
  glad__glVertexAttrib3d = load('glVertexAttrib3d');
  glad__glVertexAttrib3dv = load('glVertexAttrib3dv');
  glad__glVertexAttrib3f = load('glVertexAttrib3f');
  glad__glVertexAttrib3fv = load('glVertexAttrib3fv');
  glad__glVertexAttrib3s = load('glVertexAttrib3s');
  glad__glVertexAttrib3sv = load('glVertexAttrib3sv');
  glad__glVertexAttrib4Nbv = load('glVertexAttrib4Nbv');
  glad__glVertexAttrib4Niv = load('glVertexAttrib4Niv');
  glad__glVertexAttrib4Nsv = load('glVertexAttrib4Nsv');
  glad__glVertexAttrib4Nub = load('glVertexAttrib4Nub');
  glad__glVertexAttrib4Nubv = load('glVertexAttrib4Nubv');
  glad__glVertexAttrib4Nuiv = load('glVertexAttrib4Nuiv');
  glad__glVertexAttrib4Nusv = load('glVertexAttrib4Nusv');
  glad__glVertexAttrib4bv = load('glVertexAttrib4bv');
  glad__glVertexAttrib4d = load('glVertexAttrib4d');
  glad__glVertexAttrib4dv = load('glVertexAttrib4dv');
  glad__glVertexAttrib4f = load('glVertexAttrib4f');
  glad__glVertexAttrib4fv = load('glVertexAttrib4fv');
  glad__glVertexAttrib4iv = load('glVertexAttrib4iv');
  glad__glVertexAttrib4s = load('glVertexAttrib4s');
  glad__glVertexAttrib4sv = load('glVertexAttrib4sv');
  glad__glVertexAttrib4ubv = load('glVertexAttrib4ubv');
  glad__glVertexAttrib4uiv = load('glVertexAttrib4uiv');
  glad__glVertexAttrib4usv = load('glVertexAttrib4usv');
  glad__glVertexAttribPointer = load('glVertexAttribPointer');
  glad__glUniformMatrix2x3fv = load('glUniformMatrix2x3fv');
  glad__glUniformMatrix2x4fv = load('glUniformMatrix2x4fv');
  glad__glUniformMatrix3x2fv = load('glUniformMatrix3x2fv');
  glad__glUniformMatrix3x4fv = load('glUniformMatrix3x4fv');
  glad__glUniformMatrix4x2fv = load('glUniformMatrix4x2fv');
  glad__glUniformMatrix4x3fv = load('glUniformMatrix4x3fv');
  glad__glBeginConditionalRender = load('glBeginConditionalRender');
  glad__glBeginTransformFeedback = load('glBeginTransformFeedback');
  glad__glBindFragDataLocation = load('glBindFragDataLocation');
  glad__glClampColor = load('glClampColor');
  glad__glClearBufferfi = load('glClearBufferfi');
  glad__glClearBufferfv = load('glClearBufferfv');
  glad__glClearBufferiv = load('glClearBufferiv');
  glad__glClearBufferuiv = load('glClearBufferuiv');
  glad__glColorMaski = load('glColorMaski');
  glad__glDisablei = load('glDisablei');
  glad__glEnablei = load('glEnablei');
  glad__glEndConditionalRender = load('glEndConditionalRender');
  glad__glEndTransformFeedback = load('glEndTransformFeedback');
  glad__glGetBooleani_v = load('glGetBooleani_v');
  glad__glGetFragDataLocation = load('glGetFragDataLocation');
  glad__glGetStringi = load('glGetStringi');
  glad__glGetTexParameterIiv = load('glGetTexParameterIiv');
  glad__glGetTexParameterIuiv = load('glGetTexParameterIuiv');
  glad__glGetTransformFeedbackVarying = load('glGetTransformFeedbackVarying');
  glad__glGetUniformuiv = load('glGetUniformuiv');
  glad__glGetVertexAttribIiv = load('glGetVertexAttribIiv');
  glad__glGetVertexAttribIuiv = load('glGetVertexAttribIuiv');
  glad__glIsEnabledi = load('glIsEnabledi');
  glad__glTexParameterIiv = load('glTexParameterIiv');
  glad__glTexParameterIuiv = load('glTexParameterIuiv');
  glad__glTransformFeedbackVaryings = load('glTransformFeedbackVaryings');
  glad__glUniform1ui = load('glUniform1ui');
  glad__glUniform1uiv = load('glUniform1uiv');
  glad__glUniform2ui = load('glUniform2ui');
  glad__glUniform2uiv = load('glUniform2uiv');
  glad__glUniform3ui = load('glUniform3ui');
  glad__glUniform3uiv = load('glUniform3uiv');
  glad__glUniform4ui = load('glUniform4ui');
  glad__glUniform4uiv = load('glUniform4uiv');
  glad__glVertexAttribI1i = load('glVertexAttribI1i');
  glad__glVertexAttribI1iv = load('glVertexAttribI1iv');
  glad__glVertexAttribI1ui = load('glVertexAttribI1ui');
  glad__glVertexAttribI1uiv = load('glVertexAttribI1uiv');
  glad__glVertexAttribI2i = load('glVertexAttribI2i');
  glad__glVertexAttribI2iv = load('glVertexAttribI2iv');
  glad__glVertexAttribI2ui = load('glVertexAttribI2ui');
  glad__glVertexAttribI2uiv = load('glVertexAttribI2uiv');
  glad__glVertexAttribI3i = load('glVertexAttribI3i');
  glad__glVertexAttribI3iv = load('glVertexAttribI3iv');
  glad__glVertexAttribI3ui = load('glVertexAttribI3ui');
  glad__glVertexAttribI3uiv = load('glVertexAttribI3uiv');
  glad__glVertexAttribI4bv = load('glVertexAttribI4bv');
  glad__glVertexAttribI4i = load('glVertexAttribI4i');
  glad__glVertexAttribI4iv = load('glVertexAttribI4iv');
  glad__glVertexAttribI4sv = load('glVertexAttribI4sv');
  glad__glVertexAttribI4ubv = load('glVertexAttribI4ubv');
  glad__glVertexAttribI4ui = load('glVertexAttribI4ui');
  glad__glVertexAttribI4uiv = load('glVertexAttribI4uiv');
  glad__glVertexAttribI4usv = load('glVertexAttribI4usv');
  glad__glVertexAttribIPointer = load('glVertexAttribIPointer');
  glad__glDrawArraysInstanced = load('glDrawArraysInstanced');
  glad__glDrawElementsInstanced = load('glDrawElementsInstanced');
  glad__glPrimitiveRestartIndex = load('glPrimitiveRestartIndex');
  glad__glTexBuffer = load('glTexBuffer');
  glad__glFramebufferTexture = load('glFramebufferTexture');
  glad__glGetBufferParameteri64v = load('glGetBufferParameteri64v');
  glad__glGetInteger64i_v = load('glGetInteger64i_v');
  glad__glVertexAttribDivisor = load('glVertexAttribDivisor');
  glad__glBlendEquationSeparatei = load('glBlendEquationSeparatei');
  glad__glBlendEquationi = load('glBlendEquationi');
  glad__glBlendFuncSeparatei = load('glBlendFuncSeparatei');
  glad__glBlendFunci = load('glBlendFunci');
  glad__glMinSampleShading = load('glMinSampleShading');
  glad__glGetGraphicsResetStatus = load('glGetGraphicsResetStatus');
  glad__glGetnCompressedTexImage = load('glGetnCompressedTexImage');
  glad__glGetnTexImage = load('glGetnTexImage');
  glad__glGetnUniformdv = load('glGetnUniformdv');
  glad__glMultiDrawArraysIndirectCount = load('glMultiDrawArraysIndirectCount');
  glad__glMultiDrawElementsIndirectCount = load('glMultiDrawElementsIndirectCount');
  glad__glSpecializeShader = load('glSpecializeShader');
  glad__glTbufferMask3DFX = load('glTbufferMask3DFX');
  glad__GLDEBUGPROCAMD = load('GLDEBUGPROCAMD');
  glad__glDebugMessageCallbackAMD = load('glDebugMessageCallbackAMD');
  glad__glDebugMessageEnableAMD = load('glDebugMessageEnableAMD');
  glad__glDebugMessageInsertAMD = load('glDebugMessageInsertAMD');
  glad__glGetDebugMessageLogAMD = load('glGetDebugMessageLogAMD');
  glad__glBlendEquationIndexedAMD = load('glBlendEquationIndexedAMD');
  glad__glBlendEquationSeparateIndexedAMD = load('glBlendEquationSeparateIndexedAMD');
  glad__glBlendFuncIndexedAMD = load('glBlendFuncIndexedAMD');
  glad__glBlendFuncSeparateIndexedAMD = load('glBlendFuncSeparateIndexedAMD');
  glad__glFramebufferSamplePositionsfvAMD = load('glFramebufferSamplePositionsfvAMD');
  glad__glGetFramebufferParameterfvAMD = load('glGetFramebufferParameterfvAMD');
  glad__glGetNamedFramebufferParameterfvAMD = load('glGetNamedFramebufferParameterfvAMD');
  glad__glNamedFramebufferSamplePositionsfvAMD = load('glNamedFramebufferSamplePositionsfvAMD');
  glad__glVertexAttribParameteriAMD = load('glVertexAttribParameteriAMD');
  glad__glMultiDrawArraysIndirectAMD = load('glMultiDrawArraysIndirectAMD');
  glad__glMultiDrawElementsIndirectAMD = load('glMultiDrawElementsIndirectAMD');
  glad__glDeleteNamesAMD = load('glDeleteNamesAMD');
  glad__glGenNamesAMD = load('glGenNamesAMD');
  glad__glIsNameAMD = load('glIsNameAMD');
  glad__glQueryObjectParameteruiAMD = load('glQueryObjectParameteruiAMD');
  glad__glBeginPerfMonitorAMD = load('glBeginPerfMonitorAMD');
  glad__glDeletePerfMonitorsAMD = load('glDeletePerfMonitorsAMD');
  glad__glEndPerfMonitorAMD = load('glEndPerfMonitorAMD');
  glad__glGenPerfMonitorsAMD = load('glGenPerfMonitorsAMD');
  glad__glGetPerfMonitorCounterDataAMD = load('glGetPerfMonitorCounterDataAMD');
  glad__glGetPerfMonitorCounterInfoAMD = load('glGetPerfMonitorCounterInfoAMD');
  glad__glGetPerfMonitorCounterStringAMD = load('glGetPerfMonitorCounterStringAMD');
  glad__glGetPerfMonitorCountersAMD = load('glGetPerfMonitorCountersAMD');
  glad__glGetPerfMonitorGroupStringAMD = load('glGetPerfMonitorGroupStringAMD');
  glad__glGetPerfMonitorGroupsAMD = load('glGetPerfMonitorGroupsAMD');
  glad__glSelectPerfMonitorCountersAMD = load('glSelectPerfMonitorCountersAMD');
  glad__glSetMultisamplefvAMD = load('glSetMultisamplefvAMD');
  glad__glTexStorageSparseAMD = load('glTexStorageSparseAMD');
  glad__glTextureStorageSparseAMD = load('glTextureStorageSparseAMD');
  glad__glStencilOpValueAMD = load('glStencilOpValueAMD');
  glad__glTessellationFactorAMD = load('glTessellationFactorAMD');
  glad__glTessellationModeAMD = load('glTessellationModeAMD');
  glad__glBlitFramebufferANGLE = load('glBlitFramebufferANGLE');
  glad__glRenderbufferStorageMultisampleANGLE = load('glRenderbufferStorageMultisampleANGLE');
  glad__glDrawArraysInstancedANGLE = load('glDrawArraysInstancedANGLE');
  glad__glDrawElementsInstancedANGLE = load('glDrawElementsInstancedANGLE');
  glad__glVertexAttribDivisorANGLE = load('glVertexAttribDivisorANGLE');
  glad__glBeginQueryANGLE = load('glBeginQueryANGLE');
  glad__glDeleteQueriesANGLE = load('glDeleteQueriesANGLE');
  glad__glEndQueryANGLE = load('glEndQueryANGLE');
  glad__glGenQueriesANGLE = load('glGenQueriesANGLE');
  glad__glGetQueryObjecti64vANGLE = load('glGetQueryObjecti64vANGLE');
  glad__glGetQueryObjectivANGLE = load('glGetQueryObjectivANGLE');
  glad__glGetQueryObjectui64vANGLE = load('glGetQueryObjectui64vANGLE');
  glad__glGetQueryObjectuivANGLE = load('glGetQueryObjectuivANGLE');
  glad__glGetQueryivANGLE = load('glGetQueryivANGLE');
  glad__glIsQueryANGLE = load('glIsQueryANGLE');
  glad__glQueryCounterANGLE = load('glQueryCounterANGLE');
  glad__glGetTranslatedShaderSourceANGLE = load('glGetTranslatedShaderSourceANGLE');
  glad__glCopyTextureLevelsAPPLE = load('glCopyTextureLevelsAPPLE');
  glad__glDrawElementArrayAPPLE = load('glDrawElementArrayAPPLE');
  glad__glDrawRangeElementArrayAPPLE = load('glDrawRangeElementArrayAPPLE');
  glad__glElementPointerAPPLE = load('glElementPointerAPPLE');
  glad__glMultiDrawElementArrayAPPLE = load('glMultiDrawElementArrayAPPLE');
  glad__glMultiDrawRangeElementArrayAPPLE = load('glMultiDrawRangeElementArrayAPPLE');
  glad__glDeleteFencesAPPLE = load('glDeleteFencesAPPLE');
  glad__glFinishFenceAPPLE = load('glFinishFenceAPPLE');
  glad__glFinishObjectAPPLE = load('glFinishObjectAPPLE');
  glad__glGenFencesAPPLE = load('glGenFencesAPPLE');
  glad__glIsFenceAPPLE = load('glIsFenceAPPLE');
  glad__glSetFenceAPPLE = load('glSetFenceAPPLE');
  glad__glTestFenceAPPLE = load('glTestFenceAPPLE');
  glad__glTestObjectAPPLE = load('glTestObjectAPPLE');
  glad__glBufferParameteriAPPLE = load('glBufferParameteriAPPLE');
  glad__glFlushMappedBufferRangeAPPLE = load('glFlushMappedBufferRangeAPPLE');
  glad__glRenderbufferStorageMultisampleAPPLE = load('glRenderbufferStorageMultisampleAPPLE');
  glad__glResolveMultisampleFramebufferAPPLE = load('glResolveMultisampleFramebufferAPPLE');
  glad__glGetObjectParameterivAPPLE = load('glGetObjectParameterivAPPLE');
  glad__glObjectPurgeableAPPLE = load('glObjectPurgeableAPPLE');
  glad__glObjectUnpurgeableAPPLE = load('glObjectUnpurgeableAPPLE');
  glad__glClientWaitSyncAPPLE = load('glClientWaitSyncAPPLE');
  glad__glDeleteSyncAPPLE = load('glDeleteSyncAPPLE');
  glad__glFenceSyncAPPLE = load('glFenceSyncAPPLE');
  glad__glGetInteger64vAPPLE = load('glGetInteger64vAPPLE');
  glad__glGetSyncivAPPLE = load('glGetSyncivAPPLE');
  glad__glIsSyncAPPLE = load('glIsSyncAPPLE');
  glad__glWaitSyncAPPLE = load('glWaitSyncAPPLE');
  glad__glGetTexParameterPointervAPPLE = load('glGetTexParameterPointervAPPLE');
  glad__glTextureRangeAPPLE = load('glTextureRangeAPPLE');
  glad__glBindVertexArrayAPPLE = load('glBindVertexArrayAPPLE');
  glad__glDeleteVertexArraysAPPLE = load('glDeleteVertexArraysAPPLE');
  glad__glGenVertexArraysAPPLE = load('glGenVertexArraysAPPLE');
  glad__glIsVertexArrayAPPLE = load('glIsVertexArrayAPPLE');
  glad__glFlushVertexArrayRangeAPPLE = load('glFlushVertexArrayRangeAPPLE');
  glad__glVertexArrayParameteriAPPLE = load('glVertexArrayParameteriAPPLE');
  glad__glVertexArrayRangeAPPLE = load('glVertexArrayRangeAPPLE');
  glad__glDisableVertexAttribAPPLE = load('glDisableVertexAttribAPPLE');
  glad__glEnableVertexAttribAPPLE = load('glEnableVertexAttribAPPLE');
  glad__glIsVertexAttribEnabledAPPLE = load('glIsVertexAttribEnabledAPPLE');
  glad__glMapVertexAttrib1dAPPLE = load('glMapVertexAttrib1dAPPLE');
  glad__glMapVertexAttrib1fAPPLE = load('glMapVertexAttrib1fAPPLE');
  glad__glMapVertexAttrib2dAPPLE = load('glMapVertexAttrib2dAPPLE');
  glad__glMapVertexAttrib2fAPPLE = load('glMapVertexAttrib2fAPPLE');
  glad__glClearDepthf = load('glClearDepthf');
  glad__glDepthRangef = load('glDepthRangef');
  glad__glGetShaderPrecisionFormat = load('glGetShaderPrecisionFormat');
  glad__glReleaseShaderCompiler = load('glReleaseShaderCompiler');
  glad__glShaderBinary = load('glShaderBinary');
  glad__glMemoryBarrierByRegion = load('glMemoryBarrierByRegion');
  glad__glPrimitiveBoundingBoxARB = load('glPrimitiveBoundingBoxARB');
  glad__glDrawArraysInstancedBaseInstance = load('glDrawArraysInstancedBaseInstance');
  glad__glDrawElementsInstancedBaseInstance = load('glDrawElementsInstancedBaseInstance');
  glad__glDrawElementsInstancedBaseVertexBaseInstance = load('glDrawElementsInstancedBaseVertexBaseInstance');
  glad__glGetImageHandleARB = load('glGetImageHandleARB');
  glad__glGetTextureHandleARB = load('glGetTextureHandleARB');
  glad__glGetTextureSamplerHandleARB = load('glGetTextureSamplerHandleARB');
  glad__glGetVertexAttribLui64vARB = load('glGetVertexAttribLui64vARB');
  glad__glIsImageHandleResidentARB = load('glIsImageHandleResidentARB');
  glad__glIsTextureHandleResidentARB = load('glIsTextureHandleResidentARB');
  glad__glMakeImageHandleNonResidentARB = load('glMakeImageHandleNonResidentARB');
  glad__glMakeImageHandleResidentARB = load('glMakeImageHandleResidentARB');
  glad__glMakeTextureHandleNonResidentARB = load('glMakeTextureHandleNonResidentARB');
  glad__glMakeTextureHandleResidentARB = load('glMakeTextureHandleResidentARB');
  glad__glProgramUniformHandleui64ARB = load('glProgramUniformHandleui64ARB');
  glad__glProgramUniformHandleui64vARB = load('glProgramUniformHandleui64vARB');
  glad__glUniformHandleui64ARB = load('glUniformHandleui64ARB');
  glad__glUniformHandleui64vARB = load('glUniformHandleui64vARB');
  glad__glVertexAttribL1ui64ARB = load('glVertexAttribL1ui64ARB');
  glad__glVertexAttribL1ui64vARB = load('glVertexAttribL1ui64vARB');
  glad__glBindFragDataLocationIndexed = load('glBindFragDataLocationIndexed');
  glad__glGetFragDataIndex = load('glGetFragDataIndex');
  glad__glBufferStorage = load('glBufferStorage');
  glad__glCreateSyncFromCLeventARB = load('glCreateSyncFromCLeventARB');
  glad__glClearBufferData = load('glClearBufferData');
  glad__glClearBufferSubData = load('glClearBufferSubData');
  glad__glClearNamedBufferDataEXT = load('glClearNamedBufferDataEXT');
  glad__glClearNamedBufferSubDataEXT = load('glClearNamedBufferSubDataEXT');
  glad__glClearTexImage = load('glClearTexImage');
  glad__glClearTexSubImage = load('glClearTexSubImage');
  glad__glClipControl = load('glClipControl');
  glad__glClampColorARB = load('glClampColorARB');
  glad__glDispatchCompute = load('glDispatchCompute');
  glad__glDispatchComputeIndirect = load('glDispatchComputeIndirect');
  glad__glDispatchComputeGroupSizeARB = load('glDispatchComputeGroupSizeARB');
  glad__glCopyBufferSubData = load('glCopyBufferSubData');
  glad__glCopyImageSubData = load('glCopyImageSubData');
  glad__GLDEBUGPROCARB = load('GLDEBUGPROCARB');
  glad__glDebugMessageCallbackARB = load('glDebugMessageCallbackARB');
  glad__glDebugMessageControlARB = load('glDebugMessageControlARB');
  glad__glDebugMessageInsertARB = load('glDebugMessageInsertARB');
  glad__glGetDebugMessageLogARB = load('glGetDebugMessageLogARB');
  glad__glBindTextureUnit = load('glBindTextureUnit');
  glad__glBlitNamedFramebuffer = load('glBlitNamedFramebuffer');
  glad__glCheckNamedFramebufferStatus = load('glCheckNamedFramebufferStatus');
  glad__glClearNamedBufferData = load('glClearNamedBufferData');
  glad__glClearNamedBufferSubData = load('glClearNamedBufferSubData');
  glad__glClearNamedFramebufferfi = load('glClearNamedFramebufferfi');
  glad__glClearNamedFramebufferfv = load('glClearNamedFramebufferfv');
  glad__glClearNamedFramebufferiv = load('glClearNamedFramebufferiv');
  glad__glClearNamedFramebufferuiv = load('glClearNamedFramebufferuiv');
  glad__glCompressedTextureSubImage1D = load('glCompressedTextureSubImage1D');
  glad__glCompressedTextureSubImage2D = load('glCompressedTextureSubImage2D');
  glad__glCompressedTextureSubImage3D = load('glCompressedTextureSubImage3D');
  glad__glCopyNamedBufferSubData = load('glCopyNamedBufferSubData');
  glad__glCopyTextureSubImage1D = load('glCopyTextureSubImage1D');
  glad__glCopyTextureSubImage2D = load('glCopyTextureSubImage2D');
  glad__glCopyTextureSubImage3D = load('glCopyTextureSubImage3D');
  glad__glCreateBuffers = load('glCreateBuffers');
  glad__glCreateFramebuffers = load('glCreateFramebuffers');
  glad__glCreateProgramPipelines = load('glCreateProgramPipelines');
  glad__glCreateQueries = load('glCreateQueries');
  glad__glCreateRenderbuffers = load('glCreateRenderbuffers');
  glad__glCreateSamplers = load('glCreateSamplers');
  glad__glCreateTextures = load('glCreateTextures');
  glad__glCreateTransformFeedbacks = load('glCreateTransformFeedbacks');
  glad__glCreateVertexArrays = load('glCreateVertexArrays');
  glad__glDisableVertexArrayAttrib = load('glDisableVertexArrayAttrib');
  glad__glEnableVertexArrayAttrib = load('glEnableVertexArrayAttrib');
  glad__glFlushMappedNamedBufferRange = load('glFlushMappedNamedBufferRange');
  glad__glGenerateTextureMipmap = load('glGenerateTextureMipmap');
  glad__glGetCompressedTextureImage = load('glGetCompressedTextureImage');
  glad__glGetNamedBufferParameteri64v = load('glGetNamedBufferParameteri64v');
  glad__glGetNamedBufferParameteriv = load('glGetNamedBufferParameteriv');
  glad__glGetNamedBufferPointerv = load('glGetNamedBufferPointerv');
  glad__glGetNamedBufferSubData = load('glGetNamedBufferSubData');
  glad__glGetNamedFramebufferAttachmentParameteriv = load('glGetNamedFramebufferAttachmentParameteriv');
  glad__glGetNamedFramebufferParameteriv = load('glGetNamedFramebufferParameteriv');
  glad__glGetNamedRenderbufferParameteriv = load('glGetNamedRenderbufferParameteriv');
  glad__glGetQueryBufferObjecti64v = load('glGetQueryBufferObjecti64v');
  glad__glGetQueryBufferObjectiv = load('glGetQueryBufferObjectiv');
  glad__glGetQueryBufferObjectui64v = load('glGetQueryBufferObjectui64v');
  glad__glGetQueryBufferObjectuiv = load('glGetQueryBufferObjectuiv');
  glad__glGetTextureImage = load('glGetTextureImage');
  glad__glGetTextureLevelParameterfv = load('glGetTextureLevelParameterfv');
  glad__glGetTextureLevelParameteriv = load('glGetTextureLevelParameteriv');
  glad__glGetTextureParameterIiv = load('glGetTextureParameterIiv');
  glad__glGetTextureParameterIuiv = load('glGetTextureParameterIuiv');
  glad__glGetTextureParameterfv = load('glGetTextureParameterfv');
  glad__glGetTextureParameteriv = load('glGetTextureParameteriv');
  glad__glGetTransformFeedbacki64_v = load('glGetTransformFeedbacki64_v');
  glad__glGetTransformFeedbacki_v = load('glGetTransformFeedbacki_v');
  glad__glGetTransformFeedbackiv = load('glGetTransformFeedbackiv');
  glad__glGetVertexArrayIndexed64iv = load('glGetVertexArrayIndexed64iv');
  glad__glGetVertexArrayIndexediv = load('glGetVertexArrayIndexediv');
  glad__glGetVertexArrayiv = load('glGetVertexArrayiv');
  glad__glInvalidateNamedFramebufferData = load('glInvalidateNamedFramebufferData');
  glad__glInvalidateNamedFramebufferSubData = load('glInvalidateNamedFramebufferSubData');
  glad__glMapNamedBuffer = load('glMapNamedBuffer');
  glad__glMapNamedBufferRange = load('glMapNamedBufferRange');
  glad__glNamedBufferData = load('glNamedBufferData');
  glad__glNamedBufferStorage = load('glNamedBufferStorage');
  glad__glNamedBufferSubData = load('glNamedBufferSubData');
  glad__glNamedFramebufferDrawBuffer = load('glNamedFramebufferDrawBuffer');
  glad__glNamedFramebufferDrawBuffers = load('glNamedFramebufferDrawBuffers');
  glad__glNamedFramebufferParameteri = load('glNamedFramebufferParameteri');
  glad__glNamedFramebufferReadBuffer = load('glNamedFramebufferReadBuffer');
  glad__glNamedFramebufferRenderbuffer = load('glNamedFramebufferRenderbuffer');
  glad__glNamedFramebufferTexture = load('glNamedFramebufferTexture');
  glad__glNamedFramebufferTextureLayer = load('glNamedFramebufferTextureLayer');
  glad__glNamedRenderbufferStorage = load('glNamedRenderbufferStorage');
  glad__glNamedRenderbufferStorageMultisample = load('glNamedRenderbufferStorageMultisample');
  glad__glTextureBuffer = load('glTextureBuffer');
  glad__glTextureBufferRange = load('glTextureBufferRange');
  glad__glTextureParameterIiv = load('glTextureParameterIiv');
  glad__glTextureParameterIuiv = load('glTextureParameterIuiv');
  glad__glTextureParameterf = load('glTextureParameterf');
  glad__glTextureParameterfv = load('glTextureParameterfv');
  glad__glTextureParameteri = load('glTextureParameteri');
  glad__glTextureParameteriv = load('glTextureParameteriv');
  glad__glTextureStorage1D = load('glTextureStorage1D');
  glad__glTextureStorage2D = load('glTextureStorage2D');
  glad__glTextureStorage2DMultisample = load('glTextureStorage2DMultisample');
  glad__glTextureStorage3D = load('glTextureStorage3D');
  glad__glTextureStorage3DMultisample = load('glTextureStorage3DMultisample');
  glad__glTextureSubImage1D = load('glTextureSubImage1D');
  glad__glTextureSubImage2D = load('glTextureSubImage2D');
  glad__glTextureSubImage3D = load('glTextureSubImage3D');
  glad__glTransformFeedbackBufferBase = load('glTransformFeedbackBufferBase');
  glad__glTransformFeedbackBufferRange = load('glTransformFeedbackBufferRange');
  glad__glUnmapNamedBuffer = load('glUnmapNamedBuffer');
  glad__glVertexArrayAttribBinding = load('glVertexArrayAttribBinding');
  glad__glVertexArrayAttribFormat = load('glVertexArrayAttribFormat');
  glad__glVertexArrayAttribIFormat = load('glVertexArrayAttribIFormat');
  glad__glVertexArrayAttribLFormat = load('glVertexArrayAttribLFormat');
  glad__glVertexArrayBindingDivisor = load('glVertexArrayBindingDivisor');
  glad__glVertexArrayElementBuffer = load('glVertexArrayElementBuffer');
  glad__glVertexArrayVertexBuffer = load('glVertexArrayVertexBuffer');
  glad__glVertexArrayVertexBuffers = load('glVertexArrayVertexBuffers');
  glad__glDrawBuffersARB = load('glDrawBuffersARB');
  glad__glBlendEquationSeparateiARB = load('glBlendEquationSeparateiARB');
  glad__glBlendEquationiARB = load('glBlendEquationiARB');
  glad__glBlendFuncSeparateiARB = load('glBlendFuncSeparateiARB');
  glad__glBlendFunciARB = load('glBlendFunciARB');
  glad__glDrawElementsBaseVertex = load('glDrawElementsBaseVertex');
  glad__glDrawElementsInstancedBaseVertex = load('glDrawElementsInstancedBaseVertex');
  glad__glDrawRangeElementsBaseVertex = load('glDrawRangeElementsBaseVertex');
  glad__glMultiDrawElementsBaseVertex = load('glMultiDrawElementsBaseVertex');
  glad__glDrawArraysIndirect = load('glDrawArraysIndirect');
  glad__glDrawElementsIndirect = load('glDrawElementsIndirect');
  glad__glFramebufferParameteri = load('glFramebufferParameteri');
  glad__glGetFramebufferParameteriv = load('glGetFramebufferParameteriv');
  glad__glGetNamedFramebufferParameterivEXT = load('glGetNamedFramebufferParameterivEXT');
  glad__glNamedFramebufferParameteriEXT = load('glNamedFramebufferParameteriEXT');
  glad__glBindFramebuffer = load('glBindFramebuffer');
  glad__glBindRenderbuffer = load('glBindRenderbuffer');
  glad__glBlitFramebuffer = load('glBlitFramebuffer');
  glad__glCheckFramebufferStatus = load('glCheckFramebufferStatus');
  glad__glDeleteFramebuffers = load('glDeleteFramebuffers');
  glad__glDeleteRenderbuffers = load('glDeleteRenderbuffers');
  glad__glFramebufferRenderbuffer = load('glFramebufferRenderbuffer');
  glad__glFramebufferTexture1D = load('glFramebufferTexture1D');
  glad__glFramebufferTexture2D = load('glFramebufferTexture2D');
  glad__glFramebufferTexture3D = load('glFramebufferTexture3D');
  glad__glFramebufferTextureLayer = load('glFramebufferTextureLayer');
  glad__glGenFramebuffers = load('glGenFramebuffers');
  glad__glGenRenderbuffers = load('glGenRenderbuffers');
  glad__glGenerateMipmap = load('glGenerateMipmap');
  glad__glGetFramebufferAttachmentParameteriv = load('glGetFramebufferAttachmentParameteriv');
  glad__glGetRenderbufferParameteriv = load('glGetRenderbufferParameteriv');
  glad__glIsFramebuffer = load('glIsFramebuffer');
  glad__glIsRenderbuffer = load('glIsRenderbuffer');
  glad__glRenderbufferStorage = load('glRenderbufferStorage');
  glad__glRenderbufferStorageMultisample = load('glRenderbufferStorageMultisample');
  glad__glFramebufferTextureARB = load('glFramebufferTextureARB');
  glad__glFramebufferTextureFaceARB = load('glFramebufferTextureFaceARB');
  glad__glFramebufferTextureLayerARB = load('glFramebufferTextureLayerARB');
  glad__glProgramParameteriARB = load('glProgramParameteriARB');
  glad__glGetProgramBinary = load('glGetProgramBinary');
  glad__glProgramBinary = load('glProgramBinary');
  glad__glProgramParameteri = load('glProgramParameteri');
  glad__glGetCompressedTextureSubImage = load('glGetCompressedTextureSubImage');
  glad__glGetTextureSubImage = load('glGetTextureSubImage');
  glad__glSpecializeShaderARB = load('glSpecializeShaderARB');
  glad__glGetUniformdv = load('glGetUniformdv');
  glad__glUniform1d = load('glUniform1d');
  glad__glUniform1dv = load('glUniform1dv');
  glad__glUniform2d = load('glUniform2d');
  glad__glUniform2dv = load('glUniform2dv');
  glad__glUniform3d = load('glUniform3d');
  glad__glUniform3dv = load('glUniform3dv');
  glad__glUniform4d = load('glUniform4d');
  glad__glUniform4dv = load('glUniform4dv');
  glad__glUniformMatrix2dv = load('glUniformMatrix2dv');
  glad__glUniformMatrix2x3dv = load('glUniformMatrix2x3dv');
  glad__glUniformMatrix2x4dv = load('glUniformMatrix2x4dv');
  glad__glUniformMatrix3dv = load('glUniformMatrix3dv');
  glad__glUniformMatrix3x2dv = load('glUniformMatrix3x2dv');
  glad__glUniformMatrix3x4dv = load('glUniformMatrix3x4dv');
  glad__glUniformMatrix4dv = load('glUniformMatrix4dv');
  glad__glUniformMatrix4x2dv = load('glUniformMatrix4x2dv');
  glad__glUniformMatrix4x3dv = load('glUniformMatrix4x3dv');
  glad__glGetUniformi64vARB = load('glGetUniformi64vARB');
  glad__glGetUniformui64vARB = load('glGetUniformui64vARB');
  glad__glGetnUniformi64vARB = load('glGetnUniformi64vARB');
  glad__glGetnUniformui64vARB = load('glGetnUniformui64vARB');
  glad__glProgramUniform1i64ARB = load('glProgramUniform1i64ARB');
  glad__glProgramUniform1i64vARB = load('glProgramUniform1i64vARB');
  glad__glProgramUniform1ui64ARB = load('glProgramUniform1ui64ARB');
  glad__glProgramUniform1ui64vARB = load('glProgramUniform1ui64vARB');
  glad__glProgramUniform2i64ARB = load('glProgramUniform2i64ARB');
  glad__glProgramUniform2i64vARB = load('glProgramUniform2i64vARB');
  glad__glProgramUniform2ui64ARB = load('glProgramUniform2ui64ARB');
  glad__glProgramUniform2ui64vARB = load('glProgramUniform2ui64vARB');
  glad__glProgramUniform3i64ARB = load('glProgramUniform3i64ARB');
  glad__glProgramUniform3i64vARB = load('glProgramUniform3i64vARB');
  glad__glProgramUniform3ui64ARB = load('glProgramUniform3ui64ARB');
  glad__glProgramUniform3ui64vARB = load('glProgramUniform3ui64vARB');
  glad__glProgramUniform4i64ARB = load('glProgramUniform4i64ARB');
  glad__glProgramUniform4i64vARB = load('glProgramUniform4i64vARB');
  glad__glProgramUniform4ui64ARB = load('glProgramUniform4ui64ARB');
  glad__glProgramUniform4ui64vARB = load('glProgramUniform4ui64vARB');
  glad__glUniform1i64ARB = load('glUniform1i64ARB');
  glad__glUniform1i64vARB = load('glUniform1i64vARB');
  glad__glUniform1ui64ARB = load('glUniform1ui64ARB');
  glad__glUniform1ui64vARB = load('glUniform1ui64vARB');
  glad__glUniform2i64ARB = load('glUniform2i64ARB');
  glad__glUniform2i64vARB = load('glUniform2i64vARB');
  glad__glUniform2ui64ARB = load('glUniform2ui64ARB');
  glad__glUniform2ui64vARB = load('glUniform2ui64vARB');
  glad__glUniform3i64ARB = load('glUniform3i64ARB');
  glad__glUniform3i64vARB = load('glUniform3i64vARB');
  glad__glUniform3ui64ARB = load('glUniform3ui64ARB');
  glad__glUniform3ui64vARB = load('glUniform3ui64vARB');
  glad__glUniform4i64ARB = load('glUniform4i64ARB');
  glad__glUniform4i64vARB = load('glUniform4i64vARB');
  glad__glUniform4ui64ARB = load('glUniform4ui64ARB');
  glad__glUniform4ui64vARB = load('glUniform4ui64vARB');
  glad__glColorSubTable = load('glColorSubTable');
  glad__glColorTable = load('glColorTable');
  glad__glColorTableParameterfv = load('glColorTableParameterfv');
  glad__glColorTableParameteriv = load('glColorTableParameteriv');
  glad__glConvolutionFilter1D = load('glConvolutionFilter1D');
  glad__glConvolutionFilter2D = load('glConvolutionFilter2D');
  glad__glConvolutionParameterf = load('glConvolutionParameterf');
  glad__glConvolutionParameterfv = load('glConvolutionParameterfv');
  glad__glConvolutionParameteri = load('glConvolutionParameteri');
  glad__glConvolutionParameteriv = load('glConvolutionParameteriv');
  glad__glCopyColorSubTable = load('glCopyColorSubTable');
  glad__glCopyColorTable = load('glCopyColorTable');
  glad__glCopyConvolutionFilter1D = load('glCopyConvolutionFilter1D');
  glad__glCopyConvolutionFilter2D = load('glCopyConvolutionFilter2D');
  glad__glGetColorTable = load('glGetColorTable');
  glad__glGetColorTableParameterfv = load('glGetColorTableParameterfv');
  glad__glGetColorTableParameteriv = load('glGetColorTableParameteriv');
  glad__glGetConvolutionFilter = load('glGetConvolutionFilter');
  glad__glGetConvolutionParameterfv = load('glGetConvolutionParameterfv');
  glad__glGetConvolutionParameteriv = load('glGetConvolutionParameteriv');
  glad__glGetHistogram = load('glGetHistogram');
  glad__glGetHistogramParameterfv = load('glGetHistogramParameterfv');
  glad__glGetHistogramParameteriv = load('glGetHistogramParameteriv');
  glad__glGetMinmax = load('glGetMinmax');
  glad__glGetMinmaxParameterfv = load('glGetMinmaxParameterfv');
  glad__glGetMinmaxParameteriv = load('glGetMinmaxParameteriv');
  glad__glGetSeparableFilter = load('glGetSeparableFilter');
  glad__glHistogram = load('glHistogram');
  glad__glMinmax = load('glMinmax');
  glad__glResetHistogram = load('glResetHistogram');
  glad__glResetMinmax = load('glResetMinmax');
  glad__glSeparableFilter2D = load('glSeparableFilter2D');
  glad__glMultiDrawArraysIndirectCountARB = load('glMultiDrawArraysIndirectCountARB');
  glad__glMultiDrawElementsIndirectCountARB = load('glMultiDrawElementsIndirectCountARB');
  glad__glDrawArraysInstancedARB = load('glDrawArraysInstancedARB');
  glad__glDrawElementsInstancedARB = load('glDrawElementsInstancedARB');
  glad__glVertexAttribDivisorARB = load('glVertexAttribDivisorARB');
  glad__glGetInternalformativ = load('glGetInternalformativ');
  glad__glGetInternalformati64v = load('glGetInternalformati64v');
  glad__glInvalidateBufferData = load('glInvalidateBufferData');
  glad__glInvalidateBufferSubData = load('glInvalidateBufferSubData');
  glad__glInvalidateFramebuffer = load('glInvalidateFramebuffer');
  glad__glInvalidateSubFramebuffer = load('glInvalidateSubFramebuffer');
  glad__glInvalidateTexImage = load('glInvalidateTexImage');
  glad__glInvalidateTexSubImage = load('glInvalidateTexSubImage');
  glad__glFlushMappedBufferRange = load('glFlushMappedBufferRange');
  glad__glMapBufferRange = load('glMapBufferRange');
  glad__glCurrentPaletteMatrixARB = load('glCurrentPaletteMatrixARB');
  glad__glMatrixIndexPointerARB = load('glMatrixIndexPointerARB');
  glad__glMatrixIndexubvARB = load('glMatrixIndexubvARB');
  glad__glMatrixIndexuivARB = load('glMatrixIndexuivARB');
  glad__glMatrixIndexusvARB = load('glMatrixIndexusvARB');
  glad__glBindBuffersBase = load('glBindBuffersBase');
  glad__glBindBuffersRange = load('glBindBuffersRange');
  glad__glBindImageTextures = load('glBindImageTextures');
  glad__glBindSamplers = load('glBindSamplers');
  glad__glBindTextures = load('glBindTextures');
  glad__glBindVertexBuffers = load('glBindVertexBuffers');
  glad__glMultiDrawArraysIndirect = load('glMultiDrawArraysIndirect');
  glad__glMultiDrawElementsIndirect = load('glMultiDrawElementsIndirect');
  glad__glSampleCoverageARB = load('glSampleCoverageARB');
  glad__glActiveTextureARB = load('glActiveTextureARB');
  glad__glClientActiveTextureARB = load('glClientActiveTextureARB');
  glad__glMultiTexCoord1dARB = load('glMultiTexCoord1dARB');
  glad__glMultiTexCoord1dvARB = load('glMultiTexCoord1dvARB');
  glad__glMultiTexCoord1fARB = load('glMultiTexCoord1fARB');
  glad__glMultiTexCoord1fvARB = load('glMultiTexCoord1fvARB');
  glad__glMultiTexCoord1iARB = load('glMultiTexCoord1iARB');
  glad__glMultiTexCoord1ivARB = load('glMultiTexCoord1ivARB');
  glad__glMultiTexCoord1sARB = load('glMultiTexCoord1sARB');
  glad__glMultiTexCoord1svARB = load('glMultiTexCoord1svARB');
  glad__glMultiTexCoord2dARB = load('glMultiTexCoord2dARB');
  glad__glMultiTexCoord2dvARB = load('glMultiTexCoord2dvARB');
  glad__glMultiTexCoord2fARB = load('glMultiTexCoord2fARB');
  glad__glMultiTexCoord2fvARB = load('glMultiTexCoord2fvARB');
  glad__glMultiTexCoord2iARB = load('glMultiTexCoord2iARB');
  glad__glMultiTexCoord2ivARB = load('glMultiTexCoord2ivARB');
  glad__glMultiTexCoord2sARB = load('glMultiTexCoord2sARB');
  glad__glMultiTexCoord2svARB = load('glMultiTexCoord2svARB');
  glad__glMultiTexCoord3dARB = load('glMultiTexCoord3dARB');
  glad__glMultiTexCoord3dvARB = load('glMultiTexCoord3dvARB');
  glad__glMultiTexCoord3fARB = load('glMultiTexCoord3fARB');
  glad__glMultiTexCoord3fvARB = load('glMultiTexCoord3fvARB');
  glad__glMultiTexCoord3iARB = load('glMultiTexCoord3iARB');
  glad__glMultiTexCoord3ivARB = load('glMultiTexCoord3ivARB');
  glad__glMultiTexCoord3sARB = load('glMultiTexCoord3sARB');
  glad__glMultiTexCoord3svARB = load('glMultiTexCoord3svARB');
  glad__glMultiTexCoord4dARB = load('glMultiTexCoord4dARB');
  glad__glMultiTexCoord4dvARB = load('glMultiTexCoord4dvARB');
  glad__glMultiTexCoord4fARB = load('glMultiTexCoord4fARB');
  glad__glMultiTexCoord4fvARB = load('glMultiTexCoord4fvARB');
  glad__glMultiTexCoord4iARB = load('glMultiTexCoord4iARB');
  glad__glMultiTexCoord4ivARB = load('glMultiTexCoord4ivARB');
  glad__glMultiTexCoord4sARB = load('glMultiTexCoord4sARB');
  glad__glMultiTexCoord4svARB = load('glMultiTexCoord4svARB');
  glad__glBeginQueryARB = load('glBeginQueryARB');
  glad__glDeleteQueriesARB = load('glDeleteQueriesARB');
  glad__glEndQueryARB = load('glEndQueryARB');
  glad__glGenQueriesARB = load('glGenQueriesARB');
  glad__glGetQueryObjectivARB = load('glGetQueryObjectivARB');
  glad__glGetQueryObjectuivARB = load('glGetQueryObjectuivARB');
  glad__glGetQueryivARB = load('glGetQueryivARB');
  glad__glIsQueryARB = load('glIsQueryARB');
  glad__glMaxShaderCompilerThreadsARB = load('glMaxShaderCompilerThreadsARB');
  glad__glPointParameterfARB = load('glPointParameterfARB');
  glad__glPointParameterfvARB = load('glPointParameterfvARB');
  glad__glPolygonOffsetClamp = load('glPolygonOffsetClamp');
  glad__glGetProgramInterfaceiv = load('glGetProgramInterfaceiv');
  glad__glGetProgramResourceIndex = load('glGetProgramResourceIndex');
  glad__glGetProgramResourceLocation = load('glGetProgramResourceLocation');
  glad__glGetProgramResourceLocationIndex = load('glGetProgramResourceLocationIndex');
  glad__glGetProgramResourceName = load('glGetProgramResourceName');
  glad__glGetProgramResourceiv = load('glGetProgramResourceiv');
  glad__glProvokingVertex = load('glProvokingVertex');
  glad__glGetGraphicsResetStatusARB = load('glGetGraphicsResetStatusARB');
  glad__glGetnColorTableARB = load('glGetnColorTableARB');
  glad__glGetnCompressedTexImageARB = load('glGetnCompressedTexImageARB');
  glad__glGetnConvolutionFilterARB = load('glGetnConvolutionFilterARB');
  glad__glGetnHistogramARB = load('glGetnHistogramARB');
  glad__glGetnMapdvARB = load('glGetnMapdvARB');
  glad__glGetnMapfvARB = load('glGetnMapfvARB');
  glad__glGetnMapivARB = load('glGetnMapivARB');
  glad__glGetnMinmaxARB = load('glGetnMinmaxARB');
  glad__glGetnPixelMapfvARB = load('glGetnPixelMapfvARB');
  glad__glGetnPixelMapuivARB = load('glGetnPixelMapuivARB');
  glad__glGetnPixelMapusvARB = load('glGetnPixelMapusvARB');
  glad__glGetnPolygonStippleARB = load('glGetnPolygonStippleARB');
  glad__glGetnSeparableFilterARB = load('glGetnSeparableFilterARB');
  glad__glGetnTexImageARB = load('glGetnTexImageARB');
  glad__glGetnUniformdvARB = load('glGetnUniformdvARB');
  glad__glGetnUniformfvARB = load('glGetnUniformfvARB');
  glad__glGetnUniformivARB = load('glGetnUniformivARB');
  glad__glGetnUniformuivARB = load('glGetnUniformuivARB');
  glad__glReadnPixelsARB = load('glReadnPixelsARB');
  glad__glFramebufferSampleLocationsfvARB = load('glFramebufferSampleLocationsfvARB');
  glad__glNamedFramebufferSampleLocationsfvARB = load('glNamedFramebufferSampleLocationsfvARB');
  glad__glMinSampleShadingARB = load('glMinSampleShadingARB');
  glad__glBindSampler = load('glBindSampler');
  glad__glDeleteSamplers = load('glDeleteSamplers');
  glad__glGenSamplers = load('glGenSamplers');
  glad__glGetSamplerParameterIiv = load('glGetSamplerParameterIiv');
  glad__glGetSamplerParameterIuiv = load('glGetSamplerParameterIuiv');
  glad__glGetSamplerParameterfv = load('glGetSamplerParameterfv');
  glad__glGetSamplerParameteriv = load('glGetSamplerParameteriv');
  glad__glIsSampler = load('glIsSampler');
  glad__glSamplerParameterIiv = load('glSamplerParameterIiv');
  glad__glSamplerParameterIuiv = load('glSamplerParameterIuiv');
  glad__glSamplerParameterf = load('glSamplerParameterf');
  glad__glSamplerParameterfv = load('glSamplerParameterfv');
  glad__glSamplerParameteri = load('glSamplerParameteri');
  glad__glSamplerParameteriv = load('glSamplerParameteriv');
  glad__glActiveShaderProgram = load('glActiveShaderProgram');
  glad__glBindProgramPipeline = load('glBindProgramPipeline');
  glad__glCreateShaderProgramv = load('glCreateShaderProgramv');
  glad__glDeleteProgramPipelines = load('glDeleteProgramPipelines');
  glad__glGenProgramPipelines = load('glGenProgramPipelines');
  glad__glGetProgramPipelineInfoLog = load('glGetProgramPipelineInfoLog');
  glad__glGetProgramPipelineiv = load('glGetProgramPipelineiv');
  glad__glIsProgramPipeline = load('glIsProgramPipeline');
  glad__glProgramUniform1d = load('glProgramUniform1d');
  glad__glProgramUniform1dv = load('glProgramUniform1dv');
  glad__glProgramUniform1f = load('glProgramUniform1f');
  glad__glProgramUniform1fv = load('glProgramUniform1fv');
  glad__glProgramUniform1i = load('glProgramUniform1i');
  glad__glProgramUniform1iv = load('glProgramUniform1iv');
  glad__glProgramUniform1ui = load('glProgramUniform1ui');
  glad__glProgramUniform1uiv = load('glProgramUniform1uiv');
  glad__glProgramUniform2d = load('glProgramUniform2d');
  glad__glProgramUniform2dv = load('glProgramUniform2dv');
  glad__glProgramUniform2f = load('glProgramUniform2f');
  glad__glProgramUniform2fv = load('glProgramUniform2fv');
  glad__glProgramUniform2i = load('glProgramUniform2i');
  glad__glProgramUniform2iv = load('glProgramUniform2iv');
  glad__glProgramUniform2ui = load('glProgramUniform2ui');
  glad__glProgramUniform2uiv = load('glProgramUniform2uiv');
  glad__glProgramUniform3d = load('glProgramUniform3d');
  glad__glProgramUniform3dv = load('glProgramUniform3dv');
  glad__glProgramUniform3f = load('glProgramUniform3f');
  glad__glProgramUniform3fv = load('glProgramUniform3fv');
  glad__glProgramUniform3i = load('glProgramUniform3i');
  glad__glProgramUniform3iv = load('glProgramUniform3iv');
  glad__glProgramUniform3ui = load('glProgramUniform3ui');
  glad__glProgramUniform3uiv = load('glProgramUniform3uiv');
  glad__glProgramUniform4d = load('glProgramUniform4d');
  glad__glProgramUniform4dv = load('glProgramUniform4dv');
  glad__glProgramUniform4f = load('glProgramUniform4f');
  glad__glProgramUniform4fv = load('glProgramUniform4fv');
  glad__glProgramUniform4i = load('glProgramUniform4i');
  glad__glProgramUniform4iv = load('glProgramUniform4iv');
  glad__glProgramUniform4ui = load('glProgramUniform4ui');
  glad__glProgramUniform4uiv = load('glProgramUniform4uiv');
  glad__glProgramUniformMatrix2dv = load('glProgramUniformMatrix2dv');
  glad__glProgramUniformMatrix2fv = load('glProgramUniformMatrix2fv');
  glad__glProgramUniformMatrix2x3dv = load('glProgramUniformMatrix2x3dv');
  glad__glProgramUniformMatrix2x3fv = load('glProgramUniformMatrix2x3fv');
  glad__glProgramUniformMatrix2x4dv = load('glProgramUniformMatrix2x4dv');
  glad__glProgramUniformMatrix2x4fv = load('glProgramUniformMatrix2x4fv');
  glad__glProgramUniformMatrix3dv = load('glProgramUniformMatrix3dv');
  glad__glProgramUniformMatrix3fv = load('glProgramUniformMatrix3fv');
  glad__glProgramUniformMatrix3x2dv = load('glProgramUniformMatrix3x2dv');
  glad__glProgramUniformMatrix3x2fv = load('glProgramUniformMatrix3x2fv');
  glad__glProgramUniformMatrix3x4dv = load('glProgramUniformMatrix3x4dv');
  glad__glProgramUniformMatrix3x4fv = load('glProgramUniformMatrix3x4fv');
  glad__glProgramUniformMatrix4dv = load('glProgramUniformMatrix4dv');
  glad__glProgramUniformMatrix4fv = load('glProgramUniformMatrix4fv');
  glad__glProgramUniformMatrix4x2dv = load('glProgramUniformMatrix4x2dv');
  glad__glProgramUniformMatrix4x2fv = load('glProgramUniformMatrix4x2fv');
  glad__glProgramUniformMatrix4x3dv = load('glProgramUniformMatrix4x3dv');
  glad__glProgramUniformMatrix4x3fv = load('glProgramUniformMatrix4x3fv');
  glad__glUseProgramStages = load('glUseProgramStages');
  glad__glValidateProgramPipeline = load('glValidateProgramPipeline');
  glad__glGetActiveAtomicCounterBufferiv = load('glGetActiveAtomicCounterBufferiv');
  glad__glBindImageTexture = load('glBindImageTexture');
  glad__glMemoryBarrier = load('glMemoryBarrier');
  glad__glAttachObjectARB = load('glAttachObjectARB');
  glad__glCompileShaderARB = load('glCompileShaderARB');
  glad__glCreateProgramObjectARB = load('glCreateProgramObjectARB');
  glad__glCreateShaderObjectARB = load('glCreateShaderObjectARB');
  glad__glDeleteObjectARB = load('glDeleteObjectARB');
  glad__glDetachObjectARB = load('glDetachObjectARB');
  glad__glGetActiveUniformARB = load('glGetActiveUniformARB');
  glad__glGetAttachedObjectsARB = load('glGetAttachedObjectsARB');
  glad__glGetHandleARB = load('glGetHandleARB');
  glad__glGetInfoLogARB = load('glGetInfoLogARB');
  glad__glGetObjectParameterfvARB = load('glGetObjectParameterfvARB');
  glad__glGetObjectParameterivARB = load('glGetObjectParameterivARB');
  glad__glGetShaderSourceARB = load('glGetShaderSourceARB');
  glad__glGetUniformLocationARB = load('glGetUniformLocationARB');
  glad__glGetUniformfvARB = load('glGetUniformfvARB');
  glad__glGetUniformivARB = load('glGetUniformivARB');
  glad__glLinkProgramARB = load('glLinkProgramARB');
  glad__glShaderSourceARB = load('glShaderSourceARB');
  glad__glUniform1fARB = load('glUniform1fARB');
  glad__glUniform1fvARB = load('glUniform1fvARB');
  glad__glUniform1iARB = load('glUniform1iARB');
  glad__glUniform1ivARB = load('glUniform1ivARB');
  glad__glUniform2fARB = load('glUniform2fARB');
  glad__glUniform2fvARB = load('glUniform2fvARB');
  glad__glUniform2iARB = load('glUniform2iARB');
  glad__glUniform2ivARB = load('glUniform2ivARB');
  glad__glUniform3fARB = load('glUniform3fARB');
  glad__glUniform3fvARB = load('glUniform3fvARB');
  glad__glUniform3iARB = load('glUniform3iARB');
  glad__glUniform3ivARB = load('glUniform3ivARB');
  glad__glUniform4fARB = load('glUniform4fARB');
  glad__glUniform4fvARB = load('glUniform4fvARB');
  glad__glUniform4iARB = load('glUniform4iARB');
  glad__glUniform4ivARB = load('glUniform4ivARB');
  glad__glUniformMatrix2fvARB = load('glUniformMatrix2fvARB');
  glad__glUniformMatrix3fvARB = load('glUniformMatrix3fvARB');
  glad__glUniformMatrix4fvARB = load('glUniformMatrix4fvARB');
  glad__glUseProgramObjectARB = load('glUseProgramObjectARB');
  glad__glValidateProgramARB = load('glValidateProgramARB');
  glad__glShaderStorageBlockBinding = load('glShaderStorageBlockBinding');
  glad__glGetActiveSubroutineName = load('glGetActiveSubroutineName');
  glad__glGetActiveSubroutineUniformName = load('glGetActiveSubroutineUniformName');
  glad__glGetActiveSubroutineUniformiv = load('glGetActiveSubroutineUniformiv');
  glad__glGetProgramStageiv = load('glGetProgramStageiv');
  glad__glGetSubroutineIndex = load('glGetSubroutineIndex');
  glad__glGetSubroutineUniformLocation = load('glGetSubroutineUniformLocation');
  glad__glGetUniformSubroutineuiv = load('glGetUniformSubroutineuiv');
  glad__glUniformSubroutinesuiv = load('glUniformSubroutinesuiv');
  glad__glCompileShaderIncludeARB = load('glCompileShaderIncludeARB');
  glad__glDeleteNamedStringARB = load('glDeleteNamedStringARB');
  glad__glGetNamedStringARB = load('glGetNamedStringARB');
  glad__glGetNamedStringivARB = load('glGetNamedStringivARB');
  glad__glIsNamedStringARB = load('glIsNamedStringARB');
  glad__glNamedStringARB = load('glNamedStringARB');
  glad__glBufferPageCommitmentARB = load('glBufferPageCommitmentARB');
  glad__glTexPageCommitmentARB = load('glTexPageCommitmentARB');
  glad__glClientWaitSync = load('glClientWaitSync');
  glad__glDeleteSync = load('glDeleteSync');
  glad__glFenceSync = load('glFenceSync');
  glad__glGetInteger64v = load('glGetInteger64v');
  glad__glGetSynciv = load('glGetSynciv');
  glad__glIsSync = load('glIsSync');
  glad__glWaitSync = load('glWaitSync');
  glad__glPatchParameterfv = load('glPatchParameterfv');
  glad__glPatchParameteri = load('glPatchParameteri');
  glad__glTextureBarrier = load('glTextureBarrier');
  glad__glTexBufferARB = load('glTexBufferARB');
  glad__glTexBufferRange = load('glTexBufferRange');
  glad__glTextureBufferRangeEXT = load('glTextureBufferRangeEXT');
  glad__glCompressedTexImage1DARB = load('glCompressedTexImage1DARB');
  glad__glCompressedTexImage2DARB = load('glCompressedTexImage2DARB');
  glad__glCompressedTexImage3DARB = load('glCompressedTexImage3DARB');
  glad__glCompressedTexSubImage1DARB = load('glCompressedTexSubImage1DARB');
  glad__glCompressedTexSubImage2DARB = load('glCompressedTexSubImage2DARB');
  glad__glCompressedTexSubImage3DARB = load('glCompressedTexSubImage3DARB');
  glad__glGetCompressedTexImageARB = load('glGetCompressedTexImageARB');
  glad__glGetMultisamplefv = load('glGetMultisamplefv');
  glad__glSampleMaski = load('glSampleMaski');
  glad__glTexImage2DMultisample = load('glTexImage2DMultisample');
  glad__glTexImage3DMultisample = load('glTexImage3DMultisample');
  glad__glTexStorage1D = load('glTexStorage1D');
  glad__glTexStorage2D = load('glTexStorage2D');
  glad__glTexStorage3D = load('glTexStorage3D');
  glad__glTexStorage2DMultisample = load('glTexStorage2DMultisample');
  glad__glTexStorage3DMultisample = load('glTexStorage3DMultisample');
  glad__glTextureStorage2DMultisampleEXT = load('glTextureStorage2DMultisampleEXT');
  glad__glTextureStorage3DMultisampleEXT = load('glTextureStorage3DMultisampleEXT');
  glad__glTextureView = load('glTextureView');
  glad__glGetQueryObjecti64v = load('glGetQueryObjecti64v');
  glad__glGetQueryObjectui64v = load('glGetQueryObjectui64v');
  glad__glQueryCounter = load('glQueryCounter');
  glad__glBindTransformFeedback = load('glBindTransformFeedback');
  glad__glDeleteTransformFeedbacks = load('glDeleteTransformFeedbacks');
  glad__glDrawTransformFeedback = load('glDrawTransformFeedback');
  glad__glGenTransformFeedbacks = load('glGenTransformFeedbacks');
  glad__glIsTransformFeedback = load('glIsTransformFeedback');
  glad__glPauseTransformFeedback = load('glPauseTransformFeedback');
  glad__glResumeTransformFeedback = load('glResumeTransformFeedback');
  glad__glBeginQueryIndexed = load('glBeginQueryIndexed');
  glad__glDrawTransformFeedbackStream = load('glDrawTransformFeedbackStream');
  glad__glEndQueryIndexed = load('glEndQueryIndexed');
  glad__glGetQueryIndexediv = load('glGetQueryIndexediv');
  glad__glDrawTransformFeedbackInstanced = load('glDrawTransformFeedbackInstanced');
  glad__glDrawTransformFeedbackStreamInstanced = load('glDrawTransformFeedbackStreamInstanced');
  glad__glLoadTransposeMatrixdARB = load('glLoadTransposeMatrixdARB');
  glad__glLoadTransposeMatrixfARB = load('glLoadTransposeMatrixfARB');
  glad__glMultTransposeMatrixdARB = load('glMultTransposeMatrixdARB');
  glad__glMultTransposeMatrixfARB = load('glMultTransposeMatrixfARB');
  glad__glBindBufferBase = load('glBindBufferBase');
  glad__glBindBufferRange = load('glBindBufferRange');
  glad__glGetActiveUniformBlockName = load('glGetActiveUniformBlockName');
  glad__glGetActiveUniformBlockiv = load('glGetActiveUniformBlockiv');
  glad__glGetActiveUniformName = load('glGetActiveUniformName');
  glad__glGetActiveUniformsiv = load('glGetActiveUniformsiv');
  glad__glGetIntegeri_v = load('glGetIntegeri_v');
  glad__glGetUniformBlockIndex = load('glGetUniformBlockIndex');
  glad__glGetUniformIndices = load('glGetUniformIndices');
  glad__glUniformBlockBinding = load('glUniformBlockBinding');
  glad__glBindVertexArray = load('glBindVertexArray');
  glad__glDeleteVertexArrays = load('glDeleteVertexArrays');
  glad__glGenVertexArrays = load('glGenVertexArrays');
  glad__glIsVertexArray = load('glIsVertexArray');
  glad__glGetVertexAttribLdv = load('glGetVertexAttribLdv');
  glad__glVertexAttribL1d = load('glVertexAttribL1d');
  glad__glVertexAttribL1dv = load('glVertexAttribL1dv');
  glad__glVertexAttribL2d = load('glVertexAttribL2d');
  glad__glVertexAttribL2dv = load('glVertexAttribL2dv');
  glad__glVertexAttribL3d = load('glVertexAttribL3d');
  glad__glVertexAttribL3dv = load('glVertexAttribL3dv');
  glad__glVertexAttribL4d = load('glVertexAttribL4d');
  glad__glVertexAttribL4dv = load('glVertexAttribL4dv');
  glad__glVertexAttribLPointer = load('glVertexAttribLPointer');
  glad__glBindVertexBuffer = load('glBindVertexBuffer');
  glad__glVertexArrayBindVertexBufferEXT = load('glVertexArrayBindVertexBufferEXT');
  glad__glVertexArrayVertexAttribBindingEXT = load('glVertexArrayVertexAttribBindingEXT');
  glad__glVertexArrayVertexAttribFormatEXT = load('glVertexArrayVertexAttribFormatEXT');
  glad__glVertexArrayVertexAttribIFormatEXT = load('glVertexArrayVertexAttribIFormatEXT');
  glad__glVertexArrayVertexAttribLFormatEXT = load('glVertexArrayVertexAttribLFormatEXT');
  glad__glVertexArrayVertexBindingDivisorEXT = load('glVertexArrayVertexBindingDivisorEXT');
  glad__glVertexAttribBinding = load('glVertexAttribBinding');
  glad__glVertexAttribFormat = load('glVertexAttribFormat');
  glad__glVertexAttribIFormat = load('glVertexAttribIFormat');
  glad__glVertexAttribLFormat = load('glVertexAttribLFormat');
  glad__glVertexBindingDivisor = load('glVertexBindingDivisor');
  glad__glVertexBlendARB = load('glVertexBlendARB');
  glad__glWeightPointerARB = load('glWeightPointerARB');
  glad__glWeightbvARB = load('glWeightbvARB');
  glad__glWeightdvARB = load('glWeightdvARB');
  glad__glWeightfvARB = load('glWeightfvARB');
  glad__glWeightivARB = load('glWeightivARB');
  glad__glWeightsvARB = load('glWeightsvARB');
  glad__glWeightubvARB = load('glWeightubvARB');
  glad__glWeightuivARB = load('glWeightuivARB');
  glad__glWeightusvARB = load('glWeightusvARB');
  glad__glBindBufferARB = load('glBindBufferARB');
  glad__glBufferDataARB = load('glBufferDataARB');
  glad__glBufferSubDataARB = load('glBufferSubDataARB');
  glad__glDeleteBuffersARB = load('glDeleteBuffersARB');
  glad__glGenBuffersARB = load('glGenBuffersARB');
  glad__glGetBufferParameterivARB = load('glGetBufferParameterivARB');
  glad__glGetBufferPointervARB = load('glGetBufferPointervARB');
  glad__glGetBufferSubDataARB = load('glGetBufferSubDataARB');
  glad__glIsBufferARB = load('glIsBufferARB');
  glad__glMapBufferARB = load('glMapBufferARB');
  glad__glUnmapBufferARB = load('glUnmapBufferARB');
  glad__glBindProgramARB = load('glBindProgramARB');
  glad__glDeleteProgramsARB = load('glDeleteProgramsARB');
  glad__glDisableVertexAttribArrayARB = load('glDisableVertexAttribArrayARB');
  glad__glEnableVertexAttribArrayARB = load('glEnableVertexAttribArrayARB');
  glad__glGenProgramsARB = load('glGenProgramsARB');
  glad__glGetProgramEnvParameterdvARB = load('glGetProgramEnvParameterdvARB');
  glad__glGetProgramEnvParameterfvARB = load('glGetProgramEnvParameterfvARB');
  glad__glGetProgramLocalParameterdvARB = load('glGetProgramLocalParameterdvARB');
  glad__glGetProgramLocalParameterfvARB = load('glGetProgramLocalParameterfvARB');
  glad__glGetProgramStringARB = load('glGetProgramStringARB');
  glad__glGetProgramivARB = load('glGetProgramivARB');
  glad__glGetVertexAttribPointervARB = load('glGetVertexAttribPointervARB');
  glad__glGetVertexAttribdvARB = load('glGetVertexAttribdvARB');
  glad__glGetVertexAttribfvARB = load('glGetVertexAttribfvARB');
  glad__glGetVertexAttribivARB = load('glGetVertexAttribivARB');
  glad__glIsProgramARB = load('glIsProgramARB');
  glad__glProgramEnvParameter4dARB = load('glProgramEnvParameter4dARB');
  glad__glProgramEnvParameter4dvARB = load('glProgramEnvParameter4dvARB');
  glad__glProgramEnvParameter4fARB = load('glProgramEnvParameter4fARB');
  glad__glProgramEnvParameter4fvARB = load('glProgramEnvParameter4fvARB');
  glad__glProgramLocalParameter4dARB = load('glProgramLocalParameter4dARB');
  glad__glProgramLocalParameter4dvARB = load('glProgramLocalParameter4dvARB');
  glad__glProgramLocalParameter4fARB = load('glProgramLocalParameter4fARB');
  glad__glProgramLocalParameter4fvARB = load('glProgramLocalParameter4fvARB');
  glad__glProgramStringARB = load('glProgramStringARB');
  glad__glVertexAttrib1dARB = load('glVertexAttrib1dARB');
  glad__glVertexAttrib1dvARB = load('glVertexAttrib1dvARB');
  glad__glVertexAttrib1fARB = load('glVertexAttrib1fARB');
  glad__glVertexAttrib1fvARB = load('glVertexAttrib1fvARB');
  glad__glVertexAttrib1sARB = load('glVertexAttrib1sARB');
  glad__glVertexAttrib1svARB = load('glVertexAttrib1svARB');
  glad__glVertexAttrib2dARB = load('glVertexAttrib2dARB');
  glad__glVertexAttrib2dvARB = load('glVertexAttrib2dvARB');
  glad__glVertexAttrib2fARB = load('glVertexAttrib2fARB');
  glad__glVertexAttrib2fvARB = load('glVertexAttrib2fvARB');
  glad__glVertexAttrib2sARB = load('glVertexAttrib2sARB');
  glad__glVertexAttrib2svARB = load('glVertexAttrib2svARB');
  glad__glVertexAttrib3dARB = load('glVertexAttrib3dARB');
  glad__glVertexAttrib3dvARB = load('glVertexAttrib3dvARB');
  glad__glVertexAttrib3fARB = load('glVertexAttrib3fARB');
  glad__glVertexAttrib3fvARB = load('glVertexAttrib3fvARB');
  glad__glVertexAttrib3sARB = load('glVertexAttrib3sARB');
  glad__glVertexAttrib3svARB = load('glVertexAttrib3svARB');
  glad__glVertexAttrib4NbvARB = load('glVertexAttrib4NbvARB');
  glad__glVertexAttrib4NivARB = load('glVertexAttrib4NivARB');
  glad__glVertexAttrib4NsvARB = load('glVertexAttrib4NsvARB');
  glad__glVertexAttrib4NubARB = load('glVertexAttrib4NubARB');
  glad__glVertexAttrib4NubvARB = load('glVertexAttrib4NubvARB');
  glad__glVertexAttrib4NuivARB = load('glVertexAttrib4NuivARB');
  glad__glVertexAttrib4NusvARB = load('glVertexAttrib4NusvARB');
  glad__glVertexAttrib4bvARB = load('glVertexAttrib4bvARB');
  glad__glVertexAttrib4dARB = load('glVertexAttrib4dARB');
  glad__glVertexAttrib4dvARB = load('glVertexAttrib4dvARB');
  glad__glVertexAttrib4fARB = load('glVertexAttrib4fARB');
  glad__glVertexAttrib4fvARB = load('glVertexAttrib4fvARB');
  glad__glVertexAttrib4ivARB = load('glVertexAttrib4ivARB');
  glad__glVertexAttrib4sARB = load('glVertexAttrib4sARB');
  glad__glVertexAttrib4svARB = load('glVertexAttrib4svARB');
  glad__glVertexAttrib4ubvARB = load('glVertexAttrib4ubvARB');
  glad__glVertexAttrib4uivARB = load('glVertexAttrib4uivARB');
  glad__glVertexAttrib4usvARB = load('glVertexAttrib4usvARB');
  glad__glVertexAttribPointerARB = load('glVertexAttribPointerARB');
  glad__glBindAttribLocationARB = load('glBindAttribLocationARB');
  glad__glGetActiveAttribARB = load('glGetActiveAttribARB');
  glad__glGetAttribLocationARB = load('glGetAttribLocationARB');
  glad__glColorP3ui = load('glColorP3ui');
  glad__glColorP3uiv = load('glColorP3uiv');
  glad__glColorP4ui = load('glColorP4ui');
  glad__glColorP4uiv = load('glColorP4uiv');
  glad__glMultiTexCoordP1ui = load('glMultiTexCoordP1ui');
  glad__glMultiTexCoordP1uiv = load('glMultiTexCoordP1uiv');
  glad__glMultiTexCoordP2ui = load('glMultiTexCoordP2ui');
  glad__glMultiTexCoordP2uiv = load('glMultiTexCoordP2uiv');
  glad__glMultiTexCoordP3ui = load('glMultiTexCoordP3ui');
  glad__glMultiTexCoordP3uiv = load('glMultiTexCoordP3uiv');
  glad__glMultiTexCoordP4ui = load('glMultiTexCoordP4ui');
  glad__glMultiTexCoordP4uiv = load('glMultiTexCoordP4uiv');
  glad__glNormalP3ui = load('glNormalP3ui');
  glad__glNormalP3uiv = load('glNormalP3uiv');
  glad__glSecondaryColorP3ui = load('glSecondaryColorP3ui');
  glad__glSecondaryColorP3uiv = load('glSecondaryColorP3uiv');
  glad__glTexCoordP1ui = load('glTexCoordP1ui');
  glad__glTexCoordP1uiv = load('glTexCoordP1uiv');
  glad__glTexCoordP2ui = load('glTexCoordP2ui');
  glad__glTexCoordP2uiv = load('glTexCoordP2uiv');
  glad__glTexCoordP3ui = load('glTexCoordP3ui');
  glad__glTexCoordP3uiv = load('glTexCoordP3uiv');
  glad__glTexCoordP4ui = load('glTexCoordP4ui');
  glad__glTexCoordP4uiv = load('glTexCoordP4uiv');
  glad__glVertexAttribP1ui = load('glVertexAttribP1ui');
  glad__glVertexAttribP1uiv = load('glVertexAttribP1uiv');
  glad__glVertexAttribP2ui = load('glVertexAttribP2ui');
  glad__glVertexAttribP2uiv = load('glVertexAttribP2uiv');
  glad__glVertexAttribP3ui = load('glVertexAttribP3ui');
  glad__glVertexAttribP3uiv = load('glVertexAttribP3uiv');
  glad__glVertexAttribP4ui = load('glVertexAttribP4ui');
  glad__glVertexAttribP4uiv = load('glVertexAttribP4uiv');
  glad__glVertexP2ui = load('glVertexP2ui');
  glad__glVertexP2uiv = load('glVertexP2uiv');
  glad__glVertexP3ui = load('glVertexP3ui');
  glad__glVertexP3uiv = load('glVertexP3uiv');
  glad__glVertexP4ui = load('glVertexP4ui');
  glad__glVertexP4uiv = load('glVertexP4uiv');
  glad__glDepthRangeArrayv = load('glDepthRangeArrayv');
  glad__glDepthRangeIndexed = load('glDepthRangeIndexed');
  glad__glGetDoublei_v = load('glGetDoublei_v');
  glad__glGetFloati_v = load('glGetFloati_v');
  glad__glScissorArrayv = load('glScissorArrayv');
  glad__glScissorIndexed = load('glScissorIndexed');
  glad__glScissorIndexedv = load('glScissorIndexedv');
  glad__glViewportArrayv = load('glViewportArrayv');
  glad__glViewportIndexedf = load('glViewportIndexedf');
  glad__glViewportIndexedfv = load('glViewportIndexedfv');
  glad__glWindowPos2dARB = load('glWindowPos2dARB');
  glad__glWindowPos2dvARB = load('glWindowPos2dvARB');
  glad__glWindowPos2fARB = load('glWindowPos2fARB');
  glad__glWindowPos2fvARB = load('glWindowPos2fvARB');
  glad__glWindowPos2iARB = load('glWindowPos2iARB');
  glad__glWindowPos2ivARB = load('glWindowPos2ivARB');
  glad__glWindowPos2sARB = load('glWindowPos2sARB');
  glad__glWindowPos2svARB = load('glWindowPos2svARB');
  glad__glWindowPos3dARB = load('glWindowPos3dARB');
  glad__glWindowPos3dvARB = load('glWindowPos3dvARB');
  glad__glWindowPos3fARB = load('glWindowPos3fARB');
  glad__glWindowPos3fvARB = load('glWindowPos3fvARB');
  glad__glWindowPos3iARB = load('glWindowPos3iARB');
  glad__glWindowPos3ivARB = load('glWindowPos3ivARB');
  glad__glWindowPos3sARB = load('glWindowPos3sARB');
  glad__glWindowPos3svARB = load('glWindowPos3svARB');
  glad__glDrawBuffersATI = load('glDrawBuffersATI');
  glad__glDrawElementArrayATI = load('glDrawElementArrayATI');
  glad__glDrawRangeElementArrayATI = load('glDrawRangeElementArrayATI');
  glad__glElementPointerATI = load('glElementPointerATI');
  glad__glGetTexBumpParameterfvATI = load('glGetTexBumpParameterfvATI');
  glad__glGetTexBumpParameterivATI = load('glGetTexBumpParameterivATI');
  glad__glTexBumpParameterfvATI = load('glTexBumpParameterfvATI');
  glad__glTexBumpParameterivATI = load('glTexBumpParameterivATI');
  glad__glAlphaFragmentOp1ATI = load('glAlphaFragmentOp1ATI');
  glad__glAlphaFragmentOp2ATI = load('glAlphaFragmentOp2ATI');
  glad__glAlphaFragmentOp3ATI = load('glAlphaFragmentOp3ATI');
  glad__glBeginFragmentShaderATI = load('glBeginFragmentShaderATI');
  glad__glBindFragmentShaderATI = load('glBindFragmentShaderATI');
  glad__glColorFragmentOp1ATI = load('glColorFragmentOp1ATI');
  glad__glColorFragmentOp2ATI = load('glColorFragmentOp2ATI');
  glad__glColorFragmentOp3ATI = load('glColorFragmentOp3ATI');
  glad__glDeleteFragmentShaderATI = load('glDeleteFragmentShaderATI');
  glad__glEndFragmentShaderATI = load('glEndFragmentShaderATI');
  glad__glGenFragmentShadersATI = load('glGenFragmentShadersATI');
  glad__glPassTexCoordATI = load('glPassTexCoordATI');
  glad__glSampleMapATI = load('glSampleMapATI');
  glad__glSetFragmentShaderConstantATI = load('glSetFragmentShaderConstantATI');
  glad__glMapObjectBufferATI = load('glMapObjectBufferATI');
  glad__glUnmapObjectBufferATI = load('glUnmapObjectBufferATI');
  glad__glPNTrianglesfATI = load('glPNTrianglesfATI');
  glad__glPNTrianglesiATI = load('glPNTrianglesiATI');
  glad__glStencilFuncSeparateATI = load('glStencilFuncSeparateATI');
  glad__glStencilOpSeparateATI = load('glStencilOpSeparateATI');
  glad__glArrayObjectATI = load('glArrayObjectATI');
  glad__glFreeObjectBufferATI = load('glFreeObjectBufferATI');
  glad__glGetArrayObjectfvATI = load('glGetArrayObjectfvATI');
  glad__glGetArrayObjectivATI = load('glGetArrayObjectivATI');
  glad__glGetObjectBufferfvATI = load('glGetObjectBufferfvATI');
  glad__glGetObjectBufferivATI = load('glGetObjectBufferivATI');
  glad__glGetVariantArrayObjectfvATI = load('glGetVariantArrayObjectfvATI');
  glad__glGetVariantArrayObjectivATI = load('glGetVariantArrayObjectivATI');
  glad__glIsObjectBufferATI = load('glIsObjectBufferATI');
  glad__glNewObjectBufferATI = load('glNewObjectBufferATI');
  glad__glUpdateObjectBufferATI = load('glUpdateObjectBufferATI');
  glad__glVariantArrayObjectATI = load('glVariantArrayObjectATI');
  glad__glGetVertexAttribArrayObjectfvATI = load('glGetVertexAttribArrayObjectfvATI');
  glad__glGetVertexAttribArrayObjectivATI = load('glGetVertexAttribArrayObjectivATI');
  glad__glVertexAttribArrayObjectATI = load('glVertexAttribArrayObjectATI');
  glad__glClientActiveVertexStreamATI = load('glClientActiveVertexStreamATI');
  glad__glNormalStream3bATI = load('glNormalStream3bATI');
  glad__glNormalStream3bvATI = load('glNormalStream3bvATI');
  glad__glNormalStream3dATI = load('glNormalStream3dATI');
  glad__glNormalStream3dvATI = load('glNormalStream3dvATI');
  glad__glNormalStream3fATI = load('glNormalStream3fATI');
  glad__glNormalStream3fvATI = load('glNormalStream3fvATI');
  glad__glNormalStream3iATI = load('glNormalStream3iATI');
  glad__glNormalStream3ivATI = load('glNormalStream3ivATI');
  glad__glNormalStream3sATI = load('glNormalStream3sATI');
  glad__glNormalStream3svATI = load('glNormalStream3svATI');
  glad__glVertexBlendEnvfATI = load('glVertexBlendEnvfATI');
  glad__glVertexBlendEnviATI = load('glVertexBlendEnviATI');
  glad__glVertexStream1dATI = load('glVertexStream1dATI');
  glad__glVertexStream1dvATI = load('glVertexStream1dvATI');
  glad__glVertexStream1fATI = load('glVertexStream1fATI');
  glad__glVertexStream1fvATI = load('glVertexStream1fvATI');
  glad__glVertexStream1iATI = load('glVertexStream1iATI');
  glad__glVertexStream1ivATI = load('glVertexStream1ivATI');
  glad__glVertexStream1sATI = load('glVertexStream1sATI');
  glad__glVertexStream1svATI = load('glVertexStream1svATI');
  glad__glVertexStream2dATI = load('glVertexStream2dATI');
  glad__glVertexStream2dvATI = load('glVertexStream2dvATI');
  glad__glVertexStream2fATI = load('glVertexStream2fATI');
  glad__glVertexStream2fvATI = load('glVertexStream2fvATI');
  glad__glVertexStream2iATI = load('glVertexStream2iATI');
  glad__glVertexStream2ivATI = load('glVertexStream2ivATI');
  glad__glVertexStream2sATI = load('glVertexStream2sATI');
  glad__glVertexStream2svATI = load('glVertexStream2svATI');
  glad__glVertexStream3dATI = load('glVertexStream3dATI');
  glad__glVertexStream3dvATI = load('glVertexStream3dvATI');
  glad__glVertexStream3fATI = load('glVertexStream3fATI');
  glad__glVertexStream3fvATI = load('glVertexStream3fvATI');
  glad__glVertexStream3iATI = load('glVertexStream3iATI');
  glad__glVertexStream3ivATI = load('glVertexStream3ivATI');
  glad__glVertexStream3sATI = load('glVertexStream3sATI');
  glad__glVertexStream3svATI = load('glVertexStream3svATI');
  glad__glVertexStream4dATI = load('glVertexStream4dATI');
  glad__glVertexStream4dvATI = load('glVertexStream4dvATI');
  glad__glVertexStream4fATI = load('glVertexStream4fATI');
  glad__glVertexStream4fvATI = load('glVertexStream4fvATI');
  glad__glVertexStream4iATI = load('glVertexStream4iATI');
  glad__glVertexStream4ivATI = load('glVertexStream4ivATI');
  glad__glVertexStream4sATI = load('glVertexStream4sATI');
  glad__glVertexStream4svATI = load('glVertexStream4svATI');
  glad__glDrawArraysInstancedBaseInstanceEXT = load('glDrawArraysInstancedBaseInstanceEXT');
  glad__glDrawElementsInstancedBaseInstanceEXT = load('glDrawElementsInstancedBaseInstanceEXT');
  glad__glDrawElementsInstancedBaseVertexBaseInstanceEXT = load('glDrawElementsInstancedBaseVertexBaseInstanceEXT');
  glad__glGetUniformBufferSizeEXT = load('glGetUniformBufferSizeEXT');
  glad__glGetUniformOffsetEXT = load('glGetUniformOffsetEXT');
  glad__glUniformBufferEXT = load('glUniformBufferEXT');
  glad__glBlendColorEXT = load('glBlendColorEXT');
  glad__glBlendEquationSeparateEXT = load('glBlendEquationSeparateEXT');
  glad__glBindFragDataLocationIndexedEXT = load('glBindFragDataLocationIndexedEXT');
  glad__glGetFragDataIndexEXT = load('glGetFragDataIndexEXT');
  glad__glGetProgramResourceLocationIndexEXT = load('glGetProgramResourceLocationIndexEXT');
  glad__glBlendFuncSeparateEXT = load('glBlendFuncSeparateEXT');
  glad__glBlendEquationEXT = load('glBlendEquationEXT');
  glad__glBufferStorageEXT = load('glBufferStorageEXT');
  glad__glNamedBufferStorageEXT = load('glNamedBufferStorageEXT');
  glad__glClearTexImageEXT = load('glClearTexImageEXT');
  glad__glClearTexSubImageEXT = load('glClearTexSubImageEXT');
  glad__glColorSubTableEXT = load('glColorSubTableEXT');
  glad__glCopyColorSubTableEXT = load('glCopyColorSubTableEXT');
  glad__glLockArraysEXT = load('glLockArraysEXT');
  glad__glUnlockArraysEXT = load('glUnlockArraysEXT');
  glad__glConvolutionFilter1DEXT = load('glConvolutionFilter1DEXT');
  glad__glConvolutionFilter2DEXT = load('glConvolutionFilter2DEXT');
  glad__glConvolutionParameterfEXT = load('glConvolutionParameterfEXT');
  glad__glConvolutionParameterfvEXT = load('glConvolutionParameterfvEXT');
  glad__glConvolutionParameteriEXT = load('glConvolutionParameteriEXT');
  glad__glConvolutionParameterivEXT = load('glConvolutionParameterivEXT');
  glad__glCopyConvolutionFilter1DEXT = load('glCopyConvolutionFilter1DEXT');
  glad__glCopyConvolutionFilter2DEXT = load('glCopyConvolutionFilter2DEXT');
  glad__glGetConvolutionFilterEXT = load('glGetConvolutionFilterEXT');
  glad__glGetConvolutionParameterfvEXT = load('glGetConvolutionParameterfvEXT');
  glad__glGetConvolutionParameterivEXT = load('glGetConvolutionParameterivEXT');
  glad__glGetSeparableFilterEXT = load('glGetSeparableFilterEXT');
  glad__glSeparableFilter2DEXT = load('glSeparableFilter2DEXT');
  glad__glBinormalPointerEXT = load('glBinormalPointerEXT');
  glad__glTangentPointerEXT = load('glTangentPointerEXT');
  glad__glCopyImageSubDataEXT = load('glCopyImageSubDataEXT');
  glad__glCopyTexImage1DEXT = load('glCopyTexImage1DEXT');
  glad__glCopyTexImage2DEXT = load('glCopyTexImage2DEXT');
  glad__glCopyTexSubImage1DEXT = load('glCopyTexSubImage1DEXT');
  glad__glCopyTexSubImage2DEXT = load('glCopyTexSubImage2DEXT');
  glad__glCopyTexSubImage3DEXT = load('glCopyTexSubImage3DEXT');
  glad__glCullParameterdvEXT = load('glCullParameterdvEXT');
  glad__glCullParameterfvEXT = load('glCullParameterfvEXT');
  glad__glGetObjectLabelEXT = load('glGetObjectLabelEXT');
  glad__glLabelObjectEXT = load('glLabelObjectEXT');
  glad__glInsertEventMarkerEXT = load('glInsertEventMarkerEXT');
  glad__glPopGroupMarkerEXT = load('glPopGroupMarkerEXT');
  glad__glPushGroupMarkerEXT = load('glPushGroupMarkerEXT');
  glad__glDepthBoundsEXT = load('glDepthBoundsEXT');
  glad__glBindMultiTextureEXT = load('glBindMultiTextureEXT');
  glad__glCheckNamedFramebufferStatusEXT = load('glCheckNamedFramebufferStatusEXT');
  glad__glClientAttribDefaultEXT = load('glClientAttribDefaultEXT');
  glad__glCompressedMultiTexImage1DEXT = load('glCompressedMultiTexImage1DEXT');
  glad__glCompressedMultiTexImage2DEXT = load('glCompressedMultiTexImage2DEXT');
  glad__glCompressedMultiTexImage3DEXT = load('glCompressedMultiTexImage3DEXT');
  glad__glCompressedMultiTexSubImage1DEXT = load('glCompressedMultiTexSubImage1DEXT');
  glad__glCompressedMultiTexSubImage2DEXT = load('glCompressedMultiTexSubImage2DEXT');
  glad__glCompressedMultiTexSubImage3DEXT = load('glCompressedMultiTexSubImage3DEXT');
  glad__glCompressedTextureImage1DEXT = load('glCompressedTextureImage1DEXT');
  glad__glCompressedTextureImage2DEXT = load('glCompressedTextureImage2DEXT');
  glad__glCompressedTextureImage3DEXT = load('glCompressedTextureImage3DEXT');
  glad__glCompressedTextureSubImage1DEXT = load('glCompressedTextureSubImage1DEXT');
  glad__glCompressedTextureSubImage2DEXT = load('glCompressedTextureSubImage2DEXT');
  glad__glCompressedTextureSubImage3DEXT = load('glCompressedTextureSubImage3DEXT');
  glad__glCopyMultiTexImage1DEXT = load('glCopyMultiTexImage1DEXT');
  glad__glCopyMultiTexImage2DEXT = load('glCopyMultiTexImage2DEXT');
  glad__glCopyMultiTexSubImage1DEXT = load('glCopyMultiTexSubImage1DEXT');
  glad__glCopyMultiTexSubImage2DEXT = load('glCopyMultiTexSubImage2DEXT');
  glad__glCopyMultiTexSubImage3DEXT = load('glCopyMultiTexSubImage3DEXT');
  glad__glCopyTextureImage1DEXT = load('glCopyTextureImage1DEXT');
  glad__glCopyTextureImage2DEXT = load('glCopyTextureImage2DEXT');
  glad__glCopyTextureSubImage1DEXT = load('glCopyTextureSubImage1DEXT');
  glad__glCopyTextureSubImage2DEXT = load('glCopyTextureSubImage2DEXT');
  glad__glCopyTextureSubImage3DEXT = load('glCopyTextureSubImage3DEXT');
  glad__glDisableClientStateIndexedEXT = load('glDisableClientStateIndexedEXT');
  glad__glDisableClientStateiEXT = load('glDisableClientStateiEXT');
  glad__glDisableVertexArrayAttribEXT = load('glDisableVertexArrayAttribEXT');
  glad__glDisableVertexArrayEXT = load('glDisableVertexArrayEXT');
  glad__glEnableClientStateIndexedEXT = load('glEnableClientStateIndexedEXT');
  glad__glEnableClientStateiEXT = load('glEnableClientStateiEXT');
  glad__glEnableVertexArrayAttribEXT = load('glEnableVertexArrayAttribEXT');
  glad__glEnableVertexArrayEXT = load('glEnableVertexArrayEXT');
  glad__glFlushMappedNamedBufferRangeEXT = load('glFlushMappedNamedBufferRangeEXT');
  glad__glFramebufferDrawBufferEXT = load('glFramebufferDrawBufferEXT');
  glad__glFramebufferDrawBuffersEXT = load('glFramebufferDrawBuffersEXT');
  glad__glFramebufferReadBufferEXT = load('glFramebufferReadBufferEXT');
  glad__glGenerateMultiTexMipmapEXT = load('glGenerateMultiTexMipmapEXT');
  glad__glGenerateTextureMipmapEXT = load('glGenerateTextureMipmapEXT');
  glad__glGetCompressedMultiTexImageEXT = load('glGetCompressedMultiTexImageEXT');
  glad__glGetCompressedTextureImageEXT = load('glGetCompressedTextureImageEXT');
  glad__glGetDoubleIndexedvEXT = load('glGetDoubleIndexedvEXT');
  glad__glGetDoublei_vEXT = load('glGetDoublei_vEXT');
  glad__glGetFloatIndexedvEXT = load('glGetFloatIndexedvEXT');
  glad__glGetFloati_vEXT = load('glGetFloati_vEXT');
  glad__glGetFramebufferParameterivEXT = load('glGetFramebufferParameterivEXT');
  glad__glGetMultiTexEnvfvEXT = load('glGetMultiTexEnvfvEXT');
  glad__glGetMultiTexEnvivEXT = load('glGetMultiTexEnvivEXT');
  glad__glGetMultiTexGendvEXT = load('glGetMultiTexGendvEXT');
  glad__glGetMultiTexGenfvEXT = load('glGetMultiTexGenfvEXT');
  glad__glGetMultiTexGenivEXT = load('glGetMultiTexGenivEXT');
  glad__glGetMultiTexImageEXT = load('glGetMultiTexImageEXT');
  glad__glGetMultiTexLevelParameterfvEXT = load('glGetMultiTexLevelParameterfvEXT');
  glad__glGetMultiTexLevelParameterivEXT = load('glGetMultiTexLevelParameterivEXT');
  glad__glGetMultiTexParameterIivEXT = load('glGetMultiTexParameterIivEXT');
  glad__glGetMultiTexParameterIuivEXT = load('glGetMultiTexParameterIuivEXT');
  glad__glGetMultiTexParameterfvEXT = load('glGetMultiTexParameterfvEXT');
  glad__glGetMultiTexParameterivEXT = load('glGetMultiTexParameterivEXT');
  glad__glGetNamedBufferParameterivEXT = load('glGetNamedBufferParameterivEXT');
  glad__glGetNamedBufferPointervEXT = load('glGetNamedBufferPointervEXT');
  glad__glGetNamedBufferSubDataEXT = load('glGetNamedBufferSubDataEXT');
  glad__glGetNamedFramebufferAttachmentParameterivEXT = load('glGetNamedFramebufferAttachmentParameterivEXT');
  glad__glGetNamedProgramLocalParameterIivEXT = load('glGetNamedProgramLocalParameterIivEXT');
  glad__glGetNamedProgramLocalParameterIuivEXT = load('glGetNamedProgramLocalParameterIuivEXT');
  glad__glGetNamedProgramLocalParameterdvEXT = load('glGetNamedProgramLocalParameterdvEXT');
  glad__glGetNamedProgramLocalParameterfvEXT = load('glGetNamedProgramLocalParameterfvEXT');
  glad__glGetNamedProgramStringEXT = load('glGetNamedProgramStringEXT');
  glad__glGetNamedProgramivEXT = load('glGetNamedProgramivEXT');
  glad__glGetNamedRenderbufferParameterivEXT = load('glGetNamedRenderbufferParameterivEXT');
  glad__glGetPointerIndexedvEXT = load('glGetPointerIndexedvEXT');
  glad__glGetPointeri_vEXT = load('glGetPointeri_vEXT');
  glad__glGetTextureImageEXT = load('glGetTextureImageEXT');
  glad__glGetTextureLevelParameterfvEXT = load('glGetTextureLevelParameterfvEXT');
  glad__glGetTextureLevelParameterivEXT = load('glGetTextureLevelParameterivEXT');
  glad__glGetTextureParameterIivEXT = load('glGetTextureParameterIivEXT');
  glad__glGetTextureParameterIuivEXT = load('glGetTextureParameterIuivEXT');
  glad__glGetTextureParameterfvEXT = load('glGetTextureParameterfvEXT');
  glad__glGetTextureParameterivEXT = load('glGetTextureParameterivEXT');
  glad__glGetVertexArrayIntegeri_vEXT = load('glGetVertexArrayIntegeri_vEXT');
  glad__glGetVertexArrayIntegervEXT = load('glGetVertexArrayIntegervEXT');
  glad__glGetVertexArrayPointeri_vEXT = load('glGetVertexArrayPointeri_vEXT');
  glad__glGetVertexArrayPointervEXT = load('glGetVertexArrayPointervEXT');
  glad__glMapNamedBufferEXT = load('glMapNamedBufferEXT');
  glad__glMapNamedBufferRangeEXT = load('glMapNamedBufferRangeEXT');
  glad__glMatrixFrustumEXT = load('glMatrixFrustumEXT');
  glad__glMatrixLoadIdentityEXT = load('glMatrixLoadIdentityEXT');
  glad__glMatrixLoadTransposedEXT = load('glMatrixLoadTransposedEXT');
  glad__glMatrixLoadTransposefEXT = load('glMatrixLoadTransposefEXT');
  glad__glMatrixLoaddEXT = load('glMatrixLoaddEXT');
  glad__glMatrixLoadfEXT = load('glMatrixLoadfEXT');
  glad__glMatrixMultTransposedEXT = load('glMatrixMultTransposedEXT');
  glad__glMatrixMultTransposefEXT = load('glMatrixMultTransposefEXT');
  glad__glMatrixMultdEXT = load('glMatrixMultdEXT');
  glad__glMatrixMultfEXT = load('glMatrixMultfEXT');
  glad__glMatrixOrthoEXT = load('glMatrixOrthoEXT');
  glad__glMatrixPopEXT = load('glMatrixPopEXT');
  glad__glMatrixPushEXT = load('glMatrixPushEXT');
  glad__glMatrixRotatedEXT = load('glMatrixRotatedEXT');
  glad__glMatrixRotatefEXT = load('glMatrixRotatefEXT');
  glad__glMatrixScaledEXT = load('glMatrixScaledEXT');
  glad__glMatrixScalefEXT = load('glMatrixScalefEXT');
  glad__glMatrixTranslatedEXT = load('glMatrixTranslatedEXT');
  glad__glMatrixTranslatefEXT = load('glMatrixTranslatefEXT');
  glad__glMultiTexBufferEXT = load('glMultiTexBufferEXT');
  glad__glMultiTexCoordPointerEXT = load('glMultiTexCoordPointerEXT');
  glad__glMultiTexEnvfEXT = load('glMultiTexEnvfEXT');
  glad__glMultiTexEnvfvEXT = load('glMultiTexEnvfvEXT');
  glad__glMultiTexEnviEXT = load('glMultiTexEnviEXT');
  glad__glMultiTexEnvivEXT = load('glMultiTexEnvivEXT');
  glad__glMultiTexGendEXT = load('glMultiTexGendEXT');
  glad__glMultiTexGendvEXT = load('glMultiTexGendvEXT');
  glad__glMultiTexGenfEXT = load('glMultiTexGenfEXT');
  glad__glMultiTexGenfvEXT = load('glMultiTexGenfvEXT');
  glad__glMultiTexGeniEXT = load('glMultiTexGeniEXT');
  glad__glMultiTexGenivEXT = load('glMultiTexGenivEXT');
  glad__glMultiTexImage1DEXT = load('glMultiTexImage1DEXT');
  glad__glMultiTexImage2DEXT = load('glMultiTexImage2DEXT');
  glad__glMultiTexImage3DEXT = load('glMultiTexImage3DEXT');
  glad__glMultiTexParameterIivEXT = load('glMultiTexParameterIivEXT');
  glad__glMultiTexParameterIuivEXT = load('glMultiTexParameterIuivEXT');
  glad__glMultiTexParameterfEXT = load('glMultiTexParameterfEXT');
  glad__glMultiTexParameterfvEXT = load('glMultiTexParameterfvEXT');
  glad__glMultiTexParameteriEXT = load('glMultiTexParameteriEXT');
  glad__glMultiTexParameterivEXT = load('glMultiTexParameterivEXT');
  glad__glMultiTexRenderbufferEXT = load('glMultiTexRenderbufferEXT');
  glad__glMultiTexSubImage1DEXT = load('glMultiTexSubImage1DEXT');
  glad__glMultiTexSubImage2DEXT = load('glMultiTexSubImage2DEXT');
  glad__glMultiTexSubImage3DEXT = load('glMultiTexSubImage3DEXT');
  glad__glNamedBufferDataEXT = load('glNamedBufferDataEXT');
  glad__glNamedBufferSubDataEXT = load('glNamedBufferSubDataEXT');
  glad__glNamedCopyBufferSubDataEXT = load('glNamedCopyBufferSubDataEXT');
  glad__glNamedFramebufferRenderbufferEXT = load('glNamedFramebufferRenderbufferEXT');
  glad__glNamedFramebufferTexture1DEXT = load('glNamedFramebufferTexture1DEXT');
  glad__glNamedFramebufferTexture2DEXT = load('glNamedFramebufferTexture2DEXT');
  glad__glNamedFramebufferTexture3DEXT = load('glNamedFramebufferTexture3DEXT');
  glad__glNamedFramebufferTextureEXT = load('glNamedFramebufferTextureEXT');
  glad__glNamedFramebufferTextureFaceEXT = load('glNamedFramebufferTextureFaceEXT');
  glad__glNamedFramebufferTextureLayerEXT = load('glNamedFramebufferTextureLayerEXT');
  glad__glNamedProgramLocalParameter4dEXT = load('glNamedProgramLocalParameter4dEXT');
  glad__glNamedProgramLocalParameter4dvEXT = load('glNamedProgramLocalParameter4dvEXT');
  glad__glNamedProgramLocalParameter4fEXT = load('glNamedProgramLocalParameter4fEXT');
  glad__glNamedProgramLocalParameter4fvEXT = load('glNamedProgramLocalParameter4fvEXT');
  glad__glNamedProgramLocalParameterI4iEXT = load('glNamedProgramLocalParameterI4iEXT');
  glad__glNamedProgramLocalParameterI4ivEXT = load('glNamedProgramLocalParameterI4ivEXT');
  glad__glNamedProgramLocalParameterI4uiEXT = load('glNamedProgramLocalParameterI4uiEXT');
  glad__glNamedProgramLocalParameterI4uivEXT = load('glNamedProgramLocalParameterI4uivEXT');
  glad__glNamedProgramLocalParameters4fvEXT = load('glNamedProgramLocalParameters4fvEXT');
  glad__glNamedProgramLocalParametersI4ivEXT = load('glNamedProgramLocalParametersI4ivEXT');
  glad__glNamedProgramLocalParametersI4uivEXT = load('glNamedProgramLocalParametersI4uivEXT');
  glad__glNamedProgramStringEXT = load('glNamedProgramStringEXT');
  glad__glNamedRenderbufferStorageEXT = load('glNamedRenderbufferStorageEXT');
  glad__glNamedRenderbufferStorageMultisampleCoverageEXT = load('glNamedRenderbufferStorageMultisampleCoverageEXT');
  glad__glNamedRenderbufferStorageMultisampleEXT = load('glNamedRenderbufferStorageMultisampleEXT');
  glad__glProgramUniform1fEXT = load('glProgramUniform1fEXT');
  glad__glProgramUniform1fvEXT = load('glProgramUniform1fvEXT');
  glad__glProgramUniform1iEXT = load('glProgramUniform1iEXT');
  glad__glProgramUniform1ivEXT = load('glProgramUniform1ivEXT');
  glad__glProgramUniform1uiEXT = load('glProgramUniform1uiEXT');
  glad__glProgramUniform1uivEXT = load('glProgramUniform1uivEXT');
  glad__glProgramUniform2fEXT = load('glProgramUniform2fEXT');
  glad__glProgramUniform2fvEXT = load('glProgramUniform2fvEXT');
  glad__glProgramUniform2iEXT = load('glProgramUniform2iEXT');
  glad__glProgramUniform2ivEXT = load('glProgramUniform2ivEXT');
  glad__glProgramUniform2uiEXT = load('glProgramUniform2uiEXT');
  glad__glProgramUniform2uivEXT = load('glProgramUniform2uivEXT');
  glad__glProgramUniform3fEXT = load('glProgramUniform3fEXT');
  glad__glProgramUniform3fvEXT = load('glProgramUniform3fvEXT');
  glad__glProgramUniform3iEXT = load('glProgramUniform3iEXT');
  glad__glProgramUniform3ivEXT = load('glProgramUniform3ivEXT');
  glad__glProgramUniform3uiEXT = load('glProgramUniform3uiEXT');
  glad__glProgramUniform3uivEXT = load('glProgramUniform3uivEXT');
  glad__glProgramUniform4fEXT = load('glProgramUniform4fEXT');
  glad__glProgramUniform4fvEXT = load('glProgramUniform4fvEXT');
  glad__glProgramUniform4iEXT = load('glProgramUniform4iEXT');
  glad__glProgramUniform4ivEXT = load('glProgramUniform4ivEXT');
  glad__glProgramUniform4uiEXT = load('glProgramUniform4uiEXT');
  glad__glProgramUniform4uivEXT = load('glProgramUniform4uivEXT');
  glad__glProgramUniformMatrix2fvEXT = load('glProgramUniformMatrix2fvEXT');
  glad__glProgramUniformMatrix2x3fvEXT = load('glProgramUniformMatrix2x3fvEXT');
  glad__glProgramUniformMatrix2x4fvEXT = load('glProgramUniformMatrix2x4fvEXT');
  glad__glProgramUniformMatrix3fvEXT = load('glProgramUniformMatrix3fvEXT');
  glad__glProgramUniformMatrix3x2fvEXT = load('glProgramUniformMatrix3x2fvEXT');
  glad__glProgramUniformMatrix3x4fvEXT = load('glProgramUniformMatrix3x4fvEXT');
  glad__glProgramUniformMatrix4fvEXT = load('glProgramUniformMatrix4fvEXT');
  glad__glProgramUniformMatrix4x2fvEXT = load('glProgramUniformMatrix4x2fvEXT');
  glad__glProgramUniformMatrix4x3fvEXT = load('glProgramUniformMatrix4x3fvEXT');
  glad__glPushClientAttribDefaultEXT = load('glPushClientAttribDefaultEXT');
  glad__glTextureBufferEXT = load('glTextureBufferEXT');
  glad__glTextureImage1DEXT = load('glTextureImage1DEXT');
  glad__glTextureImage2DEXT = load('glTextureImage2DEXT');
  glad__glTextureImage3DEXT = load('glTextureImage3DEXT');
  glad__glTextureParameterIivEXT = load('glTextureParameterIivEXT');
  glad__glTextureParameterIuivEXT = load('glTextureParameterIuivEXT');
  glad__glTextureParameterfEXT = load('glTextureParameterfEXT');
  glad__glTextureParameterfvEXT = load('glTextureParameterfvEXT');
  glad__glTextureParameteriEXT = load('glTextureParameteriEXT');
  glad__glTextureParameterivEXT = load('glTextureParameterivEXT');
  glad__glTextureRenderbufferEXT = load('glTextureRenderbufferEXT');
  glad__glTextureSubImage1DEXT = load('glTextureSubImage1DEXT');
  glad__glTextureSubImage2DEXT = load('glTextureSubImage2DEXT');
  glad__glTextureSubImage3DEXT = load('glTextureSubImage3DEXT');
  glad__glUnmapNamedBufferEXT = load('glUnmapNamedBufferEXT');
  glad__glVertexArrayColorOffsetEXT = load('glVertexArrayColorOffsetEXT');
  glad__glVertexArrayEdgeFlagOffsetEXT = load('glVertexArrayEdgeFlagOffsetEXT');
  glad__glVertexArrayFogCoordOffsetEXT = load('glVertexArrayFogCoordOffsetEXT');
  glad__glVertexArrayIndexOffsetEXT = load('glVertexArrayIndexOffsetEXT');
  glad__glVertexArrayMultiTexCoordOffsetEXT = load('glVertexArrayMultiTexCoordOffsetEXT');
  glad__glVertexArrayNormalOffsetEXT = load('glVertexArrayNormalOffsetEXT');
  glad__glVertexArraySecondaryColorOffsetEXT = load('glVertexArraySecondaryColorOffsetEXT');
  glad__glVertexArrayTexCoordOffsetEXT = load('glVertexArrayTexCoordOffsetEXT');
  glad__glVertexArrayVertexAttribDivisorEXT = load('glVertexArrayVertexAttribDivisorEXT');
  glad__glVertexArrayVertexAttribIOffsetEXT = load('glVertexArrayVertexAttribIOffsetEXT');
  glad__glVertexArrayVertexAttribOffsetEXT = load('glVertexArrayVertexAttribOffsetEXT');
  glad__glVertexArrayVertexOffsetEXT = load('glVertexArrayVertexOffsetEXT');
  glad__glDiscardFramebufferEXT = load('glDiscardFramebufferEXT');
  glad__glDrawBuffersEXT = load('glDrawBuffersEXT');
  glad__glColorMaskIndexedEXT = load('glColorMaskIndexedEXT');
  glad__glDisableIndexedEXT = load('glDisableIndexedEXT');
  glad__glEnableIndexedEXT = load('glEnableIndexedEXT');
  glad__glGetBooleanIndexedvEXT = load('glGetBooleanIndexedvEXT');
  glad__glGetIntegerIndexedvEXT = load('glGetIntegerIndexedvEXT');
  glad__glIsEnabledIndexedEXT = load('glIsEnabledIndexedEXT');
  glad__glBlendEquationSeparateiEXT = load('glBlendEquationSeparateiEXT');
  glad__glBlendEquationiEXT = load('glBlendEquationiEXT');
  glad__glBlendFuncSeparateiEXT = load('glBlendFuncSeparateiEXT');
  glad__glBlendFunciEXT = load('glBlendFunciEXT');
  glad__glColorMaskiEXT = load('glColorMaskiEXT');
  glad__glDisableiEXT = load('glDisableiEXT');
  glad__glEnableiEXT = load('glEnableiEXT');
  glad__glIsEnablediEXT = load('glIsEnablediEXT');
  glad__glDrawElementsBaseVertexEXT = load('glDrawElementsBaseVertexEXT');
  glad__glDrawElementsInstancedBaseVertexEXT = load('glDrawElementsInstancedBaseVertexEXT');
  glad__glDrawRangeElementsBaseVertexEXT = load('glDrawRangeElementsBaseVertexEXT');
  glad__glMultiDrawElementsBaseVertexEXT = load('glMultiDrawElementsBaseVertexEXT');
  glad__glDrawArraysInstancedEXT = load('glDrawArraysInstancedEXT');
  glad__glDrawElementsInstancedEXT = load('glDrawElementsInstancedEXT');
  glad__glDrawRangeElementsEXT = load('glDrawRangeElementsEXT');
  glad__glBufferStorageExternalEXT = load('glBufferStorageExternalEXT');
  glad__glNamedBufferStorageExternalEXT = load('glNamedBufferStorageExternalEXT');
  glad__glFogCoordPointerEXT = load('glFogCoordPointerEXT');
  glad__glFogCoorddEXT = load('glFogCoorddEXT');
  glad__glFogCoorddvEXT = load('glFogCoorddvEXT');
  glad__glFogCoordfEXT = load('glFogCoordfEXT');
  glad__glFogCoordfvEXT = load('glFogCoordfvEXT');
  glad__glFragmentColorMaterialEXT = load('glFragmentColorMaterialEXT');
  glad__glFragmentLightModelfEXT = load('glFragmentLightModelfEXT');
  glad__glFragmentLightModelfvEXT = load('glFragmentLightModelfvEXT');
  glad__glFragmentLightModeliEXT = load('glFragmentLightModeliEXT');
  glad__glFragmentLightModelivEXT = load('glFragmentLightModelivEXT');
  glad__glFragmentLightfEXT = load('glFragmentLightfEXT');
  glad__glFragmentLightfvEXT = load('glFragmentLightfvEXT');
  glad__glFragmentLightiEXT = load('glFragmentLightiEXT');
  glad__glFragmentLightivEXT = load('glFragmentLightivEXT');
  glad__glFragmentMaterialfEXT = load('glFragmentMaterialfEXT');
  glad__glFragmentMaterialfvEXT = load('glFragmentMaterialfvEXT');
  glad__glFragmentMaterialiEXT = load('glFragmentMaterialiEXT');
  glad__glFragmentMaterialivEXT = load('glFragmentMaterialivEXT');
  glad__glGetFragmentLightfvEXT = load('glGetFragmentLightfvEXT');
  glad__glGetFragmentLightivEXT = load('glGetFragmentLightivEXT');
  glad__glGetFragmentMaterialfvEXT = load('glGetFragmentMaterialfvEXT');
  glad__glGetFragmentMaterialivEXT = load('glGetFragmentMaterialivEXT');
  glad__glLightEnviEXT = load('glLightEnviEXT');
  glad__glBlitFramebufferEXT = load('glBlitFramebufferEXT');
  glad__glRenderbufferStorageMultisampleEXT = load('glRenderbufferStorageMultisampleEXT');
  glad__glBindFramebufferEXT = load('glBindFramebufferEXT');
  glad__glBindRenderbufferEXT = load('glBindRenderbufferEXT');
  glad__glCheckFramebufferStatusEXT = load('glCheckFramebufferStatusEXT');
  glad__glDeleteFramebuffersEXT = load('glDeleteFramebuffersEXT');
  glad__glDeleteRenderbuffersEXT = load('glDeleteRenderbuffersEXT');
  glad__glFramebufferRenderbufferEXT = load('glFramebufferRenderbufferEXT');
  glad__glFramebufferTexture1DEXT = load('glFramebufferTexture1DEXT');
  glad__glFramebufferTexture2DEXT = load('glFramebufferTexture2DEXT');
  glad__glFramebufferTexture3DEXT = load('glFramebufferTexture3DEXT');
  glad__glGenFramebuffersEXT = load('glGenFramebuffersEXT');
  glad__glGenRenderbuffersEXT = load('glGenRenderbuffersEXT');
  glad__glGenerateMipmapEXT = load('glGenerateMipmapEXT');
  glad__glGetFramebufferAttachmentParameterivEXT = load('glGetFramebufferAttachmentParameterivEXT');
  glad__glGetRenderbufferParameterivEXT = load('glGetRenderbufferParameterivEXT');
  glad__glIsFramebufferEXT = load('glIsFramebufferEXT');
  glad__glIsRenderbufferEXT = load('glIsRenderbufferEXT');
  glad__glRenderbufferStorageEXT = load('glRenderbufferStorageEXT');
  glad__glFramebufferTextureEXT = load('glFramebufferTextureEXT');
  glad__glFramebufferTextureFaceEXT = load('glFramebufferTextureFaceEXT');
  glad__glProgramParameteriEXT = load('glProgramParameteriEXT');
  glad__glProgramEnvParameters4fvEXT = load('glProgramEnvParameters4fvEXT');
  glad__glProgramLocalParameters4fvEXT = load('glProgramLocalParameters4fvEXT');
  glad__glBindFragDataLocationEXT = load('glBindFragDataLocationEXT');
  glad__glGetFragDataLocationEXT = load('glGetFragDataLocationEXT');
  glad__glGetUniformuivEXT = load('glGetUniformuivEXT');
  glad__glGetVertexAttribIivEXT = load('glGetVertexAttribIivEXT');
  glad__glGetVertexAttribIuivEXT = load('glGetVertexAttribIuivEXT');
  glad__glUniform1uiEXT = load('glUniform1uiEXT');
  glad__glUniform1uivEXT = load('glUniform1uivEXT');
  glad__glUniform2uiEXT = load('glUniform2uiEXT');
  glad__glUniform2uivEXT = load('glUniform2uivEXT');
  glad__glUniform3uiEXT = load('glUniform3uiEXT');
  glad__glUniform3uivEXT = load('glUniform3uivEXT');
  glad__glUniform4uiEXT = load('glUniform4uiEXT');
  glad__glUniform4uivEXT = load('glUniform4uivEXT');
  glad__glVertexAttribI1iEXT = load('glVertexAttribI1iEXT');
  glad__glVertexAttribI1ivEXT = load('glVertexAttribI1ivEXT');
  glad__glVertexAttribI1uiEXT = load('glVertexAttribI1uiEXT');
  glad__glVertexAttribI1uivEXT = load('glVertexAttribI1uivEXT');
  glad__glVertexAttribI2iEXT = load('glVertexAttribI2iEXT');
  glad__glVertexAttribI2ivEXT = load('glVertexAttribI2ivEXT');
  glad__glVertexAttribI2uiEXT = load('glVertexAttribI2uiEXT');
  glad__glVertexAttribI2uivEXT = load('glVertexAttribI2uivEXT');
  glad__glVertexAttribI3iEXT = load('glVertexAttribI3iEXT');
  glad__glVertexAttribI3ivEXT = load('glVertexAttribI3ivEXT');
  glad__glVertexAttribI3uiEXT = load('glVertexAttribI3uiEXT');
  glad__glVertexAttribI3uivEXT = load('glVertexAttribI3uivEXT');
  glad__glVertexAttribI4bvEXT = load('glVertexAttribI4bvEXT');
  glad__glVertexAttribI4iEXT = load('glVertexAttribI4iEXT');
  glad__glVertexAttribI4ivEXT = load('glVertexAttribI4ivEXT');
  glad__glVertexAttribI4svEXT = load('glVertexAttribI4svEXT');
  glad__glVertexAttribI4ubvEXT = load('glVertexAttribI4ubvEXT');
  glad__glVertexAttribI4uiEXT = load('glVertexAttribI4uiEXT');
  glad__glVertexAttribI4uivEXT = load('glVertexAttribI4uivEXT');
  glad__glVertexAttribI4usvEXT = load('glVertexAttribI4usvEXT');
  glad__glVertexAttribIPointerEXT = load('glVertexAttribIPointerEXT');
  glad__glGetHistogramEXT = load('glGetHistogramEXT');
  glad__glGetHistogramParameterfvEXT = load('glGetHistogramParameterfvEXT');
  glad__glGetHistogramParameterivEXT = load('glGetHistogramParameterivEXT');
  glad__glGetMinmaxEXT = load('glGetMinmaxEXT');
  glad__glGetMinmaxParameterfvEXT = load('glGetMinmaxParameterfvEXT');
  glad__glGetMinmaxParameterivEXT = load('glGetMinmaxParameterivEXT');
  glad__glHistogramEXT = load('glHistogramEXT');
  glad__glMinmaxEXT = load('glMinmaxEXT');
  glad__glResetHistogramEXT = load('glResetHistogramEXT');
  glad__glResetMinmaxEXT = load('glResetMinmaxEXT');
  glad__glIndexFuncEXT = load('glIndexFuncEXT');
  glad__glIndexMaterialEXT = load('glIndexMaterialEXT');
  glad__glVertexAttribDivisorEXT = load('glVertexAttribDivisorEXT');
  glad__glApplyTextureEXT = load('glApplyTextureEXT');
  glad__glTextureLightEXT = load('glTextureLightEXT');
  glad__glTextureMaterialEXT = load('glTextureMaterialEXT');
  glad__glFlushMappedBufferRangeEXT = load('glFlushMappedBufferRangeEXT');
  glad__glMapBufferRangeEXT = load('glMapBufferRangeEXT');
  glad__glBufferStorageMemEXT = load('glBufferStorageMemEXT');
  glad__glCreateMemoryObjectsEXT = load('glCreateMemoryObjectsEXT');
  glad__glDeleteMemoryObjectsEXT = load('glDeleteMemoryObjectsEXT');
  glad__glGetMemoryObjectParameterivEXT = load('glGetMemoryObjectParameterivEXT');
  glad__glGetUnsignedBytei_vEXT = load('glGetUnsignedBytei_vEXT');
  glad__glGetUnsignedBytevEXT = load('glGetUnsignedBytevEXT');
  glad__glIsMemoryObjectEXT = load('glIsMemoryObjectEXT');
  glad__glMemoryObjectParameterivEXT = load('glMemoryObjectParameterivEXT');
  glad__glNamedBufferStorageMemEXT = load('glNamedBufferStorageMemEXT');
  glad__glTexStorageMem1DEXT = load('glTexStorageMem1DEXT');
  glad__glTexStorageMem2DEXT = load('glTexStorageMem2DEXT');
  glad__glTexStorageMem2DMultisampleEXT = load('glTexStorageMem2DMultisampleEXT');
  glad__glTexStorageMem3DEXT = load('glTexStorageMem3DEXT');
  glad__glTexStorageMem3DMultisampleEXT = load('glTexStorageMem3DMultisampleEXT');
  glad__glTextureStorageMem1DEXT = load('glTextureStorageMem1DEXT');
  glad__glTextureStorageMem2DEXT = load('glTextureStorageMem2DEXT');
  glad__glTextureStorageMem2DMultisampleEXT = load('glTextureStorageMem2DMultisampleEXT');
  glad__glTextureStorageMem3DEXT = load('glTextureStorageMem3DEXT');
  glad__glTextureStorageMem3DMultisampleEXT = load('glTextureStorageMem3DMultisampleEXT');
  glad__glImportMemoryFdEXT = load('glImportMemoryFdEXT');
  glad__glImportMemoryWin32HandleEXT = load('glImportMemoryWin32HandleEXT');
  glad__glImportMemoryWin32NameEXT = load('glImportMemoryWin32NameEXT');
  glad__glMultiDrawArraysEXT = load('glMultiDrawArraysEXT');
  glad__glMultiDrawElementsEXT = load('glMultiDrawElementsEXT');
  glad__glMultiDrawArraysIndirectEXT = load('glMultiDrawArraysIndirectEXT');
  glad__glMultiDrawElementsIndirectEXT = load('glMultiDrawElementsIndirectEXT');
  glad__glSampleMaskEXT = load('glSampleMaskEXT');
  glad__glSamplePatternEXT = load('glSamplePatternEXT');
  glad__glFramebufferTexture2DMultisampleEXT = load('glFramebufferTexture2DMultisampleEXT');
  glad__glDrawBuffersIndexedEXT = load('glDrawBuffersIndexedEXT');
  glad__glGetIntegeri_vEXT = load('glGetIntegeri_vEXT');
  glad__glReadBufferIndexedEXT = load('glReadBufferIndexedEXT');
  glad__glColorTableEXT = load('glColorTableEXT');
  glad__glGetColorTableEXT = load('glGetColorTableEXT');
  glad__glGetColorTableParameterfvEXT = load('glGetColorTableParameterfvEXT');
  glad__glGetColorTableParameterivEXT = load('glGetColorTableParameterivEXT');
  glad__glGetPixelTransformParameterfvEXT = load('glGetPixelTransformParameterfvEXT');
  glad__glGetPixelTransformParameterivEXT = load('glGetPixelTransformParameterivEXT');
  glad__glPixelTransformParameterfEXT = load('glPixelTransformParameterfEXT');
  glad__glPixelTransformParameterfvEXT = load('glPixelTransformParameterfvEXT');
  glad__glPixelTransformParameteriEXT = load('glPixelTransformParameteriEXT');
  glad__glPixelTransformParameterivEXT = load('glPixelTransformParameterivEXT');
  glad__glPointParameterfEXT = load('glPointParameterfEXT');
  glad__glPointParameterfvEXT = load('glPointParameterfvEXT');
  glad__glPolygonOffsetEXT = load('glPolygonOffsetEXT');
  glad__glPolygonOffsetClampEXT = load('glPolygonOffsetClampEXT');
  glad__glProvokingVertexEXT = load('glProvokingVertexEXT');
  glad__glCoverageModulationNV = load('glCoverageModulationNV');
  glad__glCoverageModulationTableNV = load('glCoverageModulationTableNV');
  glad__glGetCoverageModulationTableNV = load('glGetCoverageModulationTableNV');
  glad__glRasterSamplesEXT = load('glRasterSamplesEXT');
  glad__glBeginSceneEXT = load('glBeginSceneEXT');
  glad__glEndSceneEXT = load('glEndSceneEXT');
  glad__glSecondaryColor3bEXT = load('glSecondaryColor3bEXT');
  glad__glSecondaryColor3bvEXT = load('glSecondaryColor3bvEXT');
  glad__glSecondaryColor3dEXT = load('glSecondaryColor3dEXT');
  glad__glSecondaryColor3dvEXT = load('glSecondaryColor3dvEXT');
  glad__glSecondaryColor3fEXT = load('glSecondaryColor3fEXT');
  glad__glSecondaryColor3fvEXT = load('glSecondaryColor3fvEXT');
  glad__glSecondaryColor3iEXT = load('glSecondaryColor3iEXT');
  glad__glSecondaryColor3ivEXT = load('glSecondaryColor3ivEXT');
  glad__glSecondaryColor3sEXT = load('glSecondaryColor3sEXT');
  glad__glSecondaryColor3svEXT = load('glSecondaryColor3svEXT');
  glad__glSecondaryColor3ubEXT = load('glSecondaryColor3ubEXT');
  glad__glSecondaryColor3ubvEXT = load('glSecondaryColor3ubvEXT');
  glad__glSecondaryColor3uiEXT = load('glSecondaryColor3uiEXT');
  glad__glSecondaryColor3uivEXT = load('glSecondaryColor3uivEXT');
  glad__glSecondaryColor3usEXT = load('glSecondaryColor3usEXT');
  glad__glSecondaryColor3usvEXT = load('glSecondaryColor3usvEXT');
  glad__glSecondaryColorPointerEXT = load('glSecondaryColorPointerEXT');
  glad__glDeleteSemaphoresEXT = load('glDeleteSemaphoresEXT');
  glad__glGenSemaphoresEXT = load('glGenSemaphoresEXT');
  glad__glGetSemaphoreParameterui64vEXT = load('glGetSemaphoreParameterui64vEXT');
  glad__glIsSemaphoreEXT = load('glIsSemaphoreEXT');
  glad__glSemaphoreParameterui64vEXT = load('glSemaphoreParameterui64vEXT');
  glad__glSignalSemaphoreEXT = load('glSignalSemaphoreEXT');
  glad__glWaitSemaphoreEXT = load('glWaitSemaphoreEXT');
  glad__glImportSemaphoreFdEXT = load('glImportSemaphoreFdEXT');
  glad__glImportSemaphoreWin32HandleEXT = load('glImportSemaphoreWin32HandleEXT');
  glad__glImportSemaphoreWin32NameEXT = load('glImportSemaphoreWin32NameEXT');
  glad__glActiveProgramEXT = load('glActiveProgramEXT');
  glad__glCreateShaderProgramEXT = load('glCreateShaderProgramEXT');
  glad__glUseShaderProgramEXT = load('glUseShaderProgramEXT');
  glad__glBindImageTextureEXT = load('glBindImageTextureEXT');
  glad__glMemoryBarrierEXT = load('glMemoryBarrierEXT');
  glad__glClearPixelLocalStorageuiEXT = load('glClearPixelLocalStorageuiEXT');
  glad__glFramebufferPixelLocalStorageSizeEXT = load('glFramebufferPixelLocalStorageSizeEXT');
  glad__glGetFramebufferPixelLocalStorageSizeEXT = load('glGetFramebufferPixelLocalStorageSizeEXT');
  glad__glTexPageCommitmentEXT = load('glTexPageCommitmentEXT');
  glad__glTexturePageCommitmentEXT = load('glTexturePageCommitmentEXT');
  glad__glActiveStencilFaceEXT = load('glActiveStencilFaceEXT');
  glad__glTexSubImage1DEXT = load('glTexSubImage1DEXT');
  glad__glTexSubImage2DEXT = load('glTexSubImage2DEXT');
  glad__glTexSubImage3DEXT = load('glTexSubImage3DEXT');
  glad__glTexImage3DEXT = load('glTexImage3DEXT');
  glad__glFramebufferTextureLayerEXT = load('glFramebufferTextureLayerEXT');
  glad__glTexBufferEXT = load('glTexBufferEXT');
  glad__glClearColorIiEXT = load('glClearColorIiEXT');
  glad__glClearColorIuiEXT = load('glClearColorIuiEXT');
  glad__glGetTexParameterIivEXT = load('glGetTexParameterIivEXT');
  glad__glGetTexParameterIuivEXT = load('glGetTexParameterIuivEXT');
  glad__glTexParameterIivEXT = load('glTexParameterIivEXT');
  glad__glTexParameterIuivEXT = load('glTexParameterIuivEXT');
  glad__glAreTexturesResidentEXT = load('glAreTexturesResidentEXT');
  glad__glBindTextureEXT = load('glBindTextureEXT');
  glad__glDeleteTexturesEXT = load('glDeleteTexturesEXT');
  glad__glGenTexturesEXT = load('glGenTexturesEXT');
  glad__glIsTextureEXT = load('glIsTextureEXT');
  glad__glPrioritizeTexturesEXT = load('glPrioritizeTexturesEXT');
  glad__glTextureNormalEXT = load('glTextureNormalEXT');
  glad__glTexStorage1DEXT = load('glTexStorage1DEXT');
  glad__glTexStorage2DEXT = load('glTexStorage2DEXT');
  glad__glTexStorage3DEXT = load('glTexStorage3DEXT');
  glad__glTextureStorage1DEXT = load('glTextureStorage1DEXT');
  glad__glTextureStorage2DEXT = load('glTextureStorage2DEXT');
  glad__glTextureStorage3DEXT = load('glTextureStorage3DEXT');
  glad__glTextureViewEXT = load('glTextureViewEXT');
  glad__glGetQueryObjecti64vEXT = load('glGetQueryObjecti64vEXT');
  glad__glGetQueryObjectui64vEXT = load('glGetQueryObjectui64vEXT');
  glad__glBeginTransformFeedbackEXT = load('glBeginTransformFeedbackEXT');
  glad__glBindBufferBaseEXT = load('glBindBufferBaseEXT');
  glad__glBindBufferOffsetEXT = load('glBindBufferOffsetEXT');
  glad__glBindBufferRangeEXT = load('glBindBufferRangeEXT');
  glad__glEndTransformFeedbackEXT = load('glEndTransformFeedbackEXT');
  glad__glGetTransformFeedbackVaryingEXT = load('glGetTransformFeedbackVaryingEXT');
  glad__glTransformFeedbackVaryingsEXT = load('glTransformFeedbackVaryingsEXT');
  glad__glArrayElementEXT = load('glArrayElementEXT');
  glad__glColorPointerEXT = load('glColorPointerEXT');
  glad__glDrawArraysEXT = load('glDrawArraysEXT');
  glad__glEdgeFlagPointerEXT = load('glEdgeFlagPointerEXT');
  glad__glIndexPointerEXT = load('glIndexPointerEXT');
  glad__glNormalPointerEXT = load('glNormalPointerEXT');
  glad__glTexCoordPointerEXT = load('glTexCoordPointerEXT');
  glad__glVertexPointerEXT = load('glVertexPointerEXT');
  glad__glBindArraySetEXT = load('glBindArraySetEXT');
  glad__glCreateArraySetExt = load('glCreateArraySetExt');
  glad__glDeleteArraySetsEXT = load('glDeleteArraySetsEXT');
  glad__glGetVertexAttribLdvEXT = load('glGetVertexAttribLdvEXT');
  glad__glVertexArrayVertexAttribLOffsetEXT = load('glVertexArrayVertexAttribLOffsetEXT');
  glad__glVertexAttribL1dEXT = load('glVertexAttribL1dEXT');
  glad__glVertexAttribL1dvEXT = load('glVertexAttribL1dvEXT');
  glad__glVertexAttribL2dEXT = load('glVertexAttribL2dEXT');
  glad__glVertexAttribL2dvEXT = load('glVertexAttribL2dvEXT');
  glad__glVertexAttribL3dEXT = load('glVertexAttribL3dEXT');
  glad__glVertexAttribL3dvEXT = load('glVertexAttribL3dvEXT');
  glad__glVertexAttribL4dEXT = load('glVertexAttribL4dEXT');
  glad__glVertexAttribL4dvEXT = load('glVertexAttribL4dvEXT');
  glad__glVertexAttribLPointerEXT = load('glVertexAttribLPointerEXT');
  glad__glBeginVertexShaderEXT = load('glBeginVertexShaderEXT');
  glad__glBindLightParameterEXT = load('glBindLightParameterEXT');
  glad__glBindMaterialParameterEXT = load('glBindMaterialParameterEXT');
  glad__glBindParameterEXT = load('glBindParameterEXT');
  glad__glBindTexGenParameterEXT = load('glBindTexGenParameterEXT');
  glad__glBindTextureUnitParameterEXT = load('glBindTextureUnitParameterEXT');
  glad__glBindVertexShaderEXT = load('glBindVertexShaderEXT');
  glad__glDeleteVertexShaderEXT = load('glDeleteVertexShaderEXT');
  glad__glDisableVariantClientStateEXT = load('glDisableVariantClientStateEXT');
  glad__glEnableVariantClientStateEXT = load('glEnableVariantClientStateEXT');
  glad__glEndVertexShaderEXT = load('glEndVertexShaderEXT');
  glad__glExtractComponentEXT = load('glExtractComponentEXT');
  glad__glGenSymbolsEXT = load('glGenSymbolsEXT');
  glad__glGenVertexShadersEXT = load('glGenVertexShadersEXT');
  glad__glGetInvariantBooleanvEXT = load('glGetInvariantBooleanvEXT');
  glad__glGetInvariantFloatvEXT = load('glGetInvariantFloatvEXT');
  glad__glGetInvariantIntegervEXT = load('glGetInvariantIntegervEXT');
  glad__glGetLocalConstantBooleanvEXT = load('glGetLocalConstantBooleanvEXT');
  glad__glGetLocalConstantFloatvEXT = load('glGetLocalConstantFloatvEXT');
  glad__glGetLocalConstantIntegervEXT = load('glGetLocalConstantIntegervEXT');
  glad__glGetVariantBooleanvEXT = load('glGetVariantBooleanvEXT');
  glad__glGetVariantFloatvEXT = load('glGetVariantFloatvEXT');
  glad__glGetVariantIntegervEXT = load('glGetVariantIntegervEXT');
  glad__glGetVariantPointervEXT = load('glGetVariantPointervEXT');
  glad__glInsertComponentEXT = load('glInsertComponentEXT');
  glad__glIsVariantEnabledEXT = load('glIsVariantEnabledEXT');
  glad__glSetInvariantEXT = load('glSetInvariantEXT');
  glad__glSetLocalConstantEXT = load('glSetLocalConstantEXT');
  glad__glShaderOp1EXT = load('glShaderOp1EXT');
  glad__glShaderOp2EXT = load('glShaderOp2EXT');
  glad__glShaderOp3EXT = load('glShaderOp3EXT');
  glad__glSwizzleEXT = load('glSwizzleEXT');
  glad__glVariantPointerEXT = load('glVariantPointerEXT');
  glad__glVariantbvEXT = load('glVariantbvEXT');
  glad__glVariantdvEXT = load('glVariantdvEXT');
  glad__glVariantfvEXT = load('glVariantfvEXT');
  glad__glVariantivEXT = load('glVariantivEXT');
  glad__glVariantsvEXT = load('glVariantsvEXT');
  glad__glVariantubvEXT = load('glVariantubvEXT');
  glad__glVariantuivEXT = load('glVariantuivEXT');
  glad__glVariantusvEXT = load('glVariantusvEXT');
  glad__glWriteMaskEXT = load('glWriteMaskEXT');
  glad__glVertexWeightPointerEXT = load('glVertexWeightPointerEXT');
  glad__glVertexWeightfEXT = load('glVertexWeightfEXT');
  glad__glVertexWeightfvEXT = load('glVertexWeightfvEXT');
  glad__glAcquireKeyedMutexWin32EXT = load('glAcquireKeyedMutexWin32EXT');
  glad__glReleaseKeyedMutexWin32EXT = load('glReleaseKeyedMutexWin32EXT');
  glad__glWindowRectanglesEXT = load('glWindowRectanglesEXT');
  glad__glImportSyncEXT = load('glImportSyncEXT');
  glad__glFrameTerminatorGREMEDY = load('glFrameTerminatorGREMEDY');
  glad__glStringMarkerGREMEDY = load('glStringMarkerGREMEDY');
  glad__glGetImageTransformParameterfvHP = load('glGetImageTransformParameterfvHP');
  glad__glGetImageTransformParameterivHP = load('glGetImageTransformParameterivHP');
  glad__glImageTransformParameterfHP = load('glImageTransformParameterfHP');
  glad__glImageTransformParameterfvHP = load('glImageTransformParameterfvHP');
  glad__glImageTransformParameteriHP = load('glImageTransformParameteriHP');
  glad__glImageTransformParameterivHP = load('glImageTransformParameterivHP');
  glad__glMultiModeDrawArraysIBM = load('glMultiModeDrawArraysIBM');
  glad__glMultiModeDrawElementsIBM = load('glMultiModeDrawElementsIBM');
  glad__glColorPointerListIBM = load('glColorPointerListIBM');
  glad__glEdgeFlagPointerListIBM = load('glEdgeFlagPointerListIBM');
  glad__glFogCoordPointerListIBM = load('glFogCoordPointerListIBM');
  glad__glIndexPointerListIBM = load('glIndexPointerListIBM');
  glad__glNormalPointerListIBM = load('glNormalPointerListIBM');
  glad__glSecondaryColorPointerListIBM = load('glSecondaryColorPointerListIBM');
  glad__glTexCoordPointerListIBM = load('glTexCoordPointerListIBM');
  glad__glVertexPointerListIBM = load('glVertexPointerListIBM');
  glad__glMapTexture2DINTEL = load('glMapTexture2DINTEL');
  glad__glSyncTextureINTEL = load('glSyncTextureINTEL');
  glad__glUnmapTexture2DINTEL = load('glUnmapTexture2DINTEL');
  glad__glColorPointervINTEL = load('glColorPointervINTEL');
  glad__glNormalPointervINTEL = load('glNormalPointervINTEL');
  glad__glTexCoordPointervINTEL = load('glTexCoordPointervINTEL');
  glad__glVertexPointervINTEL = load('glVertexPointervINTEL');
  glad__glBeginPerfQueryINTEL = load('glBeginPerfQueryINTEL');
  glad__glCreatePerfQueryINTEL = load('glCreatePerfQueryINTEL');
  glad__glDeletePerfQueryINTEL = load('glDeletePerfQueryINTEL');
  glad__glEndPerfQueryINTEL = load('glEndPerfQueryINTEL');
  glad__glGetFirstPerfQueryIdINTEL = load('glGetFirstPerfQueryIdINTEL');
  glad__glGetNextPerfQueryIdINTEL = load('glGetNextPerfQueryIdINTEL');
  glad__glGetPerfCounterInfoINTEL = load('glGetPerfCounterInfoINTEL');
  glad__glGetPerfQueryDataINTEL = load('glGetPerfQueryDataINTEL');
  glad__glGetPerfQueryIdByNameINTEL = load('glGetPerfQueryIdByNameINTEL');
  glad__glGetPerfQueryInfoINTEL = load('glGetPerfQueryInfoINTEL');
  glad__glTexScissorFuncINTEL = load('glTexScissorFuncINTEL');
  glad__glTexScissorINTEL = load('glTexScissorINTEL');
  glad__glBlendBarrierKHR = load('glBlendBarrierKHR');
  glad__GLDEBUGPROC = load('GLDEBUGPROC');
  glad__glDebugMessageCallback = load('glDebugMessageCallback');
  glad__glDebugMessageControl = load('glDebugMessageControl');
  glad__glDebugMessageInsert = load('glDebugMessageInsert');
  glad__glGetDebugMessageLog = load('glGetDebugMessageLog');
  glad__glGetObjectLabel = load('glGetObjectLabel');
  glad__glGetObjectPtrLabel = load('glGetObjectPtrLabel');
  glad__glObjectLabel = load('glObjectLabel');
  glad__glObjectPtrLabel = load('glObjectPtrLabel');
  glad__glPopDebugGroup = load('glPopDebugGroup');
  glad__glPushDebugGroup = load('glPushDebugGroup');
  glad__glMaxShaderCompilerThreadsKHR = load('glMaxShaderCompilerThreadsKHR');
  glad__glGetnUniformfv = load('glGetnUniformfv');
  glad__glGetnUniformiv = load('glGetnUniformiv');
  glad__glGetnUniformuiv = load('glGetnUniformuiv');
  glad__glReadnPixels = load('glReadnPixels');
  glad__glBufferRegionEnabled = load('glBufferRegionEnabled');
  glad__glDeleteBufferRegion = load('glDeleteBufferRegion');
  glad__glDrawBufferRegion = load('glDrawBufferRegion');
  glad__glNewBufferRegion = load('glNewBufferRegion');
  glad__glReadBufferRegion = load('glReadBufferRegion');
  glad__glResizeBuffersMESA = load('glResizeBuffersMESA');
  glad__glWindowPos2dMESA = load('glWindowPos2dMESA');
  glad__glWindowPos2dvMESA = load('glWindowPos2dvMESA');
  glad__glWindowPos2fMESA = load('glWindowPos2fMESA');
  glad__glWindowPos2fvMESA = load('glWindowPos2fvMESA');
  glad__glWindowPos2iMESA = load('glWindowPos2iMESA');
  glad__glWindowPos2ivMESA = load('glWindowPos2ivMESA');
  glad__glWindowPos2sMESA = load('glWindowPos2sMESA');
  glad__glWindowPos2svMESA = load('glWindowPos2svMESA');
  glad__glWindowPos3dMESA = load('glWindowPos3dMESA');
  glad__glWindowPos3dvMESA = load('glWindowPos3dvMESA');
  glad__glWindowPos3fMESA = load('glWindowPos3fMESA');
  glad__glWindowPos3fvMESA = load('glWindowPos3fvMESA');
  glad__glWindowPos3iMESA = load('glWindowPos3iMESA');
  glad__glWindowPos3ivMESA = load('glWindowPos3ivMESA');
  glad__glWindowPos3sMESA = load('glWindowPos3sMESA');
  glad__glWindowPos3svMESA = load('glWindowPos3svMESA');
  glad__glWindowPos4dMESA = load('glWindowPos4dMESA');
  glad__glWindowPos4dvMESA = load('glWindowPos4dvMESA');
  glad__glWindowPos4fMESA = load('glWindowPos4fMESA');
  glad__glWindowPos4fvMESA = load('glWindowPos4fvMESA');
  glad__glWindowPos4iMESA = load('glWindowPos4iMESA');
  glad__glWindowPos4ivMESA = load('glWindowPos4ivMESA');
  glad__glWindowPos4sMESA = load('glWindowPos4sMESA');
  glad__glWindowPos4svMESA = load('glWindowPos4svMESA');
  glad__glBeginConditionalRenderNVX = load('glBeginConditionalRenderNVX');
  glad__glEndConditionalRenderNVX = load('glEndConditionalRenderNVX');
  glad__glLGPUCopyImageSubDataNVX = load('glLGPUCopyImageSubDataNVX');
  glad__glLGPUInterlockNVX = load('glLGPUInterlockNVX');
  glad__glLGPUNamedBufferSubDataNVX = load('glLGPUNamedBufferSubDataNVX');
  glad__glStereoParameterfNV = load('glStereoParameterfNV');
  glad__glStereoParameteriNV = load('glStereoParameteriNV');
  glad__glMultiDrawArraysIndirectBindlessNV = load('glMultiDrawArraysIndirectBindlessNV');
  glad__glMultiDrawElementsIndirectBindlessNV = load('glMultiDrawElementsIndirectBindlessNV');
  glad__glMultiDrawArraysIndirectBindlessCountNV = load('glMultiDrawArraysIndirectBindlessCountNV');
  glad__glMultiDrawElementsIndirectBindlessCountNV = load('glMultiDrawElementsIndirectBindlessCountNV');
  glad__glGetImageHandleNV = load('glGetImageHandleNV');
  glad__glGetTextureHandleNV = load('glGetTextureHandleNV');
  glad__glGetTextureSamplerHandleNV = load('glGetTextureSamplerHandleNV');
  glad__glIsImageHandleResidentNV = load('glIsImageHandleResidentNV');
  glad__glIsTextureHandleResidentNV = load('glIsTextureHandleResidentNV');
  glad__glMakeImageHandleNonResidentNV = load('glMakeImageHandleNonResidentNV');
  glad__glMakeImageHandleResidentNV = load('glMakeImageHandleResidentNV');
  glad__glMakeTextureHandleNonResidentNV = load('glMakeTextureHandleNonResidentNV');
  glad__glMakeTextureHandleResidentNV = load('glMakeTextureHandleResidentNV');
  glad__glProgramUniformHandleui64NV = load('glProgramUniformHandleui64NV');
  glad__glProgramUniformHandleui64vNV = load('glProgramUniformHandleui64vNV');
  glad__glUniformHandleui64NV = load('glUniformHandleui64NV');
  glad__glUniformHandleui64vNV = load('glUniformHandleui64vNV');
  glad__glBlendBarrierNV = load('glBlendBarrierNV');
  glad__glBlendParameteriNV = load('glBlendParameteriNV');
  glad__glViewportPositionWScaleNV = load('glViewportPositionWScaleNV');
  glad__glCallCommandListNV = load('glCallCommandListNV');
  glad__glCommandListSegmentsNV = load('glCommandListSegmentsNV');
  glad__glCompileCommandListNV = load('glCompileCommandListNV');
  glad__glCreateCommandListsNV = load('glCreateCommandListsNV');
  glad__glCreateStatesNV = load('glCreateStatesNV');
  glad__glDeleteCommandListsNV = load('glDeleteCommandListsNV');
  glad__glDeleteStatesNV = load('glDeleteStatesNV');
  glad__glDrawCommandsAddressNV = load('glDrawCommandsAddressNV');
  glad__glDrawCommandsNV = load('glDrawCommandsNV');
  glad__glDrawCommandsStatesAddressNV = load('glDrawCommandsStatesAddressNV');
  glad__glDrawCommandsStatesNV = load('glDrawCommandsStatesNV');
  glad__glGetCommandHeaderNV = load('glGetCommandHeaderNV');
  glad__glGetStageIndexNV = load('glGetStageIndexNV');
  glad__glIsCommandListNV = load('glIsCommandListNV');
  glad__glIsStateNV = load('glIsStateNV');
  glad__glListDrawCommandsStatesClientNV = load('glListDrawCommandsStatesClientNV');
  glad__glStateCaptureNV = load('glStateCaptureNV');
  glad__glBeginConditionalRenderNV = load('glBeginConditionalRenderNV');
  glad__glEndConditionalRenderNV = load('glEndConditionalRenderNV');
  glad__glSubpixelPrecisionBiasNV = load('glSubpixelPrecisionBiasNV');
  glad__glConservativeRasterParameterfNV = load('glConservativeRasterParameterfNV');
  glad__glConservativeRasterParameteriNV = load('glConservativeRasterParameteriNV');
  glad__glCopyBufferSubDataNV = load('glCopyBufferSubDataNV');
  glad__glCopyImageSubDataNV = load('glCopyImageSubDataNV');
  glad__glClearDepthdNV = load('glClearDepthdNV');
  glad__glDepthBoundsdNV = load('glDepthBoundsdNV');
  glad__glDepthRangedNV = load('glDepthRangedNV');
  glad__glDrawBuffersNV = load('glDrawBuffersNV');
  glad__glDrawArraysInstancedNV = load('glDrawArraysInstancedNV');
  glad__glDrawElementsInstancedNV = load('glDrawElementsInstancedNV');
  glad__glDrawTextureNV = load('glDrawTextureNV');
  glad__glDrawVkImageNV = load('glDrawVkImageNV');
  glad__glGetVkProcAddrNV = load('glGetVkProcAddrNV');
  glad__glSignalVkFenceNV = load('glSignalVkFenceNV');
  glad__glSignalVkSemaphoreNV = load('glSignalVkSemaphoreNV');
  glad__glWaitVkSemaphoreNV = load('glWaitVkSemaphoreNV');
  glad__glEvalMapsNV = load('glEvalMapsNV');
  glad__glGetMapAttribParameterfvNV = load('glGetMapAttribParameterfvNV');
  glad__glGetMapAttribParameterivNV = load('glGetMapAttribParameterivNV');
  glad__glGetMapControlPointsNV = load('glGetMapControlPointsNV');
  glad__glGetMapParameterfvNV = load('glGetMapParameterfvNV');
  glad__glGetMapParameterivNV = load('glGetMapParameterivNV');
  glad__glMapControlPointsNV = load('glMapControlPointsNV');
  glad__glMapParameterfvNV = load('glMapParameterfvNV');
  glad__glMapParameterivNV = load('glMapParameterivNV');
  glad__glGetMultisamplefvNV = load('glGetMultisamplefvNV');
  glad__glSampleMaskIndexedNV = load('glSampleMaskIndexedNV');
  glad__glTexRenderbufferNV = load('glTexRenderbufferNV');
  glad__glDeleteFencesNV = load('glDeleteFencesNV');
  glad__glFinishFenceNV = load('glFinishFenceNV');
  glad__glGenFencesNV = load('glGenFencesNV');
  glad__glGetFenceivNV = load('glGetFenceivNV');
  glad__glIsFenceNV = load('glIsFenceNV');
  glad__glSetFenceNV = load('glSetFenceNV');
  glad__glTestFenceNV = load('glTestFenceNV');
  glad__glFragmentCoverageColorNV = load('glFragmentCoverageColorNV');
  glad__glGetProgramNamedParameterdvNV = load('glGetProgramNamedParameterdvNV');
  glad__glGetProgramNamedParameterfvNV = load('glGetProgramNamedParameterfvNV');
  glad__glProgramNamedParameter4dNV = load('glProgramNamedParameter4dNV');
  glad__glProgramNamedParameter4dvNV = load('glProgramNamedParameter4dvNV');
  glad__glProgramNamedParameter4fNV = load('glProgramNamedParameter4fNV');
  glad__glProgramNamedParameter4fvNV = load('glProgramNamedParameter4fvNV');
  glad__glBlitFramebufferNV = load('glBlitFramebufferNV');
  glad__glRenderbufferStorageMultisampleNV = load('glRenderbufferStorageMultisampleNV');
  glad__glRenderbufferStorageMultisampleCoverageNV = load('glRenderbufferStorageMultisampleCoverageNV');
  glad__glProgramVertexLimitNV = load('glProgramVertexLimitNV');
  glad__glMulticastBarrierNV = load('glMulticastBarrierNV');
  glad__glMulticastBlitFramebufferNV = load('glMulticastBlitFramebufferNV');
  glad__glMulticastBufferSubDataNV = load('glMulticastBufferSubDataNV');
  glad__glMulticastCopyBufferSubDataNV = load('glMulticastCopyBufferSubDataNV');
  glad__glMulticastCopyImageSubDataNV = load('glMulticastCopyImageSubDataNV');
  glad__glMulticastFramebufferSampleLocationsfvNV = load('glMulticastFramebufferSampleLocationsfvNV');
  glad__glMulticastGetQueryObjecti64vNV = load('glMulticastGetQueryObjecti64vNV');
  glad__glMulticastGetQueryObjectivNV = load('glMulticastGetQueryObjectivNV');
  glad__glMulticastGetQueryObjectui64vNV = load('glMulticastGetQueryObjectui64vNV');
  glad__glMulticastGetQueryObjectuivNV = load('glMulticastGetQueryObjectuivNV');
  glad__glMulticastWaitSyncNV = load('glMulticastWaitSyncNV');
  glad__glRenderGpuMaskNV = load('glRenderGpuMaskNV');
  glad__glProgramEnvParameterI4iNV = load('glProgramEnvParameterI4iNV');
  glad__glProgramEnvParameterI4ivNV = load('glProgramEnvParameterI4ivNV');
  glad__glProgramEnvParameterI4uiNV = load('glProgramEnvParameterI4uiNV');
  glad__glProgramEnvParameterI4uivNV = load('glProgramEnvParameterI4uivNV');
  glad__glProgramEnvParametersI4ivNV = load('glProgramEnvParametersI4ivNV');
  glad__glProgramEnvParametersI4uivNV = load('glProgramEnvParametersI4uivNV');
  glad__glProgramLocalParameterI4iNV = load('glProgramLocalParameterI4iNV');
  glad__glProgramLocalParameterI4ivNV = load('glProgramLocalParameterI4ivNV');
  glad__glProgramLocalParameterI4uiNV = load('glProgramLocalParameterI4uiNV');
  glad__glProgramLocalParameterI4uivNV = load('glProgramLocalParameterI4uivNV');
  glad__glProgramLocalParametersI4ivNV = load('glProgramLocalParametersI4ivNV');
  glad__glProgramLocalParametersI4uivNV = load('glProgramLocalParametersI4uivNV');
  glad__glGetUniformi64vNV = load('glGetUniformi64vNV');
  glad__glGetUniformui64vNV = load('glGetUniformui64vNV');
  glad__glProgramUniform1i64NV = load('glProgramUniform1i64NV');
  glad__glProgramUniform1i64vNV = load('glProgramUniform1i64vNV');
  glad__glProgramUniform1ui64NV = load('glProgramUniform1ui64NV');
  glad__glProgramUniform1ui64vNV = load('glProgramUniform1ui64vNV');
  glad__glProgramUniform2i64NV = load('glProgramUniform2i64NV');
  glad__glProgramUniform2i64vNV = load('glProgramUniform2i64vNV');
  glad__glProgramUniform2ui64NV = load('glProgramUniform2ui64NV');
  glad__glProgramUniform2ui64vNV = load('glProgramUniform2ui64vNV');
  glad__glProgramUniform3i64NV = load('glProgramUniform3i64NV');
  glad__glProgramUniform3i64vNV = load('glProgramUniform3i64vNV');
  glad__glProgramUniform3ui64NV = load('glProgramUniform3ui64NV');
  glad__glProgramUniform3ui64vNV = load('glProgramUniform3ui64vNV');
  glad__glProgramUniform4i64NV = load('glProgramUniform4i64NV');
  glad__glProgramUniform4i64vNV = load('glProgramUniform4i64vNV');
  glad__glProgramUniform4ui64NV = load('glProgramUniform4ui64NV');
  glad__glProgramUniform4ui64vNV = load('glProgramUniform4ui64vNV');
  glad__glUniform1i64NV = load('glUniform1i64NV');
  glad__glUniform1i64vNV = load('glUniform1i64vNV');
  glad__glUniform1ui64NV = load('glUniform1ui64NV');
  glad__glUniform1ui64vNV = load('glUniform1ui64vNV');
  glad__glUniform2i64NV = load('glUniform2i64NV');
  glad__glUniform2i64vNV = load('glUniform2i64vNV');
  glad__glUniform2ui64NV = load('glUniform2ui64NV');
  glad__glUniform2ui64vNV = load('glUniform2ui64vNV');
  glad__glUniform3i64NV = load('glUniform3i64NV');
  glad__glUniform3i64vNV = load('glUniform3i64vNV');
  glad__glUniform3ui64NV = load('glUniform3ui64NV');
  glad__glUniform3ui64vNV = load('glUniform3ui64vNV');
  glad__glUniform4i64NV = load('glUniform4i64NV');
  glad__glUniform4i64vNV = load('glUniform4i64vNV');
  glad__glUniform4ui64NV = load('glUniform4ui64NV');
  glad__glUniform4ui64vNV = load('glUniform4ui64vNV');
  glad__glColor3hNV = load('glColor3hNV');
  glad__glColor3hvNV = load('glColor3hvNV');
  glad__glColor4hNV = load('glColor4hNV');
  glad__glColor4hvNV = load('glColor4hvNV');
  glad__glFogCoordhNV = load('glFogCoordhNV');
  glad__glFogCoordhvNV = load('glFogCoordhvNV');
  glad__glMultiTexCoord1hNV = load('glMultiTexCoord1hNV');
  glad__glMultiTexCoord1hvNV = load('glMultiTexCoord1hvNV');
  glad__glMultiTexCoord2hNV = load('glMultiTexCoord2hNV');
  glad__glMultiTexCoord2hvNV = load('glMultiTexCoord2hvNV');
  glad__glMultiTexCoord3hNV = load('glMultiTexCoord3hNV');
  glad__glMultiTexCoord3hvNV = load('glMultiTexCoord3hvNV');
  glad__glMultiTexCoord4hNV = load('glMultiTexCoord4hNV');
  glad__glMultiTexCoord4hvNV = load('glMultiTexCoord4hvNV');
  glad__glNormal3hNV = load('glNormal3hNV');
  glad__glNormal3hvNV = load('glNormal3hvNV');
  glad__glSecondaryColor3hNV = load('glSecondaryColor3hNV');
  glad__glSecondaryColor3hvNV = load('glSecondaryColor3hvNV');
  glad__glTexCoord1hNV = load('glTexCoord1hNV');
  glad__glTexCoord1hvNV = load('glTexCoord1hvNV');
  glad__glTexCoord2hNV = load('glTexCoord2hNV');
  glad__glTexCoord2hvNV = load('glTexCoord2hvNV');
  glad__glTexCoord3hNV = load('glTexCoord3hNV');
  glad__glTexCoord3hvNV = load('glTexCoord3hvNV');
  glad__glTexCoord4hNV = load('glTexCoord4hNV');
  glad__glTexCoord4hvNV = load('glTexCoord4hvNV');
  glad__glVertex2hNV = load('glVertex2hNV');
  glad__glVertex2hvNV = load('glVertex2hvNV');
  glad__glVertex3hNV = load('glVertex3hNV');
  glad__glVertex3hvNV = load('glVertex3hvNV');
  glad__glVertex4hNV = load('glVertex4hNV');
  glad__glVertex4hvNV = load('glVertex4hvNV');
  glad__glVertexAttrib1hNV = load('glVertexAttrib1hNV');
  glad__glVertexAttrib1hvNV = load('glVertexAttrib1hvNV');
  glad__glVertexAttrib2hNV = load('glVertexAttrib2hNV');
  glad__glVertexAttrib2hvNV = load('glVertexAttrib2hvNV');
  glad__glVertexAttrib3hNV = load('glVertexAttrib3hNV');
  glad__glVertexAttrib3hvNV = load('glVertexAttrib3hvNV');
  glad__glVertexAttrib4hNV = load('glVertexAttrib4hNV');
  glad__glVertexAttrib4hvNV = load('glVertexAttrib4hvNV');
  glad__glVertexAttribs1hvNV = load('glVertexAttribs1hvNV');
  glad__glVertexAttribs2hvNV = load('glVertexAttribs2hvNV');
  glad__glVertexAttribs3hvNV = load('glVertexAttribs3hvNV');
  glad__glVertexAttribs4hvNV = load('glVertexAttribs4hvNV');
  glad__glVertexWeighthNV = load('glVertexWeighthNV');
  glad__glVertexWeighthvNV = load('glVertexWeighthvNV');
  glad__glVertexAttribDivisorNV = load('glVertexAttribDivisorNV');
  glad__glGetInternalformatSampleivNV = load('glGetInternalformatSampleivNV');
  glad__glUniformMatrix2x3fvNV = load('glUniformMatrix2x3fvNV');
  glad__glUniformMatrix2x4fvNV = load('glUniformMatrix2x4fvNV');
  glad__glUniformMatrix3x2fvNV = load('glUniformMatrix3x2fvNV');
  glad__glUniformMatrix3x4fvNV = load('glUniformMatrix3x4fvNV');
  glad__glUniformMatrix4x2fvNV = load('glUniformMatrix4x2fvNV');
  glad__glUniformMatrix4x3fvNV = load('glUniformMatrix4x3fvNV');
  glad__glBeginOcclusionQueryNV = load('glBeginOcclusionQueryNV');
  glad__glDeleteOcclusionQueriesNV = load('glDeleteOcclusionQueriesNV');
  glad__glEndOcclusionQueryNV = load('glEndOcclusionQueryNV');
  glad__glGenOcclusionQueriesNV = load('glGenOcclusionQueriesNV');
  glad__glGetOcclusionQueryivNV = load('glGetOcclusionQueryivNV');
  glad__glGetOcclusionQueryuivNV = load('glGetOcclusionQueryuivNV');
  glad__glIsOcclusionQueryNV = load('glIsOcclusionQueryNV');
  glad__glProgramBufferParametersIivNV = load('glProgramBufferParametersIivNV');
  glad__glProgramBufferParametersIuivNV = load('glProgramBufferParametersIuivNV');
  glad__glProgramBufferParametersfvNV = load('glProgramBufferParametersfvNV');
  glad__glCopyPathNV = load('glCopyPathNV');
  glad__glCoverFillPathInstancedNV = load('glCoverFillPathInstancedNV');
  glad__glCoverFillPathNV = load('glCoverFillPathNV');
  glad__glCoverStrokePathInstancedNV = load('glCoverStrokePathInstancedNV');
  glad__glCoverStrokePathNV = load('glCoverStrokePathNV');
  glad__glDeletePathsNV = load('glDeletePathsNV');
  glad__glGenPathsNV = load('glGenPathsNV');
  glad__glGetPathColorGenfvNV = load('glGetPathColorGenfvNV');
  glad__glGetPathColorGenivNV = load('glGetPathColorGenivNV');
  glad__glGetPathCommandsNV = load('glGetPathCommandsNV');
  glad__glGetPathCoordsNV = load('glGetPathCoordsNV');
  glad__glGetPathDashArrayNV = load('glGetPathDashArrayNV');
  glad__glGetPathLengthNV = load('glGetPathLengthNV');
  glad__glGetPathMetricRangeNV = load('glGetPathMetricRangeNV');
  glad__glGetPathMetricsNV = load('glGetPathMetricsNV');
  glad__glGetPathParameterfvNV = load('glGetPathParameterfvNV');
  glad__glGetPathParameterivNV = load('glGetPathParameterivNV');
  glad__glGetPathSpacingNV = load('glGetPathSpacingNV');
  glad__glGetPathTexGenfvNV = load('glGetPathTexGenfvNV');
  glad__glGetPathTexGenivNV = load('glGetPathTexGenivNV');
  glad__glGetProgramResourcefvNV = load('glGetProgramResourcefvNV');
  glad__glInterpolatePathsNV = load('glInterpolatePathsNV');
  glad__glIsPathNV = load('glIsPathNV');
  glad__glIsPointInFillPathNV = load('glIsPointInFillPathNV');
  glad__glIsPointInStrokePathNV = load('glIsPointInStrokePathNV');
  glad__glMatrixLoad3x2fNV = load('glMatrixLoad3x2fNV');
  glad__glMatrixLoad3x3fNV = load('glMatrixLoad3x3fNV');
  glad__glMatrixLoadTranspose3x3fNV = load('glMatrixLoadTranspose3x3fNV');
  glad__glMatrixMult3x2fNV = load('glMatrixMult3x2fNV');
  glad__glMatrixMult3x3fNV = load('glMatrixMult3x3fNV');
  glad__glMatrixMultTranspose3x3fNV = load('glMatrixMultTranspose3x3fNV');
  glad__glPathColorGenNV = load('glPathColorGenNV');
  glad__glPathCommandsNV = load('glPathCommandsNV');
  glad__glPathCoordsNV = load('glPathCoordsNV');
  glad__glPathCoverDepthFuncNV = load('glPathCoverDepthFuncNV');
  glad__glPathDashArrayNV = load('glPathDashArrayNV');
  glad__glPathFogGenNV = load('glPathFogGenNV');
  glad__glPathGlyphIndexArrayNV = load('glPathGlyphIndexArrayNV');
  glad__glPathGlyphIndexRangeNV = load('glPathGlyphIndexRangeNV');
  glad__glPathGlyphRangeNV = load('glPathGlyphRangeNV');
  glad__glPathGlyphsNV = load('glPathGlyphsNV');
  glad__glPathMemoryGlyphIndexArrayNV = load('glPathMemoryGlyphIndexArrayNV');
  glad__glPathParameterfNV = load('glPathParameterfNV');
  glad__glPathParameterfvNV = load('glPathParameterfvNV');
  glad__glPathParameteriNV = load('glPathParameteriNV');
  glad__glPathParameterivNV = load('glPathParameterivNV');
  glad__glPathStencilDepthOffsetNV = load('glPathStencilDepthOffsetNV');
  glad__glPathStencilFuncNV = load('glPathStencilFuncNV');
  glad__glPathStringNV = load('glPathStringNV');
  glad__glPathSubCommandsNV = load('glPathSubCommandsNV');
  glad__glPathSubCoordsNV = load('glPathSubCoordsNV');
  glad__glPathTexGenNV = load('glPathTexGenNV');
  glad__glPointAlongPathNV = load('glPointAlongPathNV');
  glad__glProgramPathFragmentInputGenNV = load('glProgramPathFragmentInputGenNV');
  glad__glStencilFillPathInstancedNV = load('glStencilFillPathInstancedNV');
  glad__glStencilFillPathNV = load('glStencilFillPathNV');
  glad__glStencilStrokePathInstancedNV = load('glStencilStrokePathInstancedNV');
  glad__glStencilStrokePathNV = load('glStencilStrokePathNV');
  glad__glStencilThenCoverFillPathInstancedNV = load('glStencilThenCoverFillPathInstancedNV');
  glad__glStencilThenCoverFillPathNV = load('glStencilThenCoverFillPathNV');
  glad__glStencilThenCoverStrokePathInstancedNV = load('glStencilThenCoverStrokePathInstancedNV');
  glad__glStencilThenCoverStrokePathNV = load('glStencilThenCoverStrokePathNV');
  glad__glTransformPathNV = load('glTransformPathNV');
  glad__glWeightPathsNV = load('glWeightPathsNV');
  glad__glFlushPixelDataRangeNV = load('glFlushPixelDataRangeNV');
  glad__glPixelDataRangeNV = load('glPixelDataRangeNV');
  glad__glPointParameteriNV = load('glPointParameteriNV');
  glad__glPointParameterivNV = load('glPointParameterivNV');
  glad__glPolygonModeNV = load('glPolygonModeNV');
  glad__glGetVideoi64vNV = load('glGetVideoi64vNV');
  glad__glGetVideoivNV = load('glGetVideoivNV');
  glad__glGetVideoui64vNV = load('glGetVideoui64vNV');
  glad__glGetVideouivNV = load('glGetVideouivNV');
  glad__glPresentFrameDualFillNV = load('glPresentFrameDualFillNV');
  glad__glPresentFrameKeyedNV = load('glPresentFrameKeyedNV');
  glad__glPrimitiveRestartIndexNV = load('glPrimitiveRestartIndexNV');
  glad__glPrimitiveRestartNV = load('glPrimitiveRestartNV');
  glad__glCombinerInputNV = load('glCombinerInputNV');
  glad__glCombinerOutputNV = load('glCombinerOutputNV');
  glad__glCombinerParameterfNV = load('glCombinerParameterfNV');
  glad__glCombinerParameterfvNV = load('glCombinerParameterfvNV');
  glad__glCombinerParameteriNV = load('glCombinerParameteriNV');
  glad__glCombinerParameterivNV = load('glCombinerParameterivNV');
  glad__glFinalCombinerInputNV = load('glFinalCombinerInputNV');
  glad__glGetCombinerInputParameterfvNV = load('glGetCombinerInputParameterfvNV');
  glad__glGetCombinerInputParameterivNV = load('glGetCombinerInputParameterivNV');
  glad__glGetCombinerOutputParameterfvNV = load('glGetCombinerOutputParameterfvNV');
  glad__glGetCombinerOutputParameterivNV = load('glGetCombinerOutputParameterivNV');
  glad__glGetFinalCombinerInputParameterfvNV = load('glGetFinalCombinerInputParameterfvNV');
  glad__glGetFinalCombinerInputParameterivNV = load('glGetFinalCombinerInputParameterivNV');
  glad__glCombinerStageParameterfvNV = load('glCombinerStageParameterfvNV');
  glad__glGetCombinerStageParameterfvNV = load('glGetCombinerStageParameterfvNV');
  glad__glFramebufferSampleLocationsfvNV = load('glFramebufferSampleLocationsfvNV');
  glad__glNamedFramebufferSampleLocationsfvNV = load('glNamedFramebufferSampleLocationsfvNV');
  glad__glGetBufferParameterui64vNV = load('glGetBufferParameterui64vNV');
  glad__glGetIntegerui64vNV = load('glGetIntegerui64vNV');
  glad__glGetNamedBufferParameterui64vNV = load('glGetNamedBufferParameterui64vNV');
  glad__glIsBufferResidentNV = load('glIsBufferResidentNV');
  glad__glIsNamedBufferResidentNV = load('glIsNamedBufferResidentNV');
  glad__glMakeBufferNonResidentNV = load('glMakeBufferNonResidentNV');
  glad__glMakeBufferResidentNV = load('glMakeBufferResidentNV');
  glad__glMakeNamedBufferNonResidentNV = load('glMakeNamedBufferNonResidentNV');
  glad__glMakeNamedBufferResidentNV = load('glMakeNamedBufferResidentNV');
  glad__glProgramUniformui64NV = load('glProgramUniformui64NV');
  glad__glProgramUniformui64vNV = load('glProgramUniformui64vNV');
  glad__glUniformui64NV = load('glUniformui64NV');
  glad__glUniformui64vNV = load('glUniformui64vNV');
  glad__glCompressedTexImage3DNV = load('glCompressedTexImage3DNV');
  glad__glCompressedTexSubImage3DNV = load('glCompressedTexSubImage3DNV');
  glad__glCopyTexSubImage3DNV = load('glCopyTexSubImage3DNV');
  glad__glFramebufferTextureLayerNV = load('glFramebufferTextureLayerNV');
  glad__glTexImage3DNV = load('glTexImage3DNV');
  glad__glTexSubImage3DNV = load('glTexSubImage3DNV');
  glad__glTextureBarrierNV = load('glTextureBarrierNV');
  glad__glTexImage2DMultisampleCoverageNV = load('glTexImage2DMultisampleCoverageNV');
  glad__glTexImage3DMultisampleCoverageNV = load('glTexImage3DMultisampleCoverageNV');
  glad__glTextureImage2DMultisampleCoverageNV = load('glTextureImage2DMultisampleCoverageNV');
  glad__glTextureImage2DMultisampleNV = load('glTextureImage2DMultisampleNV');
  glad__glTextureImage3DMultisampleCoverageNV = load('glTextureImage3DMultisampleCoverageNV');
  glad__glTextureImage3DMultisampleNV = load('glTextureImage3DMultisampleNV');
  glad__glActiveVaryingNV = load('glActiveVaryingNV');
  glad__glBeginTransformFeedbackNV = load('glBeginTransformFeedbackNV');
  glad__glBindBufferBaseNV = load('glBindBufferBaseNV');
  glad__glBindBufferOffsetNV = load('glBindBufferOffsetNV');
  glad__glBindBufferRangeNV = load('glBindBufferRangeNV');
  glad__glEndTransformFeedbackNV = load('glEndTransformFeedbackNV');
  glad__glGetActiveVaryingNV = load('glGetActiveVaryingNV');
  glad__glGetTransformFeedbackVaryingNV = load('glGetTransformFeedbackVaryingNV');
  glad__glGetVaryingLocationNV = load('glGetVaryingLocationNV');
  glad__glTransformFeedbackAttribsNV = load('glTransformFeedbackAttribsNV');
  glad__glTransformFeedbackVaryingsNV = load('glTransformFeedbackVaryingsNV');
  glad__glBindTransformFeedbackNV = load('glBindTransformFeedbackNV');
  glad__glDeleteTransformFeedbacksNV = load('glDeleteTransformFeedbacksNV');
  glad__glDrawTransformFeedbackNV = load('glDrawTransformFeedbackNV');
  glad__glGenTransformFeedbacksNV = load('glGenTransformFeedbacksNV');
  glad__glIsTransformFeedbackNV = load('glIsTransformFeedbackNV');
  glad__glPauseTransformFeedbackNV = load('glPauseTransformFeedbackNV');
  glad__glResumeTransformFeedbackNV = load('glResumeTransformFeedbackNV');
  glad__glVDPAUFiniNV = load('glVDPAUFiniNV');
  glad__glVDPAUGetSurfaceivNV = load('glVDPAUGetSurfaceivNV');
  glad__glVDPAUInitNV = load('glVDPAUInitNV');
  glad__glVDPAUIsSurfaceNV = load('glVDPAUIsSurfaceNV');
  glad__glVDPAUMapSurfacesNV = load('glVDPAUMapSurfacesNV');
  glad__glVDPAURegisterOutputSurfaceNV = load('glVDPAURegisterOutputSurfaceNV');
  glad__glVDPAURegisterVideoSurfaceNV = load('glVDPAURegisterVideoSurfaceNV');
  glad__glVDPAUSurfaceAccessNV = load('glVDPAUSurfaceAccessNV');
  glad__glVDPAUUnmapSurfacesNV = load('glVDPAUUnmapSurfacesNV');
  glad__glVDPAUUnregisterSurfaceNV = load('glVDPAUUnregisterSurfaceNV');
  glad__glFlushVertexArrayRangeNV = load('glFlushVertexArrayRangeNV');
  glad__glVertexArrayRangeNV = load('glVertexArrayRangeNV');
  glad__glGetVertexAttribLi64vNV = load('glGetVertexAttribLi64vNV');
  glad__glGetVertexAttribLui64vNV = load('glGetVertexAttribLui64vNV');
  glad__glVertexAttribL1i64NV = load('glVertexAttribL1i64NV');
  glad__glVertexAttribL1i64vNV = load('glVertexAttribL1i64vNV');
  glad__glVertexAttribL1ui64NV = load('glVertexAttribL1ui64NV');
  glad__glVertexAttribL1ui64vNV = load('glVertexAttribL1ui64vNV');
  glad__glVertexAttribL2i64NV = load('glVertexAttribL2i64NV');
  glad__glVertexAttribL2i64vNV = load('glVertexAttribL2i64vNV');
  glad__glVertexAttribL2ui64NV = load('glVertexAttribL2ui64NV');
  glad__glVertexAttribL2ui64vNV = load('glVertexAttribL2ui64vNV');
  glad__glVertexAttribL3i64NV = load('glVertexAttribL3i64NV');
  glad__glVertexAttribL3i64vNV = load('glVertexAttribL3i64vNV');
  glad__glVertexAttribL3ui64NV = load('glVertexAttribL3ui64NV');
  glad__glVertexAttribL3ui64vNV = load('glVertexAttribL3ui64vNV');
  glad__glVertexAttribL4i64NV = load('glVertexAttribL4i64NV');
  glad__glVertexAttribL4i64vNV = load('glVertexAttribL4i64vNV');
  glad__glVertexAttribL4ui64NV = load('glVertexAttribL4ui64NV');
  glad__glVertexAttribL4ui64vNV = load('glVertexAttribL4ui64vNV');
  glad__glVertexAttribLFormatNV = load('glVertexAttribLFormatNV');
  glad__glBufferAddressRangeNV = load('glBufferAddressRangeNV');
  glad__glColorFormatNV = load('glColorFormatNV');
  glad__glEdgeFlagFormatNV = load('glEdgeFlagFormatNV');
  glad__glFogCoordFormatNV = load('glFogCoordFormatNV');
  glad__glGetIntegerui64i_vNV = load('glGetIntegerui64i_vNV');
  glad__glIndexFormatNV = load('glIndexFormatNV');
  glad__glNormalFormatNV = load('glNormalFormatNV');
  glad__glSecondaryColorFormatNV = load('glSecondaryColorFormatNV');
  glad__glTexCoordFormatNV = load('glTexCoordFormatNV');
  glad__glVertexAttribFormatNV = load('glVertexAttribFormatNV');
  glad__glVertexAttribIFormatNV = load('glVertexAttribIFormatNV');
  glad__glVertexFormatNV = load('glVertexFormatNV');
  glad__glAreProgramsResidentNV = load('glAreProgramsResidentNV');
  glad__glBindProgramNV = load('glBindProgramNV');
  glad__glDeleteProgramsNV = load('glDeleteProgramsNV');
  glad__glExecuteProgramNV = load('glExecuteProgramNV');
  glad__glGenProgramsNV = load('glGenProgramsNV');
  glad__glGetProgramParameterdvNV = load('glGetProgramParameterdvNV');
  glad__glGetProgramParameterfvNV = load('glGetProgramParameterfvNV');
  glad__glGetProgramStringNV = load('glGetProgramStringNV');
  glad__glGetProgramivNV = load('glGetProgramivNV');
  glad__glGetTrackMatrixivNV = load('glGetTrackMatrixivNV');
  glad__glGetVertexAttribPointervNV = load('glGetVertexAttribPointervNV');
  glad__glGetVertexAttribdvNV = load('glGetVertexAttribdvNV');
  glad__glGetVertexAttribfvNV = load('glGetVertexAttribfvNV');
  glad__glGetVertexAttribivNV = load('glGetVertexAttribivNV');
  glad__glIsProgramNV = load('glIsProgramNV');
  glad__glLoadProgramNV = load('glLoadProgramNV');
  glad__glProgramParameter4dNV = load('glProgramParameter4dNV');
  glad__glProgramParameter4dvNV = load('glProgramParameter4dvNV');
  glad__glProgramParameter4fNV = load('glProgramParameter4fNV');
  glad__glProgramParameter4fvNV = load('glProgramParameter4fvNV');
  glad__glProgramParameters4dvNV = load('glProgramParameters4dvNV');
  glad__glProgramParameters4fvNV = load('glProgramParameters4fvNV');
  glad__glRequestResidentProgramsNV = load('glRequestResidentProgramsNV');
  glad__glTrackMatrixNV = load('glTrackMatrixNV');
  glad__glVertexAttrib1dNV = load('glVertexAttrib1dNV');
  glad__glVertexAttrib1dvNV = load('glVertexAttrib1dvNV');
  glad__glVertexAttrib1fNV = load('glVertexAttrib1fNV');
  glad__glVertexAttrib1fvNV = load('glVertexAttrib1fvNV');
  glad__glVertexAttrib1sNV = load('glVertexAttrib1sNV');
  glad__glVertexAttrib1svNV = load('glVertexAttrib1svNV');
  glad__glVertexAttrib2dNV = load('glVertexAttrib2dNV');
  glad__glVertexAttrib2dvNV = load('glVertexAttrib2dvNV');
  glad__glVertexAttrib2fNV = load('glVertexAttrib2fNV');
  glad__glVertexAttrib2fvNV = load('glVertexAttrib2fvNV');
  glad__glVertexAttrib2sNV = load('glVertexAttrib2sNV');
  glad__glVertexAttrib2svNV = load('glVertexAttrib2svNV');
  glad__glVertexAttrib3dNV = load('glVertexAttrib3dNV');
  glad__glVertexAttrib3dvNV = load('glVertexAttrib3dvNV');
  glad__glVertexAttrib3fNV = load('glVertexAttrib3fNV');
  glad__glVertexAttrib3fvNV = load('glVertexAttrib3fvNV');
  glad__glVertexAttrib3sNV = load('glVertexAttrib3sNV');
  glad__glVertexAttrib3svNV = load('glVertexAttrib3svNV');
  glad__glVertexAttrib4dNV = load('glVertexAttrib4dNV');
  glad__glVertexAttrib4dvNV = load('glVertexAttrib4dvNV');
  glad__glVertexAttrib4fNV = load('glVertexAttrib4fNV');
  glad__glVertexAttrib4fvNV = load('glVertexAttrib4fvNV');
  glad__glVertexAttrib4sNV = load('glVertexAttrib4sNV');
  glad__glVertexAttrib4svNV = load('glVertexAttrib4svNV');
  glad__glVertexAttrib4ubNV = load('glVertexAttrib4ubNV');
  glad__glVertexAttrib4ubvNV = load('glVertexAttrib4ubvNV');
  glad__glVertexAttribPointerNV = load('glVertexAttribPointerNV');
  glad__glVertexAttribs1dvNV = load('glVertexAttribs1dvNV');
  glad__glVertexAttribs1fvNV = load('glVertexAttribs1fvNV');
  glad__glVertexAttribs1svNV = load('glVertexAttribs1svNV');
  glad__glVertexAttribs2dvNV = load('glVertexAttribs2dvNV');
  glad__glVertexAttribs2fvNV = load('glVertexAttribs2fvNV');
  glad__glVertexAttribs2svNV = load('glVertexAttribs2svNV');
  glad__glVertexAttribs3dvNV = load('glVertexAttribs3dvNV');
  glad__glVertexAttribs3fvNV = load('glVertexAttribs3fvNV');
  glad__glVertexAttribs3svNV = load('glVertexAttribs3svNV');
  glad__glVertexAttribs4dvNV = load('glVertexAttribs4dvNV');
  glad__glVertexAttribs4fvNV = load('glVertexAttribs4fvNV');
  glad__glVertexAttribs4svNV = load('glVertexAttribs4svNV');
  glad__glVertexAttribs4ubvNV = load('glVertexAttribs4ubvNV');
  glad__glBeginVideoCaptureNV = load('glBeginVideoCaptureNV');
  glad__glBindVideoCaptureStreamBufferNV = load('glBindVideoCaptureStreamBufferNV');
  glad__glBindVideoCaptureStreamTextureNV = load('glBindVideoCaptureStreamTextureNV');
  glad__glEndVideoCaptureNV = load('glEndVideoCaptureNV');
  glad__glGetVideoCaptureStreamdvNV = load('glGetVideoCaptureStreamdvNV');
  glad__glGetVideoCaptureStreamfvNV = load('glGetVideoCaptureStreamfvNV');
  glad__glGetVideoCaptureStreamivNV = load('glGetVideoCaptureStreamivNV');
  glad__glGetVideoCaptureivNV = load('glGetVideoCaptureivNV');
  glad__glVideoCaptureNV = load('glVideoCaptureNV');
  glad__glVideoCaptureStreamParameterdvNV = load('glVideoCaptureStreamParameterdvNV');
  glad__glVideoCaptureStreamParameterfvNV = load('glVideoCaptureStreamParameterfvNV');
  glad__glVideoCaptureStreamParameterivNV = load('glVideoCaptureStreamParameterivNV');
  glad__glDepthRangeArrayfvNV = load('glDepthRangeArrayfvNV');
  glad__glDepthRangeIndexedfNV = load('glDepthRangeIndexedfNV');
  glad__glDisableiNV = load('glDisableiNV');
  glad__glEnableiNV = load('glEnableiNV');
  glad__glGetFloati_vNV = load('glGetFloati_vNV');
  glad__glIsEnablediNV = load('glIsEnablediNV');
  glad__glScissorArrayvNV = load('glScissorArrayvNV');
  glad__glScissorIndexedNV = load('glScissorIndexedNV');
  glad__glScissorIndexedvNV = load('glScissorIndexedvNV');
  glad__glViewportArrayvNV = load('glViewportArrayvNV');
  glad__glViewportIndexedfNV = load('glViewportIndexedfNV');
  glad__glViewportIndexedfvNV = load('glViewportIndexedfvNV');
  glad__glViewportSwizzleNV = load('glViewportSwizzleNV');
  glad__glFramebufferTextureMultiviewOVR = load('glFramebufferTextureMultiviewOVR');
  glad__glFramebufferTextureMultisampleMultiviewOVR = load('glFramebufferTextureMultisampleMultiviewOVR');
  glad__glAlphaFuncQCOM = load('glAlphaFuncQCOM');
  glad__glDisableDriverControlQCOM = load('glDisableDriverControlQCOM');
  glad__glEnableDriverControlQCOM = load('glEnableDriverControlQCOM');
  glad__glGetDriverControlStringQCOM = load('glGetDriverControlStringQCOM');
  glad__glGetDriverControlsQCOM = load('glGetDriverControlsQCOM');
  glad__glExtGetBufferPointervQCOM = load('glExtGetBufferPointervQCOM');
  glad__glExtGetBuffersQCOM = load('glExtGetBuffersQCOM');
  glad__glExtGetFramebuffersQCOM = load('glExtGetFramebuffersQCOM');
  glad__glExtGetRenderbuffersQCOM = load('glExtGetRenderbuffersQCOM');
  glad__glExtGetTexLevelParameterivQCOM = load('glExtGetTexLevelParameterivQCOM');
  glad__glExtGetTexSubImageQCOM = load('glExtGetTexSubImageQCOM');
  glad__glExtGetTexturesQCOM = load('glExtGetTexturesQCOM');
  glad__glExtTexObjectStateOverrideiQCOM = load('glExtTexObjectStateOverrideiQCOM');
  glad__glExtGetProgramBinarySourceQCOM = load('glExtGetProgramBinarySourceQCOM');
  glad__glExtGetProgramsQCOM = load('glExtGetProgramsQCOM');
  glad__glExtGetShadersQCOM = load('glExtGetShadersQCOM');
  glad__glExtIsProgramBinaryQCOM = load('glExtIsProgramBinaryQCOM');
  glad__glFramebufferFoveationConfigQCOM = load('glFramebufferFoveationConfigQCOM');
  glad__glFramebufferFoveationParametersQCOM = load('glFramebufferFoveationParametersQCOM');
  glad__glFramebufferFetchBarrierQCOM = load('glFramebufferFetchBarrierQCOM');
  glad__glEndTilingQCOM = load('glEndTilingQCOM');
  glad__glStartTilingQCOM = load('glStartTilingQCOM');
  glad__glAlphaFuncx = load('glAlphaFuncx');
  glad__glClearColorx = load('glClearColorx');
  glad__glClearDepthx = load('glClearDepthx');
  glad__glColor4x = load('glColor4x');
  glad__glDepthRangex = load('glDepthRangex');
  glad__glFogx = load('glFogx');
  glad__glFogxv = load('glFogxv');
  glad__glFrustumf = load('glFrustumf');
  glad__glFrustumx = load('glFrustumx');
  glad__glLightModelx = load('glLightModelx');
  glad__glLightModelxv = load('glLightModelxv');
  glad__glLightx = load('glLightx');
  glad__glLightxv = load('glLightxv');
  glad__glLineWidthx = load('glLineWidthx');
  glad__glLoadMatrixx = load('glLoadMatrixx');
  glad__glMaterialx = load('glMaterialx');
  glad__glMaterialxv = load('glMaterialxv');
  glad__glMultMatrixx = load('glMultMatrixx');
  glad__glMultiTexCoord4x = load('glMultiTexCoord4x');
  glad__glNormal3x = load('glNormal3x');
  glad__glOrthof = load('glOrthof');
  glad__glOrthox = load('glOrthox');
  glad__glPointSizex = load('glPointSizex');
  glad__glPolygonOffsetx = load('glPolygonOffsetx');
  glad__glRotatex = load('glRotatex');
  glad__glSampleCoveragex = load('glSampleCoveragex');
  glad__glScalex = load('glScalex');
  glad__glTexEnvx = load('glTexEnvx');
  glad__glTexEnvxv = load('glTexEnvxv');
  glad__glTexParameterx = load('glTexParameterx');
  glad__glTranslatex = load('glTranslatex');
  glad__glClipPlanef = load('glClipPlanef');
  glad__glClipPlanex = load('glClipPlanex');
  glad__glGetClipPlanef = load('glGetClipPlanef');
  glad__glGetClipPlanex = load('glGetClipPlanex');
  glad__glGetFixedv = load('glGetFixedv');
  glad__glGetLightxv = load('glGetLightxv');
  glad__glGetMaterialxv = load('glGetMaterialxv');
  glad__glGetTexEnvxv = load('glGetTexEnvxv');
  glad__glGetTexParameterxv = load('glGetTexParameterxv');
  glad__glPointParameterx = load('glPointParameterx');
  glad__glPointParameterxv = load('glPointParameterxv');
  glad__glPointSizePointerOES = load('glPointSizePointerOES');
  glad__glTexParameterxv = load('glTexParameterxv');
  glad__glErrorStringREGAL = load('glErrorStringREGAL');
  glad__glGetExtensionREGAL = load('glGetExtensionREGAL');
  glad__glIsSupportedREGAL = load('glIsSupportedREGAL');
  glad__glLogMessageCallbackREGAL = load('glLogMessageCallbackREGAL');
  glad__glGetProcAddressREGAL = load('glGetProcAddressREGAL');
  glad__glDetailTexFuncSGIS = load('glDetailTexFuncSGIS');
  glad__glGetDetailTexFuncSGIS = load('glGetDetailTexFuncSGIS');
  glad__glFogFuncSGIS = load('glFogFuncSGIS');
  glad__glGetFogFuncSGIS = load('glGetFogFuncSGIS');
  glad__glSampleMaskSGIS = load('glSampleMaskSGIS');
  glad__glSamplePatternSGIS = load('glSamplePatternSGIS');
  glad__glInterleavedTextureCoordSetsSGIS = load('glInterleavedTextureCoordSetsSGIS');
  glad__glSelectTextureCoordSetSGIS = load('glSelectTextureCoordSetSGIS');
  glad__glSelectTextureSGIS = load('glSelectTextureSGIS');
  glad__glSelectTextureTransformSGIS = load('glSelectTextureTransformSGIS');
  glad__glMultisampleSubRectPosSGIS = load('glMultisampleSubRectPosSGIS');
  glad__glGetSharpenTexFuncSGIS = load('glGetSharpenTexFuncSGIS');
  glad__glSharpenTexFuncSGIS = load('glSharpenTexFuncSGIS');
  glad__glTexImage4DSGIS = load('glTexImage4DSGIS');
  glad__glTexSubImage4DSGIS = load('glTexSubImage4DSGIS');
  glad__glGetTexFilterFuncSGIS = load('glGetTexFilterFuncSGIS');
  glad__glTexFilterFuncSGIS = load('glTexFilterFuncSGIS');
  glad__glAsyncMarkerSGIX = load('glAsyncMarkerSGIX');
  glad__glDeleteAsyncMarkersSGIX = load('glDeleteAsyncMarkersSGIX');
  glad__glFinishAsyncSGIX = load('glFinishAsyncSGIX');
  glad__glGenAsyncMarkersSGIX = load('glGenAsyncMarkersSGIX');
  glad__glIsAsyncMarkerSGIX = load('glIsAsyncMarkerSGIX');
  glad__glPollAsyncSGIX = load('glPollAsyncSGIX');
  glad__glAddressSpace = load('glAddressSpace');
  glad__glDataPipe = load('glDataPipe');
  glad__glFlushRasterSGIX = load('glFlushRasterSGIX');
  glad__glFogLayersSGIX = load('glFogLayersSGIX');
  glad__glGetFogLayersSGIX = load('glGetFogLayersSGIX');
  glad__glTextureFogSGIX = load('glTextureFogSGIX');
  glad__glFragmentColorMaterialSGIX = load('glFragmentColorMaterialSGIX');
  glad__glFragmentLightModelfSGIX = load('glFragmentLightModelfSGIX');
  glad__glFragmentLightModelfvSGIX = load('glFragmentLightModelfvSGIX');
  glad__glFragmentLightModeliSGIX = load('glFragmentLightModeliSGIX');
  glad__glFragmentLightModelivSGIX = load('glFragmentLightModelivSGIX');
  glad__glFragmentLightfSGIX = load('glFragmentLightfSGIX');
  glad__glFragmentLightfvSGIX = load('glFragmentLightfvSGIX');
  glad__glFragmentLightiSGIX = load('glFragmentLightiSGIX');
  glad__glFragmentLightivSGIX = load('glFragmentLightivSGIX');
  glad__glFragmentMaterialfSGIX = load('glFragmentMaterialfSGIX');
  glad__glFragmentMaterialfvSGIX = load('glFragmentMaterialfvSGIX');
  glad__glFragmentMaterialiSGIX = load('glFragmentMaterialiSGIX');
  glad__glFragmentMaterialivSGIX = load('glFragmentMaterialivSGIX');
  glad__glGetFragmentLightfvSGIX = load('glGetFragmentLightfvSGIX');
  glad__glGetFragmentLightivSGIX = load('glGetFragmentLightivSGIX');
  glad__glGetFragmentMaterialfvSGIX = load('glGetFragmentMaterialfvSGIX');
  glad__glGetFragmentMaterialivSGIX = load('glGetFragmentMaterialivSGIX');
  glad__glFrameZoomSGIX = load('glFrameZoomSGIX');
  glad__glIglooInterfaceSGIX = load('glIglooInterfaceSGIX');
  glad__glAllocMPEGPredictorsSGIX = load('glAllocMPEGPredictorsSGIX');
  glad__glDeleteMPEGPredictorsSGIX = load('glDeleteMPEGPredictorsSGIX');
  glad__glGenMPEGPredictorsSGIX = load('glGenMPEGPredictorsSGIX');
  glad__glGetMPEGParameterfvSGIX = load('glGetMPEGParameterfvSGIX');
  glad__glGetMPEGParameterivSGIX = load('glGetMPEGParameterivSGIX');
  glad__glGetMPEGPredictorSGIX = load('glGetMPEGPredictorSGIX');
  glad__glGetMPEGQuantTableubv = load('glGetMPEGQuantTableubv');
  glad__glIsMPEGPredictorSGIX = load('glIsMPEGPredictorSGIX');
  glad__glMPEGPredictorSGIX = load('glMPEGPredictorSGIX');
  glad__glMPEGQuantTableubv = load('glMPEGQuantTableubv');
  glad__glSwapMPEGPredictorsSGIX = load('glSwapMPEGPredictorsSGIX');
  glad__glGetNonlinLightfvSGIX = load('glGetNonlinLightfvSGIX');
  glad__glGetNonlinMaterialfvSGIX = load('glGetNonlinMaterialfvSGIX');
  glad__glNonlinLightfvSGIX = load('glNonlinLightfvSGIX');
  glad__glNonlinMaterialfvSGIX = load('glNonlinMaterialfvSGIX');
  glad__glPixelTexGenSGIX = load('glPixelTexGenSGIX');
  glad__glDeformSGIX = load('glDeformSGIX');
  glad__glLoadIdentityDeformationMapSGIX = load('glLoadIdentityDeformationMapSGIX');
  glad__glMeshBreadthSGIX = load('glMeshBreadthSGIX');
  glad__glMeshStrideSGIX = load('glMeshStrideSGIX');
  glad__glReferencePlaneSGIX = load('glReferencePlaneSGIX');
  glad__glSpriteParameterfSGIX = load('glSpriteParameterfSGIX');
  glad__glSpriteParameterfvSGIX = load('glSpriteParameterfvSGIX');
  glad__glSpriteParameteriSGIX = load('glSpriteParameteriSGIX');
  glad__glSpriteParameterivSGIX = load('glSpriteParameterivSGIX');
  glad__glTagSampleBufferSGIX = load('glTagSampleBufferSGIX');
  glad__glGetVectorOperationSGIX = load('glGetVectorOperationSGIX');
  glad__glVectorOperationSGIX = load('glVectorOperationSGIX');
  glad__glAreVertexArraysResidentSGIX = load('glAreVertexArraysResidentSGIX');
  glad__glBindVertexArraySGIX = load('glBindVertexArraySGIX');
  glad__glDeleteVertexArraysSGIX = load('glDeleteVertexArraysSGIX');
  glad__glGenVertexArraysSGIX = load('glGenVertexArraysSGIX');
  glad__glIsVertexArraySGIX = load('glIsVertexArraySGIX');
  glad__glPrioritizeVertexArraysSGIX = load('glPrioritizeVertexArraysSGIX');
  glad__glColorTableParameterfvSGI = load('glColorTableParameterfvSGI');
  glad__glColorTableParameterivSGI = load('glColorTableParameterivSGI');
  glad__glColorTableSGI = load('glColorTableSGI');
  glad__glCopyColorTableSGI = load('glCopyColorTableSGI');
  glad__glGetColorTableParameterfvSGI = load('glGetColorTableParameterfvSGI');
  glad__glGetColorTableParameterivSGI = load('glGetColorTableParameterivSGI');
  glad__glGetColorTableSGI = load('glGetColorTableSGI');
  glad__glGetPixelTransformParameterfvSGI = load('glGetPixelTransformParameterfvSGI');
  glad__glGetPixelTransformParameterivSGI = load('glGetPixelTransformParameterivSGI');
  glad__glPixelTransformParameterfSGI = load('glPixelTransformParameterfSGI');
  glad__glPixelTransformParameterfvSGI = load('glPixelTransformParameterfvSGI');
  glad__glPixelTransformParameteriSGI = load('glPixelTransformParameteriSGI');
  glad__glPixelTransformParameterivSGI = load('glPixelTransformParameterivSGI');
  glad__glPixelTransformSGI = load('glPixelTransformSGI');
  glad__glFinishTextureSUNX = load('glFinishTextureSUNX');
  glad__glGlobalAlphaFactorbSUN = load('glGlobalAlphaFactorbSUN');
  glad__glGlobalAlphaFactordSUN = load('glGlobalAlphaFactordSUN');
  glad__glGlobalAlphaFactorfSUN = load('glGlobalAlphaFactorfSUN');
  glad__glGlobalAlphaFactoriSUN = load('glGlobalAlphaFactoriSUN');
  glad__glGlobalAlphaFactorsSUN = load('glGlobalAlphaFactorsSUN');
  glad__glGlobalAlphaFactorubSUN = load('glGlobalAlphaFactorubSUN');
  glad__glGlobalAlphaFactoruiSUN = load('glGlobalAlphaFactoruiSUN');
  glad__glGlobalAlphaFactorusSUN = load('glGlobalAlphaFactorusSUN');
  glad__glReadVideoPixelsSUN = load('glReadVideoPixelsSUN');
  glad__glReplacementCodePointerSUN = load('glReplacementCodePointerSUN');
  glad__glReplacementCodeubSUN = load('glReplacementCodeubSUN');
  glad__glReplacementCodeubvSUN = load('glReplacementCodeubvSUN');
  glad__glReplacementCodeuiSUN = load('glReplacementCodeuiSUN');
  glad__glReplacementCodeuivSUN = load('glReplacementCodeuivSUN');
  glad__glReplacementCodeusSUN = load('glReplacementCodeusSUN');
  glad__glReplacementCodeusvSUN = load('glReplacementCodeusvSUN');
  glad__glColor3fVertex3fSUN = load('glColor3fVertex3fSUN');
  glad__glColor3fVertex3fvSUN = load('glColor3fVertex3fvSUN');
  glad__glColor4fNormal3fVertex3fSUN = load('glColor4fNormal3fVertex3fSUN');
  glad__glColor4fNormal3fVertex3fvSUN = load('glColor4fNormal3fVertex3fvSUN');
  glad__glColor4ubVertex2fSUN = load('glColor4ubVertex2fSUN');
  glad__glColor4ubVertex2fvSUN = load('glColor4ubVertex2fvSUN');
  glad__glColor4ubVertex3fSUN = load('glColor4ubVertex3fSUN');
  glad__glColor4ubVertex3fvSUN = load('glColor4ubVertex3fvSUN');
  glad__glNormal3fVertex3fSUN = load('glNormal3fVertex3fSUN');
  glad__glNormal3fVertex3fvSUN = load('glNormal3fVertex3fvSUN');
  glad__glReplacementCodeuiColor3fVertex3fSUN = load('glReplacementCodeuiColor3fVertex3fSUN');
  glad__glReplacementCodeuiColor3fVertex3fvSUN = load('glReplacementCodeuiColor3fVertex3fvSUN');
  glad__glReplacementCodeuiColor4fNormal3fVertex3fSUN = load('glReplacementCodeuiColor4fNormal3fVertex3fSUN');
  glad__glReplacementCodeuiColor4fNormal3fVertex3fvSUN = load('glReplacementCodeuiColor4fNormal3fVertex3fvSUN');
  glad__glReplacementCodeuiColor4ubVertex3fSUN = load('glReplacementCodeuiColor4ubVertex3fSUN');
  glad__glReplacementCodeuiColor4ubVertex3fvSUN = load('glReplacementCodeuiColor4ubVertex3fvSUN');
  glad__glReplacementCodeuiNormal3fVertex3fSUN = load('glReplacementCodeuiNormal3fVertex3fSUN');
  glad__glReplacementCodeuiNormal3fVertex3fvSUN = load('glReplacementCodeuiNormal3fVertex3fvSUN');
  glad__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = load('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN');
  glad__glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = load('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN');
  glad__glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = load('glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN');
  glad__glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = load('glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN');
  glad__glReplacementCodeuiTexCoord2fVertex3fSUN = load('glReplacementCodeuiTexCoord2fVertex3fSUN');
  glad__glReplacementCodeuiTexCoord2fVertex3fvSUN = load('glReplacementCodeuiTexCoord2fVertex3fvSUN');
  glad__glReplacementCodeuiVertex3fSUN = load('glReplacementCodeuiVertex3fSUN');
  glad__glReplacementCodeuiVertex3fvSUN = load('glReplacementCodeuiVertex3fvSUN');
  glad__glTexCoord2fColor3fVertex3fSUN = load('glTexCoord2fColor3fVertex3fSUN');
  glad__glTexCoord2fColor3fVertex3fvSUN = load('glTexCoord2fColor3fVertex3fvSUN');
  glad__glTexCoord2fColor4fNormal3fVertex3fSUN = load('glTexCoord2fColor4fNormal3fVertex3fSUN');
  glad__glTexCoord2fColor4fNormal3fVertex3fvSUN = load('glTexCoord2fColor4fNormal3fVertex3fvSUN');
  glad__glTexCoord2fColor4ubVertex3fSUN = load('glTexCoord2fColor4ubVertex3fSUN');
  glad__glTexCoord2fColor4ubVertex3fvSUN = load('glTexCoord2fColor4ubVertex3fvSUN');
  glad__glTexCoord2fNormal3fVertex3fSUN = load('glTexCoord2fNormal3fVertex3fSUN');
  glad__glTexCoord2fNormal3fVertex3fvSUN = load('glTexCoord2fNormal3fVertex3fvSUN');
  glad__glTexCoord2fVertex3fSUN = load('glTexCoord2fVertex3fSUN');
  glad__glTexCoord2fVertex3fvSUN = load('glTexCoord2fVertex3fvSUN');
  glad__glTexCoord4fColor4fNormal3fVertex4fSUN = load('glTexCoord4fColor4fNormal3fVertex4fSUN');
  glad__glTexCoord4fColor4fNormal3fVertex4fvSUN = load('glTexCoord4fColor4fNormal3fVertex4fvSUN');
  glad__glTexCoord4fVertex4fSUN = load('glTexCoord4fVertex4fSUN');
  glad__glTexCoord4fVertex4fvSUN = load('glTexCoord4fVertex4fvSUN');
  glad__glAddSwapHintRectWIN = load('glAddSwapHintRectWIN');
}
